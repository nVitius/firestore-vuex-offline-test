// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

// eslint-disable-next-line no-global-assign
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  return newRequire;
})({"node_modules/vue/dist/vue.common.dev.js":[function(require,module,exports) {
var global = arguments[3];
/*!
 * Vue.js v2.6.10
 * (c) 2014-2019 Evan You
 * Released under the MIT License.
 */
'use strict';

/*  */

var emptyObject = Object.freeze({});

// These helpers produce better VM code in JS engines due to their
// explicitness and function inlining.
function isUndef (v) {
  return v === undefined || v === null
}

function isDef (v) {
  return v !== undefined && v !== null
}

function isTrue (v) {
  return v === true
}

function isFalse (v) {
  return v === false
}

/**
 * Check if value is primitive.
 */
function isPrimitive (value) {
  return (
    typeof value === 'string' ||
    typeof value === 'number' ||
    // $flow-disable-line
    typeof value === 'symbol' ||
    typeof value === 'boolean'
  )
}

/**
 * Quick object check - this is primarily used to tell
 * Objects from primitive values when we know the value
 * is a JSON-compliant type.
 */
function isObject (obj) {
  return obj !== null && typeof obj === 'object'
}

/**
 * Get the raw type string of a value, e.g., [object Object].
 */
var _toString = Object.prototype.toString;

function toRawType (value) {
  return _toString.call(value).slice(8, -1)
}

/**
 * Strict object type check. Only returns true
 * for plain JavaScript objects.
 */
function isPlainObject (obj) {
  return _toString.call(obj) === '[object Object]'
}

function isRegExp (v) {
  return _toString.call(v) === '[object RegExp]'
}

/**
 * Check if val is a valid array index.
 */
function isValidArrayIndex (val) {
  var n = parseFloat(String(val));
  return n >= 0 && Math.floor(n) === n && isFinite(val)
}

function isPromise (val) {
  return (
    isDef(val) &&
    typeof val.then === 'function' &&
    typeof val.catch === 'function'
  )
}

/**
 * Convert a value to a string that is actually rendered.
 */
function toString (val) {
  return val == null
    ? ''
    : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
      ? JSON.stringify(val, null, 2)
      : String(val)
}

/**
 * Convert an input value to a number for persistence.
 * If the conversion fails, return original string.
 */
function toNumber (val) {
  var n = parseFloat(val);
  return isNaN(n) ? val : n
}

/**
 * Make a map and return a function for checking if a key
 * is in that map.
 */
function makeMap (
  str,
  expectsLowerCase
) {
  var map = Object.create(null);
  var list = str.split(',');
  for (var i = 0; i < list.length; i++) {
    map[list[i]] = true;
  }
  return expectsLowerCase
    ? function (val) { return map[val.toLowerCase()]; }
    : function (val) { return map[val]; }
}

/**
 * Check if a tag is a built-in tag.
 */
var isBuiltInTag = makeMap('slot,component', true);

/**
 * Check if an attribute is a reserved attribute.
 */
var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

/**
 * Remove an item from an array.
 */
function remove (arr, item) {
  if (arr.length) {
    var index = arr.indexOf(item);
    if (index > -1) {
      return arr.splice(index, 1)
    }
  }
}

/**
 * Check whether an object has the property.
 */
var hasOwnProperty = Object.prototype.hasOwnProperty;
function hasOwn (obj, key) {
  return hasOwnProperty.call(obj, key)
}

/**
 * Create a cached version of a pure function.
 */
function cached (fn) {
  var cache = Object.create(null);
  return (function cachedFn (str) {
    var hit = cache[str];
    return hit || (cache[str] = fn(str))
  })
}

/**
 * Camelize a hyphen-delimited string.
 */
var camelizeRE = /-(\w)/g;
var camelize = cached(function (str) {
  return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
});

/**
 * Capitalize a string.
 */
var capitalize = cached(function (str) {
  return str.charAt(0).toUpperCase() + str.slice(1)
});

/**
 * Hyphenate a camelCase string.
 */
var hyphenateRE = /\B([A-Z])/g;
var hyphenate = cached(function (str) {
  return str.replace(hyphenateRE, '-$1').toLowerCase()
});

/**
 * Simple bind polyfill for environments that do not support it,
 * e.g., PhantomJS 1.x. Technically, we don't need this anymore
 * since native bind is now performant enough in most browsers.
 * But removing it would mean breaking code that was able to run in
 * PhantomJS 1.x, so this must be kept for backward compatibility.
 */

/* istanbul ignore next */
function polyfillBind (fn, ctx) {
  function boundFn (a) {
    var l = arguments.length;
    return l
      ? l > 1
        ? fn.apply(ctx, arguments)
        : fn.call(ctx, a)
      : fn.call(ctx)
  }

  boundFn._length = fn.length;
  return boundFn
}

function nativeBind (fn, ctx) {
  return fn.bind(ctx)
}

var bind = Function.prototype.bind
  ? nativeBind
  : polyfillBind;

/**
 * Convert an Array-like object to a real Array.
 */
function toArray (list, start) {
  start = start || 0;
  var i = list.length - start;
  var ret = new Array(i);
  while (i--) {
    ret[i] = list[i + start];
  }
  return ret
}

/**
 * Mix properties into target object.
 */
function extend (to, _from) {
  for (var key in _from) {
    to[key] = _from[key];
  }
  return to
}

/**
 * Merge an Array of Objects into a single Object.
 */
function toObject (arr) {
  var res = {};
  for (var i = 0; i < arr.length; i++) {
    if (arr[i]) {
      extend(res, arr[i]);
    }
  }
  return res
}

/* eslint-disable no-unused-vars */

/**
 * Perform no operation.
 * Stubbing args to make Flow happy without leaving useless transpiled code
 * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
 */
function noop (a, b, c) {}

/**
 * Always return false.
 */
var no = function (a, b, c) { return false; };

/* eslint-enable no-unused-vars */

/**
 * Return the same value.
 */
var identity = function (_) { return _; };

/**
 * Generate a string containing static keys from compiler modules.
 */
function genStaticKeys (modules) {
  return modules.reduce(function (keys, m) {
    return keys.concat(m.staticKeys || [])
  }, []).join(',')
}

/**
 * Check if two values are loosely equal - that is,
 * if they are plain objects, do they have the same shape?
 */
function looseEqual (a, b) {
  if (a === b) { return true }
  var isObjectA = isObject(a);
  var isObjectB = isObject(b);
  if (isObjectA && isObjectB) {
    try {
      var isArrayA = Array.isArray(a);
      var isArrayB = Array.isArray(b);
      if (isArrayA && isArrayB) {
        return a.length === b.length && a.every(function (e, i) {
          return looseEqual(e, b[i])
        })
      } else if (a instanceof Date && b instanceof Date) {
        return a.getTime() === b.getTime()
      } else if (!isArrayA && !isArrayB) {
        var keysA = Object.keys(a);
        var keysB = Object.keys(b);
        return keysA.length === keysB.length && keysA.every(function (key) {
          return looseEqual(a[key], b[key])
        })
      } else {
        /* istanbul ignore next */
        return false
      }
    } catch (e) {
      /* istanbul ignore next */
      return false
    }
  } else if (!isObjectA && !isObjectB) {
    return String(a) === String(b)
  } else {
    return false
  }
}

/**
 * Return the first index at which a loosely equal value can be
 * found in the array (if value is a plain object, the array must
 * contain an object of the same shape), or -1 if it is not present.
 */
function looseIndexOf (arr, val) {
  for (var i = 0; i < arr.length; i++) {
    if (looseEqual(arr[i], val)) { return i }
  }
  return -1
}

/**
 * Ensure a function is called only once.
 */
function once (fn) {
  var called = false;
  return function () {
    if (!called) {
      called = true;
      fn.apply(this, arguments);
    }
  }
}

var SSR_ATTR = 'data-server-rendered';

var ASSET_TYPES = [
  'component',
  'directive',
  'filter'
];

var LIFECYCLE_HOOKS = [
  'beforeCreate',
  'created',
  'beforeMount',
  'mounted',
  'beforeUpdate',
  'updated',
  'beforeDestroy',
  'destroyed',
  'activated',
  'deactivated',
  'errorCaptured',
  'serverPrefetch'
];

/*  */



var config = ({
  /**
   * Option merge strategies (used in core/util/options)
   */
  // $flow-disable-line
  optionMergeStrategies: Object.create(null),

  /**
   * Whether to suppress warnings.
   */
  silent: false,

  /**
   * Show production mode tip message on boot?
   */
  productionTip: "development" !== 'production',

  /**
   * Whether to enable devtools
   */
  devtools: "development" !== 'production',

  /**
   * Whether to record perf
   */
  performance: false,

  /**
   * Error handler for watcher errors
   */
  errorHandler: null,

  /**
   * Warn handler for watcher warns
   */
  warnHandler: null,

  /**
   * Ignore certain custom elements
   */
  ignoredElements: [],

  /**
   * Custom user key aliases for v-on
   */
  // $flow-disable-line
  keyCodes: Object.create(null),

  /**
   * Check if a tag is reserved so that it cannot be registered as a
   * component. This is platform-dependent and may be overwritten.
   */
  isReservedTag: no,

  /**
   * Check if an attribute is reserved so that it cannot be used as a component
   * prop. This is platform-dependent and may be overwritten.
   */
  isReservedAttr: no,

  /**
   * Check if a tag is an unknown element.
   * Platform-dependent.
   */
  isUnknownElement: no,

  /**
   * Get the namespace of an element
   */
  getTagNamespace: noop,

  /**
   * Parse the real tag name for the specific platform.
   */
  parsePlatformTagName: identity,

  /**
   * Check if an attribute must be bound using property, e.g. value
   * Platform-dependent.
   */
  mustUseProp: no,

  /**
   * Perform updates asynchronously. Intended to be used by Vue Test Utils
   * This will significantly reduce performance if set to false.
   */
  async: true,

  /**
   * Exposed for legacy reasons
   */
  _lifecycleHooks: LIFECYCLE_HOOKS
});

/*  */

/**
 * unicode letters used for parsing html tags, component names and property paths.
 * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
 * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
 */
var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

/**
 * Check if a string starts with $ or _
 */
function isReserved (str) {
  var c = (str + '').charCodeAt(0);
  return c === 0x24 || c === 0x5F
}

/**
 * Define a property.
 */
function def (obj, key, val, enumerable) {
  Object.defineProperty(obj, key, {
    value: val,
    enumerable: !!enumerable,
    writable: true,
    configurable: true
  });
}

/**
 * Parse simple path.
 */
var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
function parsePath (path) {
  if (bailRE.test(path)) {
    return
  }
  var segments = path.split('.');
  return function (obj) {
    for (var i = 0; i < segments.length; i++) {
      if (!obj) { return }
      obj = obj[segments[i]];
    }
    return obj
  }
}

/*  */

// can we use __proto__?
var hasProto = '__proto__' in {};

// Browser environment sniffing
var inBrowser = typeof window !== 'undefined';
var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
var UA = inBrowser && window.navigator.userAgent.toLowerCase();
var isIE = UA && /msie|trident/.test(UA);
var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
var isEdge = UA && UA.indexOf('edge/') > 0;
var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
var isPhantomJS = UA && /phantomjs/.test(UA);
var isFF = UA && UA.match(/firefox\/(\d+)/);

// Firefox has a "watch" function on Object.prototype...
var nativeWatch = ({}).watch;

var supportsPassive = false;
if (inBrowser) {
  try {
    var opts = {};
    Object.defineProperty(opts, 'passive', ({
      get: function get () {
        /* istanbul ignore next */
        supportsPassive = true;
      }
    })); // https://github.com/facebook/flow/issues/285
    window.addEventListener('test-passive', null, opts);
  } catch (e) {}
}

// this needs to be lazy-evaled because vue may be required before
// vue-server-renderer can set VUE_ENV
var _isServer;
var isServerRendering = function () {
  if (_isServer === undefined) {
    /* istanbul ignore if */
    if (!inBrowser && !inWeex && typeof global !== 'undefined') {
      // detect presence of vue-server-renderer and avoid
      // Webpack shimming the process
      _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
    } else {
      _isServer = false;
    }
  }
  return _isServer
};

// detect devtools
var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

/* istanbul ignore next */
function isNative (Ctor) {
  return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
}

var hasSymbol =
  typeof Symbol !== 'undefined' && isNative(Symbol) &&
  typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

var _Set;
/* istanbul ignore if */ // $flow-disable-line
if (typeof Set !== 'undefined' && isNative(Set)) {
  // use native Set when available.
  _Set = Set;
} else {
  // a non-standard Set polyfill that only works with primitive keys.
  _Set = /*@__PURE__*/(function () {
    function Set () {
      this.set = Object.create(null);
    }
    Set.prototype.has = function has (key) {
      return this.set[key] === true
    };
    Set.prototype.add = function add (key) {
      this.set[key] = true;
    };
    Set.prototype.clear = function clear () {
      this.set = Object.create(null);
    };

    return Set;
  }());
}

/*  */

var warn = noop;
var tip = noop;
var generateComponentTrace = (noop); // work around flow check
var formatComponentName = (noop);

{
  var hasConsole = typeof console !== 'undefined';
  var classifyRE = /(?:^|[-_])(\w)/g;
  var classify = function (str) { return str
    .replace(classifyRE, function (c) { return c.toUpperCase(); })
    .replace(/[-_]/g, ''); };

  warn = function (msg, vm) {
    var trace = vm ? generateComponentTrace(vm) : '';

    if (config.warnHandler) {
      config.warnHandler.call(null, msg, vm, trace);
    } else if (hasConsole && (!config.silent)) {
      console.error(("[Vue warn]: " + msg + trace));
    }
  };

  tip = function (msg, vm) {
    if (hasConsole && (!config.silent)) {
      console.warn("[Vue tip]: " + msg + (
        vm ? generateComponentTrace(vm) : ''
      ));
    }
  };

  formatComponentName = function (vm, includeFile) {
    if (vm.$root === vm) {
      return '<Root>'
    }
    var options = typeof vm === 'function' && vm.cid != null
      ? vm.options
      : vm._isVue
        ? vm.$options || vm.constructor.options
        : vm;
    var name = options.name || options._componentTag;
    var file = options.__file;
    if (!name && file) {
      var match = file.match(/([^/\\]+)\.vue$/);
      name = match && match[1];
    }

    return (
      (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
      (file && includeFile !== false ? (" at " + file) : '')
    )
  };

  var repeat = function (str, n) {
    var res = '';
    while (n) {
      if (n % 2 === 1) { res += str; }
      if (n > 1) { str += str; }
      n >>= 1;
    }
    return res
  };

  generateComponentTrace = function (vm) {
    if (vm._isVue && vm.$parent) {
      var tree = [];
      var currentRecursiveSequence = 0;
      while (vm) {
        if (tree.length > 0) {
          var last = tree[tree.length - 1];
          if (last.constructor === vm.constructor) {
            currentRecursiveSequence++;
            vm = vm.$parent;
            continue
          } else if (currentRecursiveSequence > 0) {
            tree[tree.length - 1] = [last, currentRecursiveSequence];
            currentRecursiveSequence = 0;
          }
        }
        tree.push(vm);
        vm = vm.$parent;
      }
      return '\n\nfound in\n\n' + tree
        .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat(' ', 5 + i * 2)) + (Array.isArray(vm)
            ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
            : formatComponentName(vm))); })
        .join('\n')
    } else {
      return ("\n\n(found in " + (formatComponentName(vm)) + ")")
    }
  };
}

/*  */

var uid = 0;

/**
 * A dep is an observable that can have multiple
 * directives subscribing to it.
 */
var Dep = function Dep () {
  this.id = uid++;
  this.subs = [];
};

Dep.prototype.addSub = function addSub (sub) {
  this.subs.push(sub);
};

Dep.prototype.removeSub = function removeSub (sub) {
  remove(this.subs, sub);
};

Dep.prototype.depend = function depend () {
  if (Dep.target) {
    Dep.target.addDep(this);
  }
};

Dep.prototype.notify = function notify () {
  // stabilize the subscriber list first
  var subs = this.subs.slice();
  if (!config.async) {
    // subs aren't sorted in scheduler if not running async
    // we need to sort them now to make sure they fire in correct
    // order
    subs.sort(function (a, b) { return a.id - b.id; });
  }
  for (var i = 0, l = subs.length; i < l; i++) {
    subs[i].update();
  }
};

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
Dep.target = null;
var targetStack = [];

function pushTarget (target) {
  targetStack.push(target);
  Dep.target = target;
}

function popTarget () {
  targetStack.pop();
  Dep.target = targetStack[targetStack.length - 1];
}

/*  */

var VNode = function VNode (
  tag,
  data,
  children,
  text,
  elm,
  context,
  componentOptions,
  asyncFactory
) {
  this.tag = tag;
  this.data = data;
  this.children = children;
  this.text = text;
  this.elm = elm;
  this.ns = undefined;
  this.context = context;
  this.fnContext = undefined;
  this.fnOptions = undefined;
  this.fnScopeId = undefined;
  this.key = data && data.key;
  this.componentOptions = componentOptions;
  this.componentInstance = undefined;
  this.parent = undefined;
  this.raw = false;
  this.isStatic = false;
  this.isRootInsert = true;
  this.isComment = false;
  this.isCloned = false;
  this.isOnce = false;
  this.asyncFactory = asyncFactory;
  this.asyncMeta = undefined;
  this.isAsyncPlaceholder = false;
};

var prototypeAccessors = { child: { configurable: true } };

// DEPRECATED: alias for componentInstance for backwards compat.
/* istanbul ignore next */
prototypeAccessors.child.get = function () {
  return this.componentInstance
};

Object.defineProperties( VNode.prototype, prototypeAccessors );

var createEmptyVNode = function (text) {
  if ( text === void 0 ) text = '';

  var node = new VNode();
  node.text = text;
  node.isComment = true;
  return node
};

function createTextVNode (val) {
  return new VNode(undefined, undefined, undefined, String(val))
}

// optimized shallow clone
// used for static nodes and slot nodes because they may be reused across
// multiple renders, cloning them avoids errors when DOM manipulations rely
// on their elm reference.
function cloneVNode (vnode) {
  var cloned = new VNode(
    vnode.tag,
    vnode.data,
    // #7975
    // clone children array to avoid mutating original in case of cloning
    // a child.
    vnode.children && vnode.children.slice(),
    vnode.text,
    vnode.elm,
    vnode.context,
    vnode.componentOptions,
    vnode.asyncFactory
  );
  cloned.ns = vnode.ns;
  cloned.isStatic = vnode.isStatic;
  cloned.key = vnode.key;
  cloned.isComment = vnode.isComment;
  cloned.fnContext = vnode.fnContext;
  cloned.fnOptions = vnode.fnOptions;
  cloned.fnScopeId = vnode.fnScopeId;
  cloned.asyncMeta = vnode.asyncMeta;
  cloned.isCloned = true;
  return cloned
}

/*
 * not type checking this file because flow doesn't play well with
 * dynamically accessing methods on Array prototype
 */

var arrayProto = Array.prototype;
var arrayMethods = Object.create(arrayProto);

var methodsToPatch = [
  'push',
  'pop',
  'shift',
  'unshift',
  'splice',
  'sort',
  'reverse'
];

/**
 * Intercept mutating methods and emit events
 */
methodsToPatch.forEach(function (method) {
  // cache original method
  var original = arrayProto[method];
  def(arrayMethods, method, function mutator () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    var result = original.apply(this, args);
    var ob = this.__ob__;
    var inserted;
    switch (method) {
      case 'push':
      case 'unshift':
        inserted = args;
        break
      case 'splice':
        inserted = args.slice(2);
        break
    }
    if (inserted) { ob.observeArray(inserted); }
    // notify change
    ob.dep.notify();
    return result
  });
});

/*  */

var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

/**
 * In some cases we may want to disable observation inside a component's
 * update computation.
 */
var shouldObserve = true;

function toggleObserving (value) {
  shouldObserve = value;
}

/**
 * Observer class that is attached to each observed
 * object. Once attached, the observer converts the target
 * object's property keys into getter/setters that
 * collect dependencies and dispatch updates.
 */
var Observer = function Observer (value) {
  this.value = value;
  this.dep = new Dep();
  this.vmCount = 0;
  def(value, '__ob__', this);
  if (Array.isArray(value)) {
    if (hasProto) {
      protoAugment(value, arrayMethods);
    } else {
      copyAugment(value, arrayMethods, arrayKeys);
    }
    this.observeArray(value);
  } else {
    this.walk(value);
  }
};

/**
 * Walk through all properties and convert them into
 * getter/setters. This method should only be called when
 * value type is Object.
 */
Observer.prototype.walk = function walk (obj) {
  var keys = Object.keys(obj);
  for (var i = 0; i < keys.length; i++) {
    defineReactive$$1(obj, keys[i]);
  }
};

/**
 * Observe a list of Array items.
 */
Observer.prototype.observeArray = function observeArray (items) {
  for (var i = 0, l = items.length; i < l; i++) {
    observe(items[i]);
  }
};

// helpers

/**
 * Augment a target Object or Array by intercepting
 * the prototype chain using __proto__
 */
function protoAugment (target, src) {
  /* eslint-disable no-proto */
  target.__proto__ = src;
  /* eslint-enable no-proto */
}

/**
 * Augment a target Object or Array by defining
 * hidden properties.
 */
/* istanbul ignore next */
function copyAugment (target, src, keys) {
  for (var i = 0, l = keys.length; i < l; i++) {
    var key = keys[i];
    def(target, key, src[key]);
  }
}

/**
 * Attempt to create an observer instance for a value,
 * returns the new observer if successfully observed,
 * or the existing observer if the value already has one.
 */
function observe (value, asRootData) {
  if (!isObject(value) || value instanceof VNode) {
    return
  }
  var ob;
  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
    ob = value.__ob__;
  } else if (
    shouldObserve &&
    !isServerRendering() &&
    (Array.isArray(value) || isPlainObject(value)) &&
    Object.isExtensible(value) &&
    !value._isVue
  ) {
    ob = new Observer(value);
  }
  if (asRootData && ob) {
    ob.vmCount++;
  }
  return ob
}

/**
 * Define a reactive property on an Object.
 */
function defineReactive$$1 (
  obj,
  key,
  val,
  customSetter,
  shallow
) {
  var dep = new Dep();

  var property = Object.getOwnPropertyDescriptor(obj, key);
  if (property && property.configurable === false) {
    return
  }

  // cater for pre-defined getter/setters
  var getter = property && property.get;
  var setter = property && property.set;
  if ((!getter || setter) && arguments.length === 2) {
    val = obj[key];
  }

  var childOb = !shallow && observe(val);
  Object.defineProperty(obj, key, {
    enumerable: true,
    configurable: true,
    get: function reactiveGetter () {
      var value = getter ? getter.call(obj) : val;
      if (Dep.target) {
        dep.depend();
        if (childOb) {
          childOb.dep.depend();
          if (Array.isArray(value)) {
            dependArray(value);
          }
        }
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      var value = getter ? getter.call(obj) : val;
      /* eslint-disable no-self-compare */
      if (newVal === value || (newVal !== newVal && value !== value)) {
        return
      }
      /* eslint-enable no-self-compare */
      if (customSetter) {
        customSetter();
      }
      // #7981: for accessor properties without setter
      if (getter && !setter) { return }
      if (setter) {
        setter.call(obj, newVal);
      } else {
        val = newVal;
      }
      childOb = !shallow && observe(newVal);
      dep.notify();
    }
  });
}

/**
 * Set a property on an object. Adds the new property and
 * triggers change notification if the property doesn't
 * already exist.
 */
function set (target, key, val) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.length = Math.max(target.length, key);
    target.splice(key, 1, val);
    return val
  }
  if (key in target && !(key in Object.prototype)) {
    target[key] = val;
    return val
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid adding reactive properties to a Vue instance or its root $data ' +
      'at runtime - declare it upfront in the data option.'
    );
    return val
  }
  if (!ob) {
    target[key] = val;
    return val
  }
  defineReactive$$1(ob.value, key, val);
  ob.dep.notify();
  return val
}

/**
 * Delete a property and trigger change if necessary.
 */
function del (target, key) {
  if (isUndef(target) || isPrimitive(target)
  ) {
    warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
  }
  if (Array.isArray(target) && isValidArrayIndex(key)) {
    target.splice(key, 1);
    return
  }
  var ob = (target).__ob__;
  if (target._isVue || (ob && ob.vmCount)) {
    warn(
      'Avoid deleting properties on a Vue instance or its root $data ' +
      '- just set it to null.'
    );
    return
  }
  if (!hasOwn(target, key)) {
    return
  }
  delete target[key];
  if (!ob) {
    return
  }
  ob.dep.notify();
}

/**
 * Collect dependencies on array elements when the array is touched, since
 * we cannot intercept array element access like property getters.
 */
function dependArray (value) {
  for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
    e = value[i];
    e && e.__ob__ && e.__ob__.dep.depend();
    if (Array.isArray(e)) {
      dependArray(e);
    }
  }
}

/*  */

/**
 * Option overwriting strategies are functions that handle
 * how to merge a parent option value and a child option
 * value into the final value.
 */
var strats = config.optionMergeStrategies;

/**
 * Options with restrictions
 */
{
  strats.el = strats.propsData = function (parent, child, vm, key) {
    if (!vm) {
      warn(
        "option \"" + key + "\" can only be used during instance " +
        'creation with the `new` keyword.'
      );
    }
    return defaultStrat(parent, child)
  };
}

/**
 * Helper that recursively merges two data objects together.
 */
function mergeData (to, from) {
  if (!from) { return to }
  var key, toVal, fromVal;

  var keys = hasSymbol
    ? Reflect.ownKeys(from)
    : Object.keys(from);

  for (var i = 0; i < keys.length; i++) {
    key = keys[i];
    // in case the object is already observed...
    if (key === '__ob__') { continue }
    toVal = to[key];
    fromVal = from[key];
    if (!hasOwn(to, key)) {
      set(to, key, fromVal);
    } else if (
      toVal !== fromVal &&
      isPlainObject(toVal) &&
      isPlainObject(fromVal)
    ) {
      mergeData(toVal, fromVal);
    }
  }
  return to
}

/**
 * Data
 */
function mergeDataOrFn (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    // in a Vue.extend merge, both should be functions
    if (!childVal) {
      return parentVal
    }
    if (!parentVal) {
      return childVal
    }
    // when parentVal & childVal are both present,
    // we need to return a function that returns the
    // merged result of both functions... no need to
    // check if parentVal is a function here because
    // it has to be a function to pass previous merges.
    return function mergedDataFn () {
      return mergeData(
        typeof childVal === 'function' ? childVal.call(this, this) : childVal,
        typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
      )
    }
  } else {
    return function mergedInstanceDataFn () {
      // instance merge
      var instanceData = typeof childVal === 'function'
        ? childVal.call(vm, vm)
        : childVal;
      var defaultData = typeof parentVal === 'function'
        ? parentVal.call(vm, vm)
        : parentVal;
      if (instanceData) {
        return mergeData(instanceData, defaultData)
      } else {
        return defaultData
      }
    }
  }
}

strats.data = function (
  parentVal,
  childVal,
  vm
) {
  if (!vm) {
    if (childVal && typeof childVal !== 'function') {
      warn(
        'The "data" option should be a function ' +
        'that returns a per-instance value in component ' +
        'definitions.',
        vm
      );

      return parentVal
    }
    return mergeDataOrFn(parentVal, childVal)
  }

  return mergeDataOrFn(parentVal, childVal, vm)
};

/**
 * Hooks and props are merged as arrays.
 */
function mergeHook (
  parentVal,
  childVal
) {
  var res = childVal
    ? parentVal
      ? parentVal.concat(childVal)
      : Array.isArray(childVal)
        ? childVal
        : [childVal]
    : parentVal;
  return res
    ? dedupeHooks(res)
    : res
}

function dedupeHooks (hooks) {
  var res = [];
  for (var i = 0; i < hooks.length; i++) {
    if (res.indexOf(hooks[i]) === -1) {
      res.push(hooks[i]);
    }
  }
  return res
}

LIFECYCLE_HOOKS.forEach(function (hook) {
  strats[hook] = mergeHook;
});

/**
 * Assets
 *
 * When a vm is present (instance creation), we need to do
 * a three-way merge between constructor options, instance
 * options and parent options.
 */
function mergeAssets (
  parentVal,
  childVal,
  vm,
  key
) {
  var res = Object.create(parentVal || null);
  if (childVal) {
    assertObjectType(key, childVal, vm);
    return extend(res, childVal)
  } else {
    return res
  }
}

ASSET_TYPES.forEach(function (type) {
  strats[type + 's'] = mergeAssets;
});

/**
 * Watchers.
 *
 * Watchers hashes should not overwrite one
 * another, so we merge them as arrays.
 */
strats.watch = function (
  parentVal,
  childVal,
  vm,
  key
) {
  // work around Firefox's Object.prototype.watch...
  if (parentVal === nativeWatch) { parentVal = undefined; }
  if (childVal === nativeWatch) { childVal = undefined; }
  /* istanbul ignore if */
  if (!childVal) { return Object.create(parentVal || null) }
  {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = {};
  extend(ret, parentVal);
  for (var key$1 in childVal) {
    var parent = ret[key$1];
    var child = childVal[key$1];
    if (parent && !Array.isArray(parent)) {
      parent = [parent];
    }
    ret[key$1] = parent
      ? parent.concat(child)
      : Array.isArray(child) ? child : [child];
  }
  return ret
};

/**
 * Other object hashes.
 */
strats.props =
strats.methods =
strats.inject =
strats.computed = function (
  parentVal,
  childVal,
  vm,
  key
) {
  if (childVal && "development" !== 'production') {
    assertObjectType(key, childVal, vm);
  }
  if (!parentVal) { return childVal }
  var ret = Object.create(null);
  extend(ret, parentVal);
  if (childVal) { extend(ret, childVal); }
  return ret
};
strats.provide = mergeDataOrFn;

/**
 * Default strategy.
 */
var defaultStrat = function (parentVal, childVal) {
  return childVal === undefined
    ? parentVal
    : childVal
};

/**
 * Validate component names
 */
function checkComponents (options) {
  for (var key in options.components) {
    validateComponentName(key);
  }
}

function validateComponentName (name) {
  if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
    warn(
      'Invalid component name: "' + name + '". Component names ' +
      'should conform to valid custom element name in html5 specification.'
    );
  }
  if (isBuiltInTag(name) || config.isReservedTag(name)) {
    warn(
      'Do not use built-in or reserved HTML elements as component ' +
      'id: ' + name
    );
  }
}

/**
 * Ensure all props option syntax are normalized into the
 * Object-based format.
 */
function normalizeProps (options, vm) {
  var props = options.props;
  if (!props) { return }
  var res = {};
  var i, val, name;
  if (Array.isArray(props)) {
    i = props.length;
    while (i--) {
      val = props[i];
      if (typeof val === 'string') {
        name = camelize(val);
        res[name] = { type: null };
      } else {
        warn('props must be strings when using array syntax.');
      }
    }
  } else if (isPlainObject(props)) {
    for (var key in props) {
      val = props[key];
      name = camelize(key);
      res[name] = isPlainObject(val)
        ? val
        : { type: val };
    }
  } else {
    warn(
      "Invalid value for option \"props\": expected an Array or an Object, " +
      "but got " + (toRawType(props)) + ".",
      vm
    );
  }
  options.props = res;
}

/**
 * Normalize all injections into Object-based format
 */
function normalizeInject (options, vm) {
  var inject = options.inject;
  if (!inject) { return }
  var normalized = options.inject = {};
  if (Array.isArray(inject)) {
    for (var i = 0; i < inject.length; i++) {
      normalized[inject[i]] = { from: inject[i] };
    }
  } else if (isPlainObject(inject)) {
    for (var key in inject) {
      var val = inject[key];
      normalized[key] = isPlainObject(val)
        ? extend({ from: key }, val)
        : { from: val };
    }
  } else {
    warn(
      "Invalid value for option \"inject\": expected an Array or an Object, " +
      "but got " + (toRawType(inject)) + ".",
      vm
    );
  }
}

/**
 * Normalize raw function directives into object format.
 */
function normalizeDirectives (options) {
  var dirs = options.directives;
  if (dirs) {
    for (var key in dirs) {
      var def$$1 = dirs[key];
      if (typeof def$$1 === 'function') {
        dirs[key] = { bind: def$$1, update: def$$1 };
      }
    }
  }
}

function assertObjectType (name, value, vm) {
  if (!isPlainObject(value)) {
    warn(
      "Invalid value for option \"" + name + "\": expected an Object, " +
      "but got " + (toRawType(value)) + ".",
      vm
    );
  }
}

/**
 * Merge two option objects into a new one.
 * Core utility used in both instantiation and inheritance.
 */
function mergeOptions (
  parent,
  child,
  vm
) {
  {
    checkComponents(child);
  }

  if (typeof child === 'function') {
    child = child.options;
  }

  normalizeProps(child, vm);
  normalizeInject(child, vm);
  normalizeDirectives(child);

  // Apply extends and mixins on the child options,
  // but only if it is a raw options object that isn't
  // the result of another mergeOptions call.
  // Only merged options has the _base property.
  if (!child._base) {
    if (child.extends) {
      parent = mergeOptions(parent, child.extends, vm);
    }
    if (child.mixins) {
      for (var i = 0, l = child.mixins.length; i < l; i++) {
        parent = mergeOptions(parent, child.mixins[i], vm);
      }
    }
  }

  var options = {};
  var key;
  for (key in parent) {
    mergeField(key);
  }
  for (key in child) {
    if (!hasOwn(parent, key)) {
      mergeField(key);
    }
  }
  function mergeField (key) {
    var strat = strats[key] || defaultStrat;
    options[key] = strat(parent[key], child[key], vm, key);
  }
  return options
}

/**
 * Resolve an asset.
 * This function is used because child instances need access
 * to assets defined in its ancestor chain.
 */
function resolveAsset (
  options,
  type,
  id,
  warnMissing
) {
  /* istanbul ignore if */
  if (typeof id !== 'string') {
    return
  }
  var assets = options[type];
  // check local registration variations first
  if (hasOwn(assets, id)) { return assets[id] }
  var camelizedId = camelize(id);
  if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
  var PascalCaseId = capitalize(camelizedId);
  if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
  // fallback to prototype chain
  var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
  if (warnMissing && !res) {
    warn(
      'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
      options
    );
  }
  return res
}

/*  */



function validateProp (
  key,
  propOptions,
  propsData,
  vm
) {
  var prop = propOptions[key];
  var absent = !hasOwn(propsData, key);
  var value = propsData[key];
  // boolean casting
  var booleanIndex = getTypeIndex(Boolean, prop.type);
  if (booleanIndex > -1) {
    if (absent && !hasOwn(prop, 'default')) {
      value = false;
    } else if (value === '' || value === hyphenate(key)) {
      // only cast empty string / same name to boolean if
      // boolean has higher priority
      var stringIndex = getTypeIndex(String, prop.type);
      if (stringIndex < 0 || booleanIndex < stringIndex) {
        value = true;
      }
    }
  }
  // check default value
  if (value === undefined) {
    value = getPropDefaultValue(vm, prop, key);
    // since the default value is a fresh copy,
    // make sure to observe it.
    var prevShouldObserve = shouldObserve;
    toggleObserving(true);
    observe(value);
    toggleObserving(prevShouldObserve);
  }
  {
    assertProp(prop, key, value, vm, absent);
  }
  return value
}

/**
 * Get the default value of a prop.
 */
function getPropDefaultValue (vm, prop, key) {
  // no default, return undefined
  if (!hasOwn(prop, 'default')) {
    return undefined
  }
  var def = prop.default;
  // warn against non-factory defaults for Object & Array
  if (isObject(def)) {
    warn(
      'Invalid default value for prop "' + key + '": ' +
      'Props with type Object/Array must use a factory function ' +
      'to return the default value.',
      vm
    );
  }
  // the raw prop value was also undefined from previous render,
  // return previous default value to avoid unnecessary watcher trigger
  if (vm && vm.$options.propsData &&
    vm.$options.propsData[key] === undefined &&
    vm._props[key] !== undefined
  ) {
    return vm._props[key]
  }
  // call factory function for non-Function types
  // a value is Function if its prototype is function even across different execution context
  return typeof def === 'function' && getType(prop.type) !== 'Function'
    ? def.call(vm)
    : def
}

/**
 * Assert whether a prop is valid.
 */
function assertProp (
  prop,
  name,
  value,
  vm,
  absent
) {
  if (prop.required && absent) {
    warn(
      'Missing required prop: "' + name + '"',
      vm
    );
    return
  }
  if (value == null && !prop.required) {
    return
  }
  var type = prop.type;
  var valid = !type || type === true;
  var expectedTypes = [];
  if (type) {
    if (!Array.isArray(type)) {
      type = [type];
    }
    for (var i = 0; i < type.length && !valid; i++) {
      var assertedType = assertType(value, type[i]);
      expectedTypes.push(assertedType.expectedType || '');
      valid = assertedType.valid;
    }
  }

  if (!valid) {
    warn(
      getInvalidTypeMessage(name, value, expectedTypes),
      vm
    );
    return
  }
  var validator = prop.validator;
  if (validator) {
    if (!validator(value)) {
      warn(
        'Invalid prop: custom validator check failed for prop "' + name + '".',
        vm
      );
    }
  }
}

var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

function assertType (value, type) {
  var valid;
  var expectedType = getType(type);
  if (simpleCheckRE.test(expectedType)) {
    var t = typeof value;
    valid = t === expectedType.toLowerCase();
    // for primitive wrapper objects
    if (!valid && t === 'object') {
      valid = value instanceof type;
    }
  } else if (expectedType === 'Object') {
    valid = isPlainObject(value);
  } else if (expectedType === 'Array') {
    valid = Array.isArray(value);
  } else {
    valid = value instanceof type;
  }
  return {
    valid: valid,
    expectedType: expectedType
  }
}

/**
 * Use function string name to check built-in types,
 * because a simple equality check will fail when running
 * across different vms / iframes.
 */
function getType (fn) {
  var match = fn && fn.toString().match(/^\s*function (\w+)/);
  return match ? match[1] : ''
}

function isSameType (a, b) {
  return getType(a) === getType(b)
}

function getTypeIndex (type, expectedTypes) {
  if (!Array.isArray(expectedTypes)) {
    return isSameType(expectedTypes, type) ? 0 : -1
  }
  for (var i = 0, len = expectedTypes.length; i < len; i++) {
    if (isSameType(expectedTypes[i], type)) {
      return i
    }
  }
  return -1
}

function getInvalidTypeMessage (name, value, expectedTypes) {
  var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
    " Expected " + (expectedTypes.map(capitalize).join(', '));
  var expectedType = expectedTypes[0];
  var receivedType = toRawType(value);
  var expectedValue = styleValue(value, expectedType);
  var receivedValue = styleValue(value, receivedType);
  // check if we need to specify expected value
  if (expectedTypes.length === 1 &&
      isExplicable(expectedType) &&
      !isBoolean(expectedType, receivedType)) {
    message += " with value " + expectedValue;
  }
  message += ", got " + receivedType + " ";
  // check if we need to specify received value
  if (isExplicable(receivedType)) {
    message += "with value " + receivedValue + ".";
  }
  return message
}

function styleValue (value, type) {
  if (type === 'String') {
    return ("\"" + value + "\"")
  } else if (type === 'Number') {
    return ("" + (Number(value)))
  } else {
    return ("" + value)
  }
}

function isExplicable (value) {
  var explicitTypes = ['string', 'number', 'boolean'];
  return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })
}

function isBoolean () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];

  return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
}

/*  */

function handleError (err, vm, info) {
  // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
  // See: https://github.com/vuejs/vuex/issues/1505
  pushTarget();
  try {
    if (vm) {
      var cur = vm;
      while ((cur = cur.$parent)) {
        var hooks = cur.$options.errorCaptured;
        if (hooks) {
          for (var i = 0; i < hooks.length; i++) {
            try {
              var capture = hooks[i].call(cur, err, vm, info) === false;
              if (capture) { return }
            } catch (e) {
              globalHandleError(e, cur, 'errorCaptured hook');
            }
          }
        }
      }
    }
    globalHandleError(err, vm, info);
  } finally {
    popTarget();
  }
}

function invokeWithErrorHandling (
  handler,
  context,
  args,
  vm,
  info
) {
  var res;
  try {
    res = args ? handler.apply(context, args) : handler.call(context);
    if (res && !res._isVue && isPromise(res) && !res._handled) {
      res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
      // issue #9511
      // avoid catch triggering multiple times when nested calls
      res._handled = true;
    }
  } catch (e) {
    handleError(e, vm, info);
  }
  return res
}

function globalHandleError (err, vm, info) {
  if (config.errorHandler) {
    try {
      return config.errorHandler.call(null, err, vm, info)
    } catch (e) {
      // if the user intentionally throws the original error in the handler,
      // do not log it twice
      if (e !== err) {
        logError(e, null, 'config.errorHandler');
      }
    }
  }
  logError(err, vm, info);
}

function logError (err, vm, info) {
  {
    warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
  }
  /* istanbul ignore else */
  if ((inBrowser || inWeex) && typeof console !== 'undefined') {
    console.error(err);
  } else {
    throw err
  }
}

/*  */

var isUsingMicroTask = false;

var callbacks = [];
var pending = false;

function flushCallbacks () {
  pending = false;
  var copies = callbacks.slice(0);
  callbacks.length = 0;
  for (var i = 0; i < copies.length; i++) {
    copies[i]();
  }
}

// Here we have async deferring wrappers using microtasks.
// In 2.5 we used (macro) tasks (in combination with microtasks).
// However, it has subtle problems when state is changed right before repaint
// (e.g. #6813, out-in transitions).
// Also, using (macro) tasks in event handler would cause some weird behaviors
// that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
// So we now use microtasks everywhere, again.
// A major drawback of this tradeoff is that there are some scenarios
// where microtasks have too high a priority and fire in between supposedly
// sequential events (e.g. #4521, #6690, which have workarounds)
// or even between bubbling of the same event (#6566).
var timerFunc;

// The nextTick behavior leverages the microtask queue, which can be accessed
// via either native Promise.then or MutationObserver.
// MutationObserver has wider support, however it is seriously bugged in
// UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
// completely stops working after triggering a few times... so, if native
// Promise is available, we will use it:
/* istanbul ignore next, $flow-disable-line */
if (typeof Promise !== 'undefined' && isNative(Promise)) {
  var p = Promise.resolve();
  timerFunc = function () {
    p.then(flushCallbacks);
    // In problematic UIWebViews, Promise.then doesn't completely break, but
    // it can get stuck in a weird state where callbacks are pushed into the
    // microtask queue but the queue isn't being flushed, until the browser
    // needs to do some other work, e.g. handle a timer. Therefore we can
    // "force" the microtask queue to be flushed by adding an empty timer.
    if (isIOS) { setTimeout(noop); }
  };
  isUsingMicroTask = true;
} else if (!isIE && typeof MutationObserver !== 'undefined' && (
  isNative(MutationObserver) ||
  // PhantomJS and iOS 7.x
  MutationObserver.toString() === '[object MutationObserverConstructor]'
)) {
  // Use MutationObserver where native Promise is not available,
  // e.g. PhantomJS, iOS7, Android 4.4
  // (#6466 MutationObserver is unreliable in IE11)
  var counter = 1;
  var observer = new MutationObserver(flushCallbacks);
  var textNode = document.createTextNode(String(counter));
  observer.observe(textNode, {
    characterData: true
  });
  timerFunc = function () {
    counter = (counter + 1) % 2;
    textNode.data = String(counter);
  };
  isUsingMicroTask = true;
} else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
  // Fallback to setImmediate.
  // Techinically it leverages the (macro) task queue,
  // but it is still a better choice than setTimeout.
  timerFunc = function () {
    setImmediate(flushCallbacks);
  };
} else {
  // Fallback to setTimeout.
  timerFunc = function () {
    setTimeout(flushCallbacks, 0);
  };
}

function nextTick (cb, ctx) {
  var _resolve;
  callbacks.push(function () {
    if (cb) {
      try {
        cb.call(ctx);
      } catch (e) {
        handleError(e, ctx, 'nextTick');
      }
    } else if (_resolve) {
      _resolve(ctx);
    }
  });
  if (!pending) {
    pending = true;
    timerFunc();
  }
  // $flow-disable-line
  if (!cb && typeof Promise !== 'undefined') {
    return new Promise(function (resolve) {
      _resolve = resolve;
    })
  }
}

/*  */

var mark;
var measure;

{
  var perf = inBrowser && window.performance;
  /* istanbul ignore if */
  if (
    perf &&
    perf.mark &&
    perf.measure &&
    perf.clearMarks &&
    perf.clearMeasures
  ) {
    mark = function (tag) { return perf.mark(tag); };
    measure = function (name, startTag, endTag) {
      perf.measure(name, startTag, endTag);
      perf.clearMarks(startTag);
      perf.clearMarks(endTag);
      // perf.clearMeasures(name)
    };
  }
}

/* not type checking this file because flow doesn't play well with Proxy */

var initProxy;

{
  var allowedGlobals = makeMap(
    'Infinity,undefined,NaN,isFinite,isNaN,' +
    'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
    'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
    'require' // for Webpack/Browserify
  );

  var warnNonPresent = function (target, key) {
    warn(
      "Property or method \"" + key + "\" is not defined on the instance but " +
      'referenced during render. Make sure that this property is reactive, ' +
      'either in the data option, or for class-based components, by ' +
      'initializing the property. ' +
      'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
      target
    );
  };

  var warnReservedPrefix = function (target, key) {
    warn(
      "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
      'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
      'prevent conflicts with Vue internals' +
      'See: https://vuejs.org/v2/api/#data',
      target
    );
  };

  var hasProxy =
    typeof Proxy !== 'undefined' && isNative(Proxy);

  if (hasProxy) {
    var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
    config.keyCodes = new Proxy(config.keyCodes, {
      set: function set (target, key, value) {
        if (isBuiltInModifier(key)) {
          warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
          return false
        } else {
          target[key] = value;
          return true
        }
      }
    });
  }

  var hasHandler = {
    has: function has (target, key) {
      var has = key in target;
      var isAllowed = allowedGlobals(key) ||
        (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
      if (!has && !isAllowed) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return has || !isAllowed
    }
  };

  var getHandler = {
    get: function get (target, key) {
      if (typeof key === 'string' && !(key in target)) {
        if (key in target.$data) { warnReservedPrefix(target, key); }
        else { warnNonPresent(target, key); }
      }
      return target[key]
    }
  };

  initProxy = function initProxy (vm) {
    if (hasProxy) {
      // determine which proxy handler to use
      var options = vm.$options;
      var handlers = options.render && options.render._withStripped
        ? getHandler
        : hasHandler;
      vm._renderProxy = new Proxy(vm, handlers);
    } else {
      vm._renderProxy = vm;
    }
  };
}

/*  */

var seenObjects = new _Set();

/**
 * Recursively traverse an object to evoke all converted
 * getters, so that every nested property inside the object
 * is collected as a "deep" dependency.
 */
function traverse (val) {
  _traverse(val, seenObjects);
  seenObjects.clear();
}

function _traverse (val, seen) {
  var i, keys;
  var isA = Array.isArray(val);
  if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
    return
  }
  if (val.__ob__) {
    var depId = val.__ob__.dep.id;
    if (seen.has(depId)) {
      return
    }
    seen.add(depId);
  }
  if (isA) {
    i = val.length;
    while (i--) { _traverse(val[i], seen); }
  } else {
    keys = Object.keys(val);
    i = keys.length;
    while (i--) { _traverse(val[keys[i]], seen); }
  }
}

/*  */

var normalizeEvent = cached(function (name) {
  var passive = name.charAt(0) === '&';
  name = passive ? name.slice(1) : name;
  var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
  name = once$$1 ? name.slice(1) : name;
  var capture = name.charAt(0) === '!';
  name = capture ? name.slice(1) : name;
  return {
    name: name,
    once: once$$1,
    capture: capture,
    passive: passive
  }
});

function createFnInvoker (fns, vm) {
  function invoker () {
    var arguments$1 = arguments;

    var fns = invoker.fns;
    if (Array.isArray(fns)) {
      var cloned = fns.slice();
      for (var i = 0; i < cloned.length; i++) {
        invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
      }
    } else {
      // return handler return value for single handlers
      return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
    }
  }
  invoker.fns = fns;
  return invoker
}

function updateListeners (
  on,
  oldOn,
  add,
  remove$$1,
  createOnceHandler,
  vm
) {
  var name, def$$1, cur, old, event;
  for (name in on) {
    def$$1 = cur = on[name];
    old = oldOn[name];
    event = normalizeEvent(name);
    if (isUndef(cur)) {
      warn(
        "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
        vm
      );
    } else if (isUndef(old)) {
      if (isUndef(cur.fns)) {
        cur = on[name] = createFnInvoker(cur, vm);
      }
      if (isTrue(event.once)) {
        cur = on[name] = createOnceHandler(event.name, cur, event.capture);
      }
      add(event.name, cur, event.capture, event.passive, event.params);
    } else if (cur !== old) {
      old.fns = cur;
      on[name] = old;
    }
  }
  for (name in oldOn) {
    if (isUndef(on[name])) {
      event = normalizeEvent(name);
      remove$$1(event.name, oldOn[name], event.capture);
    }
  }
}

/*  */

function mergeVNodeHook (def, hookKey, hook) {
  if (def instanceof VNode) {
    def = def.data.hook || (def.data.hook = {});
  }
  var invoker;
  var oldHook = def[hookKey];

  function wrappedHook () {
    hook.apply(this, arguments);
    // important: remove merged hook to ensure it's called only once
    // and prevent memory leak
    remove(invoker.fns, wrappedHook);
  }

  if (isUndef(oldHook)) {
    // no existing hook
    invoker = createFnInvoker([wrappedHook]);
  } else {
    /* istanbul ignore if */
    if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
      // already a merged invoker
      invoker = oldHook;
      invoker.fns.push(wrappedHook);
    } else {
      // existing plain hook
      invoker = createFnInvoker([oldHook, wrappedHook]);
    }
  }

  invoker.merged = true;
  def[hookKey] = invoker;
}

/*  */

function extractPropsFromVNodeData (
  data,
  Ctor,
  tag
) {
  // we are only extracting raw values here.
  // validation and default values are handled in the child
  // component itself.
  var propOptions = Ctor.options.props;
  if (isUndef(propOptions)) {
    return
  }
  var res = {};
  var attrs = data.attrs;
  var props = data.props;
  if (isDef(attrs) || isDef(props)) {
    for (var key in propOptions) {
      var altKey = hyphenate(key);
      {
        var keyInLowerCase = key.toLowerCase();
        if (
          key !== keyInLowerCase &&
          attrs && hasOwn(attrs, keyInLowerCase)
        ) {
          tip(
            "Prop \"" + keyInLowerCase + "\" is passed to component " +
            (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
            " \"" + key + "\". " +
            "Note that HTML attributes are case-insensitive and camelCased " +
            "props need to use their kebab-case equivalents when using in-DOM " +
            "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
          );
        }
      }
      checkProp(res, props, key, altKey, true) ||
      checkProp(res, attrs, key, altKey, false);
    }
  }
  return res
}

function checkProp (
  res,
  hash,
  key,
  altKey,
  preserve
) {
  if (isDef(hash)) {
    if (hasOwn(hash, key)) {
      res[key] = hash[key];
      if (!preserve) {
        delete hash[key];
      }
      return true
    } else if (hasOwn(hash, altKey)) {
      res[key] = hash[altKey];
      if (!preserve) {
        delete hash[altKey];
      }
      return true
    }
  }
  return false
}

/*  */

// The template compiler attempts to minimize the need for normalization by
// statically analyzing the template at compile time.
//
// For plain HTML markup, normalization can be completely skipped because the
// generated render function is guaranteed to return Array<VNode>. There are
// two cases where extra normalization is needed:

// 1. When the children contains components - because a functional component
// may return an Array instead of a single root. In this case, just a simple
// normalization is needed - if any child is an Array, we flatten the whole
// thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
// because functional components already normalize their own children.
function simpleNormalizeChildren (children) {
  for (var i = 0; i < children.length; i++) {
    if (Array.isArray(children[i])) {
      return Array.prototype.concat.apply([], children)
    }
  }
  return children
}

// 2. When the children contains constructs that always generated nested Arrays,
// e.g. <template>, <slot>, v-for, or when the children is provided by user
// with hand-written render functions / JSX. In such cases a full normalization
// is needed to cater to all possible types of children values.
function normalizeChildren (children) {
  return isPrimitive(children)
    ? [createTextVNode(children)]
    : Array.isArray(children)
      ? normalizeArrayChildren(children)
      : undefined
}

function isTextNode (node) {
  return isDef(node) && isDef(node.text) && isFalse(node.isComment)
}

function normalizeArrayChildren (children, nestedIndex) {
  var res = [];
  var i, c, lastIndex, last;
  for (i = 0; i < children.length; i++) {
    c = children[i];
    if (isUndef(c) || typeof c === 'boolean') { continue }
    lastIndex = res.length - 1;
    last = res[lastIndex];
    //  nested
    if (Array.isArray(c)) {
      if (c.length > 0) {
        c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
        // merge adjacent text nodes
        if (isTextNode(c[0]) && isTextNode(last)) {
          res[lastIndex] = createTextVNode(last.text + (c[0]).text);
          c.shift();
        }
        res.push.apply(res, c);
      }
    } else if (isPrimitive(c)) {
      if (isTextNode(last)) {
        // merge adjacent text nodes
        // this is necessary for SSR hydration because text nodes are
        // essentially merged when rendered to HTML strings
        res[lastIndex] = createTextVNode(last.text + c);
      } else if (c !== '') {
        // convert primitive to vnode
        res.push(createTextVNode(c));
      }
    } else {
      if (isTextNode(c) && isTextNode(last)) {
        // merge adjacent text nodes
        res[lastIndex] = createTextVNode(last.text + c.text);
      } else {
        // default key for nested array children (likely generated by v-for)
        if (isTrue(children._isVList) &&
          isDef(c.tag) &&
          isUndef(c.key) &&
          isDef(nestedIndex)) {
          c.key = "__vlist" + nestedIndex + "_" + i + "__";
        }
        res.push(c);
      }
    }
  }
  return res
}

/*  */

function initProvide (vm) {
  var provide = vm.$options.provide;
  if (provide) {
    vm._provided = typeof provide === 'function'
      ? provide.call(vm)
      : provide;
  }
}

function initInjections (vm) {
  var result = resolveInject(vm.$options.inject, vm);
  if (result) {
    toggleObserving(false);
    Object.keys(result).forEach(function (key) {
      /* istanbul ignore else */
      {
        defineReactive$$1(vm, key, result[key], function () {
          warn(
            "Avoid mutating an injected value directly since the changes will be " +
            "overwritten whenever the provided component re-renders. " +
            "injection being mutated: \"" + key + "\"",
            vm
          );
        });
      }
    });
    toggleObserving(true);
  }
}

function resolveInject (inject, vm) {
  if (inject) {
    // inject is :any because flow is not smart enough to figure out cached
    var result = Object.create(null);
    var keys = hasSymbol
      ? Reflect.ownKeys(inject)
      : Object.keys(inject);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      // #6574 in case the inject object is observed...
      if (key === '__ob__') { continue }
      var provideKey = inject[key].from;
      var source = vm;
      while (source) {
        if (source._provided && hasOwn(source._provided, provideKey)) {
          result[key] = source._provided[provideKey];
          break
        }
        source = source.$parent;
      }
      if (!source) {
        if ('default' in inject[key]) {
          var provideDefault = inject[key].default;
          result[key] = typeof provideDefault === 'function'
            ? provideDefault.call(vm)
            : provideDefault;
        } else {
          warn(("Injection \"" + key + "\" not found"), vm);
        }
      }
    }
    return result
  }
}

/*  */



/**
 * Runtime helper for resolving raw children VNodes into a slot object.
 */
function resolveSlots (
  children,
  context
) {
  if (!children || !children.length) {
    return {}
  }
  var slots = {};
  for (var i = 0, l = children.length; i < l; i++) {
    var child = children[i];
    var data = child.data;
    // remove slot attribute if the node is resolved as a Vue slot node
    if (data && data.attrs && data.attrs.slot) {
      delete data.attrs.slot;
    }
    // named slots should only be respected if the vnode was rendered in the
    // same context.
    if ((child.context === context || child.fnContext === context) &&
      data && data.slot != null
    ) {
      var name = data.slot;
      var slot = (slots[name] || (slots[name] = []));
      if (child.tag === 'template') {
        slot.push.apply(slot, child.children || []);
      } else {
        slot.push(child);
      }
    } else {
      (slots.default || (slots.default = [])).push(child);
    }
  }
  // ignore slots that contains only whitespace
  for (var name$1 in slots) {
    if (slots[name$1].every(isWhitespace)) {
      delete slots[name$1];
    }
  }
  return slots
}

function isWhitespace (node) {
  return (node.isComment && !node.asyncFactory) || node.text === ' '
}

/*  */

function normalizeScopedSlots (
  slots,
  normalSlots,
  prevSlots
) {
  var res;
  var hasNormalSlots = Object.keys(normalSlots).length > 0;
  var isStable = slots ? !!slots.$stable : !hasNormalSlots;
  var key = slots && slots.$key;
  if (!slots) {
    res = {};
  } else if (slots._normalized) {
    // fast path 1: child component re-render only, parent did not change
    return slots._normalized
  } else if (
    isStable &&
    prevSlots &&
    prevSlots !== emptyObject &&
    key === prevSlots.$key &&
    !hasNormalSlots &&
    !prevSlots.$hasNormal
  ) {
    // fast path 2: stable scoped slots w/ no normal slots to proxy,
    // only need to normalize once
    return prevSlots
  } else {
    res = {};
    for (var key$1 in slots) {
      if (slots[key$1] && key$1[0] !== '$') {
        res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
      }
    }
  }
  // expose normal slots on scopedSlots
  for (var key$2 in normalSlots) {
    if (!(key$2 in res)) {
      res[key$2] = proxyNormalSlot(normalSlots, key$2);
    }
  }
  // avoriaz seems to mock a non-extensible $scopedSlots object
  // and when that is passed down this would cause an error
  if (slots && Object.isExtensible(slots)) {
    (slots)._normalized = res;
  }
  def(res, '$stable', isStable);
  def(res, '$key', key);
  def(res, '$hasNormal', hasNormalSlots);
  return res
}

function normalizeScopedSlot(normalSlots, key, fn) {
  var normalized = function () {
    var res = arguments.length ? fn.apply(null, arguments) : fn({});
    res = res && typeof res === 'object' && !Array.isArray(res)
      ? [res] // single vnode
      : normalizeChildren(res);
    return res && (
      res.length === 0 ||
      (res.length === 1 && res[0].isComment) // #9658
    ) ? undefined
      : res
  };
  // this is a slot using the new v-slot syntax without scope. although it is
  // compiled as a scoped slot, render fn users would expect it to be present
  // on this.$slots because the usage is semantically a normal slot.
  if (fn.proxy) {
    Object.defineProperty(normalSlots, key, {
      get: normalized,
      enumerable: true,
      configurable: true
    });
  }
  return normalized
}

function proxyNormalSlot(slots, key) {
  return function () { return slots[key]; }
}

/*  */

/**
 * Runtime helper for rendering v-for lists.
 */
function renderList (
  val,
  render
) {
  var ret, i, l, keys, key;
  if (Array.isArray(val) || typeof val === 'string') {
    ret = new Array(val.length);
    for (i = 0, l = val.length; i < l; i++) {
      ret[i] = render(val[i], i);
    }
  } else if (typeof val === 'number') {
    ret = new Array(val);
    for (i = 0; i < val; i++) {
      ret[i] = render(i + 1, i);
    }
  } else if (isObject(val)) {
    if (hasSymbol && val[Symbol.iterator]) {
      ret = [];
      var iterator = val[Symbol.iterator]();
      var result = iterator.next();
      while (!result.done) {
        ret.push(render(result.value, ret.length));
        result = iterator.next();
      }
    } else {
      keys = Object.keys(val);
      ret = new Array(keys.length);
      for (i = 0, l = keys.length; i < l; i++) {
        key = keys[i];
        ret[i] = render(val[key], key, i);
      }
    }
  }
  if (!isDef(ret)) {
    ret = [];
  }
  (ret)._isVList = true;
  return ret
}

/*  */

/**
 * Runtime helper for rendering <slot>
 */
function renderSlot (
  name,
  fallback,
  props,
  bindObject
) {
  var scopedSlotFn = this.$scopedSlots[name];
  var nodes;
  if (scopedSlotFn) { // scoped slot
    props = props || {};
    if (bindObject) {
      if (!isObject(bindObject)) {
        warn(
          'slot v-bind without argument expects an Object',
          this
        );
      }
      props = extend(extend({}, bindObject), props);
    }
    nodes = scopedSlotFn(props) || fallback;
  } else {
    nodes = this.$slots[name] || fallback;
  }

  var target = props && props.slot;
  if (target) {
    return this.$createElement('template', { slot: target }, nodes)
  } else {
    return nodes
  }
}

/*  */

/**
 * Runtime helper for resolving filters
 */
function resolveFilter (id) {
  return resolveAsset(this.$options, 'filters', id, true) || identity
}

/*  */

function isKeyNotMatch (expect, actual) {
  if (Array.isArray(expect)) {
    return expect.indexOf(actual) === -1
  } else {
    return expect !== actual
  }
}

/**
 * Runtime helper for checking keyCodes from config.
 * exposed as Vue.prototype._k
 * passing in eventKeyName as last argument separately for backwards compat
 */
function checkKeyCodes (
  eventKeyCode,
  key,
  builtInKeyCode,
  eventKeyName,
  builtInKeyName
) {
  var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
  if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
    return isKeyNotMatch(builtInKeyName, eventKeyName)
  } else if (mappedKeyCode) {
    return isKeyNotMatch(mappedKeyCode, eventKeyCode)
  } else if (eventKeyName) {
    return hyphenate(eventKeyName) !== key
  }
}

/*  */

/**
 * Runtime helper for merging v-bind="object" into a VNode's data.
 */
function bindObjectProps (
  data,
  tag,
  value,
  asProp,
  isSync
) {
  if (value) {
    if (!isObject(value)) {
      warn(
        'v-bind without argument expects an Object or Array value',
        this
      );
    } else {
      if (Array.isArray(value)) {
        value = toObject(value);
      }
      var hash;
      var loop = function ( key ) {
        if (
          key === 'class' ||
          key === 'style' ||
          isReservedAttribute(key)
        ) {
          hash = data;
        } else {
          var type = data.attrs && data.attrs.type;
          hash = asProp || config.mustUseProp(tag, type, key)
            ? data.domProps || (data.domProps = {})
            : data.attrs || (data.attrs = {});
        }
        var camelizedKey = camelize(key);
        var hyphenatedKey = hyphenate(key);
        if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
          hash[key] = value[key];

          if (isSync) {
            var on = data.on || (data.on = {});
            on[("update:" + key)] = function ($event) {
              value[key] = $event;
            };
          }
        }
      };

      for (var key in value) loop( key );
    }
  }
  return data
}

/*  */

/**
 * Runtime helper for rendering static trees.
 */
function renderStatic (
  index,
  isInFor
) {
  var cached = this._staticTrees || (this._staticTrees = []);
  var tree = cached[index];
  // if has already-rendered static tree and not inside v-for,
  // we can reuse the same tree.
  if (tree && !isInFor) {
    return tree
  }
  // otherwise, render a fresh tree.
  tree = cached[index] = this.$options.staticRenderFns[index].call(
    this._renderProxy,
    null,
    this // for render fns generated for functional component templates
  );
  markStatic(tree, ("__static__" + index), false);
  return tree
}

/**
 * Runtime helper for v-once.
 * Effectively it means marking the node as static with a unique key.
 */
function markOnce (
  tree,
  index,
  key
) {
  markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
  return tree
}

function markStatic (
  tree,
  key,
  isOnce
) {
  if (Array.isArray(tree)) {
    for (var i = 0; i < tree.length; i++) {
      if (tree[i] && typeof tree[i] !== 'string') {
        markStaticNode(tree[i], (key + "_" + i), isOnce);
      }
    }
  } else {
    markStaticNode(tree, key, isOnce);
  }
}

function markStaticNode (node, key, isOnce) {
  node.isStatic = true;
  node.key = key;
  node.isOnce = isOnce;
}

/*  */

function bindObjectListeners (data, value) {
  if (value) {
    if (!isPlainObject(value)) {
      warn(
        'v-on without argument expects an Object value',
        this
      );
    } else {
      var on = data.on = data.on ? extend({}, data.on) : {};
      for (var key in value) {
        var existing = on[key];
        var ours = value[key];
        on[key] = existing ? [].concat(existing, ours) : ours;
      }
    }
  }
  return data
}

/*  */

function resolveScopedSlots (
  fns, // see flow/vnode
  res,
  // the following are added in 2.6
  hasDynamicKeys,
  contentHashKey
) {
  res = res || { $stable: !hasDynamicKeys };
  for (var i = 0; i < fns.length; i++) {
    var slot = fns[i];
    if (Array.isArray(slot)) {
      resolveScopedSlots(slot, res, hasDynamicKeys);
    } else if (slot) {
      // marker for reverse proxying v-slot without scope on this.$slots
      if (slot.proxy) {
        slot.fn.proxy = true;
      }
      res[slot.key] = slot.fn;
    }
  }
  if (contentHashKey) {
    (res).$key = contentHashKey;
  }
  return res
}

/*  */

function bindDynamicKeys (baseObj, values) {
  for (var i = 0; i < values.length; i += 2) {
    var key = values[i];
    if (typeof key === 'string' && key) {
      baseObj[values[i]] = values[i + 1];
    } else if (key !== '' && key !== null) {
      // null is a speical value for explicitly removing a binding
      warn(
        ("Invalid value for dynamic directive argument (expected string or null): " + key),
        this
      );
    }
  }
  return baseObj
}

// helper to dynamically append modifier runtime markers to event names.
// ensure only append when value is already string, otherwise it will be cast
// to string and cause the type check to miss.
function prependModifier (value, symbol) {
  return typeof value === 'string' ? symbol + value : value
}

/*  */

function installRenderHelpers (target) {
  target._o = markOnce;
  target._n = toNumber;
  target._s = toString;
  target._l = renderList;
  target._t = renderSlot;
  target._q = looseEqual;
  target._i = looseIndexOf;
  target._m = renderStatic;
  target._f = resolveFilter;
  target._k = checkKeyCodes;
  target._b = bindObjectProps;
  target._v = createTextVNode;
  target._e = createEmptyVNode;
  target._u = resolveScopedSlots;
  target._g = bindObjectListeners;
  target._d = bindDynamicKeys;
  target._p = prependModifier;
}

/*  */

function FunctionalRenderContext (
  data,
  props,
  children,
  parent,
  Ctor
) {
  var this$1 = this;

  var options = Ctor.options;
  // ensure the createElement function in functional components
  // gets a unique context - this is necessary for correct named slot check
  var contextVm;
  if (hasOwn(parent, '_uid')) {
    contextVm = Object.create(parent);
    // $flow-disable-line
    contextVm._original = parent;
  } else {
    // the context vm passed in is a functional context as well.
    // in this case we want to make sure we are able to get a hold to the
    // real context instance.
    contextVm = parent;
    // $flow-disable-line
    parent = parent._original;
  }
  var isCompiled = isTrue(options._compiled);
  var needNormalization = !isCompiled;

  this.data = data;
  this.props = props;
  this.children = children;
  this.parent = parent;
  this.listeners = data.on || emptyObject;
  this.injections = resolveInject(options.inject, parent);
  this.slots = function () {
    if (!this$1.$slots) {
      normalizeScopedSlots(
        data.scopedSlots,
        this$1.$slots = resolveSlots(children, parent)
      );
    }
    return this$1.$slots
  };

  Object.defineProperty(this, 'scopedSlots', ({
    enumerable: true,
    get: function get () {
      return normalizeScopedSlots(data.scopedSlots, this.slots())
    }
  }));

  // support for compiled functional template
  if (isCompiled) {
    // exposing $options for renderStatic()
    this.$options = options;
    // pre-resolve slots for renderSlot()
    this.$slots = this.slots();
    this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
  }

  if (options._scopeId) {
    this._c = function (a, b, c, d) {
      var vnode = createElement(contextVm, a, b, c, d, needNormalization);
      if (vnode && !Array.isArray(vnode)) {
        vnode.fnScopeId = options._scopeId;
        vnode.fnContext = parent;
      }
      return vnode
    };
  } else {
    this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
  }
}

installRenderHelpers(FunctionalRenderContext.prototype);

function createFunctionalComponent (
  Ctor,
  propsData,
  data,
  contextVm,
  children
) {
  var options = Ctor.options;
  var props = {};
  var propOptions = options.props;
  if (isDef(propOptions)) {
    for (var key in propOptions) {
      props[key] = validateProp(key, propOptions, propsData || emptyObject);
    }
  } else {
    if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
    if (isDef(data.props)) { mergeProps(props, data.props); }
  }

  var renderContext = new FunctionalRenderContext(
    data,
    props,
    children,
    contextVm,
    Ctor
  );

  var vnode = options.render.call(null, renderContext._c, renderContext);

  if (vnode instanceof VNode) {
    return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
  } else if (Array.isArray(vnode)) {
    var vnodes = normalizeChildren(vnode) || [];
    var res = new Array(vnodes.length);
    for (var i = 0; i < vnodes.length; i++) {
      res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
    }
    return res
  }
}

function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
  // #7817 clone node before setting fnContext, otherwise if the node is reused
  // (e.g. it was from a cached normal slot) the fnContext causes named slots
  // that should not be matched to match.
  var clone = cloneVNode(vnode);
  clone.fnContext = contextVm;
  clone.fnOptions = options;
  {
    (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
  }
  if (data.slot) {
    (clone.data || (clone.data = {})).slot = data.slot;
  }
  return clone
}

function mergeProps (to, from) {
  for (var key in from) {
    to[camelize(key)] = from[key];
  }
}

/*  */

/*  */

/*  */

/*  */

// inline hooks to be invoked on component VNodes during patch
var componentVNodeHooks = {
  init: function init (vnode, hydrating) {
    if (
      vnode.componentInstance &&
      !vnode.componentInstance._isDestroyed &&
      vnode.data.keepAlive
    ) {
      // kept-alive components, treat as a patch
      var mountedNode = vnode; // work around flow
      componentVNodeHooks.prepatch(mountedNode, mountedNode);
    } else {
      var child = vnode.componentInstance = createComponentInstanceForVnode(
        vnode,
        activeInstance
      );
      child.$mount(hydrating ? vnode.elm : undefined, hydrating);
    }
  },

  prepatch: function prepatch (oldVnode, vnode) {
    var options = vnode.componentOptions;
    var child = vnode.componentInstance = oldVnode.componentInstance;
    updateChildComponent(
      child,
      options.propsData, // updated props
      options.listeners, // updated listeners
      vnode, // new parent vnode
      options.children // new children
    );
  },

  insert: function insert (vnode) {
    var context = vnode.context;
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isMounted) {
      componentInstance._isMounted = true;
      callHook(componentInstance, 'mounted');
    }
    if (vnode.data.keepAlive) {
      if (context._isMounted) {
        // vue-router#1212
        // During updates, a kept-alive component's child components may
        // change, so directly walking the tree here may call activated hooks
        // on incorrect children. Instead we push them into a queue which will
        // be processed after the whole patch process ended.
        queueActivatedComponent(componentInstance);
      } else {
        activateChildComponent(componentInstance, true /* direct */);
      }
    }
  },

  destroy: function destroy (vnode) {
    var componentInstance = vnode.componentInstance;
    if (!componentInstance._isDestroyed) {
      if (!vnode.data.keepAlive) {
        componentInstance.$destroy();
      } else {
        deactivateChildComponent(componentInstance, true /* direct */);
      }
    }
  }
};

var hooksToMerge = Object.keys(componentVNodeHooks);

function createComponent (
  Ctor,
  data,
  context,
  children,
  tag
) {
  if (isUndef(Ctor)) {
    return
  }

  var baseCtor = context.$options._base;

  // plain options object: turn it into a constructor
  if (isObject(Ctor)) {
    Ctor = baseCtor.extend(Ctor);
  }

  // if at this stage it's not a constructor or an async component factory,
  // reject.
  if (typeof Ctor !== 'function') {
    {
      warn(("Invalid Component definition: " + (String(Ctor))), context);
    }
    return
  }

  // async component
  var asyncFactory;
  if (isUndef(Ctor.cid)) {
    asyncFactory = Ctor;
    Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
    if (Ctor === undefined) {
      // return a placeholder node for async component, which is rendered
      // as a comment node but preserves all the raw information for the node.
      // the information will be used for async server-rendering and hydration.
      return createAsyncPlaceholder(
        asyncFactory,
        data,
        context,
        children,
        tag
      )
    }
  }

  data = data || {};

  // resolve constructor options in case global mixins are applied after
  // component constructor creation
  resolveConstructorOptions(Ctor);

  // transform component v-model data into props & events
  if (isDef(data.model)) {
    transformModel(Ctor.options, data);
  }

  // extract props
  var propsData = extractPropsFromVNodeData(data, Ctor, tag);

  // functional component
  if (isTrue(Ctor.options.functional)) {
    return createFunctionalComponent(Ctor, propsData, data, context, children)
  }

  // extract listeners, since these needs to be treated as
  // child component listeners instead of DOM listeners
  var listeners = data.on;
  // replace with listeners with .native modifier
  // so it gets processed during parent component patch.
  data.on = data.nativeOn;

  if (isTrue(Ctor.options.abstract)) {
    // abstract components do not keep anything
    // other than props & listeners & slot

    // work around flow
    var slot = data.slot;
    data = {};
    if (slot) {
      data.slot = slot;
    }
  }

  // install component management hooks onto the placeholder node
  installComponentHooks(data);

  // return a placeholder vnode
  var name = Ctor.options.name || tag;
  var vnode = new VNode(
    ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
    data, undefined, undefined, undefined, context,
    { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
    asyncFactory
  );

  return vnode
}

function createComponentInstanceForVnode (
  vnode, // we know it's MountedComponentVNode but flow doesn't
  parent // activeInstance in lifecycle state
) {
  var options = {
    _isComponent: true,
    _parentVnode: vnode,
    parent: parent
  };
  // check inline-template render functions
  var inlineTemplate = vnode.data.inlineTemplate;
  if (isDef(inlineTemplate)) {
    options.render = inlineTemplate.render;
    options.staticRenderFns = inlineTemplate.staticRenderFns;
  }
  return new vnode.componentOptions.Ctor(options)
}

function installComponentHooks (data) {
  var hooks = data.hook || (data.hook = {});
  for (var i = 0; i < hooksToMerge.length; i++) {
    var key = hooksToMerge[i];
    var existing = hooks[key];
    var toMerge = componentVNodeHooks[key];
    if (existing !== toMerge && !(existing && existing._merged)) {
      hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
    }
  }
}

function mergeHook$1 (f1, f2) {
  var merged = function (a, b) {
    // flow complains about extra args which is why we use any
    f1(a, b);
    f2(a, b);
  };
  merged._merged = true;
  return merged
}

// transform component v-model info (value and callback) into
// prop and event handler respectively.
function transformModel (options, data) {
  var prop = (options.model && options.model.prop) || 'value';
  var event = (options.model && options.model.event) || 'input'
  ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
  var on = data.on || (data.on = {});
  var existing = on[event];
  var callback = data.model.callback;
  if (isDef(existing)) {
    if (
      Array.isArray(existing)
        ? existing.indexOf(callback) === -1
        : existing !== callback
    ) {
      on[event] = [callback].concat(existing);
    }
  } else {
    on[event] = callback;
  }
}

/*  */

var SIMPLE_NORMALIZE = 1;
var ALWAYS_NORMALIZE = 2;

// wrapper function for providing a more flexible interface
// without getting yelled at by flow
function createElement (
  context,
  tag,
  data,
  children,
  normalizationType,
  alwaysNormalize
) {
  if (Array.isArray(data) || isPrimitive(data)) {
    normalizationType = children;
    children = data;
    data = undefined;
  }
  if (isTrue(alwaysNormalize)) {
    normalizationType = ALWAYS_NORMALIZE;
  }
  return _createElement(context, tag, data, children, normalizationType)
}

function _createElement (
  context,
  tag,
  data,
  children,
  normalizationType
) {
  if (isDef(data) && isDef((data).__ob__)) {
    warn(
      "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
      'Always create fresh vnode data objects in each render!',
      context
    );
    return createEmptyVNode()
  }
  // object syntax in v-bind
  if (isDef(data) && isDef(data.is)) {
    tag = data.is;
  }
  if (!tag) {
    // in case of component :is set to falsy value
    return createEmptyVNode()
  }
  // warn against non-primitive key
  if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)
  ) {
    {
      warn(
        'Avoid using non-primitive value as key, ' +
        'use string/number value instead.',
        context
      );
    }
  }
  // support single function children as default scoped slot
  if (Array.isArray(children) &&
    typeof children[0] === 'function'
  ) {
    data = data || {};
    data.scopedSlots = { default: children[0] };
    children.length = 0;
  }
  if (normalizationType === ALWAYS_NORMALIZE) {
    children = normalizeChildren(children);
  } else if (normalizationType === SIMPLE_NORMALIZE) {
    children = simpleNormalizeChildren(children);
  }
  var vnode, ns;
  if (typeof tag === 'string') {
    var Ctor;
    ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
    if (config.isReservedTag(tag)) {
      // platform built-in elements
      vnode = new VNode(
        config.parsePlatformTagName(tag), data, children,
        undefined, undefined, context
      );
    } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
      // component
      vnode = createComponent(Ctor, data, context, children, tag);
    } else {
      // unknown or unlisted namespaced elements
      // check at runtime because it may get assigned a namespace when its
      // parent normalizes children
      vnode = new VNode(
        tag, data, children,
        undefined, undefined, context
      );
    }
  } else {
    // direct component options / constructor
    vnode = createComponent(tag, data, context, children);
  }
  if (Array.isArray(vnode)) {
    return vnode
  } else if (isDef(vnode)) {
    if (isDef(ns)) { applyNS(vnode, ns); }
    if (isDef(data)) { registerDeepBindings(data); }
    return vnode
  } else {
    return createEmptyVNode()
  }
}

function applyNS (vnode, ns, force) {
  vnode.ns = ns;
  if (vnode.tag === 'foreignObject') {
    // use default namespace inside foreignObject
    ns = undefined;
    force = true;
  }
  if (isDef(vnode.children)) {
    for (var i = 0, l = vnode.children.length; i < l; i++) {
      var child = vnode.children[i];
      if (isDef(child.tag) && (
        isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
        applyNS(child, ns, force);
      }
    }
  }
}

// ref #5318
// necessary to ensure parent re-render when deep bindings like :style and
// :class are used on slot nodes
function registerDeepBindings (data) {
  if (isObject(data.style)) {
    traverse(data.style);
  }
  if (isObject(data.class)) {
    traverse(data.class);
  }
}

/*  */

function initRender (vm) {
  vm._vnode = null; // the root of the child tree
  vm._staticTrees = null; // v-once cached trees
  var options = vm.$options;
  var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
  var renderContext = parentVnode && parentVnode.context;
  vm.$slots = resolveSlots(options._renderChildren, renderContext);
  vm.$scopedSlots = emptyObject;
  // bind the createElement fn to this instance
  // so that we get proper render context inside it.
  // args order: tag, data, children, normalizationType, alwaysNormalize
  // internal version is used by render functions compiled from templates
  vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
  // normalization is always applied for the public version, used in
  // user-written render functions.
  vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

  // $attrs & $listeners are exposed for easier HOC creation.
  // they need to be reactive so that HOCs using them are always updated
  var parentData = parentVnode && parentVnode.data;

  /* istanbul ignore else */
  {
    defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
      !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
    }, true);
    defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
      !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
    }, true);
  }
}

var currentRenderingInstance = null;

function renderMixin (Vue) {
  // install runtime convenience helpers
  installRenderHelpers(Vue.prototype);

  Vue.prototype.$nextTick = function (fn) {
    return nextTick(fn, this)
  };

  Vue.prototype._render = function () {
    var vm = this;
    var ref = vm.$options;
    var render = ref.render;
    var _parentVnode = ref._parentVnode;

    if (_parentVnode) {
      vm.$scopedSlots = normalizeScopedSlots(
        _parentVnode.data.scopedSlots,
        vm.$slots,
        vm.$scopedSlots
      );
    }

    // set parent vnode. this allows render functions to have access
    // to the data on the placeholder node.
    vm.$vnode = _parentVnode;
    // render self
    var vnode;
    try {
      // There's no need to maintain a stack becaues all render fns are called
      // separately from one another. Nested component's render fns are called
      // when parent component is patched.
      currentRenderingInstance = vm;
      vnode = render.call(vm._renderProxy, vm.$createElement);
    } catch (e) {
      handleError(e, vm, "render");
      // return error render result,
      // or previous vnode to prevent render error causing blank component
      /* istanbul ignore else */
      if (vm.$options.renderError) {
        try {
          vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
        } catch (e) {
          handleError(e, vm, "renderError");
          vnode = vm._vnode;
        }
      } else {
        vnode = vm._vnode;
      }
    } finally {
      currentRenderingInstance = null;
    }
    // if the returned array contains only a single node, allow it
    if (Array.isArray(vnode) && vnode.length === 1) {
      vnode = vnode[0];
    }
    // return empty vnode in case the render function errored out
    if (!(vnode instanceof VNode)) {
      if (Array.isArray(vnode)) {
        warn(
          'Multiple root nodes returned from render function. Render function ' +
          'should return a single root node.',
          vm
        );
      }
      vnode = createEmptyVNode();
    }
    // set parent
    vnode.parent = _parentVnode;
    return vnode
  };
}

/*  */

function ensureCtor (comp, base) {
  if (
    comp.__esModule ||
    (hasSymbol && comp[Symbol.toStringTag] === 'Module')
  ) {
    comp = comp.default;
  }
  return isObject(comp)
    ? base.extend(comp)
    : comp
}

function createAsyncPlaceholder (
  factory,
  data,
  context,
  children,
  tag
) {
  var node = createEmptyVNode();
  node.asyncFactory = factory;
  node.asyncMeta = { data: data, context: context, children: children, tag: tag };
  return node
}

function resolveAsyncComponent (
  factory,
  baseCtor
) {
  if (isTrue(factory.error) && isDef(factory.errorComp)) {
    return factory.errorComp
  }

  if (isDef(factory.resolved)) {
    return factory.resolved
  }

  var owner = currentRenderingInstance;
  if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
    // already pending
    factory.owners.push(owner);
  }

  if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
    return factory.loadingComp
  }

  if (owner && !isDef(factory.owners)) {
    var owners = factory.owners = [owner];
    var sync = true;
    var timerLoading = null;
    var timerTimeout = null

    ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

    var forceRender = function (renderCompleted) {
      for (var i = 0, l = owners.length; i < l; i++) {
        (owners[i]).$forceUpdate();
      }

      if (renderCompleted) {
        owners.length = 0;
        if (timerLoading !== null) {
          clearTimeout(timerLoading);
          timerLoading = null;
        }
        if (timerTimeout !== null) {
          clearTimeout(timerTimeout);
          timerTimeout = null;
        }
      }
    };

    var resolve = once(function (res) {
      // cache resolved
      factory.resolved = ensureCtor(res, baseCtor);
      // invoke callbacks only if this is not a synchronous resolve
      // (async resolves are shimmed as synchronous during SSR)
      if (!sync) {
        forceRender(true);
      } else {
        owners.length = 0;
      }
    });

    var reject = once(function (reason) {
      warn(
        "Failed to resolve async component: " + (String(factory)) +
        (reason ? ("\nReason: " + reason) : '')
      );
      if (isDef(factory.errorComp)) {
        factory.error = true;
        forceRender(true);
      }
    });

    var res = factory(resolve, reject);

    if (isObject(res)) {
      if (isPromise(res)) {
        // () => Promise
        if (isUndef(factory.resolved)) {
          res.then(resolve, reject);
        }
      } else if (isPromise(res.component)) {
        res.component.then(resolve, reject);

        if (isDef(res.error)) {
          factory.errorComp = ensureCtor(res.error, baseCtor);
        }

        if (isDef(res.loading)) {
          factory.loadingComp = ensureCtor(res.loading, baseCtor);
          if (res.delay === 0) {
            factory.loading = true;
          } else {
            timerLoading = setTimeout(function () {
              timerLoading = null;
              if (isUndef(factory.resolved) && isUndef(factory.error)) {
                factory.loading = true;
                forceRender(false);
              }
            }, res.delay || 200);
          }
        }

        if (isDef(res.timeout)) {
          timerTimeout = setTimeout(function () {
            timerTimeout = null;
            if (isUndef(factory.resolved)) {
              reject(
                "timeout (" + (res.timeout) + "ms)"
              );
            }
          }, res.timeout);
        }
      }
    }

    sync = false;
    // return in case resolved synchronously
    return factory.loading
      ? factory.loadingComp
      : factory.resolved
  }
}

/*  */

function isAsyncPlaceholder (node) {
  return node.isComment && node.asyncFactory
}

/*  */

function getFirstComponentChild (children) {
  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      var c = children[i];
      if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
        return c
      }
    }
  }
}

/*  */

/*  */

function initEvents (vm) {
  vm._events = Object.create(null);
  vm._hasHookEvent = false;
  // init parent attached events
  var listeners = vm.$options._parentListeners;
  if (listeners) {
    updateComponentListeners(vm, listeners);
  }
}

var target;

function add (event, fn) {
  target.$on(event, fn);
}

function remove$1 (event, fn) {
  target.$off(event, fn);
}

function createOnceHandler (event, fn) {
  var _target = target;
  return function onceHandler () {
    var res = fn.apply(null, arguments);
    if (res !== null) {
      _target.$off(event, onceHandler);
    }
  }
}

function updateComponentListeners (
  vm,
  listeners,
  oldListeners
) {
  target = vm;
  updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
  target = undefined;
}

function eventsMixin (Vue) {
  var hookRE = /^hook:/;
  Vue.prototype.$on = function (event, fn) {
    var vm = this;
    if (Array.isArray(event)) {
      for (var i = 0, l = event.length; i < l; i++) {
        vm.$on(event[i], fn);
      }
    } else {
      (vm._events[event] || (vm._events[event] = [])).push(fn);
      // optimize hook:event cost by using a boolean flag marked at registration
      // instead of a hash lookup
      if (hookRE.test(event)) {
        vm._hasHookEvent = true;
      }
    }
    return vm
  };

  Vue.prototype.$once = function (event, fn) {
    var vm = this;
    function on () {
      vm.$off(event, on);
      fn.apply(vm, arguments);
    }
    on.fn = fn;
    vm.$on(event, on);
    return vm
  };

  Vue.prototype.$off = function (event, fn) {
    var vm = this;
    // all
    if (!arguments.length) {
      vm._events = Object.create(null);
      return vm
    }
    // array of events
    if (Array.isArray(event)) {
      for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
        vm.$off(event[i$1], fn);
      }
      return vm
    }
    // specific event
    var cbs = vm._events[event];
    if (!cbs) {
      return vm
    }
    if (!fn) {
      vm._events[event] = null;
      return vm
    }
    // specific handler
    var cb;
    var i = cbs.length;
    while (i--) {
      cb = cbs[i];
      if (cb === fn || cb.fn === fn) {
        cbs.splice(i, 1);
        break
      }
    }
    return vm
  };

  Vue.prototype.$emit = function (event) {
    var vm = this;
    {
      var lowerCaseEvent = event.toLowerCase();
      if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
        tip(
          "Event \"" + lowerCaseEvent + "\" is emitted in component " +
          (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
          "Note that HTML attributes are case-insensitive and you cannot use " +
          "v-on to listen to camelCase events when using in-DOM templates. " +
          "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
        );
      }
    }
    var cbs = vm._events[event];
    if (cbs) {
      cbs = cbs.length > 1 ? toArray(cbs) : cbs;
      var args = toArray(arguments, 1);
      var info = "event handler for \"" + event + "\"";
      for (var i = 0, l = cbs.length; i < l; i++) {
        invokeWithErrorHandling(cbs[i], vm, args, vm, info);
      }
    }
    return vm
  };
}

/*  */

var activeInstance = null;
var isUpdatingChildComponent = false;

function setActiveInstance(vm) {
  var prevActiveInstance = activeInstance;
  activeInstance = vm;
  return function () {
    activeInstance = prevActiveInstance;
  }
}

function initLifecycle (vm) {
  var options = vm.$options;

  // locate first non-abstract parent
  var parent = options.parent;
  if (parent && !options.abstract) {
    while (parent.$options.abstract && parent.$parent) {
      parent = parent.$parent;
    }
    parent.$children.push(vm);
  }

  vm.$parent = parent;
  vm.$root = parent ? parent.$root : vm;

  vm.$children = [];
  vm.$refs = {};

  vm._watcher = null;
  vm._inactive = null;
  vm._directInactive = false;
  vm._isMounted = false;
  vm._isDestroyed = false;
  vm._isBeingDestroyed = false;
}

function lifecycleMixin (Vue) {
  Vue.prototype._update = function (vnode, hydrating) {
    var vm = this;
    var prevEl = vm.$el;
    var prevVnode = vm._vnode;
    var restoreActiveInstance = setActiveInstance(vm);
    vm._vnode = vnode;
    // Vue.prototype.__patch__ is injected in entry points
    // based on the rendering backend used.
    if (!prevVnode) {
      // initial render
      vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
    } else {
      // updates
      vm.$el = vm.__patch__(prevVnode, vnode);
    }
    restoreActiveInstance();
    // update __vue__ reference
    if (prevEl) {
      prevEl.__vue__ = null;
    }
    if (vm.$el) {
      vm.$el.__vue__ = vm;
    }
    // if parent is an HOC, update its $el as well
    if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
      vm.$parent.$el = vm.$el;
    }
    // updated hook is called by the scheduler to ensure that children are
    // updated in a parent's updated hook.
  };

  Vue.prototype.$forceUpdate = function () {
    var vm = this;
    if (vm._watcher) {
      vm._watcher.update();
    }
  };

  Vue.prototype.$destroy = function () {
    var vm = this;
    if (vm._isBeingDestroyed) {
      return
    }
    callHook(vm, 'beforeDestroy');
    vm._isBeingDestroyed = true;
    // remove self from parent
    var parent = vm.$parent;
    if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
      remove(parent.$children, vm);
    }
    // teardown watchers
    if (vm._watcher) {
      vm._watcher.teardown();
    }
    var i = vm._watchers.length;
    while (i--) {
      vm._watchers[i].teardown();
    }
    // remove reference from data ob
    // frozen object may not have observer.
    if (vm._data.__ob__) {
      vm._data.__ob__.vmCount--;
    }
    // call the last hook...
    vm._isDestroyed = true;
    // invoke destroy hooks on current rendered tree
    vm.__patch__(vm._vnode, null);
    // fire destroyed hook
    callHook(vm, 'destroyed');
    // turn off all instance listeners.
    vm.$off();
    // remove __vue__ reference
    if (vm.$el) {
      vm.$el.__vue__ = null;
    }
    // release circular reference (#6759)
    if (vm.$vnode) {
      vm.$vnode.parent = null;
    }
  };
}

function mountComponent (
  vm,
  el,
  hydrating
) {
  vm.$el = el;
  if (!vm.$options.render) {
    vm.$options.render = createEmptyVNode;
    {
      /* istanbul ignore if */
      if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
        vm.$options.el || el) {
        warn(
          'You are using the runtime-only build of Vue where the template ' +
          'compiler is not available. Either pre-compile the templates into ' +
          'render functions, or use the compiler-included build.',
          vm
        );
      } else {
        warn(
          'Failed to mount component: template or render function not defined.',
          vm
        );
      }
    }
  }
  callHook(vm, 'beforeMount');

  var updateComponent;
  /* istanbul ignore if */
  if (config.performance && mark) {
    updateComponent = function () {
      var name = vm._name;
      var id = vm._uid;
      var startTag = "vue-perf-start:" + id;
      var endTag = "vue-perf-end:" + id;

      mark(startTag);
      var vnode = vm._render();
      mark(endTag);
      measure(("vue " + name + " render"), startTag, endTag);

      mark(startTag);
      vm._update(vnode, hydrating);
      mark(endTag);
      measure(("vue " + name + " patch"), startTag, endTag);
    };
  } else {
    updateComponent = function () {
      vm._update(vm._render(), hydrating);
    };
  }

  // we set this to vm._watcher inside the watcher's constructor
  // since the watcher's initial patch may call $forceUpdate (e.g. inside child
  // component's mounted hook), which relies on vm._watcher being already defined
  new Watcher(vm, updateComponent, noop, {
    before: function before () {
      if (vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'beforeUpdate');
      }
    }
  }, true /* isRenderWatcher */);
  hydrating = false;

  // manually mounted instance, call mounted on self
  // mounted is called for render-created child components in its inserted hook
  if (vm.$vnode == null) {
    vm._isMounted = true;
    callHook(vm, 'mounted');
  }
  return vm
}

function updateChildComponent (
  vm,
  propsData,
  listeners,
  parentVnode,
  renderChildren
) {
  {
    isUpdatingChildComponent = true;
  }

  // determine whether component has slot children
  // we need to do this before overwriting $options._renderChildren.

  // check if there are dynamic scopedSlots (hand-written or compiled but with
  // dynamic slot names). Static scoped slots compiled from template has the
  // "$stable" marker.
  var newScopedSlots = parentVnode.data.scopedSlots;
  var oldScopedSlots = vm.$scopedSlots;
  var hasDynamicScopedSlot = !!(
    (newScopedSlots && !newScopedSlots.$stable) ||
    (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
    (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)
  );

  // Any static slot children from the parent may have changed during parent's
  // update. Dynamic scoped slots may also have changed. In such cases, a forced
  // update is necessary to ensure correctness.
  var needsForceUpdate = !!(
    renderChildren ||               // has new static slots
    vm.$options._renderChildren ||  // has old static slots
    hasDynamicScopedSlot
  );

  vm.$options._parentVnode = parentVnode;
  vm.$vnode = parentVnode; // update vm's placeholder node without re-render

  if (vm._vnode) { // update child tree's parent
    vm._vnode.parent = parentVnode;
  }
  vm.$options._renderChildren = renderChildren;

  // update $attrs and $listeners hash
  // these are also reactive so they may trigger child update if the child
  // used them during render
  vm.$attrs = parentVnode.data.attrs || emptyObject;
  vm.$listeners = listeners || emptyObject;

  // update props
  if (propsData && vm.$options.props) {
    toggleObserving(false);
    var props = vm._props;
    var propKeys = vm.$options._propKeys || [];
    for (var i = 0; i < propKeys.length; i++) {
      var key = propKeys[i];
      var propOptions = vm.$options.props; // wtf flow?
      props[key] = validateProp(key, propOptions, propsData, vm);
    }
    toggleObserving(true);
    // keep a copy of raw propsData
    vm.$options.propsData = propsData;
  }

  // update listeners
  listeners = listeners || emptyObject;
  var oldListeners = vm.$options._parentListeners;
  vm.$options._parentListeners = listeners;
  updateComponentListeners(vm, listeners, oldListeners);

  // resolve slots + force update if has children
  if (needsForceUpdate) {
    vm.$slots = resolveSlots(renderChildren, parentVnode.context);
    vm.$forceUpdate();
  }

  {
    isUpdatingChildComponent = false;
  }
}

function isInInactiveTree (vm) {
  while (vm && (vm = vm.$parent)) {
    if (vm._inactive) { return true }
  }
  return false
}

function activateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = false;
    if (isInInactiveTree(vm)) {
      return
    }
  } else if (vm._directInactive) {
    return
  }
  if (vm._inactive || vm._inactive === null) {
    vm._inactive = false;
    for (var i = 0; i < vm.$children.length; i++) {
      activateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'activated');
  }
}

function deactivateChildComponent (vm, direct) {
  if (direct) {
    vm._directInactive = true;
    if (isInInactiveTree(vm)) {
      return
    }
  }
  if (!vm._inactive) {
    vm._inactive = true;
    for (var i = 0; i < vm.$children.length; i++) {
      deactivateChildComponent(vm.$children[i]);
    }
    callHook(vm, 'deactivated');
  }
}

function callHook (vm, hook) {
  // #7573 disable dep collection when invoking lifecycle hooks
  pushTarget();
  var handlers = vm.$options[hook];
  var info = hook + " hook";
  if (handlers) {
    for (var i = 0, j = handlers.length; i < j; i++) {
      invokeWithErrorHandling(handlers[i], vm, null, vm, info);
    }
  }
  if (vm._hasHookEvent) {
    vm.$emit('hook:' + hook);
  }
  popTarget();
}

/*  */

var MAX_UPDATE_COUNT = 100;

var queue = [];
var activatedChildren = [];
var has = {};
var circular = {};
var waiting = false;
var flushing = false;
var index = 0;

/**
 * Reset the scheduler's state.
 */
function resetSchedulerState () {
  index = queue.length = activatedChildren.length = 0;
  has = {};
  {
    circular = {};
  }
  waiting = flushing = false;
}

// Async edge case #6566 requires saving the timestamp when event listeners are
// attached. However, calling performance.now() has a perf overhead especially
// if the page has thousands of event listeners. Instead, we take a timestamp
// every time the scheduler flushes and use that for all event listeners
// attached during that flush.
var currentFlushTimestamp = 0;

// Async edge case fix requires storing an event listener's attach timestamp.
var getNow = Date.now;

// Determine what event timestamp the browser is using. Annoyingly, the
// timestamp can either be hi-res (relative to page load) or low-res
// (relative to UNIX epoch), so in order to compare time we have to use the
// same timestamp type when saving the flush timestamp.
// All IE versions use low-res event timestamps, and have problematic clock
// implementations (#9632)
if (inBrowser && !isIE) {
  var performance = window.performance;
  if (
    performance &&
    typeof performance.now === 'function' &&
    getNow() > document.createEvent('Event').timeStamp
  ) {
    // if the event timestamp, although evaluated AFTER the Date.now(), is
    // smaller than it, it means the event is using a hi-res timestamp,
    // and we need to use the hi-res version for event listener timestamps as
    // well.
    getNow = function () { return performance.now(); };
  }
}

/**
 * Flush both queues and run the watchers.
 */
function flushSchedulerQueue () {
  currentFlushTimestamp = getNow();
  flushing = true;
  var watcher, id;

  // Sort queue before flush.
  // This ensures that:
  // 1. Components are updated from parent to child. (because parent is always
  //    created before the child)
  // 2. A component's user watchers are run before its render watcher (because
  //    user watchers are created before the render watcher)
  // 3. If a component is destroyed during a parent component's watcher run,
  //    its watchers can be skipped.
  queue.sort(function (a, b) { return a.id - b.id; });

  // do not cache length because more watchers might be pushed
  // as we run existing watchers
  for (index = 0; index < queue.length; index++) {
    watcher = queue[index];
    if (watcher.before) {
      watcher.before();
    }
    id = watcher.id;
    has[id] = null;
    watcher.run();
    // in dev build, check and stop circular updates.
    if (has[id] != null) {
      circular[id] = (circular[id] || 0) + 1;
      if (circular[id] > MAX_UPDATE_COUNT) {
        warn(
          'You may have an infinite update loop ' + (
            watcher.user
              ? ("in watcher with expression \"" + (watcher.expression) + "\"")
              : "in a component render function."
          ),
          watcher.vm
        );
        break
      }
    }
  }

  // keep copies of post queues before resetting state
  var activatedQueue = activatedChildren.slice();
  var updatedQueue = queue.slice();

  resetSchedulerState();

  // call component updated and activated hooks
  callActivatedHooks(activatedQueue);
  callUpdatedHooks(updatedQueue);

  // devtool hook
  /* istanbul ignore if */
  if (devtools && config.devtools) {
    devtools.emit('flush');
  }
}

function callUpdatedHooks (queue) {
  var i = queue.length;
  while (i--) {
    var watcher = queue[i];
    var vm = watcher.vm;
    if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
      callHook(vm, 'updated');
    }
  }
}

/**
 * Queue a kept-alive component that was activated during patch.
 * The queue will be processed after the entire tree has been patched.
 */
function queueActivatedComponent (vm) {
  // setting _inactive to false here so that a render function can
  // rely on checking whether it's in an inactive tree (e.g. router-view)
  vm._inactive = false;
  activatedChildren.push(vm);
}

function callActivatedHooks (queue) {
  for (var i = 0; i < queue.length; i++) {
    queue[i]._inactive = true;
    activateChildComponent(queue[i], true /* true */);
  }
}

/**
 * Push a watcher into the watcher queue.
 * Jobs with duplicate IDs will be skipped unless it's
 * pushed when the queue is being flushed.
 */
function queueWatcher (watcher) {
  var id = watcher.id;
  if (has[id] == null) {
    has[id] = true;
    if (!flushing) {
      queue.push(watcher);
    } else {
      // if already flushing, splice the watcher based on its id
      // if already past its id, it will be run next immediately.
      var i = queue.length - 1;
      while (i > index && queue[i].id > watcher.id) {
        i--;
      }
      queue.splice(i + 1, 0, watcher);
    }
    // queue the flush
    if (!waiting) {
      waiting = true;

      if (!config.async) {
        flushSchedulerQueue();
        return
      }
      nextTick(flushSchedulerQueue);
    }
  }
}

/*  */



var uid$2 = 0;

/**
 * A watcher parses an expression, collects dependencies,
 * and fires callback when the expression value changes.
 * This is used for both the $watch() api and directives.
 */
var Watcher = function Watcher (
  vm,
  expOrFn,
  cb,
  options,
  isRenderWatcher
) {
  this.vm = vm;
  if (isRenderWatcher) {
    vm._watcher = this;
  }
  vm._watchers.push(this);
  // options
  if (options) {
    this.deep = !!options.deep;
    this.user = !!options.user;
    this.lazy = !!options.lazy;
    this.sync = !!options.sync;
    this.before = options.before;
  } else {
    this.deep = this.user = this.lazy = this.sync = false;
  }
  this.cb = cb;
  this.id = ++uid$2; // uid for batching
  this.active = true;
  this.dirty = this.lazy; // for lazy watchers
  this.deps = [];
  this.newDeps = [];
  this.depIds = new _Set();
  this.newDepIds = new _Set();
  this.expression = expOrFn.toString();
  // parse expression for getter
  if (typeof expOrFn === 'function') {
    this.getter = expOrFn;
  } else {
    this.getter = parsePath(expOrFn);
    if (!this.getter) {
      this.getter = noop;
      warn(
        "Failed watching path: \"" + expOrFn + "\" " +
        'Watcher only accepts simple dot-delimited paths. ' +
        'For full control, use a function instead.',
        vm
      );
    }
  }
  this.value = this.lazy
    ? undefined
    : this.get();
};

/**
 * Evaluate the getter, and re-collect dependencies.
 */
Watcher.prototype.get = function get () {
  pushTarget(this);
  var value;
  var vm = this.vm;
  try {
    value = this.getter.call(vm, vm);
  } catch (e) {
    if (this.user) {
      handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
    } else {
      throw e
    }
  } finally {
    // "touch" every property so they are all tracked as
    // dependencies for deep watching
    if (this.deep) {
      traverse(value);
    }
    popTarget();
    this.cleanupDeps();
  }
  return value
};

/**
 * Add a dependency to this directive.
 */
Watcher.prototype.addDep = function addDep (dep) {
  var id = dep.id;
  if (!this.newDepIds.has(id)) {
    this.newDepIds.add(id);
    this.newDeps.push(dep);
    if (!this.depIds.has(id)) {
      dep.addSub(this);
    }
  }
};

/**
 * Clean up for dependency collection.
 */
Watcher.prototype.cleanupDeps = function cleanupDeps () {
  var i = this.deps.length;
  while (i--) {
    var dep = this.deps[i];
    if (!this.newDepIds.has(dep.id)) {
      dep.removeSub(this);
    }
  }
  var tmp = this.depIds;
  this.depIds = this.newDepIds;
  this.newDepIds = tmp;
  this.newDepIds.clear();
  tmp = this.deps;
  this.deps = this.newDeps;
  this.newDeps = tmp;
  this.newDeps.length = 0;
};

/**
 * Subscriber interface.
 * Will be called when a dependency changes.
 */
Watcher.prototype.update = function update () {
  /* istanbul ignore else */
  if (this.lazy) {
    this.dirty = true;
  } else if (this.sync) {
    this.run();
  } else {
    queueWatcher(this);
  }
};

/**
 * Scheduler job interface.
 * Will be called by the scheduler.
 */
Watcher.prototype.run = function run () {
  if (this.active) {
    var value = this.get();
    if (
      value !== this.value ||
      // Deep watchers and watchers on Object/Arrays should fire even
      // when the value is the same, because the value may
      // have mutated.
      isObject(value) ||
      this.deep
    ) {
      // set new value
      var oldValue = this.value;
      this.value = value;
      if (this.user) {
        try {
          this.cb.call(this.vm, value, oldValue);
        } catch (e) {
          handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
        }
      } else {
        this.cb.call(this.vm, value, oldValue);
      }
    }
  }
};

/**
 * Evaluate the value of the watcher.
 * This only gets called for lazy watchers.
 */
Watcher.prototype.evaluate = function evaluate () {
  this.value = this.get();
  this.dirty = false;
};

/**
 * Depend on all deps collected by this watcher.
 */
Watcher.prototype.depend = function depend () {
  var i = this.deps.length;
  while (i--) {
    this.deps[i].depend();
  }
};

/**
 * Remove self from all dependencies' subscriber list.
 */
Watcher.prototype.teardown = function teardown () {
  if (this.active) {
    // remove self from vm's watcher list
    // this is a somewhat expensive operation so we skip it
    // if the vm is being destroyed.
    if (!this.vm._isBeingDestroyed) {
      remove(this.vm._watchers, this);
    }
    var i = this.deps.length;
    while (i--) {
      this.deps[i].removeSub(this);
    }
    this.active = false;
  }
};

/*  */

var sharedPropertyDefinition = {
  enumerable: true,
  configurable: true,
  get: noop,
  set: noop
};

function proxy (target, sourceKey, key) {
  sharedPropertyDefinition.get = function proxyGetter () {
    return this[sourceKey][key]
  };
  sharedPropertyDefinition.set = function proxySetter (val) {
    this[sourceKey][key] = val;
  };
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function initState (vm) {
  vm._watchers = [];
  var opts = vm.$options;
  if (opts.props) { initProps(vm, opts.props); }
  if (opts.methods) { initMethods(vm, opts.methods); }
  if (opts.data) {
    initData(vm);
  } else {
    observe(vm._data = {}, true /* asRootData */);
  }
  if (opts.computed) { initComputed(vm, opts.computed); }
  if (opts.watch && opts.watch !== nativeWatch) {
    initWatch(vm, opts.watch);
  }
}

function initProps (vm, propsOptions) {
  var propsData = vm.$options.propsData || {};
  var props = vm._props = {};
  // cache prop keys so that future props updates can iterate using Array
  // instead of dynamic object key enumeration.
  var keys = vm.$options._propKeys = [];
  var isRoot = !vm.$parent;
  // root instance props should be converted
  if (!isRoot) {
    toggleObserving(false);
  }
  var loop = function ( key ) {
    keys.push(key);
    var value = validateProp(key, propsOptions, propsData, vm);
    /* istanbul ignore else */
    {
      var hyphenatedKey = hyphenate(key);
      if (isReservedAttribute(hyphenatedKey) ||
          config.isReservedAttr(hyphenatedKey)) {
        warn(
          ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
          vm
        );
      }
      defineReactive$$1(props, key, value, function () {
        if (!isRoot && !isUpdatingChildComponent) {
          warn(
            "Avoid mutating a prop directly since the value will be " +
            "overwritten whenever the parent component re-renders. " +
            "Instead, use a data or computed property based on the prop's " +
            "value. Prop being mutated: \"" + key + "\"",
            vm
          );
        }
      });
    }
    // static props are already proxied on the component's prototype
    // during Vue.extend(). We only need to proxy props defined at
    // instantiation here.
    if (!(key in vm)) {
      proxy(vm, "_props", key);
    }
  };

  for (var key in propsOptions) loop( key );
  toggleObserving(true);
}

function initData (vm) {
  var data = vm.$options.data;
  data = vm._data = typeof data === 'function'
    ? getData(data, vm)
    : data || {};
  if (!isPlainObject(data)) {
    data = {};
    warn(
      'data functions should return an object:\n' +
      'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
      vm
    );
  }
  // proxy data on instance
  var keys = Object.keys(data);
  var props = vm.$options.props;
  var methods = vm.$options.methods;
  var i = keys.length;
  while (i--) {
    var key = keys[i];
    {
      if (methods && hasOwn(methods, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a data property."),
          vm
        );
      }
    }
    if (props && hasOwn(props, key)) {
      warn(
        "The data property \"" + key + "\" is already declared as a prop. " +
        "Use prop default value instead.",
        vm
      );
    } else if (!isReserved(key)) {
      proxy(vm, "_data", key);
    }
  }
  // observe data
  observe(data, true /* asRootData */);
}

function getData (data, vm) {
  // #7573 disable dep collection when invoking data getters
  pushTarget();
  try {
    return data.call(vm, vm)
  } catch (e) {
    handleError(e, vm, "data()");
    return {}
  } finally {
    popTarget();
  }
}

var computedWatcherOptions = { lazy: true };

function initComputed (vm, computed) {
  // $flow-disable-line
  var watchers = vm._computedWatchers = Object.create(null);
  // computed properties are just getters during SSR
  var isSSR = isServerRendering();

  for (var key in computed) {
    var userDef = computed[key];
    var getter = typeof userDef === 'function' ? userDef : userDef.get;
    if (getter == null) {
      warn(
        ("Getter is missing for computed property \"" + key + "\"."),
        vm
      );
    }

    if (!isSSR) {
      // create internal watcher for the computed property.
      watchers[key] = new Watcher(
        vm,
        getter || noop,
        noop,
        computedWatcherOptions
      );
    }

    // component-defined computed properties are already defined on the
    // component prototype. We only need to define computed properties defined
    // at instantiation here.
    if (!(key in vm)) {
      defineComputed(vm, key, userDef);
    } else {
      if (key in vm.$data) {
        warn(("The computed property \"" + key + "\" is already defined in data."), vm);
      } else if (vm.$options.props && key in vm.$options.props) {
        warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
      }
    }
  }
}

function defineComputed (
  target,
  key,
  userDef
) {
  var shouldCache = !isServerRendering();
  if (typeof userDef === 'function') {
    sharedPropertyDefinition.get = shouldCache
      ? createComputedGetter(key)
      : createGetterInvoker(userDef);
    sharedPropertyDefinition.set = noop;
  } else {
    sharedPropertyDefinition.get = userDef.get
      ? shouldCache && userDef.cache !== false
        ? createComputedGetter(key)
        : createGetterInvoker(userDef.get)
      : noop;
    sharedPropertyDefinition.set = userDef.set || noop;
  }
  if (sharedPropertyDefinition.set === noop) {
    sharedPropertyDefinition.set = function () {
      warn(
        ("Computed property \"" + key + "\" was assigned to but it has no setter."),
        this
      );
    };
  }
  Object.defineProperty(target, key, sharedPropertyDefinition);
}

function createComputedGetter (key) {
  return function computedGetter () {
    var watcher = this._computedWatchers && this._computedWatchers[key];
    if (watcher) {
      if (watcher.dirty) {
        watcher.evaluate();
      }
      if (Dep.target) {
        watcher.depend();
      }
      return watcher.value
    }
  }
}

function createGetterInvoker(fn) {
  return function computedGetter () {
    return fn.call(this, this)
  }
}

function initMethods (vm, methods) {
  var props = vm.$options.props;
  for (var key in methods) {
    {
      if (typeof methods[key] !== 'function') {
        warn(
          "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
          "Did you reference the function correctly?",
          vm
        );
      }
      if (props && hasOwn(props, key)) {
        warn(
          ("Method \"" + key + "\" has already been defined as a prop."),
          vm
        );
      }
      if ((key in vm) && isReserved(key)) {
        warn(
          "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
          "Avoid defining component methods that start with _ or $."
        );
      }
    }
    vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
  }
}

function initWatch (vm, watch) {
  for (var key in watch) {
    var handler = watch[key];
    if (Array.isArray(handler)) {
      for (var i = 0; i < handler.length; i++) {
        createWatcher(vm, key, handler[i]);
      }
    } else {
      createWatcher(vm, key, handler);
    }
  }
}

function createWatcher (
  vm,
  expOrFn,
  handler,
  options
) {
  if (isPlainObject(handler)) {
    options = handler;
    handler = handler.handler;
  }
  if (typeof handler === 'string') {
    handler = vm[handler];
  }
  return vm.$watch(expOrFn, handler, options)
}

function stateMixin (Vue) {
  // flow somehow has problems with directly declared definition object
  // when using Object.defineProperty, so we have to procedurally build up
  // the object here.
  var dataDef = {};
  dataDef.get = function () { return this._data };
  var propsDef = {};
  propsDef.get = function () { return this._props };
  {
    dataDef.set = function () {
      warn(
        'Avoid replacing instance root $data. ' +
        'Use nested data properties instead.',
        this
      );
    };
    propsDef.set = function () {
      warn("$props is readonly.", this);
    };
  }
  Object.defineProperty(Vue.prototype, '$data', dataDef);
  Object.defineProperty(Vue.prototype, '$props', propsDef);

  Vue.prototype.$set = set;
  Vue.prototype.$delete = del;

  Vue.prototype.$watch = function (
    expOrFn,
    cb,
    options
  ) {
    var vm = this;
    if (isPlainObject(cb)) {
      return createWatcher(vm, expOrFn, cb, options)
    }
    options = options || {};
    options.user = true;
    var watcher = new Watcher(vm, expOrFn, cb, options);
    if (options.immediate) {
      try {
        cb.call(vm, watcher.value);
      } catch (error) {
        handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));
      }
    }
    return function unwatchFn () {
      watcher.teardown();
    }
  };
}

/*  */

var uid$3 = 0;

function initMixin (Vue) {
  Vue.prototype._init = function (options) {
    var vm = this;
    // a uid
    vm._uid = uid$3++;

    var startTag, endTag;
    /* istanbul ignore if */
    if (config.performance && mark) {
      startTag = "vue-perf-start:" + (vm._uid);
      endTag = "vue-perf-end:" + (vm._uid);
      mark(startTag);
    }

    // a flag to avoid this being observed
    vm._isVue = true;
    // merge options
    if (options && options._isComponent) {
      // optimize internal component instantiation
      // since dynamic options merging is pretty slow, and none of the
      // internal component options needs special treatment.
      initInternalComponent(vm, options);
    } else {
      vm.$options = mergeOptions(
        resolveConstructorOptions(vm.constructor),
        options || {},
        vm
      );
    }
    /* istanbul ignore else */
    {
      initProxy(vm);
    }
    // expose real self
    vm._self = vm;
    initLifecycle(vm);
    initEvents(vm);
    initRender(vm);
    callHook(vm, 'beforeCreate');
    initInjections(vm); // resolve injections before data/props
    initState(vm);
    initProvide(vm); // resolve provide after data/props
    callHook(vm, 'created');

    /* istanbul ignore if */
    if (config.performance && mark) {
      vm._name = formatComponentName(vm, false);
      mark(endTag);
      measure(("vue " + (vm._name) + " init"), startTag, endTag);
    }

    if (vm.$options.el) {
      vm.$mount(vm.$options.el);
    }
  };
}

function initInternalComponent (vm, options) {
  var opts = vm.$options = Object.create(vm.constructor.options);
  // doing this because it's faster than dynamic enumeration.
  var parentVnode = options._parentVnode;
  opts.parent = options.parent;
  opts._parentVnode = parentVnode;

  var vnodeComponentOptions = parentVnode.componentOptions;
  opts.propsData = vnodeComponentOptions.propsData;
  opts._parentListeners = vnodeComponentOptions.listeners;
  opts._renderChildren = vnodeComponentOptions.children;
  opts._componentTag = vnodeComponentOptions.tag;

  if (options.render) {
    opts.render = options.render;
    opts.staticRenderFns = options.staticRenderFns;
  }
}

function resolveConstructorOptions (Ctor) {
  var options = Ctor.options;
  if (Ctor.super) {
    var superOptions = resolveConstructorOptions(Ctor.super);
    var cachedSuperOptions = Ctor.superOptions;
    if (superOptions !== cachedSuperOptions) {
      // super option changed,
      // need to resolve new options.
      Ctor.superOptions = superOptions;
      // check if there are any late-modified/attached options (#4976)
      var modifiedOptions = resolveModifiedOptions(Ctor);
      // update base extend options
      if (modifiedOptions) {
        extend(Ctor.extendOptions, modifiedOptions);
      }
      options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
      if (options.name) {
        options.components[options.name] = Ctor;
      }
    }
  }
  return options
}

function resolveModifiedOptions (Ctor) {
  var modified;
  var latest = Ctor.options;
  var sealed = Ctor.sealedOptions;
  for (var key in latest) {
    if (latest[key] !== sealed[key]) {
      if (!modified) { modified = {}; }
      modified[key] = latest[key];
    }
  }
  return modified
}

function Vue (options) {
  if (!(this instanceof Vue)
  ) {
    warn('Vue is a constructor and should be called with the `new` keyword');
  }
  this._init(options);
}

initMixin(Vue);
stateMixin(Vue);
eventsMixin(Vue);
lifecycleMixin(Vue);
renderMixin(Vue);

/*  */

function initUse (Vue) {
  Vue.use = function (plugin) {
    var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
    if (installedPlugins.indexOf(plugin) > -1) {
      return this
    }

    // additional parameters
    var args = toArray(arguments, 1);
    args.unshift(this);
    if (typeof plugin.install === 'function') {
      plugin.install.apply(plugin, args);
    } else if (typeof plugin === 'function') {
      plugin.apply(null, args);
    }
    installedPlugins.push(plugin);
    return this
  };
}

/*  */

function initMixin$1 (Vue) {
  Vue.mixin = function (mixin) {
    this.options = mergeOptions(this.options, mixin);
    return this
  };
}

/*  */

function initExtend (Vue) {
  /**
   * Each instance constructor, including Vue, has a unique
   * cid. This enables us to create wrapped "child
   * constructors" for prototypal inheritance and cache them.
   */
  Vue.cid = 0;
  var cid = 1;

  /**
   * Class inheritance
   */
  Vue.extend = function (extendOptions) {
    extendOptions = extendOptions || {};
    var Super = this;
    var SuperId = Super.cid;
    var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
    if (cachedCtors[SuperId]) {
      return cachedCtors[SuperId]
    }

    var name = extendOptions.name || Super.options.name;
    if (name) {
      validateComponentName(name);
    }

    var Sub = function VueComponent (options) {
      this._init(options);
    };
    Sub.prototype = Object.create(Super.prototype);
    Sub.prototype.constructor = Sub;
    Sub.cid = cid++;
    Sub.options = mergeOptions(
      Super.options,
      extendOptions
    );
    Sub['super'] = Super;

    // For props and computed properties, we define the proxy getters on
    // the Vue instances at extension time, on the extended prototype. This
    // avoids Object.defineProperty calls for each instance created.
    if (Sub.options.props) {
      initProps$1(Sub);
    }
    if (Sub.options.computed) {
      initComputed$1(Sub);
    }

    // allow further extension/mixin/plugin usage
    Sub.extend = Super.extend;
    Sub.mixin = Super.mixin;
    Sub.use = Super.use;

    // create asset registers, so extended classes
    // can have their private assets too.
    ASSET_TYPES.forEach(function (type) {
      Sub[type] = Super[type];
    });
    // enable recursive self-lookup
    if (name) {
      Sub.options.components[name] = Sub;
    }

    // keep a reference to the super options at extension time.
    // later at instantiation we can check if Super's options have
    // been updated.
    Sub.superOptions = Super.options;
    Sub.extendOptions = extendOptions;
    Sub.sealedOptions = extend({}, Sub.options);

    // cache constructor
    cachedCtors[SuperId] = Sub;
    return Sub
  };
}

function initProps$1 (Comp) {
  var props = Comp.options.props;
  for (var key in props) {
    proxy(Comp.prototype, "_props", key);
  }
}

function initComputed$1 (Comp) {
  var computed = Comp.options.computed;
  for (var key in computed) {
    defineComputed(Comp.prototype, key, computed[key]);
  }
}

/*  */

function initAssetRegisters (Vue) {
  /**
   * Create asset registration methods.
   */
  ASSET_TYPES.forEach(function (type) {
    Vue[type] = function (
      id,
      definition
    ) {
      if (!definition) {
        return this.options[type + 's'][id]
      } else {
        /* istanbul ignore if */
        if (type === 'component') {
          validateComponentName(id);
        }
        if (type === 'component' && isPlainObject(definition)) {
          definition.name = definition.name || id;
          definition = this.options._base.extend(definition);
        }
        if (type === 'directive' && typeof definition === 'function') {
          definition = { bind: definition, update: definition };
        }
        this.options[type + 's'][id] = definition;
        return definition
      }
    };
  });
}

/*  */



function getComponentName (opts) {
  return opts && (opts.Ctor.options.name || opts.tag)
}

function matches (pattern, name) {
  if (Array.isArray(pattern)) {
    return pattern.indexOf(name) > -1
  } else if (typeof pattern === 'string') {
    return pattern.split(',').indexOf(name) > -1
  } else if (isRegExp(pattern)) {
    return pattern.test(name)
  }
  /* istanbul ignore next */
  return false
}

function pruneCache (keepAliveInstance, filter) {
  var cache = keepAliveInstance.cache;
  var keys = keepAliveInstance.keys;
  var _vnode = keepAliveInstance._vnode;
  for (var key in cache) {
    var cachedNode = cache[key];
    if (cachedNode) {
      var name = getComponentName(cachedNode.componentOptions);
      if (name && !filter(name)) {
        pruneCacheEntry(cache, key, keys, _vnode);
      }
    }
  }
}

function pruneCacheEntry (
  cache,
  key,
  keys,
  current
) {
  var cached$$1 = cache[key];
  if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
    cached$$1.componentInstance.$destroy();
  }
  cache[key] = null;
  remove(keys, key);
}

var patternTypes = [String, RegExp, Array];

var KeepAlive = {
  name: 'keep-alive',
  abstract: true,

  props: {
    include: patternTypes,
    exclude: patternTypes,
    max: [String, Number]
  },

  created: function created () {
    this.cache = Object.create(null);
    this.keys = [];
  },

  destroyed: function destroyed () {
    for (var key in this.cache) {
      pruneCacheEntry(this.cache, key, this.keys);
    }
  },

  mounted: function mounted () {
    var this$1 = this;

    this.$watch('include', function (val) {
      pruneCache(this$1, function (name) { return matches(val, name); });
    });
    this.$watch('exclude', function (val) {
      pruneCache(this$1, function (name) { return !matches(val, name); });
    });
  },

  render: function render () {
    var slot = this.$slots.default;
    var vnode = getFirstComponentChild(slot);
    var componentOptions = vnode && vnode.componentOptions;
    if (componentOptions) {
      // check pattern
      var name = getComponentName(componentOptions);
      var ref = this;
      var include = ref.include;
      var exclude = ref.exclude;
      if (
        // not included
        (include && (!name || !matches(include, name))) ||
        // excluded
        (exclude && name && matches(exclude, name))
      ) {
        return vnode
      }

      var ref$1 = this;
      var cache = ref$1.cache;
      var keys = ref$1.keys;
      var key = vnode.key == null
        // same constructor may get registered as different local components
        // so cid alone is not enough (#3269)
        ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
        : vnode.key;
      if (cache[key]) {
        vnode.componentInstance = cache[key].componentInstance;
        // make current key freshest
        remove(keys, key);
        keys.push(key);
      } else {
        cache[key] = vnode;
        keys.push(key);
        // prune oldest entry
        if (this.max && keys.length > parseInt(this.max)) {
          pruneCacheEntry(cache, keys[0], keys, this._vnode);
        }
      }

      vnode.data.keepAlive = true;
    }
    return vnode || (slot && slot[0])
  }
};

var builtInComponents = {
  KeepAlive: KeepAlive
};

/*  */

function initGlobalAPI (Vue) {
  // config
  var configDef = {};
  configDef.get = function () { return config; };
  {
    configDef.set = function () {
      warn(
        'Do not replace the Vue.config object, set individual fields instead.'
      );
    };
  }
  Object.defineProperty(Vue, 'config', configDef);

  // exposed util methods.
  // NOTE: these are not considered part of the public API - avoid relying on
  // them unless you are aware of the risk.
  Vue.util = {
    warn: warn,
    extend: extend,
    mergeOptions: mergeOptions,
    defineReactive: defineReactive$$1
  };

  Vue.set = set;
  Vue.delete = del;
  Vue.nextTick = nextTick;

  // 2.6 explicit observable API
  Vue.observable = function (obj) {
    observe(obj);
    return obj
  };

  Vue.options = Object.create(null);
  ASSET_TYPES.forEach(function (type) {
    Vue.options[type + 's'] = Object.create(null);
  });

  // this is used to identify the "base" constructor to extend all plain-object
  // components with in Weex's multi-instance scenarios.
  Vue.options._base = Vue;

  extend(Vue.options.components, builtInComponents);

  initUse(Vue);
  initMixin$1(Vue);
  initExtend(Vue);
  initAssetRegisters(Vue);
}

initGlobalAPI(Vue);

Object.defineProperty(Vue.prototype, '$isServer', {
  get: isServerRendering
});

Object.defineProperty(Vue.prototype, '$ssrContext', {
  get: function get () {
    /* istanbul ignore next */
    return this.$vnode && this.$vnode.ssrContext
  }
});

// expose FunctionalRenderContext for ssr runtime helper installation
Object.defineProperty(Vue, 'FunctionalRenderContext', {
  value: FunctionalRenderContext
});

Vue.version = '2.6.10';

/*  */

// these are reserved for web because they are directly compiled away
// during template compilation
var isReservedAttr = makeMap('style,class');

// attributes that should be using props for binding
var acceptValue = makeMap('input,textarea,option,select,progress');
var mustUseProp = function (tag, type, attr) {
  return (
    (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
    (attr === 'selected' && tag === 'option') ||
    (attr === 'checked' && tag === 'input') ||
    (attr === 'muted' && tag === 'video')
  )
};

var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

var convertEnumeratedValue = function (key, value) {
  return isFalsyAttrValue(value) || value === 'false'
    ? 'false'
    // allow arbitrary string value for contenteditable
    : key === 'contenteditable' && isValidContentEditableValue(value)
      ? value
      : 'true'
};

var isBooleanAttr = makeMap(
  'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
  'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
  'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
  'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
  'required,reversed,scoped,seamless,selected,sortable,translate,' +
  'truespeed,typemustmatch,visible'
);

var xlinkNS = 'http://www.w3.org/1999/xlink';

var isXlink = function (name) {
  return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
};

var getXlinkProp = function (name) {
  return isXlink(name) ? name.slice(6, name.length) : ''
};

var isFalsyAttrValue = function (val) {
  return val == null || val === false
};

/*  */

function genClassForVnode (vnode) {
  var data = vnode.data;
  var parentNode = vnode;
  var childNode = vnode;
  while (isDef(childNode.componentInstance)) {
    childNode = childNode.componentInstance._vnode;
    if (childNode && childNode.data) {
      data = mergeClassData(childNode.data, data);
    }
  }
  while (isDef(parentNode = parentNode.parent)) {
    if (parentNode && parentNode.data) {
      data = mergeClassData(data, parentNode.data);
    }
  }
  return renderClass(data.staticClass, data.class)
}

function mergeClassData (child, parent) {
  return {
    staticClass: concat(child.staticClass, parent.staticClass),
    class: isDef(child.class)
      ? [child.class, parent.class]
      : parent.class
  }
}

function renderClass (
  staticClass,
  dynamicClass
) {
  if (isDef(staticClass) || isDef(dynamicClass)) {
    return concat(staticClass, stringifyClass(dynamicClass))
  }
  /* istanbul ignore next */
  return ''
}

function concat (a, b) {
  return a ? b ? (a + ' ' + b) : a : (b || '')
}

function stringifyClass (value) {
  if (Array.isArray(value)) {
    return stringifyArray(value)
  }
  if (isObject(value)) {
    return stringifyObject(value)
  }
  if (typeof value === 'string') {
    return value
  }
  /* istanbul ignore next */
  return ''
}

function stringifyArray (value) {
  var res = '';
  var stringified;
  for (var i = 0, l = value.length; i < l; i++) {
    if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
      if (res) { res += ' '; }
      res += stringified;
    }
  }
  return res
}

function stringifyObject (value) {
  var res = '';
  for (var key in value) {
    if (value[key]) {
      if (res) { res += ' '; }
      res += key;
    }
  }
  return res
}

/*  */

var namespaceMap = {
  svg: 'http://www.w3.org/2000/svg',
  math: 'http://www.w3.org/1998/Math/MathML'
};

var isHTMLTag = makeMap(
  'html,body,base,head,link,meta,style,title,' +
  'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
  'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
  'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
  's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
  'embed,object,param,source,canvas,script,noscript,del,ins,' +
  'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
  'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
  'output,progress,select,textarea,' +
  'details,dialog,menu,menuitem,summary,' +
  'content,element,shadow,template,blockquote,iframe,tfoot'
);

// this map is intentionally selective, only covering SVG elements that may
// contain child elements.
var isSVG = makeMap(
  'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
  'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
  'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
  true
);

var isPreTag = function (tag) { return tag === 'pre'; };

var isReservedTag = function (tag) {
  return isHTMLTag(tag) || isSVG(tag)
};

function getTagNamespace (tag) {
  if (isSVG(tag)) {
    return 'svg'
  }
  // basic support for MathML
  // note it doesn't support other MathML elements being component roots
  if (tag === 'math') {
    return 'math'
  }
}

var unknownElementCache = Object.create(null);
function isUnknownElement (tag) {
  /* istanbul ignore if */
  if (!inBrowser) {
    return true
  }
  if (isReservedTag(tag)) {
    return false
  }
  tag = tag.toLowerCase();
  /* istanbul ignore if */
  if (unknownElementCache[tag] != null) {
    return unknownElementCache[tag]
  }
  var el = document.createElement(tag);
  if (tag.indexOf('-') > -1) {
    // http://stackoverflow.com/a/28210364/1070244
    return (unknownElementCache[tag] = (
      el.constructor === window.HTMLUnknownElement ||
      el.constructor === window.HTMLElement
    ))
  } else {
    return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
  }
}

var isTextInputType = makeMap('text,number,password,search,email,tel,url');

/*  */

/**
 * Query an element selector if it's not an element already.
 */
function query (el) {
  if (typeof el === 'string') {
    var selected = document.querySelector(el);
    if (!selected) {
      warn(
        'Cannot find element: ' + el
      );
      return document.createElement('div')
    }
    return selected
  } else {
    return el
  }
}

/*  */

function createElement$1 (tagName, vnode) {
  var elm = document.createElement(tagName);
  if (tagName !== 'select') {
    return elm
  }
  // false or null will remove the attribute but undefined will not
  if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
    elm.setAttribute('multiple', 'multiple');
  }
  return elm
}

function createElementNS (namespace, tagName) {
  return document.createElementNS(namespaceMap[namespace], tagName)
}

function createTextNode (text) {
  return document.createTextNode(text)
}

function createComment (text) {
  return document.createComment(text)
}

function insertBefore (parentNode, newNode, referenceNode) {
  parentNode.insertBefore(newNode, referenceNode);
}

function removeChild (node, child) {
  node.removeChild(child);
}

function appendChild (node, child) {
  node.appendChild(child);
}

function parentNode (node) {
  return node.parentNode
}

function nextSibling (node) {
  return node.nextSibling
}

function tagName (node) {
  return node.tagName
}

function setTextContent (node, text) {
  node.textContent = text;
}

function setStyleScope (node, scopeId) {
  node.setAttribute(scopeId, '');
}

var nodeOps = /*#__PURE__*/Object.freeze({
  createElement: createElement$1,
  createElementNS: createElementNS,
  createTextNode: createTextNode,
  createComment: createComment,
  insertBefore: insertBefore,
  removeChild: removeChild,
  appendChild: appendChild,
  parentNode: parentNode,
  nextSibling: nextSibling,
  tagName: tagName,
  setTextContent: setTextContent,
  setStyleScope: setStyleScope
});

/*  */

var ref = {
  create: function create (_, vnode) {
    registerRef(vnode);
  },
  update: function update (oldVnode, vnode) {
    if (oldVnode.data.ref !== vnode.data.ref) {
      registerRef(oldVnode, true);
      registerRef(vnode);
    }
  },
  destroy: function destroy (vnode) {
    registerRef(vnode, true);
  }
};

function registerRef (vnode, isRemoval) {
  var key = vnode.data.ref;
  if (!isDef(key)) { return }

  var vm = vnode.context;
  var ref = vnode.componentInstance || vnode.elm;
  var refs = vm.$refs;
  if (isRemoval) {
    if (Array.isArray(refs[key])) {
      remove(refs[key], ref);
    } else if (refs[key] === ref) {
      refs[key] = undefined;
    }
  } else {
    if (vnode.data.refInFor) {
      if (!Array.isArray(refs[key])) {
        refs[key] = [ref];
      } else if (refs[key].indexOf(ref) < 0) {
        // $flow-disable-line
        refs[key].push(ref);
      }
    } else {
      refs[key] = ref;
    }
  }
}

/**
 * Virtual DOM patching algorithm based on Snabbdom by
 * Simon Friis Vindum (@paldepind)
 * Licensed under the MIT License
 * https://github.com/paldepind/snabbdom/blob/master/LICENSE
 *
 * modified by Evan You (@yyx990803)
 *
 * Not type-checking this because this file is perf-critical and the cost
 * of making flow understand it is not worth it.
 */

var emptyNode = new VNode('', {}, []);

var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

function sameVnode (a, b) {
  return (
    a.key === b.key && (
      (
        a.tag === b.tag &&
        a.isComment === b.isComment &&
        isDef(a.data) === isDef(b.data) &&
        sameInputType(a, b)
      ) || (
        isTrue(a.isAsyncPlaceholder) &&
        a.asyncFactory === b.asyncFactory &&
        isUndef(b.asyncFactory.error)
      )
    )
  )
}

function sameInputType (a, b) {
  if (a.tag !== 'input') { return true }
  var i;
  var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
  var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
  return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
}

function createKeyToOldIdx (children, beginIdx, endIdx) {
  var i, key;
  var map = {};
  for (i = beginIdx; i <= endIdx; ++i) {
    key = children[i].key;
    if (isDef(key)) { map[key] = i; }
  }
  return map
}

function createPatchFunction (backend) {
  var i, j;
  var cbs = {};

  var modules = backend.modules;
  var nodeOps = backend.nodeOps;

  for (i = 0; i < hooks.length; ++i) {
    cbs[hooks[i]] = [];
    for (j = 0; j < modules.length; ++j) {
      if (isDef(modules[j][hooks[i]])) {
        cbs[hooks[i]].push(modules[j][hooks[i]]);
      }
    }
  }

  function emptyNodeAt (elm) {
    return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
  }

  function createRmCb (childElm, listeners) {
    function remove$$1 () {
      if (--remove$$1.listeners === 0) {
        removeNode(childElm);
      }
    }
    remove$$1.listeners = listeners;
    return remove$$1
  }

  function removeNode (el) {
    var parent = nodeOps.parentNode(el);
    // element may have already been removed due to v-html / v-text
    if (isDef(parent)) {
      nodeOps.removeChild(parent, el);
    }
  }

  function isUnknownElement$$1 (vnode, inVPre) {
    return (
      !inVPre &&
      !vnode.ns &&
      !(
        config.ignoredElements.length &&
        config.ignoredElements.some(function (ignore) {
          return isRegExp(ignore)
            ? ignore.test(vnode.tag)
            : ignore === vnode.tag
        })
      ) &&
      config.isUnknownElement(vnode.tag)
    )
  }

  var creatingElmInVPre = 0;

  function createElm (
    vnode,
    insertedVnodeQueue,
    parentElm,
    refElm,
    nested,
    ownerArray,
    index
  ) {
    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // This vnode was used in a previous render!
      // now it's used as a new node, overwriting its elm would cause
      // potential patch errors down the road when it's used as an insertion
      // reference node. Instead, we clone the node on-demand before creating
      // associated DOM element for it.
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    vnode.isRootInsert = !nested; // for transition enter check
    if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
      return
    }

    var data = vnode.data;
    var children = vnode.children;
    var tag = vnode.tag;
    if (isDef(tag)) {
      {
        if (data && data.pre) {
          creatingElmInVPre++;
        }
        if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
          warn(
            'Unknown custom element: <' + tag + '> - did you ' +
            'register the component correctly? For recursive components, ' +
            'make sure to provide the "name" option.',
            vnode.context
          );
        }
      }

      vnode.elm = vnode.ns
        ? nodeOps.createElementNS(vnode.ns, tag)
        : nodeOps.createElement(tag, vnode);
      setScope(vnode);

      /* istanbul ignore if */
      {
        createChildren(vnode, children, insertedVnodeQueue);
        if (isDef(data)) {
          invokeCreateHooks(vnode, insertedVnodeQueue);
        }
        insert(parentElm, vnode.elm, refElm);
      }

      if (data && data.pre) {
        creatingElmInVPre--;
      }
    } else if (isTrue(vnode.isComment)) {
      vnode.elm = nodeOps.createComment(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    } else {
      vnode.elm = nodeOps.createTextNode(vnode.text);
      insert(parentElm, vnode.elm, refElm);
    }
  }

  function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i = vnode.data;
    if (isDef(i)) {
      var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
      if (isDef(i = i.hook) && isDef(i = i.init)) {
        i(vnode, false /* hydrating */);
      }
      // after calling the init hook, if the vnode is a child component
      // it should've created a child instance and mounted it. the child
      // component also has set the placeholder vnode's elm.
      // in that case we can just return the element and be done.
      if (isDef(vnode.componentInstance)) {
        initComponent(vnode, insertedVnodeQueue);
        insert(parentElm, vnode.elm, refElm);
        if (isTrue(isReactivated)) {
          reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
        }
        return true
      }
    }
  }

  function initComponent (vnode, insertedVnodeQueue) {
    if (isDef(vnode.data.pendingInsert)) {
      insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
      vnode.data.pendingInsert = null;
    }
    vnode.elm = vnode.componentInstance.$el;
    if (isPatchable(vnode)) {
      invokeCreateHooks(vnode, insertedVnodeQueue);
      setScope(vnode);
    } else {
      // empty component root.
      // skip all element-related modules except for ref (#3455)
      registerRef(vnode);
      // make sure to invoke the insert hook
      insertedVnodeQueue.push(vnode);
    }
  }

  function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
    var i;
    // hack for #4339: a reactivated component with inner transition
    // does not trigger because the inner node's created hooks are not called
    // again. It's not ideal to involve module-specific logic in here but
    // there doesn't seem to be a better way to do it.
    var innerNode = vnode;
    while (innerNode.componentInstance) {
      innerNode = innerNode.componentInstance._vnode;
      if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
        for (i = 0; i < cbs.activate.length; ++i) {
          cbs.activate[i](emptyNode, innerNode);
        }
        insertedVnodeQueue.push(innerNode);
        break
      }
    }
    // unlike a newly created component,
    // a reactivated keep-alive component doesn't insert itself
    insert(parentElm, vnode.elm, refElm);
  }

  function insert (parent, elm, ref$$1) {
    if (isDef(parent)) {
      if (isDef(ref$$1)) {
        if (nodeOps.parentNode(ref$$1) === parent) {
          nodeOps.insertBefore(parent, elm, ref$$1);
        }
      } else {
        nodeOps.appendChild(parent, elm);
      }
    }
  }

  function createChildren (vnode, children, insertedVnodeQueue) {
    if (Array.isArray(children)) {
      {
        checkDuplicateKeys(children);
      }
      for (var i = 0; i < children.length; ++i) {
        createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
      }
    } else if (isPrimitive(vnode.text)) {
      nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
    }
  }

  function isPatchable (vnode) {
    while (vnode.componentInstance) {
      vnode = vnode.componentInstance._vnode;
    }
    return isDef(vnode.tag)
  }

  function invokeCreateHooks (vnode, insertedVnodeQueue) {
    for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
      cbs.create[i$1](emptyNode, vnode);
    }
    i = vnode.data.hook; // Reuse variable
    if (isDef(i)) {
      if (isDef(i.create)) { i.create(emptyNode, vnode); }
      if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
    }
  }

  // set scope id attribute for scoped CSS.
  // this is implemented as a special case to avoid the overhead
  // of going through the normal attribute patching process.
  function setScope (vnode) {
    var i;
    if (isDef(i = vnode.fnScopeId)) {
      nodeOps.setStyleScope(vnode.elm, i);
    } else {
      var ancestor = vnode;
      while (ancestor) {
        if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
          nodeOps.setStyleScope(vnode.elm, i);
        }
        ancestor = ancestor.parent;
      }
    }
    // for slot content they should also get the scopeId from the host instance.
    if (isDef(i = activeInstance) &&
      i !== vnode.context &&
      i !== vnode.fnContext &&
      isDef(i = i.$options._scopeId)
    ) {
      nodeOps.setStyleScope(vnode.elm, i);
    }
  }

  function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
    for (; startIdx <= endIdx; ++startIdx) {
      createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
    }
  }

  function invokeDestroyHook (vnode) {
    var i, j;
    var data = vnode.data;
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
      for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
    }
    if (isDef(i = vnode.children)) {
      for (j = 0; j < vnode.children.length; ++j) {
        invokeDestroyHook(vnode.children[j]);
      }
    }
  }

  function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
    for (; startIdx <= endIdx; ++startIdx) {
      var ch = vnodes[startIdx];
      if (isDef(ch)) {
        if (isDef(ch.tag)) {
          removeAndInvokeRemoveHook(ch);
          invokeDestroyHook(ch);
        } else { // Text node
          removeNode(ch.elm);
        }
      }
    }
  }

  function removeAndInvokeRemoveHook (vnode, rm) {
    if (isDef(rm) || isDef(vnode.data)) {
      var i;
      var listeners = cbs.remove.length + 1;
      if (isDef(rm)) {
        // we have a recursively passed down rm callback
        // increase the listeners count
        rm.listeners += listeners;
      } else {
        // directly removing
        rm = createRmCb(vnode.elm, listeners);
      }
      // recursively invoke hooks on child component root node
      if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
        removeAndInvokeRemoveHook(i, rm);
      }
      for (i = 0; i < cbs.remove.length; ++i) {
        cbs.remove[i](vnode, rm);
      }
      if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
        i(vnode, rm);
      } else {
        rm();
      }
    } else {
      removeNode(vnode.elm);
    }
  }

  function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
    var oldStartIdx = 0;
    var newStartIdx = 0;
    var oldEndIdx = oldCh.length - 1;
    var oldStartVnode = oldCh[0];
    var oldEndVnode = oldCh[oldEndIdx];
    var newEndIdx = newCh.length - 1;
    var newStartVnode = newCh[0];
    var newEndVnode = newCh[newEndIdx];
    var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

    // removeOnly is a special flag used only by <transition-group>
    // to ensure removed elements stay in correct relative positions
    // during leaving transitions
    var canMove = !removeOnly;

    {
      checkDuplicateKeys(newCh);
    }

    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
      if (isUndef(oldStartVnode)) {
        oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
      } else if (isUndef(oldEndVnode)) {
        oldEndVnode = oldCh[--oldEndIdx];
      } else if (sameVnode(oldStartVnode, newStartVnode)) {
        patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        oldStartVnode = oldCh[++oldStartIdx];
        newStartVnode = newCh[++newStartIdx];
      } else if (sameVnode(oldEndVnode, newEndVnode)) {
        patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        oldEndVnode = oldCh[--oldEndIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
        patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
        canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
        oldStartVnode = oldCh[++oldStartIdx];
        newEndVnode = newCh[--newEndIdx];
      } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
        patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
        canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
        oldEndVnode = oldCh[--oldEndIdx];
        newStartVnode = newCh[++newStartIdx];
      } else {
        if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
        idxInOld = isDef(newStartVnode.key)
          ? oldKeyToIdx[newStartVnode.key]
          : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
        if (isUndef(idxInOld)) { // New element
          createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
        } else {
          vnodeToMove = oldCh[idxInOld];
          if (sameVnode(vnodeToMove, newStartVnode)) {
            patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
            oldCh[idxInOld] = undefined;
            canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
          } else {
            // same key but different element. treat as new element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          }
        }
        newStartVnode = newCh[++newStartIdx];
      }
    }
    if (oldStartIdx > oldEndIdx) {
      refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
      addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
    } else if (newStartIdx > newEndIdx) {
      removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
    }
  }

  function checkDuplicateKeys (children) {
    var seenKeys = {};
    for (var i = 0; i < children.length; i++) {
      var vnode = children[i];
      var key = vnode.key;
      if (isDef(key)) {
        if (seenKeys[key]) {
          warn(
            ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
            vnode.context
          );
        } else {
          seenKeys[key] = true;
        }
      }
    }
  }

  function findIdxInOld (node, oldCh, start, end) {
    for (var i = start; i < end; i++) {
      var c = oldCh[i];
      if (isDef(c) && sameVnode(node, c)) { return i }
    }
  }

  function patchVnode (
    oldVnode,
    vnode,
    insertedVnodeQueue,
    ownerArray,
    index,
    removeOnly
  ) {
    if (oldVnode === vnode) {
      return
    }

    if (isDef(vnode.elm) && isDef(ownerArray)) {
      // clone reused vnode
      vnode = ownerArray[index] = cloneVNode(vnode);
    }

    var elm = vnode.elm = oldVnode.elm;

    if (isTrue(oldVnode.isAsyncPlaceholder)) {
      if (isDef(vnode.asyncFactory.resolved)) {
        hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
      } else {
        vnode.isAsyncPlaceholder = true;
      }
      return
    }

    // reuse element for static trees.
    // note we only do this if the vnode is cloned -
    // if the new node is not cloned it means the render functions have been
    // reset by the hot-reload-api and we need to do a proper re-render.
    if (isTrue(vnode.isStatic) &&
      isTrue(oldVnode.isStatic) &&
      vnode.key === oldVnode.key &&
      (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
    ) {
      vnode.componentInstance = oldVnode.componentInstance;
      return
    }

    var i;
    var data = vnode.data;
    if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
      i(oldVnode, vnode);
    }

    var oldCh = oldVnode.children;
    var ch = vnode.children;
    if (isDef(data) && isPatchable(vnode)) {
      for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
      if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
    }
    if (isUndef(vnode.text)) {
      if (isDef(oldCh) && isDef(ch)) {
        if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
      } else if (isDef(ch)) {
        {
          checkDuplicateKeys(ch);
        }
        if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
        addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
      } else if (isDef(oldCh)) {
        removeVnodes(elm, oldCh, 0, oldCh.length - 1);
      } else if (isDef(oldVnode.text)) {
        nodeOps.setTextContent(elm, '');
      }
    } else if (oldVnode.text !== vnode.text) {
      nodeOps.setTextContent(elm, vnode.text);
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
    }
  }

  function invokeInsertHook (vnode, queue, initial) {
    // delay insert hooks for component root nodes, invoke them after the
    // element is really inserted
    if (isTrue(initial) && isDef(vnode.parent)) {
      vnode.parent.data.pendingInsert = queue;
    } else {
      for (var i = 0; i < queue.length; ++i) {
        queue[i].data.hook.insert(queue[i]);
      }
    }
  }

  var hydrationBailed = false;
  // list of modules that can skip create hook during hydration because they
  // are already rendered on the client or has no need for initialization
  // Note: style is excluded because it relies on initial clone for future
  // deep updates (#7063).
  var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

  // Note: this is a browser-only function so we can assume elms are DOM nodes.
  function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
    var i;
    var tag = vnode.tag;
    var data = vnode.data;
    var children = vnode.children;
    inVPre = inVPre || (data && data.pre);
    vnode.elm = elm;

    if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
      vnode.isAsyncPlaceholder = true;
      return true
    }
    // assert node match
    {
      if (!assertNodeMatch(elm, vnode, inVPre)) {
        return false
      }
    }
    if (isDef(data)) {
      if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
      if (isDef(i = vnode.componentInstance)) {
        // child component. it should have hydrated its own tree.
        initComponent(vnode, insertedVnodeQueue);
        return true
      }
    }
    if (isDef(tag)) {
      if (isDef(children)) {
        // empty element, allow client to pick up and populate children
        if (!elm.hasChildNodes()) {
          createChildren(vnode, children, insertedVnodeQueue);
        } else {
          // v-html and domProps: innerHTML
          if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
            if (i !== elm.innerHTML) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('server innerHTML: ', i);
                console.warn('client innerHTML: ', elm.innerHTML);
              }
              return false
            }
          } else {
            // iterate and compare children lists
            var childrenMatch = true;
            var childNode = elm.firstChild;
            for (var i$1 = 0; i$1 < children.length; i$1++) {
              if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                childrenMatch = false;
                break
              }
              childNode = childNode.nextSibling;
            }
            // if childNode is not null, it means the actual childNodes list is
            // longer than the virtual children list.
            if (!childrenMatch || childNode) {
              /* istanbul ignore if */
              if (typeof console !== 'undefined' &&
                !hydrationBailed
              ) {
                hydrationBailed = true;
                console.warn('Parent: ', elm);
                console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
              }
              return false
            }
          }
        }
      }
      if (isDef(data)) {
        var fullInvoke = false;
        for (var key in data) {
          if (!isRenderedModule(key)) {
            fullInvoke = true;
            invokeCreateHooks(vnode, insertedVnodeQueue);
            break
          }
        }
        if (!fullInvoke && data['class']) {
          // ensure collecting deps for deep class bindings for future updates
          traverse(data['class']);
        }
      }
    } else if (elm.data !== vnode.text) {
      elm.data = vnode.text;
    }
    return true
  }

  function assertNodeMatch (node, vnode, inVPre) {
    if (isDef(vnode.tag)) {
      return vnode.tag.indexOf('vue-component') === 0 || (
        !isUnknownElement$$1(vnode, inVPre) &&
        vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
      )
    } else {
      return node.nodeType === (vnode.isComment ? 8 : 3)
    }
  }

  return function patch (oldVnode, vnode, hydrating, removeOnly) {
    if (isUndef(vnode)) {
      if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
      return
    }

    var isInitialPatch = false;
    var insertedVnodeQueue = [];

    if (isUndef(oldVnode)) {
      // empty mount (likely as component), create new root element
      isInitialPatch = true;
      createElm(vnode, insertedVnodeQueue);
    } else {
      var isRealElement = isDef(oldVnode.nodeType);
      if (!isRealElement && sameVnode(oldVnode, vnode)) {
        // patch existing root node
        patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
      } else {
        if (isRealElement) {
          // mounting to a real element
          // check if this is server-rendered content and if we can perform
          // a successful hydration.
          if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
            oldVnode.removeAttribute(SSR_ATTR);
            hydrating = true;
          }
          if (isTrue(hydrating)) {
            if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
              invokeInsertHook(vnode, insertedVnodeQueue, true);
              return oldVnode
            } else {
              warn(
                'The client-side rendered virtual DOM tree is not matching ' +
                'server-rendered content. This is likely caused by incorrect ' +
                'HTML markup, for example nesting block-level elements inside ' +
                '<p>, or missing <tbody>. Bailing hydration and performing ' +
                'full client-side render.'
              );
            }
          }
          // either not server-rendered, or hydration failed.
          // create an empty node and replace it
          oldVnode = emptyNodeAt(oldVnode);
        }

        // replacing existing element
        var oldElm = oldVnode.elm;
        var parentElm = nodeOps.parentNode(oldElm);

        // create new node
        createElm(
          vnode,
          insertedVnodeQueue,
          // extremely rare edge case: do not insert if old element is in a
          // leaving transition. Only happens when combining transition +
          // keep-alive + HOCs. (#4590)
          oldElm._leaveCb ? null : parentElm,
          nodeOps.nextSibling(oldElm)
        );

        // update parent placeholder node element, recursively
        if (isDef(vnode.parent)) {
          var ancestor = vnode.parent;
          var patchable = isPatchable(vnode);
          while (ancestor) {
            for (var i = 0; i < cbs.destroy.length; ++i) {
              cbs.destroy[i](ancestor);
            }
            ancestor.elm = vnode.elm;
            if (patchable) {
              for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                cbs.create[i$1](emptyNode, ancestor);
              }
              // #6513
              // invoke insert hooks that may have been merged by create hooks.
              // e.g. for directives that uses the "inserted" hook.
              var insert = ancestor.data.hook.insert;
              if (insert.merged) {
                // start at index 1 to avoid re-invoking component mounted hook
                for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                  insert.fns[i$2]();
                }
              }
            } else {
              registerRef(ancestor);
            }
            ancestor = ancestor.parent;
          }
        }

        // destroy old node
        if (isDef(parentElm)) {
          removeVnodes(parentElm, [oldVnode], 0, 0);
        } else if (isDef(oldVnode.tag)) {
          invokeDestroyHook(oldVnode);
        }
      }
    }

    invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
    return vnode.elm
  }
}

/*  */

var directives = {
  create: updateDirectives,
  update: updateDirectives,
  destroy: function unbindDirectives (vnode) {
    updateDirectives(vnode, emptyNode);
  }
};

function updateDirectives (oldVnode, vnode) {
  if (oldVnode.data.directives || vnode.data.directives) {
    _update(oldVnode, vnode);
  }
}

function _update (oldVnode, vnode) {
  var isCreate = oldVnode === emptyNode;
  var isDestroy = vnode === emptyNode;
  var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
  var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

  var dirsWithInsert = [];
  var dirsWithPostpatch = [];

  var key, oldDir, dir;
  for (key in newDirs) {
    oldDir = oldDirs[key];
    dir = newDirs[key];
    if (!oldDir) {
      // new directive, bind
      callHook$1(dir, 'bind', vnode, oldVnode);
      if (dir.def && dir.def.inserted) {
        dirsWithInsert.push(dir);
      }
    } else {
      // existing directive, update
      dir.oldValue = oldDir.value;
      dir.oldArg = oldDir.arg;
      callHook$1(dir, 'update', vnode, oldVnode);
      if (dir.def && dir.def.componentUpdated) {
        dirsWithPostpatch.push(dir);
      }
    }
  }

  if (dirsWithInsert.length) {
    var callInsert = function () {
      for (var i = 0; i < dirsWithInsert.length; i++) {
        callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
      }
    };
    if (isCreate) {
      mergeVNodeHook(vnode, 'insert', callInsert);
    } else {
      callInsert();
    }
  }

  if (dirsWithPostpatch.length) {
    mergeVNodeHook(vnode, 'postpatch', function () {
      for (var i = 0; i < dirsWithPostpatch.length; i++) {
        callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
      }
    });
  }

  if (!isCreate) {
    for (key in oldDirs) {
      if (!newDirs[key]) {
        // no longer present, unbind
        callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
      }
    }
  }
}

var emptyModifiers = Object.create(null);

function normalizeDirectives$1 (
  dirs,
  vm
) {
  var res = Object.create(null);
  if (!dirs) {
    // $flow-disable-line
    return res
  }
  var i, dir;
  for (i = 0; i < dirs.length; i++) {
    dir = dirs[i];
    if (!dir.modifiers) {
      // $flow-disable-line
      dir.modifiers = emptyModifiers;
    }
    res[getRawDirName(dir)] = dir;
    dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
  }
  // $flow-disable-line
  return res
}

function getRawDirName (dir) {
  return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
}

function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
  var fn = dir.def && dir.def[hook];
  if (fn) {
    try {
      fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
    } catch (e) {
      handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
    }
  }
}

var baseModules = [
  ref,
  directives
];

/*  */

function updateAttrs (oldVnode, vnode) {
  var opts = vnode.componentOptions;
  if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
    return
  }
  if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
    return
  }
  var key, cur, old;
  var elm = vnode.elm;
  var oldAttrs = oldVnode.data.attrs || {};
  var attrs = vnode.data.attrs || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(attrs.__ob__)) {
    attrs = vnode.data.attrs = extend({}, attrs);
  }

  for (key in attrs) {
    cur = attrs[key];
    old = oldAttrs[key];
    if (old !== cur) {
      setAttr(elm, key, cur);
    }
  }
  // #4391: in IE9, setting type can reset value for input[type=radio]
  // #6666: IE/Edge forces progress value down to 1 before setting a max
  /* istanbul ignore if */
  if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
    setAttr(elm, 'value', attrs.value);
  }
  for (key in oldAttrs) {
    if (isUndef(attrs[key])) {
      if (isXlink(key)) {
        elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else if (!isEnumeratedAttr(key)) {
        elm.removeAttribute(key);
      }
    }
  }
}

function setAttr (el, key, value) {
  if (el.tagName.indexOf('-') > -1) {
    baseSetAttr(el, key, value);
  } else if (isBooleanAttr(key)) {
    // set attribute for blank value
    // e.g. <option disabled>Select one</option>
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // technically allowfullscreen is a boolean attribute for <iframe>,
      // but Flash expects a value of "true" when used on <embed> tag
      value = key === 'allowfullscreen' && el.tagName === 'EMBED'
        ? 'true'
        : key;
      el.setAttribute(key, value);
    }
  } else if (isEnumeratedAttr(key)) {
    el.setAttribute(key, convertEnumeratedValue(key, value));
  } else if (isXlink(key)) {
    if (isFalsyAttrValue(value)) {
      el.removeAttributeNS(xlinkNS, getXlinkProp(key));
    } else {
      el.setAttributeNS(xlinkNS, key, value);
    }
  } else {
    baseSetAttr(el, key, value);
  }
}

function baseSetAttr (el, key, value) {
  if (isFalsyAttrValue(value)) {
    el.removeAttribute(key);
  } else {
    // #7138: IE10 & 11 fires input event when setting placeholder on
    // <textarea>... block the first input event and remove the blocker
    // immediately.
    /* istanbul ignore if */
    if (
      isIE && !isIE9 &&
      el.tagName === 'TEXTAREA' &&
      key === 'placeholder' && value !== '' && !el.__ieph
    ) {
      var blocker = function (e) {
        e.stopImmediatePropagation();
        el.removeEventListener('input', blocker);
      };
      el.addEventListener('input', blocker);
      // $flow-disable-line
      el.__ieph = true; /* IE placeholder patched */
    }
    el.setAttribute(key, value);
  }
}

var attrs = {
  create: updateAttrs,
  update: updateAttrs
};

/*  */

function updateClass (oldVnode, vnode) {
  var el = vnode.elm;
  var data = vnode.data;
  var oldData = oldVnode.data;
  if (
    isUndef(data.staticClass) &&
    isUndef(data.class) && (
      isUndef(oldData) || (
        isUndef(oldData.staticClass) &&
        isUndef(oldData.class)
      )
    )
  ) {
    return
  }

  var cls = genClassForVnode(vnode);

  // handle transition classes
  var transitionClass = el._transitionClasses;
  if (isDef(transitionClass)) {
    cls = concat(cls, stringifyClass(transitionClass));
  }

  // set the class
  if (cls !== el._prevClass) {
    el.setAttribute('class', cls);
    el._prevClass = cls;
  }
}

var klass = {
  create: updateClass,
  update: updateClass
};

/*  */

var validDivisionCharRE = /[\w).+\-_$\]]/;

function parseFilters (exp) {
  var inSingle = false;
  var inDouble = false;
  var inTemplateString = false;
  var inRegex = false;
  var curly = 0;
  var square = 0;
  var paren = 0;
  var lastFilterIndex = 0;
  var c, prev, i, expression, filters;

  for (i = 0; i < exp.length; i++) {
    prev = c;
    c = exp.charCodeAt(i);
    if (inSingle) {
      if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
    } else if (inDouble) {
      if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
    } else if (inTemplateString) {
      if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
    } else if (inRegex) {
      if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
    } else if (
      c === 0x7C && // pipe
      exp.charCodeAt(i + 1) !== 0x7C &&
      exp.charCodeAt(i - 1) !== 0x7C &&
      !curly && !square && !paren
    ) {
      if (expression === undefined) {
        // first filter, end of expression
        lastFilterIndex = i + 1;
        expression = exp.slice(0, i).trim();
      } else {
        pushFilter();
      }
    } else {
      switch (c) {
        case 0x22: inDouble = true; break         // "
        case 0x27: inSingle = true; break         // '
        case 0x60: inTemplateString = true; break // `
        case 0x28: paren++; break                 // (
        case 0x29: paren--; break                 // )
        case 0x5B: square++; break                // [
        case 0x5D: square--; break                // ]
        case 0x7B: curly++; break                 // {
        case 0x7D: curly--; break                 // }
      }
      if (c === 0x2f) { // /
        var j = i - 1;
        var p = (void 0);
        // find first non-whitespace prev char
        for (; j >= 0; j--) {
          p = exp.charAt(j);
          if (p !== ' ') { break }
        }
        if (!p || !validDivisionCharRE.test(p)) {
          inRegex = true;
        }
      }
    }
  }

  if (expression === undefined) {
    expression = exp.slice(0, i).trim();
  } else if (lastFilterIndex !== 0) {
    pushFilter();
  }

  function pushFilter () {
    (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
    lastFilterIndex = i + 1;
  }

  if (filters) {
    for (i = 0; i < filters.length; i++) {
      expression = wrapFilter(expression, filters[i]);
    }
  }

  return expression
}

function wrapFilter (exp, filter) {
  var i = filter.indexOf('(');
  if (i < 0) {
    // _f: resolveFilter
    return ("_f(\"" + filter + "\")(" + exp + ")")
  } else {
    var name = filter.slice(0, i);
    var args = filter.slice(i + 1);
    return ("_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args))
  }
}

/*  */



/* eslint-disable no-unused-vars */
function baseWarn (msg, range) {
  console.error(("[Vue compiler]: " + msg));
}
/* eslint-enable no-unused-vars */

function pluckModuleFunction (
  modules,
  key
) {
  return modules
    ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
    : []
}

function addProp (el, name, value, range, dynamic) {
  (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

function addAttr (el, name, value, range, dynamic) {
  var attrs = dynamic
    ? (el.dynamicAttrs || (el.dynamicAttrs = []))
    : (el.attrs || (el.attrs = []));
  attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
  el.plain = false;
}

// add a raw attr (use this in preTransforms)
function addRawAttr (el, name, value, range) {
  el.attrsMap[name] = value;
  el.attrsList.push(rangeSetItem({ name: name, value: value }, range));
}

function addDirective (
  el,
  name,
  rawName,
  value,
  arg,
  isDynamicArg,
  modifiers,
  range
) {
  (el.directives || (el.directives = [])).push(rangeSetItem({
    name: name,
    rawName: rawName,
    value: value,
    arg: arg,
    isDynamicArg: isDynamicArg,
    modifiers: modifiers
  }, range));
  el.plain = false;
}

function prependModifierMarker (symbol, name, dynamic) {
  return dynamic
    ? ("_p(" + name + ",\"" + symbol + "\")")
    : symbol + name // mark the event as captured
}

function addHandler (
  el,
  name,
  value,
  modifiers,
  important,
  warn,
  range,
  dynamic
) {
  modifiers = modifiers || emptyObject;
  // warn prevent and passive modifier
  /* istanbul ignore if */
  if (
    warn &&
    modifiers.prevent && modifiers.passive
  ) {
    warn(
      'passive and prevent can\'t be used together. ' +
      'Passive handler can\'t prevent default event.',
      range
    );
  }

  // normalize click.right and click.middle since they don't actually fire
  // this is technically browser-specific, but at least for now browsers are
  // the only target envs that have right/middle clicks.
  if (modifiers.right) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
    } else if (name === 'click') {
      name = 'contextmenu';
      delete modifiers.right;
    }
  } else if (modifiers.middle) {
    if (dynamic) {
      name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
    } else if (name === 'click') {
      name = 'mouseup';
    }
  }

  // check capture modifier
  if (modifiers.capture) {
    delete modifiers.capture;
    name = prependModifierMarker('!', name, dynamic);
  }
  if (modifiers.once) {
    delete modifiers.once;
    name = prependModifierMarker('~', name, dynamic);
  }
  /* istanbul ignore if */
  if (modifiers.passive) {
    delete modifiers.passive;
    name = prependModifierMarker('&', name, dynamic);
  }

  var events;
  if (modifiers.native) {
    delete modifiers.native;
    events = el.nativeEvents || (el.nativeEvents = {});
  } else {
    events = el.events || (el.events = {});
  }

  var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);
  if (modifiers !== emptyObject) {
    newHandler.modifiers = modifiers;
  }

  var handlers = events[name];
  /* istanbul ignore if */
  if (Array.isArray(handlers)) {
    important ? handlers.unshift(newHandler) : handlers.push(newHandler);
  } else if (handlers) {
    events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
  } else {
    events[name] = newHandler;
  }

  el.plain = false;
}

function getRawBindingAttr (
  el,
  name
) {
  return el.rawAttrsMap[':' + name] ||
    el.rawAttrsMap['v-bind:' + name] ||
    el.rawAttrsMap[name]
}

function getBindingAttr (
  el,
  name,
  getStatic
) {
  var dynamicValue =
    getAndRemoveAttr(el, ':' + name) ||
    getAndRemoveAttr(el, 'v-bind:' + name);
  if (dynamicValue != null) {
    return parseFilters(dynamicValue)
  } else if (getStatic !== false) {
    var staticValue = getAndRemoveAttr(el, name);
    if (staticValue != null) {
      return JSON.stringify(staticValue)
    }
  }
}

// note: this only removes the attr from the Array (attrsList) so that it
// doesn't get processed by processAttrs.
// By default it does NOT remove it from the map (attrsMap) because the map is
// needed during codegen.
function getAndRemoveAttr (
  el,
  name,
  removeFromMap
) {
  var val;
  if ((val = el.attrsMap[name]) != null) {
    var list = el.attrsList;
    for (var i = 0, l = list.length; i < l; i++) {
      if (list[i].name === name) {
        list.splice(i, 1);
        break
      }
    }
  }
  if (removeFromMap) {
    delete el.attrsMap[name];
  }
  return val
}

function getAndRemoveAttrByRegex (
  el,
  name
) {
  var list = el.attrsList;
  for (var i = 0, l = list.length; i < l; i++) {
    var attr = list[i];
    if (name.test(attr.name)) {
      list.splice(i, 1);
      return attr
    }
  }
}

function rangeSetItem (
  item,
  range
) {
  if (range) {
    if (range.start != null) {
      item.start = range.start;
    }
    if (range.end != null) {
      item.end = range.end;
    }
  }
  return item
}

/*  */

/**
 * Cross-platform code generation for component v-model
 */
function genComponentModel (
  el,
  value,
  modifiers
) {
  var ref = modifiers || {};
  var number = ref.number;
  var trim = ref.trim;

  var baseValueExpression = '$$v';
  var valueExpression = baseValueExpression;
  if (trim) {
    valueExpression =
      "(typeof " + baseValueExpression + " === 'string'" +
      "? " + baseValueExpression + ".trim()" +
      ": " + baseValueExpression + ")";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }
  var assignment = genAssignmentCode(value, valueExpression);

  el.model = {
    value: ("(" + value + ")"),
    expression: JSON.stringify(value),
    callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
  };
}

/**
 * Cross-platform codegen helper for generating v-model value assignment code.
 */
function genAssignmentCode (
  value,
  assignment
) {
  var res = parseModel(value);
  if (res.key === null) {
    return (value + "=" + assignment)
  } else {
    return ("$set(" + (res.exp) + ", " + (res.key) + ", " + assignment + ")")
  }
}

/**
 * Parse a v-model expression into a base path and a final key segment.
 * Handles both dot-path and possible square brackets.
 *
 * Possible cases:
 *
 * - test
 * - test[key]
 * - test[test1[key]]
 * - test["a"][key]
 * - xxx.test[a[a].test1[key]]
 * - test.xxx.a["asa"][test1[key]]
 *
 */

var len, str, chr, index$1, expressionPos, expressionEndPos;



function parseModel (val) {
  // Fix https://github.com/vuejs/vue/pull/7730
  // allow v-model="obj.val " (trailing whitespace)
  val = val.trim();
  len = val.length;

  if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
    index$1 = val.lastIndexOf('.');
    if (index$1 > -1) {
      return {
        exp: val.slice(0, index$1),
        key: '"' + val.slice(index$1 + 1) + '"'
      }
    } else {
      return {
        exp: val,
        key: null
      }
    }
  }

  str = val;
  index$1 = expressionPos = expressionEndPos = 0;

  while (!eof()) {
    chr = next();
    /* istanbul ignore if */
    if (isStringStart(chr)) {
      parseString(chr);
    } else if (chr === 0x5B) {
      parseBracket(chr);
    }
  }

  return {
    exp: val.slice(0, expressionPos),
    key: val.slice(expressionPos + 1, expressionEndPos)
  }
}

function next () {
  return str.charCodeAt(++index$1)
}

function eof () {
  return index$1 >= len
}

function isStringStart (chr) {
  return chr === 0x22 || chr === 0x27
}

function parseBracket (chr) {
  var inBracket = 1;
  expressionPos = index$1;
  while (!eof()) {
    chr = next();
    if (isStringStart(chr)) {
      parseString(chr);
      continue
    }
    if (chr === 0x5B) { inBracket++; }
    if (chr === 0x5D) { inBracket--; }
    if (inBracket === 0) {
      expressionEndPos = index$1;
      break
    }
  }
}

function parseString (chr) {
  var stringQuote = chr;
  while (!eof()) {
    chr = next();
    if (chr === stringQuote) {
      break
    }
  }
}

/*  */

var warn$1;

// in some cases, the event used has to be determined at runtime
// so we used some reserved tokens during compile.
var RANGE_TOKEN = '__r';
var CHECKBOX_RADIO_TOKEN = '__c';

function model (
  el,
  dir,
  _warn
) {
  warn$1 = _warn;
  var value = dir.value;
  var modifiers = dir.modifiers;
  var tag = el.tag;
  var type = el.attrsMap.type;

  {
    // inputs with type="file" are read only and setting the input's
    // value will throw an error.
    if (tag === 'input' && type === 'file') {
      warn$1(
        "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
        "File inputs are read only. Use a v-on:change listener instead.",
        el.rawAttrsMap['v-model']
      );
    }
  }

  if (el.component) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else if (tag === 'select') {
    genSelect(el, value, modifiers);
  } else if (tag === 'input' && type === 'checkbox') {
    genCheckboxModel(el, value, modifiers);
  } else if (tag === 'input' && type === 'radio') {
    genRadioModel(el, value, modifiers);
  } else if (tag === 'input' || tag === 'textarea') {
    genDefaultModel(el, value, modifiers);
  } else if (!config.isReservedTag(tag)) {
    genComponentModel(el, value, modifiers);
    // component v-model doesn't need extra runtime
    return false
  } else {
    warn$1(
      "<" + (el.tag) + " v-model=\"" + value + "\">: " +
      "v-model is not supported on this element type. " +
      'If you are working with contenteditable, it\'s recommended to ' +
      'wrap a library dedicated for that purpose inside a custom component.',
      el.rawAttrsMap['v-model']
    );
  }

  // ensure runtime directive metadata
  return true
}

function genCheckboxModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
  var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
  addProp(el, 'checked',
    "Array.isArray(" + value + ")" +
    "?_i(" + value + "," + valueBinding + ")>-1" + (
      trueValueBinding === 'true'
        ? (":(" + value + ")")
        : (":_q(" + value + "," + trueValueBinding + ")")
    )
  );
  addHandler(el, 'change',
    "var $$a=" + value + "," +
        '$$el=$event.target,' +
        "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
    'if(Array.isArray($$a)){' +
      "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
          '$$i=_i($$a,$$v);' +
      "if($$el.checked){$$i<0&&(" + (genAssignmentCode(value, '$$a.concat([$$v])')) + ")}" +
      "else{$$i>-1&&(" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + ")}" +
    "}else{" + (genAssignmentCode(value, '$$c')) + "}",
    null, true
  );
}

function genRadioModel (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var valueBinding = getBindingAttr(el, 'value') || 'null';
  valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
  addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
  addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
}

function genSelect (
  el,
  value,
  modifiers
) {
  var number = modifiers && modifiers.number;
  var selectedVal = "Array.prototype.filter" +
    ".call($event.target.options,function(o){return o.selected})" +
    ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
    "return " + (number ? '_n(val)' : 'val') + "})";

  var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
  var code = "var $$selectedVal = " + selectedVal + ";";
  code = code + " " + (genAssignmentCode(value, assignment));
  addHandler(el, 'change', code, null, true);
}

function genDefaultModel (
  el,
  value,
  modifiers
) {
  var type = el.attrsMap.type;

  // warn if v-bind:value conflicts with v-model
  // except for inputs with v-bind:type
  {
    var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];
    var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
    if (value$1 && !typeBinding) {
      var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';
      warn$1(
        binding + "=\"" + value$1 + "\" conflicts with v-model on the same element " +
        'because the latter already expands to a value binding internally',
        el.rawAttrsMap[binding]
      );
    }
  }

  var ref = modifiers || {};
  var lazy = ref.lazy;
  var number = ref.number;
  var trim = ref.trim;
  var needCompositionGuard = !lazy && type !== 'range';
  var event = lazy
    ? 'change'
    : type === 'range'
      ? RANGE_TOKEN
      : 'input';

  var valueExpression = '$event.target.value';
  if (trim) {
    valueExpression = "$event.target.value.trim()";
  }
  if (number) {
    valueExpression = "_n(" + valueExpression + ")";
  }

  var code = genAssignmentCode(value, valueExpression);
  if (needCompositionGuard) {
    code = "if($event.target.composing)return;" + code;
  }

  addProp(el, 'value', ("(" + value + ")"));
  addHandler(el, event, code, null, true);
  if (trim || number) {
    addHandler(el, 'blur', '$forceUpdate()');
  }
}

/*  */

// normalize v-model event tokens that can only be determined at runtime.
// it's important to place the event as the first in the array because
// the whole point is ensuring the v-model callback gets called before
// user-attached handlers.
function normalizeEvents (on) {
  /* istanbul ignore if */
  if (isDef(on[RANGE_TOKEN])) {
    // IE input[type=range] only supports `change` event
    var event = isIE ? 'change' : 'input';
    on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
    delete on[RANGE_TOKEN];
  }
  // This was originally intended to fix #4521 but no longer necessary
  // after 2.5. Keeping it for backwards compat with generated code from < 2.4
  /* istanbul ignore if */
  if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
    on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
    delete on[CHECKBOX_RADIO_TOKEN];
  }
}

var target$1;

function createOnceHandler$1 (event, handler, capture) {
  var _target = target$1; // save current target element in closure
  return function onceHandler () {
    var res = handler.apply(null, arguments);
    if (res !== null) {
      remove$2(event, onceHandler, capture, _target);
    }
  }
}

// #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
// implementation and does not fire microtasks in between event propagation, so
// safe to exclude.
var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

function add$1 (
  name,
  handler,
  capture,
  passive
) {
  // async edge case #6566: inner click event triggers patch, event handler
  // attached to outer element during patch, and triggered again. This
  // happens because browsers fire microtask ticks between event propagation.
  // the solution is simple: we save the timestamp when a handler is attached,
  // and the handler would only fire if the event passed to it was fired
  // AFTER it was attached.
  if (useMicrotaskFix) {
    var attachedTimestamp = currentFlushTimestamp;
    var original = handler;
    handler = original._wrapper = function (e) {
      if (
        // no bubbling, should always fire.
        // this is just a safety net in case event.timeStamp is unreliable in
        // certain weird environments...
        e.target === e.currentTarget ||
        // event is fired after handler attachment
        e.timeStamp >= attachedTimestamp ||
        // bail for environments that have buggy event.timeStamp implementations
        // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
        // #9681 QtWebEngine event.timeStamp is negative value
        e.timeStamp <= 0 ||
        // #9448 bail if event is fired in another document in a multi-page
        // electron/nw.js app, since event.timeStamp will be using a different
        // starting reference
        e.target.ownerDocument !== document
      ) {
        return original.apply(this, arguments)
      }
    };
  }
  target$1.addEventListener(
    name,
    handler,
    supportsPassive
      ? { capture: capture, passive: passive }
      : capture
  );
}

function remove$2 (
  name,
  handler,
  capture,
  _target
) {
  (_target || target$1).removeEventListener(
    name,
    handler._wrapper || handler,
    capture
  );
}

function updateDOMListeners (oldVnode, vnode) {
  if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
    return
  }
  var on = vnode.data.on || {};
  var oldOn = oldVnode.data.on || {};
  target$1 = vnode.elm;
  normalizeEvents(on);
  updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
  target$1 = undefined;
}

var events = {
  create: updateDOMListeners,
  update: updateDOMListeners
};

/*  */

var svgContainer;

function updateDOMProps (oldVnode, vnode) {
  if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
    return
  }
  var key, cur;
  var elm = vnode.elm;
  var oldProps = oldVnode.data.domProps || {};
  var props = vnode.data.domProps || {};
  // clone observed objects, as the user probably wants to mutate it
  if (isDef(props.__ob__)) {
    props = vnode.data.domProps = extend({}, props);
  }

  for (key in oldProps) {
    if (!(key in props)) {
      elm[key] = '';
    }
  }

  for (key in props) {
    cur = props[key];
    // ignore children if the node has textContent or innerHTML,
    // as these will throw away existing DOM nodes and cause removal errors
    // on subsequent patches (#3360)
    if (key === 'textContent' || key === 'innerHTML') {
      if (vnode.children) { vnode.children.length = 0; }
      if (cur === oldProps[key]) { continue }
      // #6601 work around Chrome version <= 55 bug where single textNode
      // replaced by innerHTML/textContent retains its parentNode property
      if (elm.childNodes.length === 1) {
        elm.removeChild(elm.childNodes[0]);
      }
    }

    if (key === 'value' && elm.tagName !== 'PROGRESS') {
      // store value as _value as well since
      // non-string values will be stringified
      elm._value = cur;
      // avoid resetting cursor position when value is the same
      var strCur = isUndef(cur) ? '' : String(cur);
      if (shouldUpdateValue(elm, strCur)) {
        elm.value = strCur;
      }
    } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
      // IE doesn't support innerHTML for SVG elements
      svgContainer = svgContainer || document.createElement('div');
      svgContainer.innerHTML = "<svg>" + cur + "</svg>";
      var svg = svgContainer.firstChild;
      while (elm.firstChild) {
        elm.removeChild(elm.firstChild);
      }
      while (svg.firstChild) {
        elm.appendChild(svg.firstChild);
      }
    } else if (
      // skip the update if old and new VDOM state is the same.
      // `value` is handled separately because the DOM value may be temporarily
      // out of sync with VDOM state due to focus, composition and modifiers.
      // This  #4521 by skipping the unnecesarry `checked` update.
      cur !== oldProps[key]
    ) {
      // some property updates can throw
      // e.g. `value` on <progress> w/ non-finite value
      try {
        elm[key] = cur;
      } catch (e) {}
    }
  }
}

// check platforms/web/util/attrs.js acceptValue


function shouldUpdateValue (elm, checkVal) {
  return (!elm.composing && (
    elm.tagName === 'OPTION' ||
    isNotInFocusAndDirty(elm, checkVal) ||
    isDirtyWithModifiers(elm, checkVal)
  ))
}

function isNotInFocusAndDirty (elm, checkVal) {
  // return true when textbox (.number and .trim) loses focus and its value is
  // not equal to the updated value
  var notInFocus = true;
  // #6157
  // work around IE bug when accessing document.activeElement in an iframe
  try { notInFocus = document.activeElement !== elm; } catch (e) {}
  return notInFocus && elm.value !== checkVal
}

function isDirtyWithModifiers (elm, newVal) {
  var value = elm.value;
  var modifiers = elm._vModifiers; // injected by v-model runtime
  if (isDef(modifiers)) {
    if (modifiers.number) {
      return toNumber(value) !== toNumber(newVal)
    }
    if (modifiers.trim) {
      return value.trim() !== newVal.trim()
    }
  }
  return value !== newVal
}

var domProps = {
  create: updateDOMProps,
  update: updateDOMProps
};

/*  */

var parseStyleText = cached(function (cssText) {
  var res = {};
  var listDelimiter = /;(?![^(]*\))/g;
  var propertyDelimiter = /:(.+)/;
  cssText.split(listDelimiter).forEach(function (item) {
    if (item) {
      var tmp = item.split(propertyDelimiter);
      tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
    }
  });
  return res
});

// merge static and dynamic style data on the same vnode
function normalizeStyleData (data) {
  var style = normalizeStyleBinding(data.style);
  // static style is pre-processed into an object during compilation
  // and is always a fresh object, so it's safe to merge into it
  return data.staticStyle
    ? extend(data.staticStyle, style)
    : style
}

// normalize possible array / string values into Object
function normalizeStyleBinding (bindingStyle) {
  if (Array.isArray(bindingStyle)) {
    return toObject(bindingStyle)
  }
  if (typeof bindingStyle === 'string') {
    return parseStyleText(bindingStyle)
  }
  return bindingStyle
}

/**
 * parent component style should be after child's
 * so that parent component's style could override it
 */
function getStyle (vnode, checkChild) {
  var res = {};
  var styleData;

  if (checkChild) {
    var childNode = vnode;
    while (childNode.componentInstance) {
      childNode = childNode.componentInstance._vnode;
      if (
        childNode && childNode.data &&
        (styleData = normalizeStyleData(childNode.data))
      ) {
        extend(res, styleData);
      }
    }
  }

  if ((styleData = normalizeStyleData(vnode.data))) {
    extend(res, styleData);
  }

  var parentNode = vnode;
  while ((parentNode = parentNode.parent)) {
    if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
      extend(res, styleData);
    }
  }
  return res
}

/*  */

var cssVarRE = /^--/;
var importantRE = /\s*!important$/;
var setProp = function (el, name, val) {
  /* istanbul ignore if */
  if (cssVarRE.test(name)) {
    el.style.setProperty(name, val);
  } else if (importantRE.test(val)) {
    el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
  } else {
    var normalizedName = normalize(name);
    if (Array.isArray(val)) {
      // Support values array created by autoprefixer, e.g.
      // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
      // Set them one by one, and the browser will only set those it can recognize
      for (var i = 0, len = val.length; i < len; i++) {
        el.style[normalizedName] = val[i];
      }
    } else {
      el.style[normalizedName] = val;
    }
  }
};

var vendorNames = ['Webkit', 'Moz', 'ms'];

var emptyStyle;
var normalize = cached(function (prop) {
  emptyStyle = emptyStyle || document.createElement('div').style;
  prop = camelize(prop);
  if (prop !== 'filter' && (prop in emptyStyle)) {
    return prop
  }
  var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
  for (var i = 0; i < vendorNames.length; i++) {
    var name = vendorNames[i] + capName;
    if (name in emptyStyle) {
      return name
    }
  }
});

function updateStyle (oldVnode, vnode) {
  var data = vnode.data;
  var oldData = oldVnode.data;

  if (isUndef(data.staticStyle) && isUndef(data.style) &&
    isUndef(oldData.staticStyle) && isUndef(oldData.style)
  ) {
    return
  }

  var cur, name;
  var el = vnode.elm;
  var oldStaticStyle = oldData.staticStyle;
  var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

  // if static style exists, stylebinding already merged into it when doing normalizeStyleData
  var oldStyle = oldStaticStyle || oldStyleBinding;

  var style = normalizeStyleBinding(vnode.data.style) || {};

  // store normalized style under a different key for next diff
  // make sure to clone it if it's reactive, since the user likely wants
  // to mutate it.
  vnode.data.normalizedStyle = isDef(style.__ob__)
    ? extend({}, style)
    : style;

  var newStyle = getStyle(vnode, true);

  for (name in oldStyle) {
    if (isUndef(newStyle[name])) {
      setProp(el, name, '');
    }
  }
  for (name in newStyle) {
    cur = newStyle[name];
    if (cur !== oldStyle[name]) {
      // ie9 setting to null has no effect, must use empty string
      setProp(el, name, cur == null ? '' : cur);
    }
  }
}

var style = {
  create: updateStyle,
  update: updateStyle
};

/*  */

var whitespaceRE = /\s+/;

/**
 * Add class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function addClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
    } else {
      el.classList.add(cls);
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    if (cur.indexOf(' ' + cls + ' ') < 0) {
      el.setAttribute('class', (cur + cls).trim());
    }
  }
}

/**
 * Remove class with compatibility for SVG since classList is not supported on
 * SVG elements in IE
 */
function removeClass (el, cls) {
  /* istanbul ignore if */
  if (!cls || !(cls = cls.trim())) {
    return
  }

  /* istanbul ignore else */
  if (el.classList) {
    if (cls.indexOf(' ') > -1) {
      cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
    } else {
      el.classList.remove(cls);
    }
    if (!el.classList.length) {
      el.removeAttribute('class');
    }
  } else {
    var cur = " " + (el.getAttribute('class') || '') + " ";
    var tar = ' ' + cls + ' ';
    while (cur.indexOf(tar) >= 0) {
      cur = cur.replace(tar, ' ');
    }
    cur = cur.trim();
    if (cur) {
      el.setAttribute('class', cur);
    } else {
      el.removeAttribute('class');
    }
  }
}

/*  */

function resolveTransition (def$$1) {
  if (!def$$1) {
    return
  }
  /* istanbul ignore else */
  if (typeof def$$1 === 'object') {
    var res = {};
    if (def$$1.css !== false) {
      extend(res, autoCssTransition(def$$1.name || 'v'));
    }
    extend(res, def$$1);
    return res
  } else if (typeof def$$1 === 'string') {
    return autoCssTransition(def$$1)
  }
}

var autoCssTransition = cached(function (name) {
  return {
    enterClass: (name + "-enter"),
    enterToClass: (name + "-enter-to"),
    enterActiveClass: (name + "-enter-active"),
    leaveClass: (name + "-leave"),
    leaveToClass: (name + "-leave-to"),
    leaveActiveClass: (name + "-leave-active")
  }
});

var hasTransition = inBrowser && !isIE9;
var TRANSITION = 'transition';
var ANIMATION = 'animation';

// Transition property/event sniffing
var transitionProp = 'transition';
var transitionEndEvent = 'transitionend';
var animationProp = 'animation';
var animationEndEvent = 'animationend';
if (hasTransition) {
  /* istanbul ignore if */
  if (window.ontransitionend === undefined &&
    window.onwebkittransitionend !== undefined
  ) {
    transitionProp = 'WebkitTransition';
    transitionEndEvent = 'webkitTransitionEnd';
  }
  if (window.onanimationend === undefined &&
    window.onwebkitanimationend !== undefined
  ) {
    animationProp = 'WebkitAnimation';
    animationEndEvent = 'webkitAnimationEnd';
  }
}

// binding to window is necessary to make hot reload work in IE in strict mode
var raf = inBrowser
  ? window.requestAnimationFrame
    ? window.requestAnimationFrame.bind(window)
    : setTimeout
  : /* istanbul ignore next */ function (fn) { return fn(); };

function nextFrame (fn) {
  raf(function () {
    raf(fn);
  });
}

function addTransitionClass (el, cls) {
  var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
  if (transitionClasses.indexOf(cls) < 0) {
    transitionClasses.push(cls);
    addClass(el, cls);
  }
}

function removeTransitionClass (el, cls) {
  if (el._transitionClasses) {
    remove(el._transitionClasses, cls);
  }
  removeClass(el, cls);
}

function whenTransitionEnds (
  el,
  expectedType,
  cb
) {
  var ref = getTransitionInfo(el, expectedType);
  var type = ref.type;
  var timeout = ref.timeout;
  var propCount = ref.propCount;
  if (!type) { return cb() }
  var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
  var ended = 0;
  var end = function () {
    el.removeEventListener(event, onEnd);
    cb();
  };
  var onEnd = function (e) {
    if (e.target === el) {
      if (++ended >= propCount) {
        end();
      }
    }
  };
  setTimeout(function () {
    if (ended < propCount) {
      end();
    }
  }, timeout + 1);
  el.addEventListener(event, onEnd);
}

var transformRE = /\b(transform|all)(,|$)/;

function getTransitionInfo (el, expectedType) {
  var styles = window.getComputedStyle(el);
  // JSDOM may return undefined for transition properties
  var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
  var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
  var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
  var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
  var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
  var animationTimeout = getTimeout(animationDelays, animationDurations);

  var type;
  var timeout = 0;
  var propCount = 0;
  /* istanbul ignore if */
  if (expectedType === TRANSITION) {
    if (transitionTimeout > 0) {
      type = TRANSITION;
      timeout = transitionTimeout;
      propCount = transitionDurations.length;
    }
  } else if (expectedType === ANIMATION) {
    if (animationTimeout > 0) {
      type = ANIMATION;
      timeout = animationTimeout;
      propCount = animationDurations.length;
    }
  } else {
    timeout = Math.max(transitionTimeout, animationTimeout);
    type = timeout > 0
      ? transitionTimeout > animationTimeout
        ? TRANSITION
        : ANIMATION
      : null;
    propCount = type
      ? type === TRANSITION
        ? transitionDurations.length
        : animationDurations.length
      : 0;
  }
  var hasTransform =
    type === TRANSITION &&
    transformRE.test(styles[transitionProp + 'Property']);
  return {
    type: type,
    timeout: timeout,
    propCount: propCount,
    hasTransform: hasTransform
  }
}

function getTimeout (delays, durations) {
  /* istanbul ignore next */
  while (delays.length < durations.length) {
    delays = delays.concat(delays);
  }

  return Math.max.apply(null, durations.map(function (d, i) {
    return toMs(d) + toMs(delays[i])
  }))
}

// Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
// in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down (i.e. acting
// as a floor function) causing unexpected behaviors
function toMs (s) {
  return Number(s.slice(0, -1).replace(',', '.')) * 1000
}

/*  */

function enter (vnode, toggleDisplay) {
  var el = vnode.elm;

  // call leave callback now
  if (isDef(el._leaveCb)) {
    el._leaveCb.cancelled = true;
    el._leaveCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data)) {
    return
  }

  /* istanbul ignore if */
  if (isDef(el._enterCb) || el.nodeType !== 1) {
    return
  }

  var css = data.css;
  var type = data.type;
  var enterClass = data.enterClass;
  var enterToClass = data.enterToClass;
  var enterActiveClass = data.enterActiveClass;
  var appearClass = data.appearClass;
  var appearToClass = data.appearToClass;
  var appearActiveClass = data.appearActiveClass;
  var beforeEnter = data.beforeEnter;
  var enter = data.enter;
  var afterEnter = data.afterEnter;
  var enterCancelled = data.enterCancelled;
  var beforeAppear = data.beforeAppear;
  var appear = data.appear;
  var afterAppear = data.afterAppear;
  var appearCancelled = data.appearCancelled;
  var duration = data.duration;

  // activeInstance will always be the <transition> component managing this
  // transition. One edge case to check is when the <transition> is placed
  // as the root node of a child component. In that case we need to check
  // <transition>'s parent for appear check.
  var context = activeInstance;
  var transitionNode = activeInstance.$vnode;
  while (transitionNode && transitionNode.parent) {
    context = transitionNode.context;
    transitionNode = transitionNode.parent;
  }

  var isAppear = !context._isMounted || !vnode.isRootInsert;

  if (isAppear && !appear && appear !== '') {
    return
  }

  var startClass = isAppear && appearClass
    ? appearClass
    : enterClass;
  var activeClass = isAppear && appearActiveClass
    ? appearActiveClass
    : enterActiveClass;
  var toClass = isAppear && appearToClass
    ? appearToClass
    : enterToClass;

  var beforeEnterHook = isAppear
    ? (beforeAppear || beforeEnter)
    : beforeEnter;
  var enterHook = isAppear
    ? (typeof appear === 'function' ? appear : enter)
    : enter;
  var afterEnterHook = isAppear
    ? (afterAppear || afterEnter)
    : afterEnter;
  var enterCancelledHook = isAppear
    ? (appearCancelled || enterCancelled)
    : enterCancelled;

  var explicitEnterDuration = toNumber(
    isObject(duration)
      ? duration.enter
      : duration
  );

  if (explicitEnterDuration != null) {
    checkDuration(explicitEnterDuration, 'enter', vnode);
  }

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(enterHook);

  var cb = el._enterCb = once(function () {
    if (expectsCSS) {
      removeTransitionClass(el, toClass);
      removeTransitionClass(el, activeClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, startClass);
      }
      enterCancelledHook && enterCancelledHook(el);
    } else {
      afterEnterHook && afterEnterHook(el);
    }
    el._enterCb = null;
  });

  if (!vnode.data.show) {
    // remove pending leave element on enter by injecting an insert hook
    mergeVNodeHook(vnode, 'insert', function () {
      var parent = el.parentNode;
      var pendingNode = parent && parent._pending && parent._pending[vnode.key];
      if (pendingNode &&
        pendingNode.tag === vnode.tag &&
        pendingNode.elm._leaveCb
      ) {
        pendingNode.elm._leaveCb();
      }
      enterHook && enterHook(el, cb);
    });
  }

  // start enter transition
  beforeEnterHook && beforeEnterHook(el);
  if (expectsCSS) {
    addTransitionClass(el, startClass);
    addTransitionClass(el, activeClass);
    nextFrame(function () {
      removeTransitionClass(el, startClass);
      if (!cb.cancelled) {
        addTransitionClass(el, toClass);
        if (!userWantsControl) {
          if (isValidDuration(explicitEnterDuration)) {
            setTimeout(cb, explicitEnterDuration);
          } else {
            whenTransitionEnds(el, type, cb);
          }
        }
      }
    });
  }

  if (vnode.data.show) {
    toggleDisplay && toggleDisplay();
    enterHook && enterHook(el, cb);
  }

  if (!expectsCSS && !userWantsControl) {
    cb();
  }
}

function leave (vnode, rm) {
  var el = vnode.elm;

  // call enter callback now
  if (isDef(el._enterCb)) {
    el._enterCb.cancelled = true;
    el._enterCb();
  }

  var data = resolveTransition(vnode.data.transition);
  if (isUndef(data) || el.nodeType !== 1) {
    return rm()
  }

  /* istanbul ignore if */
  if (isDef(el._leaveCb)) {
    return
  }

  var css = data.css;
  var type = data.type;
  var leaveClass = data.leaveClass;
  var leaveToClass = data.leaveToClass;
  var leaveActiveClass = data.leaveActiveClass;
  var beforeLeave = data.beforeLeave;
  var leave = data.leave;
  var afterLeave = data.afterLeave;
  var leaveCancelled = data.leaveCancelled;
  var delayLeave = data.delayLeave;
  var duration = data.duration;

  var expectsCSS = css !== false && !isIE9;
  var userWantsControl = getHookArgumentsLength(leave);

  var explicitLeaveDuration = toNumber(
    isObject(duration)
      ? duration.leave
      : duration
  );

  if (isDef(explicitLeaveDuration)) {
    checkDuration(explicitLeaveDuration, 'leave', vnode);
  }

  var cb = el._leaveCb = once(function () {
    if (el.parentNode && el.parentNode._pending) {
      el.parentNode._pending[vnode.key] = null;
    }
    if (expectsCSS) {
      removeTransitionClass(el, leaveToClass);
      removeTransitionClass(el, leaveActiveClass);
    }
    if (cb.cancelled) {
      if (expectsCSS) {
        removeTransitionClass(el, leaveClass);
      }
      leaveCancelled && leaveCancelled(el);
    } else {
      rm();
      afterLeave && afterLeave(el);
    }
    el._leaveCb = null;
  });

  if (delayLeave) {
    delayLeave(performLeave);
  } else {
    performLeave();
  }

  function performLeave () {
    // the delayed leave may have already been cancelled
    if (cb.cancelled) {
      return
    }
    // record leaving element
    if (!vnode.data.show && el.parentNode) {
      (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
    }
    beforeLeave && beforeLeave(el);
    if (expectsCSS) {
      addTransitionClass(el, leaveClass);
      addTransitionClass(el, leaveActiveClass);
      nextFrame(function () {
        removeTransitionClass(el, leaveClass);
        if (!cb.cancelled) {
          addTransitionClass(el, leaveToClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitLeaveDuration)) {
              setTimeout(cb, explicitLeaveDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }
    leave && leave(el, cb);
    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }
}

// only used in dev mode
function checkDuration (val, name, vnode) {
  if (typeof val !== 'number') {
    warn(
      "<transition> explicit " + name + " duration is not a valid number - " +
      "got " + (JSON.stringify(val)) + ".",
      vnode.context
    );
  } else if (isNaN(val)) {
    warn(
      "<transition> explicit " + name + " duration is NaN - " +
      'the duration expression might be incorrect.',
      vnode.context
    );
  }
}

function isValidDuration (val) {
  return typeof val === 'number' && !isNaN(val)
}

/**
 * Normalize a transition hook's argument length. The hook may be:
 * - a merged hook (invoker) with the original in .fns
 * - a wrapped component method (check ._length)
 * - a plain function (.length)
 */
function getHookArgumentsLength (fn) {
  if (isUndef(fn)) {
    return false
  }
  var invokerFns = fn.fns;
  if (isDef(invokerFns)) {
    // invoker
    return getHookArgumentsLength(
      Array.isArray(invokerFns)
        ? invokerFns[0]
        : invokerFns
    )
  } else {
    return (fn._length || fn.length) > 1
  }
}

function _enter (_, vnode) {
  if (vnode.data.show !== true) {
    enter(vnode);
  }
}

var transition = inBrowser ? {
  create: _enter,
  activate: _enter,
  remove: function remove$$1 (vnode, rm) {
    /* istanbul ignore else */
    if (vnode.data.show !== true) {
      leave(vnode, rm);
    } else {
      rm();
    }
  }
} : {};

var platformModules = [
  attrs,
  klass,
  events,
  domProps,
  style,
  transition
];

/*  */

// the directive module should be applied last, after all
// built-in modules have been applied.
var modules = platformModules.concat(baseModules);

var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

/**
 * Not type checking this file because flow doesn't like attaching
 * properties to Elements.
 */

/* istanbul ignore if */
if (isIE9) {
  // http://www.matts411.com/post/internet-explorer-9-oninput/
  document.addEventListener('selectionchange', function () {
    var el = document.activeElement;
    if (el && el.vmodel) {
      trigger(el, 'input');
    }
  });
}

var directive = {
  inserted: function inserted (el, binding, vnode, oldVnode) {
    if (vnode.tag === 'select') {
      // #6903
      if (oldVnode.elm && !oldVnode.elm._vOptions) {
        mergeVNodeHook(vnode, 'postpatch', function () {
          directive.componentUpdated(el, binding, vnode);
        });
      } else {
        setSelected(el, binding, vnode.context);
      }
      el._vOptions = [].map.call(el.options, getValue);
    } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
      el._vModifiers = binding.modifiers;
      if (!binding.modifiers.lazy) {
        el.addEventListener('compositionstart', onCompositionStart);
        el.addEventListener('compositionend', onCompositionEnd);
        // Safari < 10.2 & UIWebView doesn't fire compositionend when
        // switching focus before confirming composition choice
        // this also fixes the issue where some browsers e.g. iOS Chrome
        // fires "change" instead of "input" on autocomplete.
        el.addEventListener('change', onCompositionEnd);
        /* istanbul ignore if */
        if (isIE9) {
          el.vmodel = true;
        }
      }
    }
  },

  componentUpdated: function componentUpdated (el, binding, vnode) {
    if (vnode.tag === 'select') {
      setSelected(el, binding, vnode.context);
      // in case the options rendered by v-for have changed,
      // it's possible that the value is out-of-sync with the rendered options.
      // detect such cases and filter out values that no longer has a matching
      // option in the DOM.
      var prevOptions = el._vOptions;
      var curOptions = el._vOptions = [].map.call(el.options, getValue);
      if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
        // trigger change event if
        // no matching option found for at least one value
        var needReset = el.multiple
          ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
          : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
        if (needReset) {
          trigger(el, 'change');
        }
      }
    }
  }
};

function setSelected (el, binding, vm) {
  actuallySetSelected(el, binding, vm);
  /* istanbul ignore if */
  if (isIE || isEdge) {
    setTimeout(function () {
      actuallySetSelected(el, binding, vm);
    }, 0);
  }
}

function actuallySetSelected (el, binding, vm) {
  var value = binding.value;
  var isMultiple = el.multiple;
  if (isMultiple && !Array.isArray(value)) {
    warn(
      "<select multiple v-model=\"" + (binding.expression) + "\"> " +
      "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
      vm
    );
    return
  }
  var selected, option;
  for (var i = 0, l = el.options.length; i < l; i++) {
    option = el.options[i];
    if (isMultiple) {
      selected = looseIndexOf(value, getValue(option)) > -1;
      if (option.selected !== selected) {
        option.selected = selected;
      }
    } else {
      if (looseEqual(getValue(option), value)) {
        if (el.selectedIndex !== i) {
          el.selectedIndex = i;
        }
        return
      }
    }
  }
  if (!isMultiple) {
    el.selectedIndex = -1;
  }
}

function hasNoMatchingOption (value, options) {
  return options.every(function (o) { return !looseEqual(o, value); })
}

function getValue (option) {
  return '_value' in option
    ? option._value
    : option.value
}

function onCompositionStart (e) {
  e.target.composing = true;
}

function onCompositionEnd (e) {
  // prevent triggering an input event for no reason
  if (!e.target.composing) { return }
  e.target.composing = false;
  trigger(e.target, 'input');
}

function trigger (el, type) {
  var e = document.createEvent('HTMLEvents');
  e.initEvent(type, true, true);
  el.dispatchEvent(e);
}

/*  */

// recursively search for possible transition defined inside the component root
function locateNode (vnode) {
  return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
    ? locateNode(vnode.componentInstance._vnode)
    : vnode
}

var show = {
  bind: function bind (el, ref, vnode) {
    var value = ref.value;

    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    var originalDisplay = el.__vOriginalDisplay =
      el.style.display === 'none' ? '' : el.style.display;
    if (value && transition$$1) {
      vnode.data.show = true;
      enter(vnode, function () {
        el.style.display = originalDisplay;
      });
    } else {
      el.style.display = value ? originalDisplay : 'none';
    }
  },

  update: function update (el, ref, vnode) {
    var value = ref.value;
    var oldValue = ref.oldValue;

    /* istanbul ignore if */
    if (!value === !oldValue) { return }
    vnode = locateNode(vnode);
    var transition$$1 = vnode.data && vnode.data.transition;
    if (transition$$1) {
      vnode.data.show = true;
      if (value) {
        enter(vnode, function () {
          el.style.display = el.__vOriginalDisplay;
        });
      } else {
        leave(vnode, function () {
          el.style.display = 'none';
        });
      }
    } else {
      el.style.display = value ? el.__vOriginalDisplay : 'none';
    }
  },

  unbind: function unbind (
    el,
    binding,
    vnode,
    oldVnode,
    isDestroy
  ) {
    if (!isDestroy) {
      el.style.display = el.__vOriginalDisplay;
    }
  }
};

var platformDirectives = {
  model: directive,
  show: show
};

/*  */

var transitionProps = {
  name: String,
  appear: Boolean,
  css: Boolean,
  mode: String,
  type: String,
  enterClass: String,
  leaveClass: String,
  enterToClass: String,
  leaveToClass: String,
  enterActiveClass: String,
  leaveActiveClass: String,
  appearClass: String,
  appearActiveClass: String,
  appearToClass: String,
  duration: [Number, String, Object]
};

// in case the child is also an abstract component, e.g. <keep-alive>
// we want to recursively retrieve the real component to be rendered
function getRealChild (vnode) {
  var compOptions = vnode && vnode.componentOptions;
  if (compOptions && compOptions.Ctor.options.abstract) {
    return getRealChild(getFirstComponentChild(compOptions.children))
  } else {
    return vnode
  }
}

function extractTransitionData (comp) {
  var data = {};
  var options = comp.$options;
  // props
  for (var key in options.propsData) {
    data[key] = comp[key];
  }
  // events.
  // extract listeners and pass them directly to the transition methods
  var listeners = options._parentListeners;
  for (var key$1 in listeners) {
    data[camelize(key$1)] = listeners[key$1];
  }
  return data
}

function placeholder (h, rawChild) {
  if (/\d-keep-alive$/.test(rawChild.tag)) {
    return h('keep-alive', {
      props: rawChild.componentOptions.propsData
    })
  }
}

function hasParentTransition (vnode) {
  while ((vnode = vnode.parent)) {
    if (vnode.data.transition) {
      return true
    }
  }
}

function isSameChild (child, oldChild) {
  return oldChild.key === child.key && oldChild.tag === child.tag
}

var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

var isVShowDirective = function (d) { return d.name === 'show'; };

var Transition = {
  name: 'transition',
  props: transitionProps,
  abstract: true,

  render: function render (h) {
    var this$1 = this;

    var children = this.$slots.default;
    if (!children) {
      return
    }

    // filter out text nodes (possible whitespaces)
    children = children.filter(isNotTextNode);
    /* istanbul ignore if */
    if (!children.length) {
      return
    }

    // warn multiple elements
    if (children.length > 1) {
      warn(
        '<transition> can only be used on a single element. Use ' +
        '<transition-group> for lists.',
        this.$parent
      );
    }

    var mode = this.mode;

    // warn invalid mode
    if (mode && mode !== 'in-out' && mode !== 'out-in'
    ) {
      warn(
        'invalid <transition> mode: ' + mode,
        this.$parent
      );
    }

    var rawChild = children[0];

    // if this is a component root node and the component's
    // parent container node also has transition, skip.
    if (hasParentTransition(this.$vnode)) {
      return rawChild
    }

    // apply transition data to child
    // use getRealChild() to ignore abstract components e.g. keep-alive
    var child = getRealChild(rawChild);
    /* istanbul ignore if */
    if (!child) {
      return rawChild
    }

    if (this._leaving) {
      return placeholder(h, rawChild)
    }

    // ensure a key that is unique to the vnode type and to this transition
    // component instance. This key will be used to remove pending leaving nodes
    // during entering.
    var id = "__transition-" + (this._uid) + "-";
    child.key = child.key == null
      ? child.isComment
        ? id + 'comment'
        : id + child.tag
      : isPrimitive(child.key)
        ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
        : child.key;

    var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
    var oldRawChild = this._vnode;
    var oldChild = getRealChild(oldRawChild);

    // mark v-show
    // so that the transition module can hand over the control to the directive
    if (child.data.directives && child.data.directives.some(isVShowDirective)) {
      child.data.show = true;
    }

    if (
      oldChild &&
      oldChild.data &&
      !isSameChild(child, oldChild) &&
      !isAsyncPlaceholder(oldChild) &&
      // #6687 component root is a comment node
      !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
    ) {
      // replace old child transition data with fresh one
      // important for dynamic transitions!
      var oldData = oldChild.data.transition = extend({}, data);
      // handle transition mode
      if (mode === 'out-in') {
        // return placeholder node and queue update when leave finishes
        this._leaving = true;
        mergeVNodeHook(oldData, 'afterLeave', function () {
          this$1._leaving = false;
          this$1.$forceUpdate();
        });
        return placeholder(h, rawChild)
      } else if (mode === 'in-out') {
        if (isAsyncPlaceholder(child)) {
          return oldRawChild
        }
        var delayedLeave;
        var performLeave = function () { delayedLeave(); };
        mergeVNodeHook(data, 'afterEnter', performLeave);
        mergeVNodeHook(data, 'enterCancelled', performLeave);
        mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
      }
    }

    return rawChild
  }
};

/*  */

var props = extend({
  tag: String,
  moveClass: String
}, transitionProps);

delete props.mode;

var TransitionGroup = {
  props: props,

  beforeMount: function beforeMount () {
    var this$1 = this;

    var update = this._update;
    this._update = function (vnode, hydrating) {
      var restoreActiveInstance = setActiveInstance(this$1);
      // force removing pass
      this$1.__patch__(
        this$1._vnode,
        this$1.kept,
        false, // hydrating
        true // removeOnly (!important, avoids unnecessary moves)
      );
      this$1._vnode = this$1.kept;
      restoreActiveInstance();
      update.call(this$1, vnode, hydrating);
    };
  },

  render: function render (h) {
    var tag = this.tag || this.$vnode.data.tag || 'span';
    var map = Object.create(null);
    var prevChildren = this.prevChildren = this.children;
    var rawChildren = this.$slots.default || [];
    var children = this.children = [];
    var transitionData = extractTransitionData(this);

    for (var i = 0; i < rawChildren.length; i++) {
      var c = rawChildren[i];
      if (c.tag) {
        if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
          children.push(c);
          map[c.key] = c
          ;(c.data || (c.data = {})).transition = transitionData;
        } else {
          var opts = c.componentOptions;
          var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
          warn(("<transition-group> children must be keyed: <" + name + ">"));
        }
      }
    }

    if (prevChildren) {
      var kept = [];
      var removed = [];
      for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
        var c$1 = prevChildren[i$1];
        c$1.data.transition = transitionData;
        c$1.data.pos = c$1.elm.getBoundingClientRect();
        if (map[c$1.key]) {
          kept.push(c$1);
        } else {
          removed.push(c$1);
        }
      }
      this.kept = h(tag, null, kept);
      this.removed = removed;
    }

    return h(tag, null, children)
  },

  updated: function updated () {
    var children = this.prevChildren;
    var moveClass = this.moveClass || ((this.name || 'v') + '-move');
    if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
      return
    }

    // we divide the work into three loops to avoid mixing DOM reads and writes
    // in each iteration - which helps prevent layout thrashing.
    children.forEach(callPendingCbs);
    children.forEach(recordPosition);
    children.forEach(applyTranslation);

    // force reflow to put everything in position
    // assign to this to avoid being removed in tree-shaking
    // $flow-disable-line
    this._reflow = document.body.offsetHeight;

    children.forEach(function (c) {
      if (c.data.moved) {
        var el = c.elm;
        var s = el.style;
        addTransitionClass(el, moveClass);
        s.transform = s.WebkitTransform = s.transitionDuration = '';
        el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
          if (e && e.target !== el) {
            return
          }
          if (!e || /transform$/.test(e.propertyName)) {
            el.removeEventListener(transitionEndEvent, cb);
            el._moveCb = null;
            removeTransitionClass(el, moveClass);
          }
        });
      }
    });
  },

  methods: {
    hasMove: function hasMove (el, moveClass) {
      /* istanbul ignore if */
      if (!hasTransition) {
        return false
      }
      /* istanbul ignore if */
      if (this._hasMove) {
        return this._hasMove
      }
      // Detect whether an element with the move class applied has
      // CSS transitions. Since the element may be inside an entering
      // transition at this very moment, we make a clone of it and remove
      // all other transition classes applied to ensure only the move class
      // is applied.
      var clone = el.cloneNode();
      if (el._transitionClasses) {
        el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
      }
      addClass(clone, moveClass);
      clone.style.display = 'none';
      this.$el.appendChild(clone);
      var info = getTransitionInfo(clone);
      this.$el.removeChild(clone);
      return (this._hasMove = info.hasTransform)
    }
  }
};

function callPendingCbs (c) {
  /* istanbul ignore if */
  if (c.elm._moveCb) {
    c.elm._moveCb();
  }
  /* istanbul ignore if */
  if (c.elm._enterCb) {
    c.elm._enterCb();
  }
}

function recordPosition (c) {
  c.data.newPos = c.elm.getBoundingClientRect();
}

function applyTranslation (c) {
  var oldPos = c.data.pos;
  var newPos = c.data.newPos;
  var dx = oldPos.left - newPos.left;
  var dy = oldPos.top - newPos.top;
  if (dx || dy) {
    c.data.moved = true;
    var s = c.elm.style;
    s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
    s.transitionDuration = '0s';
  }
}

var platformComponents = {
  Transition: Transition,
  TransitionGroup: TransitionGroup
};

/*  */

// install platform specific utils
Vue.config.mustUseProp = mustUseProp;
Vue.config.isReservedTag = isReservedTag;
Vue.config.isReservedAttr = isReservedAttr;
Vue.config.getTagNamespace = getTagNamespace;
Vue.config.isUnknownElement = isUnknownElement;

// install platform runtime directives & components
extend(Vue.options.directives, platformDirectives);
extend(Vue.options.components, platformComponents);

// install platform patch function
Vue.prototype.__patch__ = inBrowser ? patch : noop;

// public mount method
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && inBrowser ? query(el) : undefined;
  return mountComponent(this, el, hydrating)
};

// devtools global hook
/* istanbul ignore next */
if (inBrowser) {
  setTimeout(function () {
    if (config.devtools) {
      if (devtools) {
        devtools.emit('init', Vue);
      } else {
        console[console.info ? 'info' : 'log'](
          'Download the Vue Devtools extension for a better development experience:\n' +
          'https://github.com/vuejs/vue-devtools'
        );
      }
    }
    if (config.productionTip !== false &&
      typeof console !== 'undefined'
    ) {
      console[console.info ? 'info' : 'log'](
        "You are running Vue in development mode.\n" +
        "Make sure to turn on production mode when deploying for production.\n" +
        "See more tips at https://vuejs.org/guide/deployment.html"
      );
    }
  }, 0);
}

/*  */

var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

var buildRegex = cached(function (delimiters) {
  var open = delimiters[0].replace(regexEscapeRE, '\\$&');
  var close = delimiters[1].replace(regexEscapeRE, '\\$&');
  return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
});



function parseText (
  text,
  delimiters
) {
  var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
  if (!tagRE.test(text)) {
    return
  }
  var tokens = [];
  var rawTokens = [];
  var lastIndex = tagRE.lastIndex = 0;
  var match, index, tokenValue;
  while ((match = tagRE.exec(text))) {
    index = match.index;
    // push text token
    if (index > lastIndex) {
      rawTokens.push(tokenValue = text.slice(lastIndex, index));
      tokens.push(JSON.stringify(tokenValue));
    }
    // tag token
    var exp = parseFilters(match[1].trim());
    tokens.push(("_s(" + exp + ")"));
    rawTokens.push({ '@binding': exp });
    lastIndex = index + match[0].length;
  }
  if (lastIndex < text.length) {
    rawTokens.push(tokenValue = text.slice(lastIndex));
    tokens.push(JSON.stringify(tokenValue));
  }
  return {
    expression: tokens.join('+'),
    tokens: rawTokens
  }
}

/*  */

function transformNode (el, options) {
  var warn = options.warn || baseWarn;
  var staticClass = getAndRemoveAttr(el, 'class');
  if (staticClass) {
    var res = parseText(staticClass, options.delimiters);
    if (res) {
      warn(
        "class=\"" + staticClass + "\": " +
        'Interpolation inside attributes has been removed. ' +
        'Use v-bind or the colon shorthand instead. For example, ' +
        'instead of <div class="{{ val }}">, use <div :class="val">.',
        el.rawAttrsMap['class']
      );
    }
  }
  if (staticClass) {
    el.staticClass = JSON.stringify(staticClass);
  }
  var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
  if (classBinding) {
    el.classBinding = classBinding;
  }
}

function genData (el) {
  var data = '';
  if (el.staticClass) {
    data += "staticClass:" + (el.staticClass) + ",";
  }
  if (el.classBinding) {
    data += "class:" + (el.classBinding) + ",";
  }
  return data
}

var klass$1 = {
  staticKeys: ['staticClass'],
  transformNode: transformNode,
  genData: genData
};

/*  */

function transformNode$1 (el, options) {
  var warn = options.warn || baseWarn;
  var staticStyle = getAndRemoveAttr(el, 'style');
  if (staticStyle) {
    /* istanbul ignore if */
    {
      var res = parseText(staticStyle, options.delimiters);
      if (res) {
        warn(
          "style=\"" + staticStyle + "\": " +
          'Interpolation inside attributes has been removed. ' +
          'Use v-bind or the colon shorthand instead. For example, ' +
          'instead of <div style="{{ val }}">, use <div :style="val">.',
          el.rawAttrsMap['style']
        );
      }
    }
    el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
  }

  var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
  if (styleBinding) {
    el.styleBinding = styleBinding;
  }
}

function genData$1 (el) {
  var data = '';
  if (el.staticStyle) {
    data += "staticStyle:" + (el.staticStyle) + ",";
  }
  if (el.styleBinding) {
    data += "style:(" + (el.styleBinding) + "),";
  }
  return data
}

var style$1 = {
  staticKeys: ['staticStyle'],
  transformNode: transformNode$1,
  genData: genData$1
};

/*  */

var decoder;

var he = {
  decode: function decode (html) {
    decoder = decoder || document.createElement('div');
    decoder.innerHTML = html;
    return decoder.textContent
  }
};

/*  */

var isUnaryTag = makeMap(
  'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
  'link,meta,param,source,track,wbr'
);

// Elements that you can, intentionally, leave open
// (and which close themselves)
var canBeLeftOpenTag = makeMap(
  'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
);

// HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
// Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
var isNonPhrasingTag = makeMap(
  'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
  'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
  'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
  'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
  'title,tr,track'
);

/**
 * Not type-checking this file because it's mostly vendor code.
 */

// Regular Expressions for parsing tags and attributes
var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + (unicodeRegExp.source) + "]*";
var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
var startTagOpen = new RegExp(("^<" + qnameCapture));
var startTagClose = /^\s*(\/?)>/;
var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));
var doctype = /^<!DOCTYPE [^>]+>/i;
// #7298: escape - to avoid being pased as HTML comment when inlined in page
var comment = /^<!\--/;
var conditionalComment = /^<!\[/;

// Special Elements (can contain anything)
var isPlainTextElement = makeMap('script,style,textarea', true);
var reCache = {};

var decodingMap = {
  '&lt;': '<',
  '&gt;': '>',
  '&quot;': '"',
  '&amp;': '&',
  '&#10;': '\n',
  '&#9;': '\t',
  '&#39;': "'"
};
var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;

// #5992
var isIgnoreNewlineTag = makeMap('pre,textarea', true);
var shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\n'; };

function decodeAttr (value, shouldDecodeNewlines) {
  var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
  return value.replace(re, function (match) { return decodingMap[match]; })
}

function parseHTML (html, options) {
  var stack = [];
  var expectHTML = options.expectHTML;
  var isUnaryTag$$1 = options.isUnaryTag || no;
  var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
  var index = 0;
  var last, lastTag;
  while (html) {
    last = html;
    // Make sure we're not in a plaintext content element like script/style
    if (!lastTag || !isPlainTextElement(lastTag)) {
      var textEnd = html.indexOf('<');
      if (textEnd === 0) {
        // Comment:
        if (comment.test(html)) {
          var commentEnd = html.indexOf('-->');

          if (commentEnd >= 0) {
            if (options.shouldKeepComment) {
              options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
            }
            advance(commentEnd + 3);
            continue
          }
        }

        // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
        if (conditionalComment.test(html)) {
          var conditionalEnd = html.indexOf(']>');

          if (conditionalEnd >= 0) {
            advance(conditionalEnd + 2);
            continue
          }
        }

        // Doctype:
        var doctypeMatch = html.match(doctype);
        if (doctypeMatch) {
          advance(doctypeMatch[0].length);
          continue
        }

        // End tag:
        var endTagMatch = html.match(endTag);
        if (endTagMatch) {
          var curIndex = index;
          advance(endTagMatch[0].length);
          parseEndTag(endTagMatch[1], curIndex, index);
          continue
        }

        // Start tag:
        var startTagMatch = parseStartTag();
        if (startTagMatch) {
          handleStartTag(startTagMatch);
          if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
            advance(1);
          }
          continue
        }
      }

      var text = (void 0), rest = (void 0), next = (void 0);
      if (textEnd >= 0) {
        rest = html.slice(textEnd);
        while (
          !endTag.test(rest) &&
          !startTagOpen.test(rest) &&
          !comment.test(rest) &&
          !conditionalComment.test(rest)
        ) {
          // < in plain text, be forgiving and treat it as text
          next = rest.indexOf('<', 1);
          if (next < 0) { break }
          textEnd += next;
          rest = html.slice(textEnd);
        }
        text = html.substring(0, textEnd);
      }

      if (textEnd < 0) {
        text = html;
      }

      if (text) {
        advance(text.length);
      }

      if (options.chars && text) {
        options.chars(text, index - text.length, index);
      }
    } else {
      var endTagLength = 0;
      var stackedTag = lastTag.toLowerCase();
      var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
      var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
        endTagLength = endTag.length;
        if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
          text = text
            .replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
            .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
        }
        if (shouldIgnoreFirstNewline(stackedTag, text)) {
          text = text.slice(1);
        }
        if (options.chars) {
          options.chars(text);
        }
        return ''
      });
      index += html.length - rest$1.length;
      html = rest$1;
      parseEndTag(stackedTag, index - endTagLength, index);
    }

    if (html === last) {
      options.chars && options.chars(html);
      if (!stack.length && options.warn) {
        options.warn(("Mal-formatted tag at end of template: \"" + html + "\""), { start: index + html.length });
      }
      break
    }
  }

  // Clean up any remaining tags
  parseEndTag();

  function advance (n) {
    index += n;
    html = html.substring(n);
  }

  function parseStartTag () {
    var start = html.match(startTagOpen);
    if (start) {
      var match = {
        tagName: start[1],
        attrs: [],
        start: index
      };
      advance(start[0].length);
      var end, attr;
      while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
        attr.start = index;
        advance(attr[0].length);
        attr.end = index;
        match.attrs.push(attr);
      }
      if (end) {
        match.unarySlash = end[1];
        advance(end[0].length);
        match.end = index;
        return match
      }
    }
  }

  function handleStartTag (match) {
    var tagName = match.tagName;
    var unarySlash = match.unarySlash;

    if (expectHTML) {
      if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
        parseEndTag(lastTag);
      }
      if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
        parseEndTag(tagName);
      }
    }

    var unary = isUnaryTag$$1(tagName) || !!unarySlash;

    var l = match.attrs.length;
    var attrs = new Array(l);
    for (var i = 0; i < l; i++) {
      var args = match.attrs[i];
      var value = args[3] || args[4] || args[5] || '';
      var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'
        ? options.shouldDecodeNewlinesForHref
        : options.shouldDecodeNewlines;
      attrs[i] = {
        name: args[1],
        value: decodeAttr(value, shouldDecodeNewlines)
      };
      if (options.outputSourceRange) {
        attrs[i].start = args.start + args[0].match(/^\s*/).length;
        attrs[i].end = args.end;
      }
    }

    if (!unary) {
      stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });
      lastTag = tagName;
    }

    if (options.start) {
      options.start(tagName, attrs, unary, match.start, match.end);
    }
  }

  function parseEndTag (tagName, start, end) {
    var pos, lowerCasedTagName;
    if (start == null) { start = index; }
    if (end == null) { end = index; }

    // Find the closest opened tag of the same type
    if (tagName) {
      lowerCasedTagName = tagName.toLowerCase();
      for (pos = stack.length - 1; pos >= 0; pos--) {
        if (stack[pos].lowerCasedTag === lowerCasedTagName) {
          break
        }
      }
    } else {
      // If no tag name is provided, clean shop
      pos = 0;
    }

    if (pos >= 0) {
      // Close all the open elements, up the stack
      for (var i = stack.length - 1; i >= pos; i--) {
        if (i > pos || !tagName &&
          options.warn
        ) {
          options.warn(
            ("tag <" + (stack[i].tag) + "> has no matching end tag."),
            { start: stack[i].start, end: stack[i].end }
          );
        }
        if (options.end) {
          options.end(stack[i].tag, start, end);
        }
      }

      // Remove the open elements from the stack
      stack.length = pos;
      lastTag = pos && stack[pos - 1].tag;
    } else if (lowerCasedTagName === 'br') {
      if (options.start) {
        options.start(tagName, [], true, start, end);
      }
    } else if (lowerCasedTagName === 'p') {
      if (options.start) {
        options.start(tagName, [], false, start, end);
      }
      if (options.end) {
        options.end(tagName, start, end);
      }
    }
  }
}

/*  */

var onRE = /^@|^v-on:/;
var dirRE = /^v-|^@|^:/;
var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
var stripParensRE = /^\(|\)$/g;
var dynamicArgRE = /^\[.*\]$/;

var argRE = /:(.*)$/;
var bindRE = /^:|^\.|^v-bind:/;
var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;

var slotRE = /^v-slot(:|$)|^#/;

var lineBreakRE = /[\r\n]/;
var whitespaceRE$1 = /\s+/g;

var invalidAttributeRE = /[\s"'<>\/=]/;

var decodeHTMLCached = cached(he.decode);

var emptySlotScopeToken = "_empty_";

// configurable state
var warn$2;
var delimiters;
var transforms;
var preTransforms;
var postTransforms;
var platformIsPreTag;
var platformMustUseProp;
var platformGetTagNamespace;
var maybeComponent;

function createASTElement (
  tag,
  attrs,
  parent
) {
  return {
    type: 1,
    tag: tag,
    attrsList: attrs,
    attrsMap: makeAttrsMap(attrs),
    rawAttrsMap: {},
    parent: parent,
    children: []
  }
}

/**
 * Convert HTML string to AST.
 */
function parse (
  template,
  options
) {
  warn$2 = options.warn || baseWarn;

  platformIsPreTag = options.isPreTag || no;
  platformMustUseProp = options.mustUseProp || no;
  platformGetTagNamespace = options.getTagNamespace || no;
  var isReservedTag = options.isReservedTag || no;
  maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };

  transforms = pluckModuleFunction(options.modules, 'transformNode');
  preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
  postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

  delimiters = options.delimiters;

  var stack = [];
  var preserveWhitespace = options.preserveWhitespace !== false;
  var whitespaceOption = options.whitespace;
  var root;
  var currentParent;
  var inVPre = false;
  var inPre = false;
  var warned = false;

  function warnOnce (msg, range) {
    if (!warned) {
      warned = true;
      warn$2(msg, range);
    }
  }

  function closeElement (element) {
    trimEndingWhitespace(element);
    if (!inVPre && !element.processed) {
      element = processElement(element, options);
    }
    // tree management
    if (!stack.length && element !== root) {
      // allow root elements with v-if, v-else-if and v-else
      if (root.if && (element.elseif || element.else)) {
        {
          checkRootConstraints(element);
        }
        addIfCondition(root, {
          exp: element.elseif,
          block: element
        });
      } else {
        warnOnce(
          "Component template should contain exactly one root element. " +
          "If you are using v-if on multiple elements, " +
          "use v-else-if to chain them instead.",
          { start: element.start }
        );
      }
    }
    if (currentParent && !element.forbidden) {
      if (element.elseif || element.else) {
        processIfConditions(element, currentParent);
      } else {
        if (element.slotScope) {
          // scoped slot
          // keep it in the children list so that v-else(-if) conditions can
          // find it as the prev node.
          var name = element.slotTarget || '"default"'
          ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
        }
        currentParent.children.push(element);
        element.parent = currentParent;
      }
    }

    // final children cleanup
    // filter out scoped slots
    element.children = element.children.filter(function (c) { return !(c).slotScope; });
    // remove trailing whitespace node again
    trimEndingWhitespace(element);

    // check pre state
    if (element.pre) {
      inVPre = false;
    }
    if (platformIsPreTag(element.tag)) {
      inPre = false;
    }
    // apply post-transforms
    for (var i = 0; i < postTransforms.length; i++) {
      postTransforms[i](element, options);
    }
  }

  function trimEndingWhitespace (el) {
    // remove trailing whitespace node
    if (!inPre) {
      var lastNode;
      while (
        (lastNode = el.children[el.children.length - 1]) &&
        lastNode.type === 3 &&
        lastNode.text === ' '
      ) {
        el.children.pop();
      }
    }
  }

  function checkRootConstraints (el) {
    if (el.tag === 'slot' || el.tag === 'template') {
      warnOnce(
        "Cannot use <" + (el.tag) + "> as component root element because it may " +
        'contain multiple nodes.',
        { start: el.start }
      );
    }
    if (el.attrsMap.hasOwnProperty('v-for')) {
      warnOnce(
        'Cannot use v-for on stateful component root element because ' +
        'it renders multiple elements.',
        el.rawAttrsMap['v-for']
      );
    }
  }

  parseHTML(template, {
    warn: warn$2,
    expectHTML: options.expectHTML,
    isUnaryTag: options.isUnaryTag,
    canBeLeftOpenTag: options.canBeLeftOpenTag,
    shouldDecodeNewlines: options.shouldDecodeNewlines,
    shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
    shouldKeepComment: options.comments,
    outputSourceRange: options.outputSourceRange,
    start: function start (tag, attrs, unary, start$1, end) {
      // check namespace.
      // inherit parent ns if there is one
      var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

      // handle IE svg bug
      /* istanbul ignore if */
      if (isIE && ns === 'svg') {
        attrs = guardIESVGBug(attrs);
      }

      var element = createASTElement(tag, attrs, currentParent);
      if (ns) {
        element.ns = ns;
      }

      {
        if (options.outputSourceRange) {
          element.start = start$1;
          element.end = end;
          element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {
            cumulated[attr.name] = attr;
            return cumulated
          }, {});
        }
        attrs.forEach(function (attr) {
          if (invalidAttributeRE.test(attr.name)) {
            warn$2(
              "Invalid dynamic argument expression: attribute names cannot contain " +
              "spaces, quotes, <, >, / or =.",
              {
                start: attr.start + attr.name.indexOf("["),
                end: attr.start + attr.name.length
              }
            );
          }
        });
      }

      if (isForbiddenTag(element) && !isServerRendering()) {
        element.forbidden = true;
        warn$2(
          'Templates should only be responsible for mapping the state to the ' +
          'UI. Avoid placing tags with side-effects in your templates, such as ' +
          "<" + tag + ">" + ', as they will not be parsed.',
          { start: element.start }
        );
      }

      // apply pre-transforms
      for (var i = 0; i < preTransforms.length; i++) {
        element = preTransforms[i](element, options) || element;
      }

      if (!inVPre) {
        processPre(element);
        if (element.pre) {
          inVPre = true;
        }
      }
      if (platformIsPreTag(element.tag)) {
        inPre = true;
      }
      if (inVPre) {
        processRawAttrs(element);
      } else if (!element.processed) {
        // structural directives
        processFor(element);
        processIf(element);
        processOnce(element);
      }

      if (!root) {
        root = element;
        {
          checkRootConstraints(root);
        }
      }

      if (!unary) {
        currentParent = element;
        stack.push(element);
      } else {
        closeElement(element);
      }
    },

    end: function end (tag, start, end$1) {
      var element = stack[stack.length - 1];
      // pop stack
      stack.length -= 1;
      currentParent = stack[stack.length - 1];
      if (options.outputSourceRange) {
        element.end = end$1;
      }
      closeElement(element);
    },

    chars: function chars (text, start, end) {
      if (!currentParent) {
        {
          if (text === template) {
            warnOnce(
              'Component template requires a root element, rather than just text.',
              { start: start }
            );
          } else if ((text = text.trim())) {
            warnOnce(
              ("text \"" + text + "\" outside root element will be ignored."),
              { start: start }
            );
          }
        }
        return
      }
      // IE textarea placeholder bug
      /* istanbul ignore if */
      if (isIE &&
        currentParent.tag === 'textarea' &&
        currentParent.attrsMap.placeholder === text
      ) {
        return
      }
      var children = currentParent.children;
      if (inPre || text.trim()) {
        text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
      } else if (!children.length) {
        // remove the whitespace-only node right after an opening tag
        text = '';
      } else if (whitespaceOption) {
        if (whitespaceOption === 'condense') {
          // in condense mode, remove the whitespace node if it contains
          // line break, otherwise condense to a single space
          text = lineBreakRE.test(text) ? '' : ' ';
        } else {
          text = ' ';
        }
      } else {
        text = preserveWhitespace ? ' ' : '';
      }
      if (text) {
        if (!inPre && whitespaceOption === 'condense') {
          // condense consecutive whitespaces into single space
          text = text.replace(whitespaceRE$1, ' ');
        }
        var res;
        var child;
        if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
          child = {
            type: 2,
            expression: res.expression,
            tokens: res.tokens,
            text: text
          };
        } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
          child = {
            type: 3,
            text: text
          };
        }
        if (child) {
          if (options.outputSourceRange) {
            child.start = start;
            child.end = end;
          }
          children.push(child);
        }
      }
    },
    comment: function comment (text, start, end) {
      // adding anyting as a sibling to the root node is forbidden
      // comments should still be allowed, but ignored
      if (currentParent) {
        var child = {
          type: 3,
          text: text,
          isComment: true
        };
        if (options.outputSourceRange) {
          child.start = start;
          child.end = end;
        }
        currentParent.children.push(child);
      }
    }
  });
  return root
}

function processPre (el) {
  if (getAndRemoveAttr(el, 'v-pre') != null) {
    el.pre = true;
  }
}

function processRawAttrs (el) {
  var list = el.attrsList;
  var len = list.length;
  if (len) {
    var attrs = el.attrs = new Array(len);
    for (var i = 0; i < len; i++) {
      attrs[i] = {
        name: list[i].name,
        value: JSON.stringify(list[i].value)
      };
      if (list[i].start != null) {
        attrs[i].start = list[i].start;
        attrs[i].end = list[i].end;
      }
    }
  } else if (!el.pre) {
    // non root node in pre blocks with no attributes
    el.plain = true;
  }
}

function processElement (
  element,
  options
) {
  processKey(element);

  // determine whether this is a plain element after
  // removing structural attributes
  element.plain = (
    !element.key &&
    !element.scopedSlots &&
    !element.attrsList.length
  );

  processRef(element);
  processSlotContent(element);
  processSlotOutlet(element);
  processComponent(element);
  for (var i = 0; i < transforms.length; i++) {
    element = transforms[i](element, options) || element;
  }
  processAttrs(element);
  return element
}

function processKey (el) {
  var exp = getBindingAttr(el, 'key');
  if (exp) {
    {
      if (el.tag === 'template') {
        warn$2(
          "<template> cannot be keyed. Place the key on real elements instead.",
          getRawBindingAttr(el, 'key')
        );
      }
      if (el.for) {
        var iterator = el.iterator2 || el.iterator1;
        var parent = el.parent;
        if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
          warn$2(
            "Do not use v-for index as key on <transition-group> children, " +
            "this is the same as not using keys.",
            getRawBindingAttr(el, 'key'),
            true /* tip */
          );
        }
      }
    }
    el.key = exp;
  }
}

function processRef (el) {
  var ref = getBindingAttr(el, 'ref');
  if (ref) {
    el.ref = ref;
    el.refInFor = checkInFor(el);
  }
}

function processFor (el) {
  var exp;
  if ((exp = getAndRemoveAttr(el, 'v-for'))) {
    var res = parseFor(exp);
    if (res) {
      extend(el, res);
    } else {
      warn$2(
        ("Invalid v-for expression: " + exp),
        el.rawAttrsMap['v-for']
      );
    }
  }
}



function parseFor (exp) {
  var inMatch = exp.match(forAliasRE);
  if (!inMatch) { return }
  var res = {};
  res.for = inMatch[2].trim();
  var alias = inMatch[1].trim().replace(stripParensRE, '');
  var iteratorMatch = alias.match(forIteratorRE);
  if (iteratorMatch) {
    res.alias = alias.replace(forIteratorRE, '').trim();
    res.iterator1 = iteratorMatch[1].trim();
    if (iteratorMatch[2]) {
      res.iterator2 = iteratorMatch[2].trim();
    }
  } else {
    res.alias = alias;
  }
  return res
}

function processIf (el) {
  var exp = getAndRemoveAttr(el, 'v-if');
  if (exp) {
    el.if = exp;
    addIfCondition(el, {
      exp: exp,
      block: el
    });
  } else {
    if (getAndRemoveAttr(el, 'v-else') != null) {
      el.else = true;
    }
    var elseif = getAndRemoveAttr(el, 'v-else-if');
    if (elseif) {
      el.elseif = elseif;
    }
  }
}

function processIfConditions (el, parent) {
  var prev = findPrevElement(parent.children);
  if (prev && prev.if) {
    addIfCondition(prev, {
      exp: el.elseif,
      block: el
    });
  } else {
    warn$2(
      "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
      "used on element <" + (el.tag) + "> without corresponding v-if.",
      el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']
    );
  }
}

function findPrevElement (children) {
  var i = children.length;
  while (i--) {
    if (children[i].type === 1) {
      return children[i]
    } else {
      if (children[i].text !== ' ') {
        warn$2(
          "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
          "will be ignored.",
          children[i]
        );
      }
      children.pop();
    }
  }
}

function addIfCondition (el, condition) {
  if (!el.ifConditions) {
    el.ifConditions = [];
  }
  el.ifConditions.push(condition);
}

function processOnce (el) {
  var once$$1 = getAndRemoveAttr(el, 'v-once');
  if (once$$1 != null) {
    el.once = true;
  }
}

// handle content being passed to a component as slot,
// e.g. <template slot="xxx">, <div slot-scope="xxx">
function processSlotContent (el) {
  var slotScope;
  if (el.tag === 'template') {
    slotScope = getAndRemoveAttr(el, 'scope');
    /* istanbul ignore if */
    if (slotScope) {
      warn$2(
        "the \"scope\" attribute for scoped slots have been deprecated and " +
        "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " +
        "can also be used on plain elements in addition to <template> to " +
        "denote scoped slots.",
        el.rawAttrsMap['scope'],
        true
      );
    }
    el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
  } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {
    /* istanbul ignore if */
    if (el.attrsMap['v-for']) {
      warn$2(
        "Ambiguous combined usage of slot-scope and v-for on <" + (el.tag) + "> " +
        "(v-for takes higher priority). Use a wrapper <template> for the " +
        "scoped slot to make it clearer.",
        el.rawAttrsMap['slot-scope'],
        true
      );
    }
    el.slotScope = slotScope;
  }

  // slot="xxx"
  var slotTarget = getBindingAttr(el, 'slot');
  if (slotTarget) {
    el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
    el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);
    // preserve slot as an attribute for native shadow DOM compat
    // only for non-scoped slots.
    if (el.tag !== 'template' && !el.slotScope) {
      addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
    }
  }

  // 2.6 v-slot syntax
  {
    if (el.tag === 'template') {
      // v-slot on <template>
      var slotBinding = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding) {
        {
          if (el.slotTarget || el.slotScope) {
            warn$2(
              "Unexpected mixed usage of different slot syntaxes.",
              el
            );
          }
          if (el.parent && !maybeComponent(el.parent)) {
            warn$2(
              "<template v-slot> can only appear at the root level inside " +
              "the receiving the component",
              el
            );
          }
        }
        var ref = getSlotName(slotBinding);
        var name = ref.name;
        var dynamic = ref.dynamic;
        el.slotTarget = name;
        el.slotTargetDynamic = dynamic;
        el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
      }
    } else {
      // v-slot on component, denotes default slot
      var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);
      if (slotBinding$1) {
        {
          if (!maybeComponent(el)) {
            warn$2(
              "v-slot can only be used on components or <template>.",
              slotBinding$1
            );
          }
          if (el.slotScope || el.slotTarget) {
            warn$2(
              "Unexpected mixed usage of different slot syntaxes.",
              el
            );
          }
          if (el.scopedSlots) {
            warn$2(
              "To avoid scope ambiguity, the default slot should also use " +
              "<template> syntax when there are other named slots.",
              slotBinding$1
            );
          }
        }
        // add the component's children to its default slot
        var slots = el.scopedSlots || (el.scopedSlots = {});
        var ref$1 = getSlotName(slotBinding$1);
        var name$1 = ref$1.name;
        var dynamic$1 = ref$1.dynamic;
        var slotContainer = slots[name$1] = createASTElement('template', [], el);
        slotContainer.slotTarget = name$1;
        slotContainer.slotTargetDynamic = dynamic$1;
        slotContainer.children = el.children.filter(function (c) {
          if (!c.slotScope) {
            c.parent = slotContainer;
            return true
          }
        });
        slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;
        // remove children as they are returned from scopedSlots now
        el.children = [];
        // mark el non-plain so data gets generated
        el.plain = false;
      }
    }
  }
}

function getSlotName (binding) {
  var name = binding.name.replace(slotRE, '');
  if (!name) {
    if (binding.name[0] !== '#') {
      name = 'default';
    } else {
      warn$2(
        "v-slot shorthand syntax requires a slot name.",
        binding
      );
    }
  }
  return dynamicArgRE.test(name)
    // dynamic [name]
    ? { name: name.slice(1, -1), dynamic: true }
    // static name
    : { name: ("\"" + name + "\""), dynamic: false }
}

// handle <slot/> outlets
function processSlotOutlet (el) {
  if (el.tag === 'slot') {
    el.slotName = getBindingAttr(el, 'name');
    if (el.key) {
      warn$2(
        "`key` does not work on <slot> because slots are abstract outlets " +
        "and can possibly expand into multiple elements. " +
        "Use the key on a wrapping element instead.",
        getRawBindingAttr(el, 'key')
      );
    }
  }
}

function processComponent (el) {
  var binding;
  if ((binding = getBindingAttr(el, 'is'))) {
    el.component = binding;
  }
  if (getAndRemoveAttr(el, 'inline-template') != null) {
    el.inlineTemplate = true;
  }
}

function processAttrs (el) {
  var list = el.attrsList;
  var i, l, name, rawName, value, modifiers, syncGen, isDynamic;
  for (i = 0, l = list.length; i < l; i++) {
    name = rawName = list[i].name;
    value = list[i].value;
    if (dirRE.test(name)) {
      // mark element as dynamic
      el.hasBindings = true;
      // modifiers
      modifiers = parseModifiers(name.replace(dirRE, ''));
      // support .foo shorthand syntax for the .prop modifier
      if (modifiers) {
        name = name.replace(modifierRE, '');
      }
      if (bindRE.test(name)) { // v-bind
        name = name.replace(bindRE, '');
        value = parseFilters(value);
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        if (
          value.trim().length === 0
        ) {
          warn$2(
            ("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"")
          );
        }
        if (modifiers) {
          if (modifiers.prop && !isDynamic) {
            name = camelize(name);
            if (name === 'innerHtml') { name = 'innerHTML'; }
          }
          if (modifiers.camel && !isDynamic) {
            name = camelize(name);
          }
          if (modifiers.sync) {
            syncGen = genAssignmentCode(value, "$event");
            if (!isDynamic) {
              addHandler(
                el,
                ("update:" + (camelize(name))),
                syncGen,
                null,
                false,
                warn$2,
                list[i]
              );
              if (hyphenate(name) !== camelize(name)) {
                addHandler(
                  el,
                  ("update:" + (hyphenate(name))),
                  syncGen,
                  null,
                  false,
                  warn$2,
                  list[i]
                );
              }
            } else {
              // handler w/ dynamic event name
              addHandler(
                el,
                ("\"update:\"+(" + name + ")"),
                syncGen,
                null,
                false,
                warn$2,
                list[i],
                true // dynamic
              );
            }
          }
        }
        if ((modifiers && modifiers.prop) || (
          !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)
        )) {
          addProp(el, name, value, list[i], isDynamic);
        } else {
          addAttr(el, name, value, list[i], isDynamic);
        }
      } else if (onRE.test(name)) { // v-on
        name = name.replace(onRE, '');
        isDynamic = dynamicArgRE.test(name);
        if (isDynamic) {
          name = name.slice(1, -1);
        }
        addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
      } else { // normal directives
        name = name.replace(dirRE, '');
        // parse arg
        var argMatch = name.match(argRE);
        var arg = argMatch && argMatch[1];
        isDynamic = false;
        if (arg) {
          name = name.slice(0, -(arg.length + 1));
          if (dynamicArgRE.test(arg)) {
            arg = arg.slice(1, -1);
            isDynamic = true;
          }
        }
        addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);
        if (name === 'model') {
          checkForAliasModel(el, value);
        }
      }
    } else {
      // literal attribute
      {
        var res = parseText(value, delimiters);
        if (res) {
          warn$2(
            name + "=\"" + value + "\": " +
            'Interpolation inside attributes has been removed. ' +
            'Use v-bind or the colon shorthand instead. For example, ' +
            'instead of <div id="{{ val }}">, use <div :id="val">.',
            list[i]
          );
        }
      }
      addAttr(el, name, JSON.stringify(value), list[i]);
      // #6887 firefox doesn't update muted state if set via attribute
      // even immediately after element creation
      if (!el.component &&
          name === 'muted' &&
          platformMustUseProp(el.tag, el.attrsMap.type, name)) {
        addProp(el, name, 'true', list[i]);
      }
    }
  }
}

function checkInFor (el) {
  var parent = el;
  while (parent) {
    if (parent.for !== undefined) {
      return true
    }
    parent = parent.parent;
  }
  return false
}

function parseModifiers (name) {
  var match = name.match(modifierRE);
  if (match) {
    var ret = {};
    match.forEach(function (m) { ret[m.slice(1)] = true; });
    return ret
  }
}

function makeAttrsMap (attrs) {
  var map = {};
  for (var i = 0, l = attrs.length; i < l; i++) {
    if (
      map[attrs[i].name] && !isIE && !isEdge
    ) {
      warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);
    }
    map[attrs[i].name] = attrs[i].value;
  }
  return map
}

// for script (e.g. type="x/template") or style, do not decode content
function isTextTag (el) {
  return el.tag === 'script' || el.tag === 'style'
}

function isForbiddenTag (el) {
  return (
    el.tag === 'style' ||
    (el.tag === 'script' && (
      !el.attrsMap.type ||
      el.attrsMap.type === 'text/javascript'
    ))
  )
}

var ieNSBug = /^xmlns:NS\d+/;
var ieNSPrefix = /^NS\d+:/;

/* istanbul ignore next */
function guardIESVGBug (attrs) {
  var res = [];
  for (var i = 0; i < attrs.length; i++) {
    var attr = attrs[i];
    if (!ieNSBug.test(attr.name)) {
      attr.name = attr.name.replace(ieNSPrefix, '');
      res.push(attr);
    }
  }
  return res
}

function checkForAliasModel (el, value) {
  var _el = el;
  while (_el) {
    if (_el.for && _el.alias === value) {
      warn$2(
        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
        "You are binding v-model directly to a v-for iteration alias. " +
        "This will not be able to modify the v-for source array because " +
        "writing to the alias is like modifying a function local variable. " +
        "Consider using an array of objects and use v-model on an object property instead.",
        el.rawAttrsMap['v-model']
      );
    }
    _el = _el.parent;
  }
}

/*  */

function preTransformNode (el, options) {
  if (el.tag === 'input') {
    var map = el.attrsMap;
    if (!map['v-model']) {
      return
    }

    var typeBinding;
    if (map[':type'] || map['v-bind:type']) {
      typeBinding = getBindingAttr(el, 'type');
    }
    if (!map.type && !typeBinding && map['v-bind']) {
      typeBinding = "(" + (map['v-bind']) + ").type";
    }

    if (typeBinding) {
      var ifCondition = getAndRemoveAttr(el, 'v-if', true);
      var ifConditionExtra = ifCondition ? ("&&(" + ifCondition + ")") : "";
      var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
      var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);
      // 1. checkbox
      var branch0 = cloneASTElement(el);
      // process for on the main node
      processFor(branch0);
      addRawAttr(branch0, 'type', 'checkbox');
      processElement(branch0, options);
      branch0.processed = true; // prevent it from double-processed
      branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
      addIfCondition(branch0, {
        exp: branch0.if,
        block: branch0
      });
      // 2. add radio else-if condition
      var branch1 = cloneASTElement(el);
      getAndRemoveAttr(branch1, 'v-for', true);
      addRawAttr(branch1, 'type', 'radio');
      processElement(branch1, options);
      addIfCondition(branch0, {
        exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
        block: branch1
      });
      // 3. other
      var branch2 = cloneASTElement(el);
      getAndRemoveAttr(branch2, 'v-for', true);
      addRawAttr(branch2, ':type', typeBinding);
      processElement(branch2, options);
      addIfCondition(branch0, {
        exp: ifCondition,
        block: branch2
      });

      if (hasElse) {
        branch0.else = true;
      } else if (elseIfCondition) {
        branch0.elseif = elseIfCondition;
      }

      return branch0
    }
  }
}

function cloneASTElement (el) {
  return createASTElement(el.tag, el.attrsList.slice(), el.parent)
}

var model$1 = {
  preTransformNode: preTransformNode
};

var modules$1 = [
  klass$1,
  style$1,
  model$1
];

/*  */

function text (el, dir) {
  if (dir.value) {
    addProp(el, 'textContent', ("_s(" + (dir.value) + ")"), dir);
  }
}

/*  */

function html (el, dir) {
  if (dir.value) {
    addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"), dir);
  }
}

var directives$1 = {
  model: model,
  text: text,
  html: html
};

/*  */

var baseOptions = {
  expectHTML: true,
  modules: modules$1,
  directives: directives$1,
  isPreTag: isPreTag,
  isUnaryTag: isUnaryTag,
  mustUseProp: mustUseProp,
  canBeLeftOpenTag: canBeLeftOpenTag,
  isReservedTag: isReservedTag,
  getTagNamespace: getTagNamespace,
  staticKeys: genStaticKeys(modules$1)
};

/*  */

var isStaticKey;
var isPlatformReservedTag;

var genStaticKeysCached = cached(genStaticKeys$1);

/**
 * Goal of the optimizer: walk the generated template AST tree
 * and detect sub-trees that are purely static, i.e. parts of
 * the DOM that never needs to change.
 *
 * Once we detect these sub-trees, we can:
 *
 * 1. Hoist them into constants, so that we no longer need to
 *    create fresh nodes for them on each re-render;
 * 2. Completely skip them in the patching process.
 */
function optimize (root, options) {
  if (!root) { return }
  isStaticKey = genStaticKeysCached(options.staticKeys || '');
  isPlatformReservedTag = options.isReservedTag || no;
  // first pass: mark all non-static nodes.
  markStatic$1(root);
  // second pass: mark static roots.
  markStaticRoots(root, false);
}

function genStaticKeys$1 (keys) {
  return makeMap(
    'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +
    (keys ? ',' + keys : '')
  )
}

function markStatic$1 (node) {
  node.static = isStatic(node);
  if (node.type === 1) {
    // do not make component slot content static. this avoids
    // 1. components not able to mutate slot nodes
    // 2. static slot content fails for hot-reloading
    if (
      !isPlatformReservedTag(node.tag) &&
      node.tag !== 'slot' &&
      node.attrsMap['inline-template'] == null
    ) {
      return
    }
    for (var i = 0, l = node.children.length; i < l; i++) {
      var child = node.children[i];
      markStatic$1(child);
      if (!child.static) {
        node.static = false;
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        var block = node.ifConditions[i$1].block;
        markStatic$1(block);
        if (!block.static) {
          node.static = false;
        }
      }
    }
  }
}

function markStaticRoots (node, isInFor) {
  if (node.type === 1) {
    if (node.static || node.once) {
      node.staticInFor = isInFor;
    }
    // For a node to qualify as a static root, it should have children that
    // are not just static text. Otherwise the cost of hoisting out will
    // outweigh the benefits and it's better off to just always render it fresh.
    if (node.static && node.children.length && !(
      node.children.length === 1 &&
      node.children[0].type === 3
    )) {
      node.staticRoot = true;
      return
    } else {
      node.staticRoot = false;
    }
    if (node.children) {
      for (var i = 0, l = node.children.length; i < l; i++) {
        markStaticRoots(node.children[i], isInFor || !!node.for);
      }
    }
    if (node.ifConditions) {
      for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
        markStaticRoots(node.ifConditions[i$1].block, isInFor);
      }
    }
  }
}

function isStatic (node) {
  if (node.type === 2) { // expression
    return false
  }
  if (node.type === 3) { // text
    return true
  }
  return !!(node.pre || (
    !node.hasBindings && // no dynamic bindings
    !node.if && !node.for && // not v-if or v-for or v-else
    !isBuiltInTag(node.tag) && // not a built-in
    isPlatformReservedTag(node.tag) && // not a component
    !isDirectChildOfTemplateFor(node) &&
    Object.keys(node).every(isStaticKey)
  ))
}

function isDirectChildOfTemplateFor (node) {
  while (node.parent) {
    node = node.parent;
    if (node.tag !== 'template') {
      return false
    }
    if (node.for) {
      return true
    }
  }
  return false
}

/*  */

var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*(?:[\w$]+)?\s*\(/;
var fnInvokeRE = /\([^)]*?\);*$/;
var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;

// KeyboardEvent.keyCode aliases
var keyCodes = {
  esc: 27,
  tab: 9,
  enter: 13,
  space: 32,
  up: 38,
  left: 37,
  right: 39,
  down: 40,
  'delete': [8, 46]
};

// KeyboardEvent.key aliases
var keyNames = {
  // #7880: IE11 and Edge use `Esc` for Escape key name.
  esc: ['Esc', 'Escape'],
  tab: 'Tab',
  enter: 'Enter',
  // #9112: IE11 uses `Spacebar` for Space key name.
  space: [' ', 'Spacebar'],
  // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
  up: ['Up', 'ArrowUp'],
  left: ['Left', 'ArrowLeft'],
  right: ['Right', 'ArrowRight'],
  down: ['Down', 'ArrowDown'],
  // #9112: IE11 uses `Del` for Delete key name.
  'delete': ['Backspace', 'Delete', 'Del']
};

// #4868: modifiers that prevent the execution of the listener
// need to explicitly return null so that we can determine whether to remove
// the listener for .once
var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };

var modifierCode = {
  stop: '$event.stopPropagation();',
  prevent: '$event.preventDefault();',
  self: genGuard("$event.target !== $event.currentTarget"),
  ctrl: genGuard("!$event.ctrlKey"),
  shift: genGuard("!$event.shiftKey"),
  alt: genGuard("!$event.altKey"),
  meta: genGuard("!$event.metaKey"),
  left: genGuard("'button' in $event && $event.button !== 0"),
  middle: genGuard("'button' in $event && $event.button !== 1"),
  right: genGuard("'button' in $event && $event.button !== 2")
};

function genHandlers (
  events,
  isNative
) {
  var prefix = isNative ? 'nativeOn:' : 'on:';
  var staticHandlers = "";
  var dynamicHandlers = "";
  for (var name in events) {
    var handlerCode = genHandler(events[name]);
    if (events[name] && events[name].dynamic) {
      dynamicHandlers += name + "," + handlerCode + ",";
    } else {
      staticHandlers += "\"" + name + "\":" + handlerCode + ",";
    }
  }
  staticHandlers = "{" + (staticHandlers.slice(0, -1)) + "}";
  if (dynamicHandlers) {
    return prefix + "_d(" + staticHandlers + ",[" + (dynamicHandlers.slice(0, -1)) + "])"
  } else {
    return prefix + staticHandlers
  }
}

function genHandler (handler) {
  if (!handler) {
    return 'function(){}'
  }

  if (Array.isArray(handler)) {
    return ("[" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + "]")
  }

  var isMethodPath = simplePathRE.test(handler.value);
  var isFunctionExpression = fnExpRE.test(handler.value);
  var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

  if (!handler.modifiers) {
    if (isMethodPath || isFunctionExpression) {
      return handler.value
    }
    return ("function($event){" + (isFunctionInvocation ? ("return " + (handler.value)) : handler.value) + "}") // inline statement
  } else {
    var code = '';
    var genModifierCode = '';
    var keys = [];
    for (var key in handler.modifiers) {
      if (modifierCode[key]) {
        genModifierCode += modifierCode[key];
        // left/right
        if (keyCodes[key]) {
          keys.push(key);
        }
      } else if (key === 'exact') {
        var modifiers = (handler.modifiers);
        genModifierCode += genGuard(
          ['ctrl', 'shift', 'alt', 'meta']
            .filter(function (keyModifier) { return !modifiers[keyModifier]; })
            .map(function (keyModifier) { return ("$event." + keyModifier + "Key"); })
            .join('||')
        );
      } else {
        keys.push(key);
      }
    }
    if (keys.length) {
      code += genKeyFilter(keys);
    }
    // Make sure modifiers like prevent and stop get executed after key filtering
    if (genModifierCode) {
      code += genModifierCode;
    }
    var handlerCode = isMethodPath
      ? ("return " + (handler.value) + "($event)")
      : isFunctionExpression
        ? ("return (" + (handler.value) + ")($event)")
        : isFunctionInvocation
          ? ("return " + (handler.value))
          : handler.value;
    return ("function($event){" + code + handlerCode + "}")
  }
}

function genKeyFilter (keys) {
  return (
    // make sure the key filters only apply to KeyboardEvents
    // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
    // key events that do not have keyCode property...
    "if(!$event.type.indexOf('key')&&" +
    (keys.map(genFilterCode).join('&&')) + ")return null;"
  )
}

function genFilterCode (key) {
  var keyVal = parseInt(key, 10);
  if (keyVal) {
    return ("$event.keyCode!==" + keyVal)
  }
  var keyCode = keyCodes[key];
  var keyName = keyNames[key];
  return (
    "_k($event.keyCode," +
    (JSON.stringify(key)) + "," +
    (JSON.stringify(keyCode)) + "," +
    "$event.key," +
    "" + (JSON.stringify(keyName)) +
    ")"
  )
}

/*  */

function on (el, dir) {
  if (dir.modifiers) {
    warn("v-on without argument does not support modifiers.");
  }
  el.wrapListeners = function (code) { return ("_g(" + code + "," + (dir.value) + ")"); };
}

/*  */

function bind$1 (el, dir) {
  el.wrapData = function (code) {
    return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")
  };
}

/*  */

var baseDirectives = {
  on: on,
  bind: bind$1,
  cloak: noop
};

/*  */





var CodegenState = function CodegenState (options) {
  this.options = options;
  this.warn = options.warn || baseWarn;
  this.transforms = pluckModuleFunction(options.modules, 'transformCode');
  this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
  this.directives = extend(extend({}, baseDirectives), options.directives);
  var isReservedTag = options.isReservedTag || no;
  this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };
  this.onceId = 0;
  this.staticRenderFns = [];
  this.pre = false;
};



function generate (
  ast,
  options
) {
  var state = new CodegenState(options);
  var code = ast ? genElement(ast, state) : '_c("div")';
  return {
    render: ("with(this){return " + code + "}"),
    staticRenderFns: state.staticRenderFns
  }
}

function genElement (el, state) {
  if (el.parent) {
    el.pre = el.pre || el.parent.pre;
  }

  if (el.staticRoot && !el.staticProcessed) {
    return genStatic(el, state)
  } else if (el.once && !el.onceProcessed) {
    return genOnce(el, state)
  } else if (el.for && !el.forProcessed) {
    return genFor(el, state)
  } else if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
    return genChildren(el, state) || 'void 0'
  } else if (el.tag === 'slot') {
    return genSlot(el, state)
  } else {
    // component or element
    var code;
    if (el.component) {
      code = genComponent(el.component, el, state);
    } else {
      var data;
      if (!el.plain || (el.pre && state.maybeComponent(el))) {
        data = genData$2(el, state);
      }

      var children = el.inlineTemplate ? null : genChildren(el, state, true);
      code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
    }
    // module transforms
    for (var i = 0; i < state.transforms.length; i++) {
      code = state.transforms[i](el, code);
    }
    return code
  }
}

// hoist static sub-trees out
function genStatic (el, state) {
  el.staticProcessed = true;
  // Some elements (templates) need to behave differently inside of a v-pre
  // node.  All pre nodes are static roots, so we can use this as a location to
  // wrap a state change and reset it upon exiting the pre node.
  var originalPreState = state.pre;
  if (el.pre) {
    state.pre = el.pre;
  }
  state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));
  state.pre = originalPreState;
  return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
}

// v-once
function genOnce (el, state) {
  el.onceProcessed = true;
  if (el.if && !el.ifProcessed) {
    return genIf(el, state)
  } else if (el.staticInFor) {
    var key = '';
    var parent = el.parent;
    while (parent) {
      if (parent.for) {
        key = parent.key;
        break
      }
      parent = parent.parent;
    }
    if (!key) {
      state.warn(
        "v-once can only be used inside v-for that is keyed. ",
        el.rawAttrsMap['v-once']
      );
      return genElement(el, state)
    }
    return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")
  } else {
    return genStatic(el, state)
  }
}

function genIf (
  el,
  state,
  altGen,
  altEmpty
) {
  el.ifProcessed = true; // avoid recursion
  return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)
}

function genIfConditions (
  conditions,
  state,
  altGen,
  altEmpty
) {
  if (!conditions.length) {
    return altEmpty || '_e()'
  }

  var condition = conditions.shift();
  if (condition.exp) {
    return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))
  } else {
    return ("" + (genTernaryExp(condition.block)))
  }

  // v-if with v-once should generate code like (a)?_m(0):_m(1)
  function genTernaryExp (el) {
    return altGen
      ? altGen(el, state)
      : el.once
        ? genOnce(el, state)
        : genElement(el, state)
  }
}

function genFor (
  el,
  state,
  altGen,
  altHelper
) {
  var exp = el.for;
  var alias = el.alias;
  var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
  var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

  if (state.maybeComponent(el) &&
    el.tag !== 'slot' &&
    el.tag !== 'template' &&
    !el.key
  ) {
    state.warn(
      "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +
      "v-for should have explicit keys. " +
      "See https://vuejs.org/guide/list.html#key for more info.",
      el.rawAttrsMap['v-for'],
      true /* tip */
    );
  }

  el.forProcessed = true; // avoid recursion
  return (altHelper || '_l') + "((" + exp + ")," +
    "function(" + alias + iterator1 + iterator2 + "){" +
      "return " + ((altGen || genElement)(el, state)) +
    '})'
}

function genData$2 (el, state) {
  var data = '{';

  // directives first.
  // directives may mutate the el's other properties before they are generated.
  var dirs = genDirectives(el, state);
  if (dirs) { data += dirs + ','; }

  // key
  if (el.key) {
    data += "key:" + (el.key) + ",";
  }
  // ref
  if (el.ref) {
    data += "ref:" + (el.ref) + ",";
  }
  if (el.refInFor) {
    data += "refInFor:true,";
  }
  // pre
  if (el.pre) {
    data += "pre:true,";
  }
  // record original tag name for components using "is" attribute
  if (el.component) {
    data += "tag:\"" + (el.tag) + "\",";
  }
  // module data generation functions
  for (var i = 0; i < state.dataGenFns.length; i++) {
    data += state.dataGenFns[i](el);
  }
  // attributes
  if (el.attrs) {
    data += "attrs:" + (genProps(el.attrs)) + ",";
  }
  // DOM props
  if (el.props) {
    data += "domProps:" + (genProps(el.props)) + ",";
  }
  // event handlers
  if (el.events) {
    data += (genHandlers(el.events, false)) + ",";
  }
  if (el.nativeEvents) {
    data += (genHandlers(el.nativeEvents, true)) + ",";
  }
  // slot target
  // only for non-scoped slots
  if (el.slotTarget && !el.slotScope) {
    data += "slot:" + (el.slotTarget) + ",";
  }
  // scoped slots
  if (el.scopedSlots) {
    data += (genScopedSlots(el, el.scopedSlots, state)) + ",";
  }
  // component v-model
  if (el.model) {
    data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
  }
  // inline-template
  if (el.inlineTemplate) {
    var inlineTemplate = genInlineTemplate(el, state);
    if (inlineTemplate) {
      data += inlineTemplate + ",";
    }
  }
  data = data.replace(/,$/, '') + '}';
  // v-bind dynamic argument wrap
  // v-bind with dynamic arguments must be applied using the same v-bind object
  // merge helper so that class/style/mustUseProp attrs are handled correctly.
  if (el.dynamicAttrs) {
    data = "_b(" + data + ",\"" + (el.tag) + "\"," + (genProps(el.dynamicAttrs)) + ")";
  }
  // v-bind data wrap
  if (el.wrapData) {
    data = el.wrapData(data);
  }
  // v-on data wrap
  if (el.wrapListeners) {
    data = el.wrapListeners(data);
  }
  return data
}

function genDirectives (el, state) {
  var dirs = el.directives;
  if (!dirs) { return }
  var res = 'directives:[';
  var hasRuntime = false;
  var i, l, dir, needRuntime;
  for (i = 0, l = dirs.length; i < l; i++) {
    dir = dirs[i];
    needRuntime = true;
    var gen = state.directives[dir.name];
    if (gen) {
      // compile-time directive that manipulates AST.
      // returns true if it also needs a runtime counterpart.
      needRuntime = !!gen(el, dir, state.warn);
    }
    if (needRuntime) {
      hasRuntime = true;
      res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:" + (dir.isDynamicArg ? dir.arg : ("\"" + (dir.arg) + "\""))) : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
    }
  }
  if (hasRuntime) {
    return res.slice(0, -1) + ']'
  }
}

function genInlineTemplate (el, state) {
  var ast = el.children[0];
  if (el.children.length !== 1 || ast.type !== 1) {
    state.warn(
      'Inline-template components must have exactly one child element.',
      { start: el.start }
    );
  }
  if (ast && ast.type === 1) {
    var inlineRenderFns = generate(ast, state.options);
    return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
  }
}

function genScopedSlots (
  el,
  slots,
  state
) {
  // by default scoped slots are considered "stable", this allows child
  // components with only scoped slots to skip forced updates from parent.
  // but in some cases we have to bail-out of this optimization
  // for example if the slot contains dynamic names, has v-if or v-for on them...
  var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
    var slot = slots[key];
    return (
      slot.slotTargetDynamic ||
      slot.if ||
      slot.for ||
      containsSlotChild(slot) // is passing down slot from parent which may be dynamic
    )
  });

  // #9534: if a component with scoped slots is inside a conditional branch,
  // it's possible for the same component to be reused but with different
  // compiled slot content. To avoid that, we generate a unique key based on
  // the generated code of all the slot contents.
  var needsKey = !!el.if;

  // OR when it is inside another scoped slot or v-for (the reactivity may be
  // disconnected due to the intermediate scope variable)
  // #9438, #9506
  // TODO: this can be further optimized by properly analyzing in-scope bindings
  // and skip force updating ones that do not actually use scope variables.
  if (!needsForceUpdate) {
    var parent = el.parent;
    while (parent) {
      if (
        (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||
        parent.for
      ) {
        needsForceUpdate = true;
        break
      }
      if (parent.if) {
        needsKey = true;
      }
      parent = parent.parent;
    }
  }

  var generatedSlots = Object.keys(slots)
    .map(function (key) { return genScopedSlot(slots[key], state); })
    .join(',');

  return ("scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? (",null,false," + (hash(generatedSlots))) : "") + ")")
}

function hash(str) {
  var hash = 5381;
  var i = str.length;
  while(i) {
    hash = (hash * 33) ^ str.charCodeAt(--i);
  }
  return hash >>> 0
}

function containsSlotChild (el) {
  if (el.type === 1) {
    if (el.tag === 'slot') {
      return true
    }
    return el.children.some(containsSlotChild)
  }
  return false
}

function genScopedSlot (
  el,
  state
) {
  var isLegacySyntax = el.attrsMap['slot-scope'];
  if (el.if && !el.ifProcessed && !isLegacySyntax) {
    return genIf(el, state, genScopedSlot, "null")
  }
  if (el.for && !el.forProcessed) {
    return genFor(el, state, genScopedSlot)
  }
  var slotScope = el.slotScope === emptySlotScopeToken
    ? ""
    : String(el.slotScope);
  var fn = "function(" + slotScope + "){" +
    "return " + (el.tag === 'template'
      ? el.if && isLegacySyntax
        ? ("(" + (el.if) + ")?" + (genChildren(el, state) || 'undefined') + ":undefined")
        : genChildren(el, state) || 'undefined'
      : genElement(el, state)) + "}";
  // reverse proxy v-slot without scope on this.$slots
  var reverseProxy = slotScope ? "" : ",proxy:true";
  return ("{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}")
}

function genChildren (
  el,
  state,
  checkSkip,
  altGenElement,
  altGenNode
) {
  var children = el.children;
  if (children.length) {
    var el$1 = children[0];
    // optimize single v-for
    if (children.length === 1 &&
      el$1.for &&
      el$1.tag !== 'template' &&
      el$1.tag !== 'slot'
    ) {
      var normalizationType = checkSkip
        ? state.maybeComponent(el$1) ? ",1" : ",0"
        : "";
      return ("" + ((altGenElement || genElement)(el$1, state)) + normalizationType)
    }
    var normalizationType$1 = checkSkip
      ? getNormalizationType(children, state.maybeComponent)
      : 0;
    var gen = altGenNode || genNode;
    return ("[" + (children.map(function (c) { return gen(c, state); }).join(',')) + "]" + (normalizationType$1 ? ("," + normalizationType$1) : ''))
  }
}

// determine the normalization needed for the children array.
// 0: no normalization needed
// 1: simple normalization needed (possible 1-level deep nested array)
// 2: full normalization needed
function getNormalizationType (
  children,
  maybeComponent
) {
  var res = 0;
  for (var i = 0; i < children.length; i++) {
    var el = children[i];
    if (el.type !== 1) {
      continue
    }
    if (needsNormalization(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
      res = 2;
      break
    }
    if (maybeComponent(el) ||
        (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
      res = 1;
    }
  }
  return res
}

function needsNormalization (el) {
  return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
}

function genNode (node, state) {
  if (node.type === 1) {
    return genElement(node, state)
  } else if (node.type === 3 && node.isComment) {
    return genComment(node)
  } else {
    return genText(node)
  }
}

function genText (text) {
  return ("_v(" + (text.type === 2
    ? text.expression // no need for () because already wrapped in _s()
    : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
}

function genComment (comment) {
  return ("_e(" + (JSON.stringify(comment.text)) + ")")
}

function genSlot (el, state) {
  var slotName = el.slotName || '"default"';
  var children = genChildren(el, state);
  var res = "_t(" + slotName + (children ? ("," + children) : '');
  var attrs = el.attrs || el.dynamicAttrs
    ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({
        // slot props are camelized
        name: camelize(attr.name),
        value: attr.value,
        dynamic: attr.dynamic
      }); }))
    : null;
  var bind$$1 = el.attrsMap['v-bind'];
  if ((attrs || bind$$1) && !children) {
    res += ",null";
  }
  if (attrs) {
    res += "," + attrs;
  }
  if (bind$$1) {
    res += (attrs ? '' : ',null') + "," + bind$$1;
  }
  return res + ')'
}

// componentName is el.component, take it as argument to shun flow's pessimistic refinement
function genComponent (
  componentName,
  el,
  state
) {
  var children = el.inlineTemplate ? null : genChildren(el, state, true);
  return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")
}

function genProps (props) {
  var staticProps = "";
  var dynamicProps = "";
  for (var i = 0; i < props.length; i++) {
    var prop = props[i];
    var value = transformSpecialNewlines(prop.value);
    if (prop.dynamic) {
      dynamicProps += (prop.name) + "," + value + ",";
    } else {
      staticProps += "\"" + (prop.name) + "\":" + value + ",";
    }
  }
  staticProps = "{" + (staticProps.slice(0, -1)) + "}";
  if (dynamicProps) {
    return ("_d(" + staticProps + ",[" + (dynamicProps.slice(0, -1)) + "])")
  } else {
    return staticProps
  }
}

// #3895, #4268
function transformSpecialNewlines (text) {
  return text
    .replace(/\u2028/g, '\\u2028')
    .replace(/\u2029/g, '\\u2029')
}

/*  */



// these keywords should not appear inside expressions, but operators like
// typeof, instanceof and in are allowed
var prohibitedKeywordRE = new RegExp('\\b' + (
  'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
  'super,throw,while,yield,delete,export,import,return,switch,default,' +
  'extends,finally,continue,debugger,function,arguments'
).split(',').join('\\b|\\b') + '\\b');

// these unary operators should not be used as property/method names
var unaryOperatorsRE = new RegExp('\\b' + (
  'delete,typeof,void'
).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

// strip strings in expressions
var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

// detect problematic expressions in a template
function detectErrors (ast, warn) {
  if (ast) {
    checkNode(ast, warn);
  }
}

function checkNode (node, warn) {
  if (node.type === 1) {
    for (var name in node.attrsMap) {
      if (dirRE.test(name)) {
        var value = node.attrsMap[name];
        if (value) {
          var range = node.rawAttrsMap[name];
          if (name === 'v-for') {
            checkFor(node, ("v-for=\"" + value + "\""), warn, range);
          } else if (onRE.test(name)) {
            checkEvent(value, (name + "=\"" + value + "\""), warn, range);
          } else {
            checkExpression(value, (name + "=\"" + value + "\""), warn, range);
          }
        }
      }
    }
    if (node.children) {
      for (var i = 0; i < node.children.length; i++) {
        checkNode(node.children[i], warn);
      }
    }
  } else if (node.type === 2) {
    checkExpression(node.expression, node.text, warn, node);
  }
}

function checkEvent (exp, text, warn, range) {
  var stipped = exp.replace(stripStringRE, '');
  var keywordMatch = stipped.match(unaryOperatorsRE);
  if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
    warn(
      "avoid using JavaScript unary operator as property name: " +
      "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim()),
      range
    );
  }
  checkExpression(exp, text, warn, range);
}

function checkFor (node, text, warn, range) {
  checkExpression(node.for || '', text, warn, range);
  checkIdentifier(node.alias, 'v-for alias', text, warn, range);
  checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
  checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
}

function checkIdentifier (
  ident,
  type,
  text,
  warn,
  range
) {
  if (typeof ident === 'string') {
    try {
      new Function(("var " + ident + "=_"));
    } catch (e) {
      warn(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())), range);
    }
  }
}

function checkExpression (exp, text, warn, range) {
  try {
    new Function(("return " + exp));
  } catch (e) {
    var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
    if (keywordMatch) {
      warn(
        "avoid using JavaScript keyword as property name: " +
        "\"" + (keywordMatch[0]) + "\"\n  Raw expression: " + (text.trim()),
        range
      );
    } else {
      warn(
        "invalid expression: " + (e.message) + " in\n\n" +
        "    " + exp + "\n\n" +
        "  Raw expression: " + (text.trim()) + "\n",
        range
      );
    }
  }
}

/*  */

var range = 2;

function generateCodeFrame (
  source,
  start,
  end
) {
  if ( start === void 0 ) start = 0;
  if ( end === void 0 ) end = source.length;

  var lines = source.split(/\r?\n/);
  var count = 0;
  var res = [];
  for (var i = 0; i < lines.length; i++) {
    count += lines[i].length + 1;
    if (count >= start) {
      for (var j = i - range; j <= i + range || end > count; j++) {
        if (j < 0 || j >= lines.length) { continue }
        res.push(("" + (j + 1) + (repeat$1(" ", 3 - String(j + 1).length)) + "|  " + (lines[j])));
        var lineLength = lines[j].length;
        if (j === i) {
          // push underline
          var pad = start - (count - lineLength) + 1;
          var length = end > count ? lineLength - pad : end - start;
          res.push("   |  " + repeat$1(" ", pad) + repeat$1("^", length));
        } else if (j > i) {
          if (end > count) {
            var length$1 = Math.min(end - count, lineLength);
            res.push("   |  " + repeat$1("^", length$1));
          }
          count += lineLength + 1;
        }
      }
      break
    }
  }
  return res.join('\n')
}

function repeat$1 (str, n) {
  var result = '';
  if (n > 0) {
    while (true) { // eslint-disable-line
      if (n & 1) { result += str; }
      n >>>= 1;
      if (n <= 0) { break }
      str += str;
    }
  }
  return result
}

/*  */



function createFunction (code, errors) {
  try {
    return new Function(code)
  } catch (err) {
    errors.push({ err: err, code: code });
    return noop
  }
}

function createCompileToFunctionFn (compile) {
  var cache = Object.create(null);

  return function compileToFunctions (
    template,
    options,
    vm
  ) {
    options = extend({}, options);
    var warn$$1 = options.warn || warn;
    delete options.warn;

    /* istanbul ignore if */
    {
      // detect possible CSP restriction
      try {
        new Function('return 1');
      } catch (e) {
        if (e.toString().match(/unsafe-eval|CSP/)) {
          warn$$1(
            'It seems you are using the standalone build of Vue.js in an ' +
            'environment with Content Security Policy that prohibits unsafe-eval. ' +
            'The template compiler cannot work in this environment. Consider ' +
            'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
            'templates into render functions.'
          );
        }
      }
    }

    // check cache
    var key = options.delimiters
      ? String(options.delimiters) + template
      : template;
    if (cache[key]) {
      return cache[key]
    }

    // compile
    var compiled = compile(template, options);

    // check compilation errors/tips
    {
      if (compiled.errors && compiled.errors.length) {
        if (options.outputSourceRange) {
          compiled.errors.forEach(function (e) {
            warn$$1(
              "Error compiling template:\n\n" + (e.msg) + "\n\n" +
              generateCodeFrame(template, e.start, e.end),
              vm
            );
          });
        } else {
          warn$$1(
            "Error compiling template:\n\n" + template + "\n\n" +
            compiled.errors.map(function (e) { return ("- " + e); }).join('\n') + '\n',
            vm
          );
        }
      }
      if (compiled.tips && compiled.tips.length) {
        if (options.outputSourceRange) {
          compiled.tips.forEach(function (e) { return tip(e.msg, vm); });
        } else {
          compiled.tips.forEach(function (msg) { return tip(msg, vm); });
        }
      }
    }

    // turn code into functions
    var res = {};
    var fnGenErrors = [];
    res.render = createFunction(compiled.render, fnGenErrors);
    res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
      return createFunction(code, fnGenErrors)
    });

    // check function generation errors.
    // this should only happen if there is a bug in the compiler itself.
    // mostly for codegen development use
    /* istanbul ignore if */
    {
      if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
        warn$$1(
          "Failed to generate render function:\n\n" +
          fnGenErrors.map(function (ref) {
            var err = ref.err;
            var code = ref.code;

            return ((err.toString()) + " in\n\n" + code + "\n");
        }).join('\n'),
          vm
        );
      }
    }

    return (cache[key] = res)
  }
}

/*  */

function createCompilerCreator (baseCompile) {
  return function createCompiler (baseOptions) {
    function compile (
      template,
      options
    ) {
      var finalOptions = Object.create(baseOptions);
      var errors = [];
      var tips = [];

      var warn = function (msg, range, tip) {
        (tip ? tips : errors).push(msg);
      };

      if (options) {
        if (options.outputSourceRange) {
          // $flow-disable-line
          var leadingSpaceLength = template.match(/^\s*/)[0].length;

          warn = function (msg, range, tip) {
            var data = { msg: msg };
            if (range) {
              if (range.start != null) {
                data.start = range.start + leadingSpaceLength;
              }
              if (range.end != null) {
                data.end = range.end + leadingSpaceLength;
              }
            }
            (tip ? tips : errors).push(data);
          };
        }
        // merge custom modules
        if (options.modules) {
          finalOptions.modules =
            (baseOptions.modules || []).concat(options.modules);
        }
        // merge custom directives
        if (options.directives) {
          finalOptions.directives = extend(
            Object.create(baseOptions.directives || null),
            options.directives
          );
        }
        // copy other options
        for (var key in options) {
          if (key !== 'modules' && key !== 'directives') {
            finalOptions[key] = options[key];
          }
        }
      }

      finalOptions.warn = warn;

      var compiled = baseCompile(template.trim(), finalOptions);
      {
        detectErrors(compiled.ast, warn);
      }
      compiled.errors = errors;
      compiled.tips = tips;
      return compiled
    }

    return {
      compile: compile,
      compileToFunctions: createCompileToFunctionFn(compile)
    }
  }
}

/*  */

// `createCompilerCreator` allows creating compilers that use alternative
// parser/optimizer/codegen, e.g the SSR optimizing compiler.
// Here we just export a default compiler using the default parts.
var createCompiler = createCompilerCreator(function baseCompile (
  template,
  options
) {
  var ast = parse(template.trim(), options);
  if (options.optimize !== false) {
    optimize(ast, options);
  }
  var code = generate(ast, options);
  return {
    ast: ast,
    render: code.render,
    staticRenderFns: code.staticRenderFns
  }
});

/*  */

var ref$1 = createCompiler(baseOptions);
var compile = ref$1.compile;
var compileToFunctions = ref$1.compileToFunctions;

/*  */

// check whether current browser encodes a char inside attribute values
var div;
function getShouldDecode (href) {
  div = div || document.createElement('div');
  div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
  return div.innerHTML.indexOf('&#10;') > 0
}

// #3663: IE encodes newlines inside attribute values while other browsers don't
var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
// #6828: chrome encodes content in a[href]
var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;

/*  */

var idToTemplate = cached(function (id) {
  var el = query(id);
  return el && el.innerHTML
});

var mount = Vue.prototype.$mount;
Vue.prototype.$mount = function (
  el,
  hydrating
) {
  el = el && query(el);

  /* istanbul ignore if */
  if (el === document.body || el === document.documentElement) {
    warn(
      "Do not mount Vue to <html> or <body> - mount to normal elements instead."
    );
    return this
  }

  var options = this.$options;
  // resolve template/el and convert to render function
  if (!options.render) {
    var template = options.template;
    if (template) {
      if (typeof template === 'string') {
        if (template.charAt(0) === '#') {
          template = idToTemplate(template);
          /* istanbul ignore if */
          if (!template) {
            warn(
              ("Template element not found or is empty: " + (options.template)),
              this
            );
          }
        }
      } else if (template.nodeType) {
        template = template.innerHTML;
      } else {
        {
          warn('invalid template option:' + template, this);
        }
        return this
      }
    } else if (el) {
      template = getOuterHTML(el);
    }
    if (template) {
      /* istanbul ignore if */
      if (config.performance && mark) {
        mark('compile');
      }

      var ref = compileToFunctions(template, {
        outputSourceRange: "development" !== 'production',
        shouldDecodeNewlines: shouldDecodeNewlines,
        shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
        delimiters: options.delimiters,
        comments: options.comments
      }, this);
      var render = ref.render;
      var staticRenderFns = ref.staticRenderFns;
      options.render = render;
      options.staticRenderFns = staticRenderFns;

      /* istanbul ignore if */
      if (config.performance && mark) {
        mark('compile end');
        measure(("vue " + (this._name) + " compile"), 'compile', 'compile end');
      }
    }
  }
  return mount.call(this, el, hydrating)
};

/**
 * Get outerHTML of elements, taking care
 * of SVG elements in IE as well.
 */
function getOuterHTML (el) {
  if (el.outerHTML) {
    return el.outerHTML
  } else {
    var container = document.createElement('div');
    container.appendChild(el.cloneNode(true));
    return container.innerHTML
  }
}

Vue.compile = compileToFunctions;

module.exports = Vue;

},{}],"node_modules/vue/dist/vue.common.js":[function(require,module,exports) {
if ("development" === 'production') {
  module.exports = require('./vue.common.prod.js');
} else {
  module.exports = require('./vue.common.dev.js');
}
},{"./vue.common.dev.js":"node_modules/vue/dist/vue.common.dev.js"}],"node_modules/vuex/dist/vuex.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.install = install;
exports.createNamespacedHelpers = exports.mapActions = exports.mapGetters = exports.mapMutations = exports.mapState = exports.Store = exports.default = void 0;

/**
 * vuex v3.1.0
 * (c) 2019 Evan You
 * @license MIT
 */
function applyMixin(Vue) {
  var version = Number(Vue.version.split('.')[0]);

  if (version >= 2) {
    Vue.mixin({
      beforeCreate: vuexInit
    });
  } else {
    // override init and inject vuex init procedure
    // for 1.x backwards compatibility.
    var _init = Vue.prototype._init;

    Vue.prototype._init = function (options) {
      if (options === void 0) options = {};
      options.init = options.init ? [vuexInit].concat(options.init) : vuexInit;

      _init.call(this, options);
    };
  }
  /**
   * Vuex init hook, injected into each instances init hooks list.
   */


  function vuexInit() {
    var options = this.$options; // store injection

    if (options.store) {
      this.$store = typeof options.store === 'function' ? options.store() : options.store;
    } else if (options.parent && options.parent.$store) {
      this.$store = options.parent.$store;
    }
  }
}

var devtoolHook = typeof window !== 'undefined' && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

function devtoolPlugin(store) {
  if (!devtoolHook) {
    return;
  }

  store._devtoolHook = devtoolHook;
  devtoolHook.emit('vuex:init', store);
  devtoolHook.on('vuex:travel-to-state', function (targetState) {
    store.replaceState(targetState);
  });
  store.subscribe(function (mutation, state) {
    devtoolHook.emit('vuex:mutation', mutation, state);
  });
}
/**
 * Get the first item that pass the test
 * by second argument function
 *
 * @param {Array} list
 * @param {Function} f
 * @return {*}
 */

/**
 * forEach for object
 */


function forEachValue(obj, fn) {
  Object.keys(obj).forEach(function (key) {
    return fn(obj[key], key);
  });
}

function isObject(obj) {
  return obj !== null && typeof obj === 'object';
}

function isPromise(val) {
  return val && typeof val.then === 'function';
}

function assert(condition, msg) {
  if (!condition) {
    throw new Error("[vuex] " + msg);
  }
} // Base data struct for store's module, package with some attribute and method


var Module = function Module(rawModule, runtime) {
  this.runtime = runtime; // Store some children item

  this._children = Object.create(null); // Store the origin module object which passed by programmer

  this._rawModule = rawModule;
  var rawState = rawModule.state; // Store the origin module's state

  this.state = (typeof rawState === 'function' ? rawState() : rawState) || {};
};

var prototypeAccessors = {
  namespaced: {
    configurable: true
  }
};

prototypeAccessors.namespaced.get = function () {
  return !!this._rawModule.namespaced;
};

Module.prototype.addChild = function addChild(key, module) {
  this._children[key] = module;
};

Module.prototype.removeChild = function removeChild(key) {
  delete this._children[key];
};

Module.prototype.getChild = function getChild(key) {
  return this._children[key];
};

Module.prototype.update = function update(rawModule) {
  this._rawModule.namespaced = rawModule.namespaced;

  if (rawModule.actions) {
    this._rawModule.actions = rawModule.actions;
  }

  if (rawModule.mutations) {
    this._rawModule.mutations = rawModule.mutations;
  }

  if (rawModule.getters) {
    this._rawModule.getters = rawModule.getters;
  }
};

Module.prototype.forEachChild = function forEachChild(fn) {
  forEachValue(this._children, fn);
};

Module.prototype.forEachGetter = function forEachGetter(fn) {
  if (this._rawModule.getters) {
    forEachValue(this._rawModule.getters, fn);
  }
};

Module.prototype.forEachAction = function forEachAction(fn) {
  if (this._rawModule.actions) {
    forEachValue(this._rawModule.actions, fn);
  }
};

Module.prototype.forEachMutation = function forEachMutation(fn) {
  if (this._rawModule.mutations) {
    forEachValue(this._rawModule.mutations, fn);
  }
};

Object.defineProperties(Module.prototype, prototypeAccessors);

var ModuleCollection = function ModuleCollection(rawRootModule) {
  // register root module (Vuex.Store options)
  this.register([], rawRootModule, false);
};

ModuleCollection.prototype.get = function get(path) {
  return path.reduce(function (module, key) {
    return module.getChild(key);
  }, this.root);
};

ModuleCollection.prototype.getNamespace = function getNamespace(path) {
  var module = this.root;
  return path.reduce(function (namespace, key) {
    module = module.getChild(key);
    return namespace + (module.namespaced ? key + '/' : '');
  }, '');
};

ModuleCollection.prototype.update = function update$1(rawRootModule) {
  update([], this.root, rawRootModule);
};

ModuleCollection.prototype.register = function register(path, rawModule, runtime) {
  var this$1 = this;
  if (runtime === void 0) runtime = true;

  if ("development" !== 'production') {
    assertRawModule(path, rawModule);
  }

  var newModule = new Module(rawModule, runtime);

  if (path.length === 0) {
    this.root = newModule;
  } else {
    var parent = this.get(path.slice(0, -1));
    parent.addChild(path[path.length - 1], newModule);
  } // register nested modules


  if (rawModule.modules) {
    forEachValue(rawModule.modules, function (rawChildModule, key) {
      this$1.register(path.concat(key), rawChildModule, runtime);
    });
  }
};

ModuleCollection.prototype.unregister = function unregister(path) {
  var parent = this.get(path.slice(0, -1));
  var key = path[path.length - 1];

  if (!parent.getChild(key).runtime) {
    return;
  }

  parent.removeChild(key);
};

function update(path, targetModule, newModule) {
  if ("development" !== 'production') {
    assertRawModule(path, newModule);
  } // update target module


  targetModule.update(newModule); // update nested modules

  if (newModule.modules) {
    for (var key in newModule.modules) {
      if (!targetModule.getChild(key)) {
        if ("development" !== 'production') {
          console.warn("[vuex] trying to add a new module '" + key + "' on hot reloading, " + 'manual reload is needed');
        }

        return;
      }

      update(path.concat(key), targetModule.getChild(key), newModule.modules[key]);
    }
  }
}

var functionAssert = {
  assert: function (value) {
    return typeof value === 'function';
  },
  expected: 'function'
};
var objectAssert = {
  assert: function (value) {
    return typeof value === 'function' || typeof value === 'object' && typeof value.handler === 'function';
  },
  expected: 'function or object with "handler" function'
};
var assertTypes = {
  getters: functionAssert,
  mutations: functionAssert,
  actions: objectAssert
};

function assertRawModule(path, rawModule) {
  Object.keys(assertTypes).forEach(function (key) {
    if (!rawModule[key]) {
      return;
    }

    var assertOptions = assertTypes[key];
    forEachValue(rawModule[key], function (value, type) {
      assert(assertOptions.assert(value), makeAssertionMessage(path, key, type, value, assertOptions.expected));
    });
  });
}

function makeAssertionMessage(path, key, type, value, expected) {
  var buf = key + " should be " + expected + " but \"" + key + "." + type + "\"";

  if (path.length > 0) {
    buf += " in module \"" + path.join('.') + "\"";
  }

  buf += " is " + JSON.stringify(value) + ".";
  return buf;
}

var Vue; // bind on install

var Store = function Store(options) {
  var this$1 = this;
  if (options === void 0) options = {}; // Auto install if it is not done yet and `window` has `Vue`.
  // To allow users to avoid auto-installation in some cases,
  // this code should be placed here. See #731

  if (!Vue && typeof window !== 'undefined' && window.Vue) {
    install(window.Vue);
  }

  if ("development" !== 'production') {
    assert(Vue, "must call Vue.use(Vuex) before creating a store instance.");
    assert(typeof Promise !== 'undefined', "vuex requires a Promise polyfill in this browser.");
    assert(this instanceof Store, "store must be called with the new operator.");
  }

  var plugins = options.plugins;
  if (plugins === void 0) plugins = [];
  var strict = options.strict;
  if (strict === void 0) strict = false; // store internal state

  this._committing = false;
  this._actions = Object.create(null);
  this._actionSubscribers = [];
  this._mutations = Object.create(null);
  this._wrappedGetters = Object.create(null);
  this._modules = new ModuleCollection(options);
  this._modulesNamespaceMap = Object.create(null);
  this._subscribers = [];
  this._watcherVM = new Vue(); // bind commit and dispatch to self

  var store = this;
  var ref = this;
  var dispatch = ref.dispatch;
  var commit = ref.commit;

  this.dispatch = function boundDispatch(type, payload) {
    return dispatch.call(store, type, payload);
  };

  this.commit = function boundCommit(type, payload, options) {
    return commit.call(store, type, payload, options);
  }; // strict mode


  this.strict = strict;
  var state = this._modules.root.state; // init root module.
  // this also recursively registers all sub-modules
  // and collects all module getters inside this._wrappedGetters

  installModule(this, state, [], this._modules.root); // initialize the store vm, which is responsible for the reactivity
  // (also registers _wrappedGetters as computed properties)

  resetStoreVM(this, state); // apply plugins

  plugins.forEach(function (plugin) {
    return plugin(this$1);
  });
  var useDevtools = options.devtools !== undefined ? options.devtools : Vue.config.devtools;

  if (useDevtools) {
    devtoolPlugin(this);
  }
};

exports.Store = Store;
var prototypeAccessors$1 = {
  state: {
    configurable: true
  }
};

prototypeAccessors$1.state.get = function () {
  return this._vm._data.$$state;
};

prototypeAccessors$1.state.set = function (v) {
  if ("development" !== 'production') {
    assert(false, "use store.replaceState() to explicit replace store state.");
  }
};

Store.prototype.commit = function commit(_type, _payload, _options) {
  var this$1 = this; // check object-style commit

  var ref = unifyObjectStyle(_type, _payload, _options);
  var type = ref.type;
  var payload = ref.payload;
  var options = ref.options;
  var mutation = {
    type: type,
    payload: payload
  };
  var entry = this._mutations[type];

  if (!entry) {
    if ("development" !== 'production') {
      console.error("[vuex] unknown mutation type: " + type);
    }

    return;
  }

  this._withCommit(function () {
    entry.forEach(function commitIterator(handler) {
      handler(payload);
    });
  });

  this._subscribers.forEach(function (sub) {
    return sub(mutation, this$1.state);
  });

  if ("development" !== 'production' && options && options.silent) {
    console.warn("[vuex] mutation type: " + type + ". Silent option has been removed. " + 'Use the filter functionality in the vue-devtools');
  }
};

Store.prototype.dispatch = function dispatch(_type, _payload) {
  var this$1 = this; // check object-style dispatch

  var ref = unifyObjectStyle(_type, _payload);
  var type = ref.type;
  var payload = ref.payload;
  var action = {
    type: type,
    payload: payload
  };
  var entry = this._actions[type];

  if (!entry) {
    if ("development" !== 'production') {
      console.error("[vuex] unknown action type: " + type);
    }

    return;
  }

  try {
    this._actionSubscribers.filter(function (sub) {
      return sub.before;
    }).forEach(function (sub) {
      return sub.before(action, this$1.state);
    });
  } catch (e) {
    if ("development" !== 'production') {
      console.warn("[vuex] error in before action subscribers: ");
      console.error(e);
    }
  }

  var result = entry.length > 1 ? Promise.all(entry.map(function (handler) {
    return handler(payload);
  })) : entry[0](payload);
  return result.then(function (res) {
    try {
      this$1._actionSubscribers.filter(function (sub) {
        return sub.after;
      }).forEach(function (sub) {
        return sub.after(action, this$1.state);
      });
    } catch (e) {
      if ("development" !== 'production') {
        console.warn("[vuex] error in after action subscribers: ");
        console.error(e);
      }
    }

    return res;
  });
};

Store.prototype.subscribe = function subscribe(fn) {
  return genericSubscribe(fn, this._subscribers);
};

Store.prototype.subscribeAction = function subscribeAction(fn) {
  var subs = typeof fn === 'function' ? {
    before: fn
  } : fn;
  return genericSubscribe(subs, this._actionSubscribers);
};

Store.prototype.watch = function watch(getter, cb, options) {
  var this$1 = this;

  if ("development" !== 'production') {
    assert(typeof getter === 'function', "store.watch only accepts a function.");
  }

  return this._watcherVM.$watch(function () {
    return getter(this$1.state, this$1.getters);
  }, cb, options);
};

Store.prototype.replaceState = function replaceState(state) {
  var this$1 = this;

  this._withCommit(function () {
    this$1._vm._data.$$state = state;
  });
};

Store.prototype.registerModule = function registerModule(path, rawModule, options) {
  if (options === void 0) options = {};

  if (typeof path === 'string') {
    path = [path];
  }

  if ("development" !== 'production') {
    assert(Array.isArray(path), "module path must be a string or an Array.");
    assert(path.length > 0, 'cannot register the root module by using registerModule.');
  }

  this._modules.register(path, rawModule);

  installModule(this, this.state, path, this._modules.get(path), options.preserveState); // reset store to update getters...

  resetStoreVM(this, this.state);
};

Store.prototype.unregisterModule = function unregisterModule(path) {
  var this$1 = this;

  if (typeof path === 'string') {
    path = [path];
  }

  if ("development" !== 'production') {
    assert(Array.isArray(path), "module path must be a string or an Array.");
  }

  this._modules.unregister(path);

  this._withCommit(function () {
    var parentState = getNestedState(this$1.state, path.slice(0, -1));
    Vue.delete(parentState, path[path.length - 1]);
  });

  resetStore(this);
};

Store.prototype.hotUpdate = function hotUpdate(newOptions) {
  this._modules.update(newOptions);

  resetStore(this, true);
};

Store.prototype._withCommit = function _withCommit(fn) {
  var committing = this._committing;
  this._committing = true;
  fn();
  this._committing = committing;
};

Object.defineProperties(Store.prototype, prototypeAccessors$1);

function genericSubscribe(fn, subs) {
  if (subs.indexOf(fn) < 0) {
    subs.push(fn);
  }

  return function () {
    var i = subs.indexOf(fn);

    if (i > -1) {
      subs.splice(i, 1);
    }
  };
}

function resetStore(store, hot) {
  store._actions = Object.create(null);
  store._mutations = Object.create(null);
  store._wrappedGetters = Object.create(null);
  store._modulesNamespaceMap = Object.create(null);
  var state = store.state; // init all modules

  installModule(store, state, [], store._modules.root, true); // reset vm

  resetStoreVM(store, state, hot);
}

function resetStoreVM(store, state, hot) {
  var oldVm = store._vm; // bind store public getters

  store.getters = {};
  var wrappedGetters = store._wrappedGetters;
  var computed = {};
  forEachValue(wrappedGetters, function (fn, key) {
    // use computed to leverage its lazy-caching mechanism
    computed[key] = function () {
      return fn(store);
    };

    Object.defineProperty(store.getters, key, {
      get: function () {
        return store._vm[key];
      },
      enumerable: true // for local getters

    });
  }); // use a Vue instance to store the state tree
  // suppress warnings just in case the user has added
  // some funky global mixins

  var silent = Vue.config.silent;
  Vue.config.silent = true;
  store._vm = new Vue({
    data: {
      $$state: state
    },
    computed: computed
  });
  Vue.config.silent = silent; // enable strict mode for new vm

  if (store.strict) {
    enableStrictMode(store);
  }

  if (oldVm) {
    if (hot) {
      // dispatch changes in all subscribed watchers
      // to force getter re-evaluation for hot reloading.
      store._withCommit(function () {
        oldVm._data.$$state = null;
      });
    }

    Vue.nextTick(function () {
      return oldVm.$destroy();
    });
  }
}

function installModule(store, rootState, path, module, hot) {
  var isRoot = !path.length;

  var namespace = store._modules.getNamespace(path); // register in namespace map


  if (module.namespaced) {
    store._modulesNamespaceMap[namespace] = module;
  } // set state


  if (!isRoot && !hot) {
    var parentState = getNestedState(rootState, path.slice(0, -1));
    var moduleName = path[path.length - 1];

    store._withCommit(function () {
      Vue.set(parentState, moduleName, module.state);
    });
  }

  var local = module.context = makeLocalContext(store, namespace, path);
  module.forEachMutation(function (mutation, key) {
    var namespacedType = namespace + key;
    registerMutation(store, namespacedType, mutation, local);
  });
  module.forEachAction(function (action, key) {
    var type = action.root ? key : namespace + key;
    var handler = action.handler || action;
    registerAction(store, type, handler, local);
  });
  module.forEachGetter(function (getter, key) {
    var namespacedType = namespace + key;
    registerGetter(store, namespacedType, getter, local);
  });
  module.forEachChild(function (child, key) {
    installModule(store, rootState, path.concat(key), child, hot);
  });
}
/**
 * make localized dispatch, commit, getters and state
 * if there is no namespace, just use root ones
 */


function makeLocalContext(store, namespace, path) {
  var noNamespace = namespace === '';
  var local = {
    dispatch: noNamespace ? store.dispatch : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;

        if ("development" !== 'production' && !store._actions[type]) {
          console.error("[vuex] unknown local action type: " + args.type + ", global type: " + type);
          return;
        }
      }

      return store.dispatch(type, payload);
    },
    commit: noNamespace ? store.commit : function (_type, _payload, _options) {
      var args = unifyObjectStyle(_type, _payload, _options);
      var payload = args.payload;
      var options = args.options;
      var type = args.type;

      if (!options || !options.root) {
        type = namespace + type;

        if ("development" !== 'production' && !store._mutations[type]) {
          console.error("[vuex] unknown local mutation type: " + args.type + ", global type: " + type);
          return;
        }
      }

      store.commit(type, payload, options);
    }
  }; // getters and state object must be gotten lazily
  // because they will be changed by vm update

  Object.defineProperties(local, {
    getters: {
      get: noNamespace ? function () {
        return store.getters;
      } : function () {
        return makeLocalGetters(store, namespace);
      }
    },
    state: {
      get: function () {
        return getNestedState(store.state, path);
      }
    }
  });
  return local;
}

function makeLocalGetters(store, namespace) {
  var gettersProxy = {};
  var splitPos = namespace.length;
  Object.keys(store.getters).forEach(function (type) {
    // skip if the target getter is not match this namespace
    if (type.slice(0, splitPos) !== namespace) {
      return;
    } // extract local getter type


    var localType = type.slice(splitPos); // Add a port to the getters proxy.
    // Define as getter property because
    // we do not want to evaluate the getters in this time.

    Object.defineProperty(gettersProxy, localType, {
      get: function () {
        return store.getters[type];
      },
      enumerable: true
    });
  });
  return gettersProxy;
}

function registerMutation(store, type, handler, local) {
  var entry = store._mutations[type] || (store._mutations[type] = []);
  entry.push(function wrappedMutationHandler(payload) {
    handler.call(store, local.state, payload);
  });
}

function registerAction(store, type, handler, local) {
  var entry = store._actions[type] || (store._actions[type] = []);
  entry.push(function wrappedActionHandler(payload, cb) {
    var res = handler.call(store, {
      dispatch: local.dispatch,
      commit: local.commit,
      getters: local.getters,
      state: local.state,
      rootGetters: store.getters,
      rootState: store.state
    }, payload, cb);

    if (!isPromise(res)) {
      res = Promise.resolve(res);
    }

    if (store._devtoolHook) {
      return res.catch(function (err) {
        store._devtoolHook.emit('vuex:error', err);

        throw err;
      });
    } else {
      return res;
    }
  });
}

function registerGetter(store, type, rawGetter, local) {
  if (store._wrappedGetters[type]) {
    if ("development" !== 'production') {
      console.error("[vuex] duplicate getter key: " + type);
    }

    return;
  }

  store._wrappedGetters[type] = function wrappedGetter(store) {
    return rawGetter(local.state, // local state
    local.getters, // local getters
    store.state, // root state
    store.getters // root getters
    );
  };
}

function enableStrictMode(store) {
  store._vm.$watch(function () {
    return this._data.$$state;
  }, function () {
    if ("development" !== 'production') {
      assert(store._committing, "do not mutate vuex store state outside mutation handlers.");
    }
  }, {
    deep: true,
    sync: true
  });
}

function getNestedState(state, path) {
  return path.length ? path.reduce(function (state, key) {
    return state[key];
  }, state) : state;
}

function unifyObjectStyle(type, payload, options) {
  if (isObject(type) && type.type) {
    options = payload;
    payload = type;
    type = type.type;
  }

  if ("development" !== 'production') {
    assert(typeof type === 'string', "expects string as the type, but found " + typeof type + ".");
  }

  return {
    type: type,
    payload: payload,
    options: options
  };
}

function install(_Vue) {
  if (Vue && _Vue === Vue) {
    if ("development" !== 'production') {
      console.error('[vuex] already installed. Vue.use(Vuex) should be called only once.');
    }

    return;
  }

  Vue = _Vue;
  applyMixin(Vue);
}
/**
 * Reduce the code which written in Vue.js for getting the state.
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} states # Object's item can be a function which accept state and getters for param, you can do something for state and getters in it.
 * @param {Object}
 */


var mapState = normalizeNamespace(function (namespace, states) {
  var res = {};
  normalizeMap(states).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedState() {
      var state = this.$store.state;
      var getters = this.$store.getters;

      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapState', namespace);

        if (!module) {
          return;
        }

        state = module.context.state;
        getters = module.context.getters;
      }

      return typeof val === 'function' ? val.call(this, state, getters) : state[val];
    }; // mark vuex getter for devtools


    res[key].vuex = true;
  });
  return res;
});
/**
 * Reduce the code which written in Vue.js for committing the mutation
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} mutations # Object's item can be a function which accept `commit` function as the first param, it can accept anthor params. You can commit mutation and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */

exports.mapState = mapState;
var mapMutations = normalizeNamespace(function (namespace, mutations) {
  var res = {};
  normalizeMap(mutations).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedMutation() {
      var args = [],
          len = arguments.length;

      while (len--) args[len] = arguments[len]; // Get the commit method from store


      var commit = this.$store.commit;

      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapMutations', namespace);

        if (!module) {
          return;
        }

        commit = module.context.commit;
      }

      return typeof val === 'function' ? val.apply(this, [commit].concat(args)) : commit.apply(this.$store, [val].concat(args));
    };
  });
  return res;
});
/**
 * Reduce the code which written in Vue.js for getting the getters
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} getters
 * @return {Object}
 */

exports.mapMutations = mapMutations;
var mapGetters = normalizeNamespace(function (namespace, getters) {
  var res = {};
  normalizeMap(getters).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val; // The namespace has been mutated by normalizeNamespace

    val = namespace + val;

    res[key] = function mappedGetter() {
      if (namespace && !getModuleByNamespace(this.$store, 'mapGetters', namespace)) {
        return;
      }

      if ("development" !== 'production' && !(val in this.$store.getters)) {
        console.error("[vuex] unknown getter: " + val);
        return;
      }

      return this.$store.getters[val];
    }; // mark vuex getter for devtools


    res[key].vuex = true;
  });
  return res;
});
/**
 * Reduce the code which written in Vue.js for dispatch the action
 * @param {String} [namespace] - Module's namespace
 * @param {Object|Array} actions # Object's item can be a function which accept `dispatch` function as the first param, it can accept anthor params. You can dispatch action and do any other things in this function. specially, You need to pass anthor params from the mapped function.
 * @return {Object}
 */

exports.mapGetters = mapGetters;
var mapActions = normalizeNamespace(function (namespace, actions) {
  var res = {};
  normalizeMap(actions).forEach(function (ref) {
    var key = ref.key;
    var val = ref.val;

    res[key] = function mappedAction() {
      var args = [],
          len = arguments.length;

      while (len--) args[len] = arguments[len]; // get dispatch function from store


      var dispatch = this.$store.dispatch;

      if (namespace) {
        var module = getModuleByNamespace(this.$store, 'mapActions', namespace);

        if (!module) {
          return;
        }

        dispatch = module.context.dispatch;
      }

      return typeof val === 'function' ? val.apply(this, [dispatch].concat(args)) : dispatch.apply(this.$store, [val].concat(args));
    };
  });
  return res;
});
/**
 * Rebinding namespace param for mapXXX function in special scoped, and return them by simple object
 * @param {String} namespace
 * @return {Object}
 */

exports.mapActions = mapActions;

var createNamespacedHelpers = function (namespace) {
  return {
    mapState: mapState.bind(null, namespace),
    mapGetters: mapGetters.bind(null, namespace),
    mapMutations: mapMutations.bind(null, namespace),
    mapActions: mapActions.bind(null, namespace)
  };
};
/**
 * Normalize the map
 * normalizeMap([1, 2, 3]) => [ { key: 1, val: 1 }, { key: 2, val: 2 }, { key: 3, val: 3 } ]
 * normalizeMap({a: 1, b: 2, c: 3}) => [ { key: 'a', val: 1 }, { key: 'b', val: 2 }, { key: 'c', val: 3 } ]
 * @param {Array|Object} map
 * @return {Object}
 */


exports.createNamespacedHelpers = createNamespacedHelpers;

function normalizeMap(map) {
  return Array.isArray(map) ? map.map(function (key) {
    return {
      key: key,
      val: key
    };
  }) : Object.keys(map).map(function (key) {
    return {
      key: key,
      val: map[key]
    };
  });
}
/**
 * Return a function expect two param contains namespace and map. it will normalize the namespace and then the param's function will handle the new namespace and the map.
 * @param {Function} fn
 * @return {Function}
 */


function normalizeNamespace(fn) {
  return function (namespace, map) {
    if (typeof namespace !== 'string') {
      map = namespace;
      namespace = '';
    } else if (namespace.charAt(namespace.length - 1) !== '/') {
      namespace += '/';
    }

    return fn(namespace, map);
  };
}
/**
 * Search a special module from store by namespace. if module not exist, print error message.
 * @param {Object} store
 * @param {String} helper
 * @param {String} namespace
 * @return {Object}
 */


function getModuleByNamespace(store, helper, namespace) {
  var module = store._modulesNamespaceMap[namespace];

  if ("development" !== 'production' && !module) {
    console.error("[vuex] module namespace not found in " + helper + "(): " + namespace);
  }

  return module;
}

var index_esm = {
  Store: Store,
  install: install,
  version: '3.1.0',
  mapState: mapState,
  mapMutations: mapMutations,
  mapGetters: mapGetters,
  mapActions: mapActions,
  createNamespacedHelpers: createNamespacedHelpers
};
var _default = index_esm;
exports.default = _default;
},{}],"node_modules/@firebase/polyfill/node_modules/whatwg-fetch/fetch.js":[function(require,module,exports) {
(function(self) {
  'use strict';

  if (self.fetch) {
    return
  }

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob: 'FileReader' in self && 'Blob' in self && (function() {
      try {
        new Blob()
        return true
      } catch(e) {
        return false
      }
    })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ]

    var isDataView = function(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj)
    }

    var isArrayBufferView = ArrayBuffer.isView || function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
    }
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name)
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value)
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift()
        return {done: value === undefined, value: value}
      }
    }

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      }
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {}

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value)
      }, this)
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1])
      }, this)
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name])
      }, this)
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name)
    value = normalizeValue(value)
    var oldValue = this.map[name]
    this.map[name] = oldValue ? oldValue+','+value : value
  }

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)]
  }

  Headers.prototype.get = function(name) {
    name = normalizeName(name)
    return this.has(name) ? this.map[name] : null
  }

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  }

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value)
  }

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this)
      }
    }
  }

  Headers.prototype.keys = function() {
    var items = []
    this.forEach(function(value, name) { items.push(name) })
    return iteratorFor(items)
  }

  Headers.prototype.values = function() {
    var items = []
    this.forEach(function(value) { items.push(value) })
    return iteratorFor(items)
  }

  Headers.prototype.entries = function() {
    var items = []
    this.forEach(function(value, name) { items.push([name, value]) })
    return iteratorFor(items)
  }

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result)
      }
      reader.onerror = function() {
        reject(reader.error)
      }
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader()
    var promise = fileReaderReady(reader)
    reader.readAsArrayBuffer(blob)
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader()
    var promise = fileReaderReady(reader)
    reader.readAsText(blob)
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf)
    var chars = new Array(view.length)

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i])
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength)
      view.set(new Uint8Array(buf))
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false

    this._initBody = function(body) {
      this._bodyInit = body
      if (!body) {
        this._bodyText = ''
      } else if (typeof body === 'string') {
        this._bodyText = body
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString()
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer)
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer])
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body)
      } else {
        throw new Error('unsupported BodyInit type')
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8')
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type)
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
        }
      }
    }

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this)
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      }

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      }
    }

    this.text = function() {
      var rejected = consumed(this)
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    }

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      }
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    }

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

  function normalizeMethod(method) {
    var upcased = method.toUpperCase()
    return (methods.indexOf(upcased) > -1) ? upcased : method
  }

  function Request(input, options) {
    options = options || {}
    var body = options.body

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url
      this.credentials = input.credentials
      if (!options.headers) {
        this.headers = new Headers(input.headers)
      }
      this.method = input.method
      this.mode = input.mode
      if (!body && input._bodyInit != null) {
        body = input._bodyInit
        input.bodyUsed = true
      }
    } else {
      this.url = String(input)
    }

    this.credentials = options.credentials || this.credentials || 'omit'
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers)
    }
    this.method = normalizeMethod(options.method || this.method || 'GET')
    this.mode = options.mode || this.mode || null
    this.referrer = null

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body)
  }

  Request.prototype.clone = function() {
    return new Request(this, { body: this._bodyInit })
  }

  function decode(body) {
    var form = new FormData()
    body.trim().split('&').forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=')
        var name = split.shift().replace(/\+/g, ' ')
        var value = split.join('=').replace(/\+/g, ' ')
        form.append(decodeURIComponent(name), decodeURIComponent(value))
      }
    })
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers()
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ')
    preProcessedHeaders.split(/\r?\n/).forEach(function(line) {
      var parts = line.split(':')
      var key = parts.shift().trim()
      if (key) {
        var value = parts.join(':').trim()
        headers.append(key, value)
      }
    })
    return headers
  }

  Body.call(Request.prototype)

  function Response(bodyInit, options) {
    if (!options) {
      options = {}
    }

    this.type = 'default'
    this.status = options.status === undefined ? 200 : options.status
    this.ok = this.status >= 200 && this.status < 300
    this.statusText = 'statusText' in options ? options.statusText : 'OK'
    this.headers = new Headers(options.headers)
    this.url = options.url || ''
    this._initBody(bodyInit)
  }

  Body.call(Response.prototype)

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  }

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''})
    response.type = 'error'
    return response
  }

  var redirectStatuses = [301, 302, 303, 307, 308]

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  }

  self.Headers = Headers
  self.Request = Request
  self.Response = Response

  self.fetch = function(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init)
      var xhr = new XMLHttpRequest()

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        }
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
        var body = 'response' in xhr ? xhr.response : xhr.responseText
        resolve(new Response(body, options))
      }

      xhr.onerror = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.ontimeout = function() {
        reject(new TypeError('Network request failed'))
      }

      xhr.open(request.method, request.url, true)

      if (request.credentials === 'include') {
        xhr.withCredentials = true
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob'
      }

      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
    })
  }
  self.fetch.polyfill = true
})(typeof self !== 'undefined' ? self : this);

},{}],"node_modules/promise-polyfill/lib/polyfill.js":[function(require,module,exports) {
var global = arguments[3];
'use strict';

/**
 * @this {Promise}
 */
function finallyConstructor(callback) {
  var constructor = this.constructor;
  return this.then(
    function(value) {
      return constructor.resolve(callback()).then(function() {
        return value;
      });
    },
    function(reason) {
      return constructor.resolve(callback()).then(function() {
        return constructor.reject(reason);
      });
    }
  );
}

// Store setTimeout reference so promise-polyfill will be unaffected by
// other code modifying setTimeout (like sinon.useFakeTimers())
var setTimeoutFunc = setTimeout;

function noop() {}

// Polyfill for Function.prototype.bind
function bind(fn, thisArg) {
  return function() {
    fn.apply(thisArg, arguments);
  };
}

/**
 * @constructor
 * @param {Function} fn
 */
function Promise(fn) {
  if (!(this instanceof Promise))
    throw new TypeError('Promises must be constructed via new');
  if (typeof fn !== 'function') throw new TypeError('not a function');
  /** @type {!number} */
  this._state = 0;
  /** @type {!boolean} */
  this._handled = false;
  /** @type {Promise|undefined} */
  this._value = undefined;
  /** @type {!Array<!Function>} */
  this._deferreds = [];

  doResolve(fn, this);
}

function handle(self, deferred) {
  while (self._state === 3) {
    self = self._value;
  }
  if (self._state === 0) {
    self._deferreds.push(deferred);
    return;
  }
  self._handled = true;
  Promise._immediateFn(function() {
    var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
    if (cb === null) {
      (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
      return;
    }
    var ret;
    try {
      ret = cb(self._value);
    } catch (e) {
      reject(deferred.promise, e);
      return;
    }
    resolve(deferred.promise, ret);
  });
}

function resolve(self, newValue) {
  try {
    // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
    if (newValue === self)
      throw new TypeError('A promise cannot be resolved with itself.');
    if (
      newValue &&
      (typeof newValue === 'object' || typeof newValue === 'function')
    ) {
      var then = newValue.then;
      if (newValue instanceof Promise) {
        self._state = 3;
        self._value = newValue;
        finale(self);
        return;
      } else if (typeof then === 'function') {
        doResolve(bind(then, newValue), self);
        return;
      }
    }
    self._state = 1;
    self._value = newValue;
    finale(self);
  } catch (e) {
    reject(self, e);
  }
}

function reject(self, newValue) {
  self._state = 2;
  self._value = newValue;
  finale(self);
}

function finale(self) {
  if (self._state === 2 && self._deferreds.length === 0) {
    Promise._immediateFn(function() {
      if (!self._handled) {
        Promise._unhandledRejectionFn(self._value);
      }
    });
  }

  for (var i = 0, len = self._deferreds.length; i < len; i++) {
    handle(self, self._deferreds[i]);
  }
  self._deferreds = null;
}

/**
 * @constructor
 */
function Handler(onFulfilled, onRejected, promise) {
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
  this.promise = promise;
}

/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */
function doResolve(fn, self) {
  var done = false;
  try {
    fn(
      function(value) {
        if (done) return;
        done = true;
        resolve(self, value);
      },
      function(reason) {
        if (done) return;
        done = true;
        reject(self, reason);
      }
    );
  } catch (ex) {
    if (done) return;
    done = true;
    reject(self, ex);
  }
}

Promise.prototype['catch'] = function(onRejected) {
  return this.then(null, onRejected);
};

Promise.prototype.then = function(onFulfilled, onRejected) {
  // @ts-ignore
  var prom = new this.constructor(noop);

  handle(this, new Handler(onFulfilled, onRejected, prom));
  return prom;
};

Promise.prototype['finally'] = finallyConstructor;

Promise.all = function(arr) {
  return new Promise(function(resolve, reject) {
    if (!arr || typeof arr.length === 'undefined')
      throw new TypeError('Promise.all accepts an array');
    var args = Array.prototype.slice.call(arr);
    if (args.length === 0) return resolve([]);
    var remaining = args.length;

    function res(i, val) {
      try {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          var then = val.then;
          if (typeof then === 'function') {
            then.call(
              val,
              function(val) {
                res(i, val);
              },
              reject
            );
            return;
          }
        }
        args[i] = val;
        if (--remaining === 0) {
          resolve(args);
        }
      } catch (ex) {
        reject(ex);
      }
    }

    for (var i = 0; i < args.length; i++) {
      res(i, args[i]);
    }
  });
};

Promise.resolve = function(value) {
  if (value && typeof value === 'object' && value.constructor === Promise) {
    return value;
  }

  return new Promise(function(resolve) {
    resolve(value);
  });
};

Promise.reject = function(value) {
  return new Promise(function(resolve, reject) {
    reject(value);
  });
};

Promise.race = function(values) {
  return new Promise(function(resolve, reject) {
    for (var i = 0, len = values.length; i < len; i++) {
      values[i].then(resolve, reject);
    }
  });
};

// Use polyfill for setImmediate for performance gains
Promise._immediateFn =
  (typeof setImmediate === 'function' &&
    function(fn) {
      setImmediate(fn);
    }) ||
  function(fn) {
    setTimeoutFunc(fn, 0);
  };

Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {
  if (typeof console !== 'undefined' && console) {
    console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
  }
};

/** @suppress {undefinedVars} */
var globalNS = (function() {
  // the only reliable means to get the global object is
  // `Function('return this')()`
  // However, this causes CSP violations in Chrome apps.
  if (typeof self !== 'undefined') {
    return self;
  }
  if (typeof window !== 'undefined') {
    return window;
  }
  if (typeof global !== 'undefined') {
    return global;
  }
  throw new Error('unable to locate global object');
})();

if (!('Promise' in globalNS)) {
  globalNS['Promise'] = Promise;
} else if (!globalNS.Promise.prototype['finally']) {
  globalNS.Promise.prototype['finally'] = finallyConstructor;
}

},{}],"node_modules/core-js/internals/a-function.js":[function(require,module,exports) {
module.exports = function (it) {
  if (typeof it != 'function') {
    throw TypeError(String(it) + ' is not a function');
  } return it;
};

},{}],"node_modules/core-js/internals/bind-context.js":[function(require,module,exports) {
var aFunction = require('../internals/a-function');

// optional / simple context binding
module.exports = function (fn, that, length) {
  aFunction(fn);
  if (that === undefined) return fn;
  switch (length) {
    case 0: return function () {
      return fn.call(that);
    };
    case 1: return function (a) {
      return fn.call(that, a);
    };
    case 2: return function (a, b) {
      return fn.call(that, a, b);
    };
    case 3: return function (a, b, c) {
      return fn.call(that, a, b, c);
    };
  }
  return function (/* ...args */) {
    return fn.apply(that, arguments);
  };
};

},{"../internals/a-function":"node_modules/core-js/internals/a-function.js"}],"node_modules/core-js/internals/fails.js":[function(require,module,exports) {
module.exports = function (exec) {
  try {
    return !!exec();
  } catch (e) {
    return true;
  }
};

},{}],"node_modules/core-js/internals/classof-raw.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = function (it) {
  return toString.call(it).slice(8, -1);
};

},{}],"node_modules/core-js/internals/indexed-object.js":[function(require,module,exports) {
// fallback for non-array-like ES3 and non-enumerable old V8 strings
var fails = require('../internals/fails');
var classof = require('../internals/classof-raw');
var split = ''.split;

module.exports = fails(function () {
  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
  // eslint-disable-next-line no-prototype-builtins
  return !Object('z').propertyIsEnumerable(0);
}) ? function (it) {
  return classof(it) == 'String' ? split.call(it, '') : Object(it);
} : Object;

},{"../internals/fails":"node_modules/core-js/internals/fails.js","../internals/classof-raw":"node_modules/core-js/internals/classof-raw.js"}],"node_modules/core-js/internals/require-object-coercible.js":[function(require,module,exports) {
// `RequireObjectCoercible` abstract operation
// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
module.exports = function (it) {
  if (it == undefined) throw TypeError("Can't call method on " + it);
  return it;
};

},{}],"node_modules/core-js/internals/to-object.js":[function(require,module,exports) {
var requireObjectCoercible = require('../internals/require-object-coercible');

// `ToObject` abstract operation
// https://tc39.github.io/ecma262/#sec-toobject
module.exports = function (argument) {
  return Object(requireObjectCoercible(argument));
};

},{"../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js"}],"node_modules/core-js/internals/to-integer.js":[function(require,module,exports) {
var ceil = Math.ceil;
var floor = Math.floor;

// `ToInteger` abstract operation
// https://tc39.github.io/ecma262/#sec-tointeger
module.exports = function (argument) {
  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
};

},{}],"node_modules/core-js/internals/to-length.js":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');
var min = Math.min;

// `ToLength` abstract operation
// https://tc39.github.io/ecma262/#sec-tolength
module.exports = function (argument) {
  return argument > 0 ? min(toInteger(argument), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

},{"../internals/to-integer":"node_modules/core-js/internals/to-integer.js"}],"node_modules/core-js/internals/is-object.js":[function(require,module,exports) {
module.exports = function (it) {
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

},{}],"node_modules/core-js/internals/is-array.js":[function(require,module,exports) {
var classof = require('../internals/classof-raw');

// `IsArray` abstract operation
// https://tc39.github.io/ecma262/#sec-isarray
module.exports = Array.isArray || function isArray(arg) {
  return classof(arg) == 'Array';
};

},{"../internals/classof-raw":"node_modules/core-js/internals/classof-raw.js"}],"node_modules/core-js/internals/global.js":[function(require,module,exports) {
// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
module.exports = typeof window == 'object' && window && window.Math == Math ? window
  : typeof self == 'object' && self && self.Math == Math ? self
  // eslint-disable-next-line no-new-func
  : Function('return this')();

},{}],"node_modules/core-js/internals/descriptors.js":[function(require,module,exports) {
// Thank's IE8 for his funny defineProperty
module.exports = !require('../internals/fails')(function () {
  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
});

},{"../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/internals/document-create-element.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');
var document = require('../internals/global').document;
// typeof document.createElement is 'object' in old IE
var exist = isObject(document) && isObject(document.createElement);

module.exports = function (it) {
  return exist ? document.createElement(it) : {};
};

},{"../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/global":"node_modules/core-js/internals/global.js"}],"node_modules/core-js/internals/ie8-dom-define.js":[function(require,module,exports) {
// Thank's IE8 for his funny defineProperty
module.exports = !require('../internals/descriptors') && !require('../internals/fails')(function () {
  return Object.defineProperty(require('../internals/document-create-element')('div'), 'a', {
    get: function () { return 7; }
  }).a != 7;
});

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/document-create-element":"node_modules/core-js/internals/document-create-element.js"}],"node_modules/core-js/internals/an-object.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');

module.exports = function (it) {
  if (!isObject(it)) {
    throw TypeError(String(it) + ' is not an object');
  } return it;
};

},{"../internals/is-object":"node_modules/core-js/internals/is-object.js"}],"node_modules/core-js/internals/to-primitive.js":[function(require,module,exports) {
// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = require('../internals/is-object');
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function (it, S) {
  if (!isObject(it)) return it;
  var fn, val;
  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
  throw TypeError("Can't convert object to primitive value");
};

},{"../internals/is-object":"node_modules/core-js/internals/is-object.js"}],"node_modules/core-js/internals/object-define-property.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');
var anObject = require('../internals/an-object');
var toPrimitive = require('../internals/to-primitive');
var nativeDefineProperty = Object.defineProperty;

exports.f = DESCRIPTORS ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if (IE8_DOM_DEFINE) try {
    return nativeDefineProperty(O, P, Attributes);
  } catch (e) { /* empty */ }
  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
  if ('value' in Attributes) O[P] = Attributes.value;
  return O;
};

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/ie8-dom-define":"node_modules/core-js/internals/ie8-dom-define.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/to-primitive":"node_modules/core-js/internals/to-primitive.js"}],"node_modules/core-js/internals/create-property-descriptor.js":[function(require,module,exports) {
module.exports = function (bitmap, value) {
  return {
    enumerable: !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable: !(bitmap & 4),
    value: value
  };
};

},{}],"node_modules/core-js/internals/hide.js":[function(require,module,exports) {
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

module.exports = require('../internals/descriptors') ? function (object, key, value) {
  return definePropertyModule.f(object, key, createPropertyDescriptor(1, value));
} : function (object, key, value) {
  object[key] = value;
  return object;
};

},{"../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/create-property-descriptor":"node_modules/core-js/internals/create-property-descriptor.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js"}],"node_modules/core-js/internals/set-global.js":[function(require,module,exports) {

var global = require('../internals/global');
var hide = require('../internals/hide');

module.exports = function (key, value) {
  try {
    hide(global, key, value);
  } catch (e) {
    global[key] = value;
  } return value;
};

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/hide":"node_modules/core-js/internals/hide.js"}],"node_modules/core-js/internals/is-pure.js":[function(require,module,exports) {
module.exports = false;

},{}],"node_modules/core-js/internals/shared.js":[function(require,module,exports) {

var global = require('../internals/global');
var setGlobal = require('../internals/set-global');
var SHARED = '__core-js_shared__';
var store = global[SHARED] || setGlobal(SHARED, {});

(module.exports = function (key, value) {
  return store[key] || (store[key] = value !== undefined ? value : {});
})('versions', []).push({
  version: '3.0.0',
  mode: require('../internals/is-pure') ? 'pure' : 'global',
  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
});

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/set-global":"node_modules/core-js/internals/set-global.js","../internals/is-pure":"node_modules/core-js/internals/is-pure.js"}],"node_modules/core-js/internals/uid.js":[function(require,module,exports) {
var id = 0;
var postfix = Math.random();

module.exports = function (key) {
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + postfix).toString(36));
};

},{}],"node_modules/core-js/internals/native-symbol.js":[function(require,module,exports) {
// Chrome 38 Symbol has incorrect toString conversion
module.exports = !require('../internals/fails')(function () {
  // eslint-disable-next-line no-undef
  String(Symbol());
});

},{"../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/internals/well-known-symbol.js":[function(require,module,exports) {
var store = require('../internals/shared')('wks');
var uid = require('../internals/uid');
var Symbol = require('../internals/global').Symbol;
var NATIVE_SYMBOL = require('../internals/native-symbol');

module.exports = function (name) {
  return store[name] || (store[name] = NATIVE_SYMBOL && Symbol[name]
    || (NATIVE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

},{"../internals/shared":"node_modules/core-js/internals/shared.js","../internals/uid":"node_modules/core-js/internals/uid.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/native-symbol":"node_modules/core-js/internals/native-symbol.js"}],"node_modules/core-js/internals/array-species-create.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');
var isArray = require('../internals/is-array');
var SPECIES = require('../internals/well-known-symbol')('species');

// `ArraySpeciesCreate` abstract operation
// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
module.exports = function (originalArray, length) {
  var C;
  if (isArray(originalArray)) {
    C = originalArray.constructor;
    // cross-realm fallback
    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
    else if (isObject(C)) {
      C = C[SPECIES];
      if (C === null) C = undefined;
    }
  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
};

},{"../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/is-array":"node_modules/core-js/internals/is-array.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/internals/array-methods.js":[function(require,module,exports) {
var bind = require('../internals/bind-context');
var IndexedObject = require('../internals/indexed-object');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var arraySpeciesCreate = require('../internals/array-species-create');

// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
// 0 -> Array#forEach
// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
// 1 -> Array#map
// https://tc39.github.io/ecma262/#sec-array.prototype.map
// 2 -> Array#filter
// https://tc39.github.io/ecma262/#sec-array.prototype.filter
// 3 -> Array#some
// https://tc39.github.io/ecma262/#sec-array.prototype.some
// 4 -> Array#every
// https://tc39.github.io/ecma262/#sec-array.prototype.every
// 5 -> Array#find
// https://tc39.github.io/ecma262/#sec-array.prototype.find
// 6 -> Array#findIndex
// https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
module.exports = function (TYPE, specificCreate) {
  var IS_MAP = TYPE == 1;
  var IS_FILTER = TYPE == 2;
  var IS_SOME = TYPE == 3;
  var IS_EVERY = TYPE == 4;
  var IS_FIND_INDEX = TYPE == 6;
  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
  var create = specificCreate || arraySpeciesCreate;
  return function ($this, callbackfn, that) {
    var O = toObject($this);
    var self = IndexedObject(O);
    var boundFunction = bind(callbackfn, that, 3);
    var length = toLength(self.length);
    var index = 0;
    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
    var value, result;
    for (;length > index; index++) if (NO_HOLES || index in self) {
      value = self[index];
      result = boundFunction(value, index, O);
      if (TYPE) {
        if (IS_MAP) target[index] = result; // map
        else if (result) switch (TYPE) {
          case 3: return true;              // some
          case 5: return value;             // find
          case 6: return index;             // findIndex
          case 2: target.push(value);       // filter
        } else if (IS_EVERY) return false;  // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
  };
};

},{"../internals/bind-context":"node_modules/core-js/internals/bind-context.js","../internals/indexed-object":"node_modules/core-js/internals/indexed-object.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/array-species-create":"node_modules/core-js/internals/array-species-create.js"}],"node_modules/core-js/internals/object-property-is-enumerable.js":[function(require,module,exports) {
'use strict';
var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

// Nashorn ~ JDK8 bug
var NASHORN_BUG = nativeGetOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

exports.f = NASHORN_BUG ? function propertyIsEnumerable(V) {
  var descriptor = nativeGetOwnPropertyDescriptor(this, V);
  return !!descriptor && descriptor.enumerable;
} : nativePropertyIsEnumerable;

},{}],"node_modules/core-js/internals/to-indexed-object.js":[function(require,module,exports) {
// toObject with fallback for non-array-like ES3 strings
var IndexedObject = require('../internals/indexed-object');
var requireObjectCoercible = require('../internals/require-object-coercible');

module.exports = function (it) {
  return IndexedObject(requireObjectCoercible(it));
};

},{"../internals/indexed-object":"node_modules/core-js/internals/indexed-object.js","../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js"}],"node_modules/core-js/internals/has.js":[function(require,module,exports) {
var hasOwnProperty = {}.hasOwnProperty;

module.exports = function (it, key) {
  return hasOwnProperty.call(it, key);
};

},{}],"node_modules/core-js/internals/object-get-own-property-descriptor.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var toIndexedObject = require('../internals/to-indexed-object');
var toPrimitive = require('../internals/to-primitive');
var has = require('../internals/has');
var IE8_DOM_DEFINE = require('../internals/ie8-dom-define');
var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

exports.f = DESCRIPTORS ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
  O = toIndexedObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return nativeGetOwnPropertyDescriptor(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createPropertyDescriptor(!propertyIsEnumerableModule.f.call(O, P), O[P]);
};

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/object-property-is-enumerable":"node_modules/core-js/internals/object-property-is-enumerable.js","../internals/create-property-descriptor":"node_modules/core-js/internals/create-property-descriptor.js","../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/to-primitive":"node_modules/core-js/internals/to-primitive.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/ie8-dom-define":"node_modules/core-js/internals/ie8-dom-define.js"}],"node_modules/core-js/internals/function-to-string.js":[function(require,module,exports) {
module.exports = require('../internals/shared')('native-function-to-string', Function.toString);

},{"../internals/shared":"node_modules/core-js/internals/shared.js"}],"node_modules/core-js/internals/native-weak-map.js":[function(require,module,exports) {
var nativeFunctionToString = require('../internals/function-to-string');
var WeakMap = require('../internals/global').WeakMap;

module.exports = typeof WeakMap === 'function' && /native code/.test(nativeFunctionToString.call(WeakMap));

},{"../internals/function-to-string":"node_modules/core-js/internals/function-to-string.js","../internals/global":"node_modules/core-js/internals/global.js"}],"node_modules/core-js/internals/shared-key.js":[function(require,module,exports) {
var shared = require('../internals/shared')('keys');
var uid = require('../internals/uid');

module.exports = function (key) {
  return shared[key] || (shared[key] = uid(key));
};

},{"../internals/shared":"node_modules/core-js/internals/shared.js","../internals/uid":"node_modules/core-js/internals/uid.js"}],"node_modules/core-js/internals/hidden-keys.js":[function(require,module,exports) {
module.exports = {};

},{}],"node_modules/core-js/internals/internal-state.js":[function(require,module,exports) {
var NATIVE_WEAK_MAP = require('../internals/native-weak-map');
var isObject = require('../internals/is-object');
var hide = require('../internals/hide');
var objectHas = require('../internals/has');
var sharedKey = require('../internals/shared-key');
var hiddenKeys = require('../internals/hidden-keys');
var WeakMap = require('../internals/global').WeakMap;
var set, get, has;

var enforce = function (it) {
  return has(it) ? get(it) : set(it, {});
};

var getterFor = function (TYPE) {
  return function (it) {
    var state;
    if (!isObject(it) || (state = get(it)).type !== TYPE) {
      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
    } return state;
  };
};

if (NATIVE_WEAK_MAP) {
  var store = new WeakMap();
  var wmget = store.get;
  var wmhas = store.has;
  var wmset = store.set;
  set = function (it, metadata) {
    wmset.call(store, it, metadata);
    return metadata;
  };
  get = function (it) {
    return wmget.call(store, it) || {};
  };
  has = function (it) {
    return wmhas.call(store, it);
  };
} else {
  var STATE = sharedKey('state');
  hiddenKeys[STATE] = true;
  set = function (it, metadata) {
    hide(it, STATE, metadata);
    return metadata;
  };
  get = function (it) {
    return objectHas(it, STATE) ? it[STATE] : {};
  };
  has = function (it) {
    return objectHas(it, STATE);
  };
}

module.exports = {
  set: set,
  get: get,
  has: has,
  enforce: enforce,
  getterFor: getterFor
};

},{"../internals/native-weak-map":"node_modules/core-js/internals/native-weak-map.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/hide":"node_modules/core-js/internals/hide.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/shared-key":"node_modules/core-js/internals/shared-key.js","../internals/hidden-keys":"node_modules/core-js/internals/hidden-keys.js","../internals/global":"node_modules/core-js/internals/global.js"}],"node_modules/core-js/internals/redefine.js":[function(require,module,exports) {

var global = require('../internals/global');
var hide = require('../internals/hide');
var has = require('../internals/has');
var setGlobal = require('../internals/set-global');
var nativeFunctionToString = require('../internals/function-to-string');
var InternalStateModule = require('../internals/internal-state');
var getInternalState = InternalStateModule.get;
var enforceInternalState = InternalStateModule.enforce;
var TEMPLATE = String(nativeFunctionToString).split('toString');

require('../internals/shared')('inspectSource', function (it) {
  return nativeFunctionToString.call(it);
});

(module.exports = function (O, key, value, options) {
  var unsafe = options ? !!options.unsafe : false;
  var simple = options ? !!options.enumerable : false;
  var noTargetGet = options ? !!options.noTargetGet : false;
  if (typeof value == 'function') {
    if (typeof key == 'string' && !has(value, 'name')) hide(value, 'name', key);
    enforceInternalState(value).source = TEMPLATE.join(typeof key == 'string' ? key : '');
  }
  if (O === global) {
    if (simple) O[key] = value;
    else setGlobal(key, value);
    return;
  } else if (!unsafe) {
    delete O[key];
  } else if (!noTargetGet && O[key]) {
    simple = true;
  }
  if (simple) O[key] = value;
  else hide(O, key, value);
// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative
})(Function.prototype, 'toString', function toString() {
  return typeof this == 'function' && getInternalState(this).source || nativeFunctionToString.call(this);
});

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/hide":"node_modules/core-js/internals/hide.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/set-global":"node_modules/core-js/internals/set-global.js","../internals/function-to-string":"node_modules/core-js/internals/function-to-string.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js","../internals/shared":"node_modules/core-js/internals/shared.js"}],"node_modules/core-js/internals/to-absolute-index.js":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');
var max = Math.max;
var min = Math.min;

// Helper for a popular repeating case of the spec:
// Let integer be ? ToInteger(index).
// If integer < 0, let result be max((length + integer), 0); else let result be min(length, length).
module.exports = function (index, length) {
  var integer = toInteger(index);
  return integer < 0 ? max(integer + length, 0) : min(integer, length);
};

},{"../internals/to-integer":"node_modules/core-js/internals/to-integer.js"}],"node_modules/core-js/internals/array-includes.js":[function(require,module,exports) {
var toIndexedObject = require('../internals/to-indexed-object');
var toLength = require('../internals/to-length');
var toAbsoluteIndex = require('../internals/to-absolute-index');

// `Array.prototype.{ indexOf, includes }` methods implementation
// false -> Array#indexOf
// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
// true  -> Array#includes
// https://tc39.github.io/ecma262/#sec-array.prototype.includes
module.exports = function (IS_INCLUDES) {
  return function ($this, el, fromIndex) {
    var O = toIndexedObject($this);
    var length = toLength(O.length);
    var index = toAbsoluteIndex(fromIndex, length);
    var value;
    // Array#includes uses SameValueZero equality algorithm
    // eslint-disable-next-line no-self-compare
    if (IS_INCLUDES && el != el) while (length > index) {
      value = O[index++];
      // eslint-disable-next-line no-self-compare
      if (value != value) return true;
    // Array#indexOf ignores holes, Array#includes - not
    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
      if (O[index] === el) return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

},{"../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/to-absolute-index":"node_modules/core-js/internals/to-absolute-index.js"}],"node_modules/core-js/internals/object-keys-internal.js":[function(require,module,exports) {
var has = require('../internals/has');
var toIndexedObject = require('../internals/to-indexed-object');
var arrayIndexOf = require('../internals/array-includes')(false);
var hiddenKeys = require('../internals/hidden-keys');

module.exports = function (object, names) {
  var O = toIndexedObject(object);
  var i = 0;
  var result = [];
  var key;
  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while (names.length > i) if (has(O, key = names[i++])) {
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

},{"../internals/has":"node_modules/core-js/internals/has.js","../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/array-includes":"node_modules/core-js/internals/array-includes.js","../internals/hidden-keys":"node_modules/core-js/internals/hidden-keys.js"}],"node_modules/core-js/internals/enum-bug-keys.js":[function(require,module,exports) {
// IE8- don't enum bug keys
module.exports = [
  'constructor',
  'hasOwnProperty',
  'isPrototypeOf',
  'propertyIsEnumerable',
  'toLocaleString',
  'toString',
  'valueOf'
];

},{}],"node_modules/core-js/internals/object-get-own-property-names.js":[function(require,module,exports) {
// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var internalObjectKeys = require('../internals/object-keys-internal');
var hiddenKeys = require('../internals/enum-bug-keys').concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return internalObjectKeys(O, hiddenKeys);
};

},{"../internals/object-keys-internal":"node_modules/core-js/internals/object-keys-internal.js","../internals/enum-bug-keys":"node_modules/core-js/internals/enum-bug-keys.js"}],"node_modules/core-js/internals/object-get-own-property-symbols.js":[function(require,module,exports) {
exports.f = Object.getOwnPropertySymbols;

},{}],"node_modules/core-js/internals/own-keys.js":[function(require,module,exports) {
var getOwnPropertyNamesModule = require('../internals/object-get-own-property-names');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var anObject = require('../internals/an-object');
var Reflect = require('../internals/global').Reflect;

// all object keys, includes non-enumerable and symbols
module.exports = Reflect && Reflect.ownKeys || function ownKeys(it) {
  var keys = getOwnPropertyNamesModule.f(anObject(it));
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
};

},{"../internals/object-get-own-property-names":"node_modules/core-js/internals/object-get-own-property-names.js","../internals/object-get-own-property-symbols":"node_modules/core-js/internals/object-get-own-property-symbols.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/global":"node_modules/core-js/internals/global.js"}],"node_modules/core-js/internals/copy-constructor-properties.js":[function(require,module,exports) {
var has = require('../internals/has');
var ownKeys = require('../internals/own-keys');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var definePropertyModule = require('../internals/object-define-property');

module.exports = function (target, source) {
  var keys = ownKeys(source);
  var defineProperty = definePropertyModule.f;
  var getOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
  for (var i = 0; i < keys.length; i++) {
    var key = keys[i];
    if (!has(target, key)) defineProperty(target, key, getOwnPropertyDescriptor(source, key));
  }
};

},{"../internals/has":"node_modules/core-js/internals/has.js","../internals/own-keys":"node_modules/core-js/internals/own-keys.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js"}],"node_modules/core-js/internals/is-forced.js":[function(require,module,exports) {
var fails = require('../internals/fails');
var replacement = /#|\.prototype\./;

var isForced = function (feature, detection) {
  var value = data[normalize(feature)];
  return value == POLYFILL ? true
    : value == NATIVE ? false
    : typeof detection == 'function' ? fails(detection)
    : !!detection;
};

var normalize = isForced.normalize = function (string) {
  return String(string).replace(replacement, '.').toLowerCase();
};

var data = isForced.data = {};
var NATIVE = isForced.NATIVE = 'N';
var POLYFILL = isForced.POLYFILL = 'P';

module.exports = isForced;

},{"../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/internals/export.js":[function(require,module,exports) {

var global = require('../internals/global');
var getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;
var hide = require('../internals/hide');
var redefine = require('../internals/redefine');
var setGlobal = require('../internals/set-global');
var copyConstructorProperties = require('../internals/copy-constructor-properties');
var isForced = require('../internals/is-forced');

/*
  options.target      - name of the target object
  options.global      - target is the global object
  options.stat        - export as static methods of target
  options.proto       - export as prototype methods of target
  options.real        - real prototype method for the `pure` version
  options.forced      - export even if the native feature is available
  options.bind        - bind methods to the target, required for the `pure` version
  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
  options.sham        - add a flag to not completely full polyfills
  options.enumerable  - export as enumerable property
  options.noTargetGet - prevent calling a getter on target
*/
module.exports = function (options, source) {
  var TARGET = options.target;
  var GLOBAL = options.global;
  var STATIC = options.stat;
  var FORCED, target, key, targetProperty, sourceProperty, descriptor;
  if (GLOBAL) {
    target = global;
  } else if (STATIC) {
    target = global[TARGET] || setGlobal(TARGET, {});
  } else {
    target = (global[TARGET] || {}).prototype;
  }
  if (target) for (key in source) {
    sourceProperty = source[key];
    if (options.noTargetGet) {
      descriptor = getOwnPropertyDescriptor(target, key);
      targetProperty = descriptor && descriptor.value;
    } else targetProperty = target[key];
    FORCED = isForced(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
    // contained in target
    if (!FORCED && targetProperty !== undefined) {
      if (typeof sourceProperty === typeof targetProperty) continue;
      copyConstructorProperties(sourceProperty, targetProperty);
    }
    // add a flag to not completely full polyfills
    if (options.sham || (targetProperty && targetProperty.sham)) {
      hide(sourceProperty, 'sham', true);
    }
    // extend global
    redefine(target, key, sourceProperty, options);
  }
};

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/hide":"node_modules/core-js/internals/hide.js","../internals/redefine":"node_modules/core-js/internals/redefine.js","../internals/set-global":"node_modules/core-js/internals/set-global.js","../internals/copy-constructor-properties":"node_modules/core-js/internals/copy-constructor-properties.js","../internals/is-forced":"node_modules/core-js/internals/is-forced.js"}],"node_modules/core-js/internals/object-keys.js":[function(require,module,exports) {
// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var internalObjectKeys = require('../internals/object-keys-internal');
var enumBugKeys = require('../internals/enum-bug-keys');

module.exports = Object.keys || function keys(O) {
  return internalObjectKeys(O, enumBugKeys);
};

},{"../internals/object-keys-internal":"node_modules/core-js/internals/object-keys-internal.js","../internals/enum-bug-keys":"node_modules/core-js/internals/enum-bug-keys.js"}],"node_modules/core-js/internals/object-define-properties.js":[function(require,module,exports) {
var DESCRIPTORS = require('../internals/descriptors');
var definePropertyModule = require('../internals/object-define-property');
var anObject = require('../internals/an-object');
var objectKeys = require('../internals/object-keys');

module.exports = DESCRIPTORS ? Object.defineProperties : function defineProperties(O, Properties) {
  anObject(O);
  var keys = objectKeys(Properties);
  var length = keys.length;
  var i = 0;
  var key;
  while (length > i) definePropertyModule.f(O, key = keys[i++], Properties[key]);
  return O;
};

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/object-keys":"node_modules/core-js/internals/object-keys.js"}],"node_modules/core-js/internals/html.js":[function(require,module,exports) {
var document = require('../internals/global').document;

module.exports = document && document.documentElement;

},{"../internals/global":"node_modules/core-js/internals/global.js"}],"node_modules/core-js/internals/object-create.js":[function(require,module,exports) {
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject = require('../internals/an-object');
var defineProperties = require('../internals/object-define-properties');
var enumBugKeys = require('../internals/enum-bug-keys');
var html = require('../internals/html');
var documentCreateElement = require('../internals/document-create-element');
var IE_PROTO = require('../internals/shared-key')('IE_PROTO');
var PROTOTYPE = 'prototype';
var Empty = function () { /* empty */ };

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function () {
  // Thrash, waste and sodomy: IE GC bug
  var iframe = documentCreateElement('iframe');
  var length = enumBugKeys.length;
  var lt = '<';
  var script = 'script';
  var gt = '>';
  var js = 'java' + script + ':';
  var iframeDocument;
  iframe.style.display = 'none';
  html.appendChild(iframe);
  iframe.src = String(js);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + script + gt + 'document.F=Object' + lt + '/' + script + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while (length--) delete createDict[PROTOTYPE][enumBugKeys[length]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties) {
  var result;
  if (O !== null) {
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty();
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : defineProperties(result, Properties);
};

require('../internals/hidden-keys')[IE_PROTO] = true;

},{"../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/object-define-properties":"node_modules/core-js/internals/object-define-properties.js","../internals/enum-bug-keys":"node_modules/core-js/internals/enum-bug-keys.js","../internals/html":"node_modules/core-js/internals/html.js","../internals/document-create-element":"node_modules/core-js/internals/document-create-element.js","../internals/shared-key":"node_modules/core-js/internals/shared-key.js","../internals/hidden-keys":"node_modules/core-js/internals/hidden-keys.js"}],"node_modules/core-js/internals/add-to-unscopables.js":[function(require,module,exports) {
var UNSCOPABLES = require('../internals/well-known-symbol')('unscopables');
var create = require('../internals/object-create');
var hide = require('../internals/hide');
var ArrayPrototype = Array.prototype;

// Array.prototype[@@unscopables]
// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
if (ArrayPrototype[UNSCOPABLES] == undefined) {
  hide(ArrayPrototype, UNSCOPABLES, create(null));
}

// add a key to Array.prototype[@@unscopables]
module.exports = function (key) {
  ArrayPrototype[UNSCOPABLES][key] = true;
};

},{"../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/object-create":"node_modules/core-js/internals/object-create.js","../internals/hide":"node_modules/core-js/internals/hide.js"}],"node_modules/core-js/modules/es.array.find.js":[function(require,module,exports) {
'use strict';
var internalFind = require('../internals/array-methods')(5);
var FIND = 'find';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND in []) Array(1)[FIND](function () { SKIPS_HOLES = false; });

// `Array.prototype.find` method
// https://tc39.github.io/ecma262/#sec-array.prototype.find
require('../internals/export')({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
  find: function find(callbackfn /* , that = undefined */) {
    return internalFind(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
require('../internals/add-to-unscopables')(FIND);

},{"../internals/array-methods":"node_modules/core-js/internals/array-methods.js","../internals/export":"node_modules/core-js/internals/export.js","../internals/add-to-unscopables":"node_modules/core-js/internals/add-to-unscopables.js"}],"node_modules/core-js/internals/entry-unbind.js":[function(require,module,exports) {

var global = require('../internals/global');
var bind = require('../internals/bind-context');
var call = Function.call;

module.exports = function (CONSTRUCTOR, METHOD, length) {
  return bind(call, global[CONSTRUCTOR].prototype[METHOD], length);
};

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/bind-context":"node_modules/core-js/internals/bind-context.js"}],"node_modules/core-js/es/array/find.js":[function(require,module,exports) {
require('../../modules/es.array.find');

module.exports = require('../../internals/entry-unbind')('Array', 'find');

},{"../../modules/es.array.find":"node_modules/core-js/modules/es.array.find.js","../../internals/entry-unbind":"node_modules/core-js/internals/entry-unbind.js"}],"node_modules/core-js/features/array/find.js":[function(require,module,exports) {
module.exports = require('../../es/array/find');

},{"../../es/array/find":"node_modules/core-js/es/array/find.js"}],"node_modules/core-js/modules/es.array.find-index.js":[function(require,module,exports) {
'use strict';
var internalFindIndex = require('../internals/array-methods')(6);
var FIND_INDEX = 'findIndex';
var SKIPS_HOLES = true;

// Shouldn't skip holes
if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });

// `Array.prototype.findIndex` method
// https://tc39.github.io/ecma262/#sec-array.prototype.findindex
require('../internals/export')({ target: 'Array', proto: true, forced: SKIPS_HOLES }, {
  findIndex: function findIndex(callbackfn /* , that = undefined */) {
    return internalFindIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
  }
});

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
require('../internals/add-to-unscopables')(FIND_INDEX);

},{"../internals/array-methods":"node_modules/core-js/internals/array-methods.js","../internals/export":"node_modules/core-js/internals/export.js","../internals/add-to-unscopables":"node_modules/core-js/internals/add-to-unscopables.js"}],"node_modules/core-js/es/array/find-index.js":[function(require,module,exports) {
require('../../modules/es.array.find-index');

module.exports = require('../../internals/entry-unbind')('Array', 'findIndex');

},{"../../modules/es.array.find-index":"node_modules/core-js/modules/es.array.find-index.js","../../internals/entry-unbind":"node_modules/core-js/internals/entry-unbind.js"}],"node_modules/core-js/features/array/find-index.js":[function(require,module,exports) {
module.exports = require('../../es/array/find-index');

},{"../../es/array/find-index":"node_modules/core-js/es/array/find-index.js"}],"node_modules/core-js/internals/object-assign.js":[function(require,module,exports) {
'use strict';
// 19.1.2.1 Object.assign(target, source, ...)
var objectKeys = require('../internals/object-keys');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var toObject = require('../internals/to-object');
var IndexedObject = require('../internals/indexed-object');
var nativeAssign = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !nativeAssign || require('../internals/fails')(function () {
  var A = {};
  var B = {};
  // eslint-disable-next-line no-undef
  var symbol = Symbol();
  var alphabet = 'abcdefghijklmnopqrst';
  A[symbol] = 7;
  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
  var T = toObject(target);
  var argumentsLength = arguments.length;
  var index = 1;
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  var propertyIsEnumerable = propertyIsEnumerableModule.f;
  while (argumentsLength > index) {
    var S = IndexedObject(arguments[index++]);
    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
    var length = keys.length;
    var j = 0;
    var key;
    while (length > j) if (propertyIsEnumerable.call(S, key = keys[j++])) T[key] = S[key];
  } return T;
} : nativeAssign;

},{"../internals/object-keys":"node_modules/core-js/internals/object-keys.js","../internals/object-get-own-property-symbols":"node_modules/core-js/internals/object-get-own-property-symbols.js","../internals/object-property-is-enumerable":"node_modules/core-js/internals/object-property-is-enumerable.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/indexed-object":"node_modules/core-js/internals/indexed-object.js","../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/modules/es.object.assign.js":[function(require,module,exports) {
var assign = require('../internals/object-assign');

// `Object.assign` method
// https://tc39.github.io/ecma262/#sec-object.assign
require('../internals/export')({ target: 'Object', stat: true, forced: Object.assign !== assign }, { assign: assign });

},{"../internals/object-assign":"node_modules/core-js/internals/object-assign.js","../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/internals/path.js":[function(require,module,exports) {
module.exports = require('../internals/global');

},{"../internals/global":"node_modules/core-js/internals/global.js"}],"node_modules/core-js/es/object/assign.js":[function(require,module,exports) {
require('../../modules/es.object.assign');

module.exports = require('../../internals/path').Object.assign;

},{"../../modules/es.object.assign":"node_modules/core-js/modules/es.object.assign.js","../../internals/path":"node_modules/core-js/internals/path.js"}],"node_modules/core-js/features/object/assign.js":[function(require,module,exports) {
module.exports = require('../../es/object/assign');

},{"../../es/object/assign":"node_modules/core-js/es/object/assign.js"}],"node_modules/core-js/internals/is-regexp.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');
var classof = require('../internals/classof-raw');
var MATCH = require('../internals/well-known-symbol')('match');

// `IsRegExp` abstract operation
// https://tc39.github.io/ecma262/#sec-isregexp
module.exports = function (it) {
  var isRegExp;
  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classof(it) == 'RegExp');
};

},{"../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/classof-raw":"node_modules/core-js/internals/classof-raw.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/internals/validate-string-method-arguments.js":[function(require,module,exports) {
// helper for String#{startsWith, endsWith, includes}
var isRegExp = require('../internals/is-regexp');
var requireObjectCoercible = require('../internals/require-object-coercible');

module.exports = function (that, searchString, NAME) {
  if (isRegExp(searchString)) {
    throw TypeError('String.prototype.' + NAME + " doesn't accept regex");
  } return String(requireObjectCoercible(that));
};

},{"../internals/is-regexp":"node_modules/core-js/internals/is-regexp.js","../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js"}],"node_modules/core-js/internals/correct-is-regexp-logic.js":[function(require,module,exports) {
var MATCH = require('../internals/well-known-symbol')('match');

module.exports = function (METHOD_NAME) {
  var regexp = /./;
  try {
    '/./'[METHOD_NAME](regexp);
  } catch (e) {
    try {
      regexp[MATCH] = false;
      return '/./'[METHOD_NAME](regexp);
    } catch (f) { /* empty */ }
  } return false;
};

},{"../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/modules/es.string.starts-with.js":[function(require,module,exports) {
'use strict';
var toLength = require('../internals/to-length');
var validateArguments = require('../internals/validate-string-method-arguments');
var STARTS_WITH = 'startsWith';
var CORRECT_IS_REGEXP_LOGIC = require('../internals/correct-is-regexp-logic')(STARTS_WITH);
var nativeStartsWith = ''[STARTS_WITH];

// `String.prototype.startsWith` method
// https://tc39.github.io/ecma262/#sec-string.prototype.startswith
require('../internals/export')({ target: 'String', proto: true, forced: !CORRECT_IS_REGEXP_LOGIC }, {
  startsWith: function startsWith(searchString /* , position = 0 */) {
    var that = validateArguments(this, searchString, STARTS_WITH);
    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));
    var search = String(searchString);
    return nativeStartsWith
      ? nativeStartsWith.call(that, search, index)
      : that.slice(index, index + search.length) === search;
  }
});

},{"../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/validate-string-method-arguments":"node_modules/core-js/internals/validate-string-method-arguments.js","../internals/correct-is-regexp-logic":"node_modules/core-js/internals/correct-is-regexp-logic.js","../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/es/string/starts-with.js":[function(require,module,exports) {
require('../../modules/es.string.starts-with');

module.exports = require('../../internals/entry-unbind')('String', 'startsWith');

},{"../../modules/es.string.starts-with":"node_modules/core-js/modules/es.string.starts-with.js","../../internals/entry-unbind":"node_modules/core-js/internals/entry-unbind.js"}],"node_modules/core-js/features/string/starts-with.js":[function(require,module,exports) {
module.exports = require('../../es/string/starts-with');

},{"../../es/string/starts-with":"node_modules/core-js/es/string/starts-with.js"}],"node_modules/core-js/internals/string-repeat.js":[function(require,module,exports) {
'use strict';
var toInteger = require('../internals/to-integer');
var requireObjectCoercible = require('../internals/require-object-coercible');

// `String.prototype.repeat` method implementation
// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
module.exports = ''.repeat || function repeat(count) {
  var str = String(requireObjectCoercible(this));
  var result = '';
  var n = toInteger(count);
  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');
  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;
  return result;
};

},{"../internals/to-integer":"node_modules/core-js/internals/to-integer.js","../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js"}],"node_modules/core-js/modules/es.string.repeat.js":[function(require,module,exports) {
// `String.prototype.repeat` method
// https://tc39.github.io/ecma262/#sec-string.prototype.repeat
require('../internals/export')({ target: 'String', proto: true }, {
  repeat: require('../internals/string-repeat')
});

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/string-repeat":"node_modules/core-js/internals/string-repeat.js"}],"node_modules/core-js/es/string/repeat.js":[function(require,module,exports) {
require('../../modules/es.string.repeat');

module.exports = require('../../internals/entry-unbind')('String', 'repeat');

},{"../../modules/es.string.repeat":"node_modules/core-js/modules/es.string.repeat.js","../../internals/entry-unbind":"node_modules/core-js/internals/entry-unbind.js"}],"node_modules/core-js/features/string/repeat.js":[function(require,module,exports) {
module.exports = require('../../es/string/repeat');

},{"../../es/string/repeat":"node_modules/core-js/es/string/repeat.js"}],"node_modules/core-js/internals/create-property.js":[function(require,module,exports) {
'use strict';
var toPrimitive = require('../internals/to-primitive');
var definePropertyModule = require('../internals/object-define-property');
var createPropertyDescriptor = require('../internals/create-property-descriptor');

module.exports = function (object, key, value) {
  var propertyKey = toPrimitive(key);
  if (propertyKey in object) definePropertyModule.f(object, propertyKey, createPropertyDescriptor(0, value));
  else object[propertyKey] = value;
};

},{"../internals/to-primitive":"node_modules/core-js/internals/to-primitive.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/create-property-descriptor":"node_modules/core-js/internals/create-property-descriptor.js"}],"node_modules/core-js/internals/array-method-has-species-support.js":[function(require,module,exports) {
var fails = require('../internals/fails');
var SPECIES = require('../internals/well-known-symbol')('species');

module.exports = function (METHOD_NAME) {
  return !fails(function () {
    var array = [];
    var constructor = array.constructor = {};
    constructor[SPECIES] = function () {
      return { foo: 1 };
    };
    return array[METHOD_NAME](Boolean).foo !== 1;
  });
};

},{"../internals/fails":"node_modules/core-js/internals/fails.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/modules/es.array.concat.js":[function(require,module,exports) {
'use strict';
var isArray = require('../internals/is-array');
var isObject = require('../internals/is-object');
var toObject = require('../internals/to-object');
var toLength = require('../internals/to-length');
var createProperty = require('../internals/create-property');
var arraySpeciesCreate = require('../internals/array-species-create');
var IS_CONCAT_SPREADABLE = require('../internals/well-known-symbol')('isConcatSpreadable');
var MAX_SAFE_INTEGER = 0x1fffffffffffff;
var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

var IS_CONCAT_SPREADABLE_SUPPORT = !require('../internals/fails')(function () {
  var array = [];
  array[IS_CONCAT_SPREADABLE] = false;
  return array.concat()[0] !== array;
});

var SPECIES_SUPPORT = require('../internals/array-method-has-species-support')('concat');

var isConcatSpreadable = function (O) {
  if (!isObject(O)) return false;
  var spreadable = O[IS_CONCAT_SPREADABLE];
  return spreadable !== undefined ? !!spreadable : isArray(O);
};

var FORCED = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

// `Array.prototype.concat` method
// https://tc39.github.io/ecma262/#sec-array.prototype.concat
// with adding support of @@isConcatSpreadable and @@species
require('../internals/export')({ target: 'Array', proto: true, forced: FORCED }, {
  concat: function concat(arg) { // eslint-disable-line no-unused-vars
    var O = toObject(this);
    var A = arraySpeciesCreate(O, 0);
    var n = 0;
    var i, k, length, len, E;
    for (i = -1, length = arguments.length; i < length; i++) {
      E = i === -1 ? O : arguments[i];
      if (isConcatSpreadable(E)) {
        len = toLength(E.length);
        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
      } else {
        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
        createProperty(A, n++, E);
      }
    }
    A.length = n;
    return A;
  }
});

},{"../internals/is-array":"node_modules/core-js/internals/is-array.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/to-length":"node_modules/core-js/internals/to-length.js","../internals/create-property":"node_modules/core-js/internals/create-property.js","../internals/array-species-create":"node_modules/core-js/internals/array-species-create.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/array-method-has-species-support":"node_modules/core-js/internals/array-method-has-species-support.js","../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/internals/classof.js":[function(require,module,exports) {
var classofRaw = require('../internals/classof-raw');
var TO_STRING_TAG = require('../internals/well-known-symbol')('toStringTag');
// ES3 wrong here
var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function (it, key) {
  try {
    return it[key];
  } catch (e) { /* empty */ }
};

// getting tag from ES6+ `Object.prototype.toString`
module.exports = function (it) {
  var O, tag, result;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG)) == 'string' ? tag
    // builtinTag case
    : CORRECT_ARGUMENTS ? classofRaw(O)
    // ES3 arguments fallback
    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
};

},{"../internals/classof-raw":"node_modules/core-js/internals/classof-raw.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/internals/object-to-string.js":[function(require,module,exports) {
'use strict';
var classof = require('../internals/classof');
var TO_STRING_TAG = require('../internals/well-known-symbol')('toStringTag');
var test = {};

test[TO_STRING_TAG] = 'z';

// `Object.prototype.toString` method implementation
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
module.exports = String(test) !== '[object z]' ? function toString() {
  return '[object ' + classof(this) + ']';
} : test.toString;

},{"../internals/classof":"node_modules/core-js/internals/classof.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/modules/es.object.to-string.js":[function(require,module,exports) {
var toString = require('../internals/object-to-string');
var ObjectPrototype = Object.prototype;

// `Object.prototype.toString` method
// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
if (toString !== ObjectPrototype.toString) {
  require('../internals/redefine')(ObjectPrototype, 'toString', toString, { unsafe: true });
}

},{"../internals/object-to-string":"node_modules/core-js/internals/object-to-string.js","../internals/redefine":"node_modules/core-js/internals/redefine.js"}],"node_modules/core-js/internals/set-to-string-tag.js":[function(require,module,exports) {
var defineProperty = require('../internals/object-define-property').f;
var has = require('../internals/has');
var TO_STRING_TAG = require('../internals/well-known-symbol')('toStringTag');

module.exports = function (it, TAG, STATIC) {
  if (it && !has(it = STATIC ? it : it.prototype, TO_STRING_TAG)) {
    defineProperty(it, TO_STRING_TAG, { configurable: true, value: TAG });
  }
};

},{"../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/internals/wrapped-well-known-symbol.js":[function(require,module,exports) {
exports.f = require('../internals/well-known-symbol');

},{"../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/internals/define-well-known-symbol.js":[function(require,module,exports) {
var path = require('../internals/path');
var has = require('../internals/has');
var wrappedWellKnownSymbolModule = require('../internals/wrapped-well-known-symbol');
var defineProperty = require('../internals/object-define-property').f;

module.exports = function (NAME) {
  var Symbol = path.Symbol || (path.Symbol = {});
  if (!has(Symbol, NAME)) defineProperty(Symbol, NAME, {
    value: wrappedWellKnownSymbolModule.f(NAME)
  });
};

},{"../internals/path":"node_modules/core-js/internals/path.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/wrapped-well-known-symbol":"node_modules/core-js/internals/wrapped-well-known-symbol.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js"}],"node_modules/core-js/internals/enum-keys.js":[function(require,module,exports) {
var objectKeys = require('../internals/object-keys');
var getOwnPropertySymbolsModule = require('../internals/object-get-own-property-symbols');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');

// all enumerable object keys, includes symbols
module.exports = function (it) {
  var result = objectKeys(it);
  var getOwnPropertySymbols = getOwnPropertySymbolsModule.f;
  if (getOwnPropertySymbols) {
    var symbols = getOwnPropertySymbols(it);
    var propertyIsEnumerable = propertyIsEnumerableModule.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (propertyIsEnumerable.call(it, key = symbols[i++])) result.push(key);
  } return result;
};

},{"../internals/object-keys":"node_modules/core-js/internals/object-keys.js","../internals/object-get-own-property-symbols":"node_modules/core-js/internals/object-get-own-property-symbols.js","../internals/object-property-is-enumerable":"node_modules/core-js/internals/object-property-is-enumerable.js"}],"node_modules/core-js/internals/object-get-own-property-names-external.js":[function(require,module,exports) {
// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIndexedObject = require('../internals/to-indexed-object');
var nativeGetOwnPropertyNames = require('../internals/object-get-own-property-names').f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return nativeGetOwnPropertyNames(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]'
    ? getWindowNames(it)
    : nativeGetOwnPropertyNames(toIndexedObject(it));
};

},{"../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/object-get-own-property-names":"node_modules/core-js/internals/object-get-own-property-names.js"}],"node_modules/core-js/modules/es.symbol.js":[function(require,module,exports) {

'use strict';
// ECMAScript 6 symbols shim
var global = require('../internals/global');
var has = require('../internals/has');
var DESCRIPTORS = require('../internals/descriptors');
var IS_PURE = require('../internals/is-pure');
var $export = require('../internals/export');
var redefine = require('../internals/redefine');
var hiddenKeys = require('../internals/hidden-keys');
var fails = require('../internals/fails');
var shared = require('../internals/shared');
var setToStringTag = require('../internals/set-to-string-tag');
var uid = require('../internals/uid');
var wellKnownSymbol = require('../internals/well-known-symbol');
var wrappedWellKnownSymbolModule = require('../internals/wrapped-well-known-symbol');
var defineWellKnownSymbol = require('../internals/define-well-known-symbol');
var enumKeys = require('../internals/enum-keys');
var isArray = require('../internals/is-array');
var anObject = require('../internals/an-object');
var isObject = require('../internals/is-object');
var toIndexedObject = require('../internals/to-indexed-object');
var toPrimitive = require('../internals/to-primitive');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var nativeObjectCreate = require('../internals/object-create');
var getOwnPropertyNamesExternal = require('../internals/object-get-own-property-names-external');
var getOwnPropertyDescriptorModule = require('../internals/object-get-own-property-descriptor');
var definePropertyModule = require('../internals/object-define-property');
var propertyIsEnumerableModule = require('../internals/object-property-is-enumerable');
var hide = require('../internals/hide');
var objectKeys = require('../internals/object-keys');
var HIDDEN = require('../internals/shared-key')('hidden');
var InternalStateModule = require('../internals/internal-state');
var SYMBOL = 'Symbol';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(SYMBOL);
var nativeGetOwnPropertyDescriptor = getOwnPropertyDescriptorModule.f;
var nativeDefineProperty = definePropertyModule.f;
var nativeGetOwnPropertyNames = getOwnPropertyNamesExternal.f;
var $Symbol = global.Symbol;
var JSON = global.JSON;
var nativeJSONStringify = JSON && JSON.stringify;
var PROTOTYPE = 'prototype';
var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
var nativePropertyIsEnumerable = propertyIsEnumerableModule.f;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var ObjectPrototypeSymbols = shared('op-symbols');
var WellKnownSymbolsStore = shared('wks');
var ObjectPrototype = Object[PROTOTYPE];
var QObject = global.QObject;
var NATIVE_SYMBOL = require('../internals/native-symbol');
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var USE_SETTER = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDescriptor = DESCRIPTORS && fails(function () {
  return nativeObjectCreate(nativeDefineProperty({}, 'a', {
    get: function () { return nativeDefineProperty(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor(ObjectPrototype, key);
  if (ObjectPrototypeDescriptor) delete ObjectPrototype[key];
  nativeDefineProperty(it, key, D);
  if (ObjectPrototypeDescriptor && it !== ObjectPrototype) {
    nativeDefineProperty(ObjectPrototype, key, ObjectPrototypeDescriptor);
  }
} : nativeDefineProperty;

var wrap = function (tag, description) {
  var symbol = AllSymbols[tag] = nativeObjectCreate($Symbol[PROTOTYPE]);
  setInternalState(symbol, {
    type: SYMBOL,
    tag: tag,
    description: description
  });
  if (!DESCRIPTORS) symbol.description = description;
  return symbol;
};

var isSymbol = NATIVE_SYMBOL && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return Object(it) instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectPrototype) $defineProperty(ObjectPrototypeSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) nativeDefineProperty(it, HIDDEN, createPropertyDescriptor(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = nativeObjectCreate(D, { enumerable: createPropertyDescriptor(0, false) });
    } return setSymbolDescriptor(it, key, D);
  } return nativeDefineProperty(it, key, D);
};

var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIndexedObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};

var $create = function create(it, P) {
  return P === undefined ? nativeObjectCreate(it) : $defineProperties(nativeObjectCreate(it), P);
};

var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = nativePropertyIsEnumerable.call(this, key = toPrimitive(key, true));
  if (this === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};

var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIndexedObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectPrototype && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
  var D = nativeGetOwnPropertyDescriptor(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};

var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = nativeGetOwnPropertyNames(toIndexedObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && !has(hiddenKeys, key)) result.push(key);
  } return result;
};

var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectPrototype;
  var names = nativeGetOwnPropertyNames(IS_OP ? ObjectPrototypeSymbols : toIndexedObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectPrototype, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// `Symbol` constructor
// https://tc39.github.io/ecma262/#sec-symbol-constructor
if (!NATIVE_SYMBOL) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
    var description = arguments[0] === undefined ? undefined : String(arguments[0]);
    var tag = uid(description);
    var setter = function (value) {
      if (this === ObjectPrototype) setter.call(ObjectPrototypeSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
    };
    if (DESCRIPTORS && USE_SETTER) setSymbolDescriptor(ObjectPrototype, tag, { configurable: true, set: setter });
    return wrap(tag, description);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return getInternalState(this).tag;
  });

  propertyIsEnumerableModule.f = $propertyIsEnumerable;
  definePropertyModule.f = $defineProperty;
  getOwnPropertyDescriptorModule.f = $getOwnPropertyDescriptor;
  require('../internals/object-get-own-property-names').f = getOwnPropertyNamesExternal.f = $getOwnPropertyNames;
  require('../internals/object-get-own-property-symbols').f = $getOwnPropertySymbols;

  if (DESCRIPTORS) {
    // https://github.com/tc39/proposal-Symbol-description
    nativeDefineProperty($Symbol[PROTOTYPE], 'description', {
      configurable: true,
      get: function description() {
        return getInternalState(this).description;
      }
    });
    if (!IS_PURE) {
      redefine(ObjectPrototype, 'propertyIsEnumerable', $propertyIsEnumerable, { unsafe: true });
    }
  }

  wrappedWellKnownSymbolModule.f = function (name) {
    return wrap(wellKnownSymbol(name), name);
  };
}

$export({ global: true, wrap: true, forced: !NATIVE_SYMBOL, sham: !NATIVE_SYMBOL }, { Symbol: $Symbol });

for (var wellKnownSymbols = objectKeys(WellKnownSymbolsStore), k = 0; wellKnownSymbols.length > k;) {
  defineWellKnownSymbol(wellKnownSymbols[k++]);
}

$export({ target: SYMBOL, stat: true, forced: !NATIVE_SYMBOL }, {
  // `Symbol.for` method
  // https://tc39.github.io/ecma262/#sec-symbol.for
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // `Symbol.keyFor` method
  // https://tc39.github.io/ecma262/#sec-symbol.keyfor
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { USE_SETTER = true; },
  useSimple: function () { USE_SETTER = false; }
});

$export({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL, sham: !DESCRIPTORS }, {
  // `Object.create` method
  // https://tc39.github.io/ecma262/#sec-object.create
  create: $create,
  // `Object.defineProperty` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperty
  defineProperty: $defineProperty,
  // `Object.defineProperties` method
  // https://tc39.github.io/ecma262/#sec-object.defineproperties
  defineProperties: $defineProperties,
  // `Object.getOwnPropertyDescriptor` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
});

$export({ target: 'Object', stat: true, forced: !NATIVE_SYMBOL }, {
  // `Object.getOwnPropertyNames` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
  getOwnPropertyNames: $getOwnPropertyNames,
  // `Object.getOwnPropertySymbols` method
  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// `JSON.stringify` method behavior with symbols
// https://tc39.github.io/ecma262/#sec-json.stringify
JSON && $export({ target: 'JSON', stat: true, forced: !NATIVE_SYMBOL || fails(function () {
  var symbol = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  return nativeJSONStringify([symbol]) != '[null]'
    // WebKit converts symbol values to JSON as null
    || nativeJSONStringify({ a: symbol }) != '{}'
    // V8 throws on boxed symbols
    || nativeJSONStringify(Object(symbol)) != '{}';
}) }, {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return nativeJSONStringify.apply(JSON, args);
  }
});

// `Symbol.prototype[@@toPrimitive]` method
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
if (!$Symbol[PROTOTYPE][TO_PRIMITIVE]) hide($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// `Symbol.prototype[@@toStringTag]` property
// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
setToStringTag($Symbol, SYMBOL);

hiddenKeys[HIDDEN] = true;

},{"../internals/global":"node_modules/core-js/internals/global.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/is-pure":"node_modules/core-js/internals/is-pure.js","../internals/export":"node_modules/core-js/internals/export.js","../internals/redefine":"node_modules/core-js/internals/redefine.js","../internals/hidden-keys":"node_modules/core-js/internals/hidden-keys.js","../internals/fails":"node_modules/core-js/internals/fails.js","../internals/shared":"node_modules/core-js/internals/shared.js","../internals/set-to-string-tag":"node_modules/core-js/internals/set-to-string-tag.js","../internals/uid":"node_modules/core-js/internals/uid.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/wrapped-well-known-symbol":"node_modules/core-js/internals/wrapped-well-known-symbol.js","../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js","../internals/enum-keys":"node_modules/core-js/internals/enum-keys.js","../internals/is-array":"node_modules/core-js/internals/is-array.js","../internals/an-object":"node_modules/core-js/internals/an-object.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/to-primitive":"node_modules/core-js/internals/to-primitive.js","../internals/create-property-descriptor":"node_modules/core-js/internals/create-property-descriptor.js","../internals/object-create":"node_modules/core-js/internals/object-create.js","../internals/object-get-own-property-names-external":"node_modules/core-js/internals/object-get-own-property-names-external.js","../internals/object-get-own-property-descriptor":"node_modules/core-js/internals/object-get-own-property-descriptor.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/object-property-is-enumerable":"node_modules/core-js/internals/object-property-is-enumerable.js","../internals/hide":"node_modules/core-js/internals/hide.js","../internals/object-keys":"node_modules/core-js/internals/object-keys.js","../internals/shared-key":"node_modules/core-js/internals/shared-key.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js","../internals/native-symbol":"node_modules/core-js/internals/native-symbol.js","../internals/object-get-own-property-names":"node_modules/core-js/internals/object-get-own-property-names.js","../internals/object-get-own-property-symbols":"node_modules/core-js/internals/object-get-own-property-symbols.js"}],"node_modules/core-js/modules/es.symbol.async-iterator.js":[function(require,module,exports) {
// `Symbol.asyncIterator` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.asynciterator
require('../internals/define-well-known-symbol')('asyncIterator');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.description.js":[function(require,module,exports) {
// `Symbol.prototype.description` getter
// https://tc39.github.io/ecma262/#sec-symbol.prototype.description
'use strict';
var DESCRIPTORS = require('../internals/descriptors');
var has = require('../internals/has');
var isObject = require('../internals/is-object');
var defineProperty = require('../internals/object-define-property').f;
var copyConstructorProperties = require('../internals/copy-constructor-properties');
var NativeSymbol = require('../internals/global').Symbol;

if (DESCRIPTORS && typeof NativeSymbol == 'function' && (!('description' in NativeSymbol.prototype) ||
  // Safari 12 bug
  NativeSymbol().description !== undefined
)) {
  var EmptyStringDescriptionStore = {};
  // wrap Symbol constructor for correct work with undefined description
  var SymbolWrapper = function Symbol() {
    var description = arguments.length < 1 || arguments[0] === undefined ? undefined : String(arguments[0]);
    var result = this instanceof SymbolWrapper
      ? new NativeSymbol(description)
      // in Edge 13, String(Symbol(undefined)) === 'Symbol(undefined)'
      : description === undefined ? NativeSymbol() : NativeSymbol(description);
    if (description === '') EmptyStringDescriptionStore[result] = true;
    return result;
  };
  copyConstructorProperties(SymbolWrapper, NativeSymbol);
  var symbolPrototype = SymbolWrapper.prototype = NativeSymbol.prototype;
  symbolPrototype.constructor = SymbolWrapper;

  var symbolToString = symbolPrototype.toString;
  var native = String(NativeSymbol('test')) == 'Symbol(test)';
  var regexp = /^Symbol\((.*)\)[^)]+$/;
  defineProperty(symbolPrototype, 'description', {
    configurable: true,
    get: function description() {
      var symbol = isObject(this) ? this.valueOf() : this;
      var string = symbolToString.call(symbol);
      if (has(EmptyStringDescriptionStore, symbol)) return '';
      var desc = native ? string.slice(7, -1) : string.replace(regexp, '$1');
      return desc === '' ? undefined : desc;
    }
  });

  require('../internals/export')({ global: true, forced: true }, { Symbol: SymbolWrapper });
}

},{"../internals/descriptors":"node_modules/core-js/internals/descriptors.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/object-define-property":"node_modules/core-js/internals/object-define-property.js","../internals/copy-constructor-properties":"node_modules/core-js/internals/copy-constructor-properties.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/export":"node_modules/core-js/internals/export.js"}],"node_modules/core-js/modules/es.symbol.has-instance.js":[function(require,module,exports) {
// `Symbol.hasInstance` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.hasinstance
require('../internals/define-well-known-symbol')('hasInstance');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.is-concat-spreadable.js":[function(require,module,exports) {
// `Symbol.isConcatSpreadable` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable
require('../internals/define-well-known-symbol')('isConcatSpreadable');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.iterator.js":[function(require,module,exports) {
// `Symbol.iterator` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.iterator
require('../internals/define-well-known-symbol')('iterator');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.match.js":[function(require,module,exports) {
// `Symbol.match` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.match
require('../internals/define-well-known-symbol')('match');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.replace.js":[function(require,module,exports) {
// `Symbol.replace` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.replace
require('../internals/define-well-known-symbol')('replace');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.search.js":[function(require,module,exports) {
// `Symbol.search` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.search
require('../internals/define-well-known-symbol')('search');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.species.js":[function(require,module,exports) {
// `Symbol.species` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.species
require('../internals/define-well-known-symbol')('species');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.split.js":[function(require,module,exports) {
// `Symbol.split` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.split
require('../internals/define-well-known-symbol')('split');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.to-primitive.js":[function(require,module,exports) {
// `Symbol.toPrimitive` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.toprimitive
require('../internals/define-well-known-symbol')('toPrimitive');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.to-string-tag.js":[function(require,module,exports) {
// `Symbol.toStringTag` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.tostringtag
require('../internals/define-well-known-symbol')('toStringTag');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.symbol.unscopables.js":[function(require,module,exports) {
// `Symbol.unscopables` well-known symbol
// https://tc39.github.io/ecma262/#sec-symbol.unscopables
require('../internals/define-well-known-symbol')('unscopables');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/es.math.to-string-tag.js":[function(require,module,exports) {
// Math[@@toStringTag] property
// https://tc39.github.io/ecma262/#sec-math-@@tostringtag
require('../internals/set-to-string-tag')(Math, 'Math', true);

},{"../internals/set-to-string-tag":"node_modules/core-js/internals/set-to-string-tag.js"}],"node_modules/core-js/modules/es.json.to-string-tag.js":[function(require,module,exports) {
// JSON[@@toStringTag] property
// https://tc39.github.io/ecma262/#sec-json-@@tostringtag
require('../internals/set-to-string-tag')(require('../internals/global').JSON, 'JSON', true);

},{"../internals/set-to-string-tag":"node_modules/core-js/internals/set-to-string-tag.js","../internals/global":"node_modules/core-js/internals/global.js"}],"node_modules/core-js/es/symbol/index.js":[function(require,module,exports) {
require('../../modules/es.array.concat');
require('../../modules/es.object.to-string');
require('../../modules/es.symbol');
require('../../modules/es.symbol.async-iterator');
require('../../modules/es.symbol.description');
require('../../modules/es.symbol.has-instance');
require('../../modules/es.symbol.is-concat-spreadable');
require('../../modules/es.symbol.iterator');
require('../../modules/es.symbol.match');
require('../../modules/es.symbol.replace');
require('../../modules/es.symbol.search');
require('../../modules/es.symbol.species');
require('../../modules/es.symbol.split');
require('../../modules/es.symbol.to-primitive');
require('../../modules/es.symbol.to-string-tag');
require('../../modules/es.symbol.unscopables');
require('../../modules/es.math.to-string-tag');
require('../../modules/es.json.to-string-tag');

module.exports = require('../../internals/path').Symbol;

},{"../../modules/es.array.concat":"node_modules/core-js/modules/es.array.concat.js","../../modules/es.object.to-string":"node_modules/core-js/modules/es.object.to-string.js","../../modules/es.symbol":"node_modules/core-js/modules/es.symbol.js","../../modules/es.symbol.async-iterator":"node_modules/core-js/modules/es.symbol.async-iterator.js","../../modules/es.symbol.description":"node_modules/core-js/modules/es.symbol.description.js","../../modules/es.symbol.has-instance":"node_modules/core-js/modules/es.symbol.has-instance.js","../../modules/es.symbol.is-concat-spreadable":"node_modules/core-js/modules/es.symbol.is-concat-spreadable.js","../../modules/es.symbol.iterator":"node_modules/core-js/modules/es.symbol.iterator.js","../../modules/es.symbol.match":"node_modules/core-js/modules/es.symbol.match.js","../../modules/es.symbol.replace":"node_modules/core-js/modules/es.symbol.replace.js","../../modules/es.symbol.search":"node_modules/core-js/modules/es.symbol.search.js","../../modules/es.symbol.species":"node_modules/core-js/modules/es.symbol.species.js","../../modules/es.symbol.split":"node_modules/core-js/modules/es.symbol.split.js","../../modules/es.symbol.to-primitive":"node_modules/core-js/modules/es.symbol.to-primitive.js","../../modules/es.symbol.to-string-tag":"node_modules/core-js/modules/es.symbol.to-string-tag.js","../../modules/es.symbol.unscopables":"node_modules/core-js/modules/es.symbol.unscopables.js","../../modules/es.math.to-string-tag":"node_modules/core-js/modules/es.math.to-string-tag.js","../../modules/es.json.to-string-tag":"node_modules/core-js/modules/es.json.to-string-tag.js","../../internals/path":"node_modules/core-js/internals/path.js"}],"node_modules/core-js/modules/esnext.symbol.dispose.js":[function(require,module,exports) {
// `Symbol.patternMatch` well-known symbol
// https://github.com/tc39/proposal-using-statement
require('../internals/define-well-known-symbol')('dispose');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/esnext.symbol.observable.js":[function(require,module,exports) {
// https://github.com/tc39/proposal-observable
require('../internals/define-well-known-symbol')('observable');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/modules/esnext.symbol.pattern-match.js":[function(require,module,exports) {
// `Symbol.patternMatch` well-known symbol
// https://github.com/tc39/proposal-pattern-matching
require('../internals/define-well-known-symbol')('patternMatch');

},{"../internals/define-well-known-symbol":"node_modules/core-js/internals/define-well-known-symbol.js"}],"node_modules/core-js/features/symbol/index.js":[function(require,module,exports) {
module.exports = require('../../es/symbol');

require('../../modules/esnext.symbol.dispose');
require('../../modules/esnext.symbol.observable');
require('../../modules/esnext.symbol.pattern-match');

},{"../../es/symbol":"node_modules/core-js/es/symbol/index.js","../../modules/esnext.symbol.dispose":"node_modules/core-js/modules/esnext.symbol.dispose.js","../../modules/esnext.symbol.observable":"node_modules/core-js/modules/esnext.symbol.observable.js","../../modules/esnext.symbol.pattern-match":"node_modules/core-js/modules/esnext.symbol.pattern-match.js"}],"node_modules/core-js/internals/string-at.js":[function(require,module,exports) {
var toInteger = require('../internals/to-integer');
var requireObjectCoercible = require('../internals/require-object-coercible');
// CONVERT_TO_STRING: true  -> String#at
// CONVERT_TO_STRING: false -> String#codePointAt
module.exports = function (that, pos, CONVERT_TO_STRING) {
  var S = String(requireObjectCoercible(that));
  var position = toInteger(pos);
  var size = S.length;
  var first, second;
  if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
  first = S.charCodeAt(position);
  return first < 0xd800 || first > 0xdbff || position + 1 === size
    || (second = S.charCodeAt(position + 1)) < 0xdc00 || second > 0xdfff
      ? CONVERT_TO_STRING ? S.charAt(position) : first
      : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xd800 << 10) + (second - 0xdc00) + 0x10000;
};

},{"../internals/to-integer":"node_modules/core-js/internals/to-integer.js","../internals/require-object-coercible":"node_modules/core-js/internals/require-object-coercible.js"}],"node_modules/core-js/internals/correct-prototype-getter.js":[function(require,module,exports) {
module.exports = !require('../internals/fails')(function () {
  function F() { /* empty */ }
  F.prototype.constructor = null;
  return Object.getPrototypeOf(new F()) !== F.prototype;
});

},{"../internals/fails":"node_modules/core-js/internals/fails.js"}],"node_modules/core-js/internals/object-get-prototype-of.js":[function(require,module,exports) {
// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has = require('../internals/has');
var toObject = require('../internals/to-object');
var IE_PROTO = require('../internals/shared-key')('IE_PROTO');
var CORRECT_PROTOTYPE_GETTER = require('../internals/correct-prototype-getter');
var ObjectPrototype = Object.prototype;

module.exports = CORRECT_PROTOTYPE_GETTER ? Object.getPrototypeOf : function (O) {
  O = toObject(O);
  if (has(O, IE_PROTO)) return O[IE_PROTO];
  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectPrototype : null;
};

},{"../internals/has":"node_modules/core-js/internals/has.js","../internals/to-object":"node_modules/core-js/internals/to-object.js","../internals/shared-key":"node_modules/core-js/internals/shared-key.js","../internals/correct-prototype-getter":"node_modules/core-js/internals/correct-prototype-getter.js"}],"node_modules/core-js/internals/iterators-core.js":[function(require,module,exports) {
'use strict';
var getPrototypeOf = require('../internals/object-get-prototype-of');
var hide = require('../internals/hide');
var has = require('../internals/has');
var IS_PURE = require('../internals/is-pure');
var ITERATOR = require('../internals/well-known-symbol')('iterator');
var BUGGY_SAFARI_ITERATORS = false;

var returnThis = function () { return this; };

// `%IteratorPrototype%` object
// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

if ([].keys) {
  arrayIterator = [].keys();
  // Safari 8 has buggy iterators w/o `next`
  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
  else {
    PrototypeOfArrayIteratorPrototype = getPrototypeOf(getPrototypeOf(arrayIterator));
    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
  }
}

if (IteratorPrototype == undefined) IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
if (!IS_PURE && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);

module.exports = {
  IteratorPrototype: IteratorPrototype,
  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
};

},{"../internals/object-get-prototype-of":"node_modules/core-js/internals/object-get-prototype-of.js","../internals/hide":"node_modules/core-js/internals/hide.js","../internals/has":"node_modules/core-js/internals/has.js","../internals/is-pure":"node_modules/core-js/internals/is-pure.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/internals/create-iterator-constructor.js":[function(require,module,exports) {
'use strict';
var IteratorPrototype = require('../internals/iterators-core').IteratorPrototype;
var create = require('../internals/object-create');
var createPropertyDescriptor = require('../internals/create-property-descriptor');
var setToStringTag = require('../internals/set-to-string-tag');
var Iterators = require('../internals/iterators');

var returnThis = function () { return this; };

module.exports = function (IteratorConstructor, NAME, next) {
  var TO_STRING_TAG = NAME + ' Iterator';
  IteratorConstructor.prototype = create(IteratorPrototype, { next: createPropertyDescriptor(1, next) });
  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
  Iterators[TO_STRING_TAG] = returnThis;
  return IteratorConstructor;
};

},{"../internals/iterators-core":"node_modules/core-js/internals/iterators-core.js","../internals/object-create":"node_modules/core-js/internals/object-create.js","../internals/create-property-descriptor":"node_modules/core-js/internals/create-property-descriptor.js","../internals/set-to-string-tag":"node_modules/core-js/internals/set-to-string-tag.js","../internals/iterators":"node_modules/core-js/internals/hidden-keys.js"}],"node_modules/core-js/internals/validate-set-prototype-of-arguments.js":[function(require,module,exports) {
var isObject = require('../internals/is-object');
var anObject = require('../internals/an-object');

module.exports = function (O, proto) {
  anObject(O);
  if (!isObject(proto) && proto !== null) {
    throw TypeError("Can't set " + String(proto) + ' as a prototype');
  }
};

},{"../internals/is-object":"node_modules/core-js/internals/is-object.js","../internals/an-object":"node_modules/core-js/internals/an-object.js"}],"node_modules/core-js/internals/object-set-prototype-of.js":[function(require,module,exports) {
// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var validateSetPrototypeOfArguments = require('../internals/validate-set-prototype-of-arguments');

module.exports = Object.setPrototypeOf || ('__proto__' in {} ? function () { // eslint-disable-line
  var correctSetter = false;
  var test = {};
  var setter;
  try {
    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
    setter.call(test, []);
    correctSetter = test instanceof Array;
  } catch (e) { /* empty */ }
  return function setPrototypeOf(O, proto) {
    validateSetPrototypeOfArguments(O, proto);
    if (correctSetter) setter.call(O, proto);
    else O.__proto__ = proto;
    return O;
  };
}() : undefined);

},{"../internals/validate-set-prototype-of-arguments":"node_modules/core-js/internals/validate-set-prototype-of-arguments.js"}],"node_modules/core-js/internals/define-iterator.js":[function(require,module,exports) {
'use strict';
var $export = require('../internals/export');
var createIteratorConstructor = require('../internals/create-iterator-constructor');
var getPrototypeOf = require('../internals/object-get-prototype-of');
var setPrototypeOf = require('../internals/object-set-prototype-of');
var setToStringTag = require('../internals/set-to-string-tag');
var hide = require('../internals/hide');
var redefine = require('../internals/redefine');
var IS_PURE = require('../internals/is-pure');
var ITERATOR = require('../internals/well-known-symbol')('iterator');
var Iterators = require('../internals/iterators');
var IteratorsCore = require('../internals/iterators-core');
var IteratorPrototype = IteratorsCore.IteratorPrototype;
var BUGGY_SAFARI_ITERATORS = IteratorsCore.BUGGY_SAFARI_ITERATORS;
var KEYS = 'keys';
var VALUES = 'values';
var ENTRIES = 'entries';

var returnThis = function () { return this; };

module.exports = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
  createIteratorConstructor(IteratorConstructor, NAME, next);

  var getIterationMethod = function (KIND) {
    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
    if (!BUGGY_SAFARI_ITERATORS && KIND in IterablePrototype) return IterablePrototype[KIND];
    switch (KIND) {
      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
    } return function () { return new IteratorConstructor(this); };
  };

  var TO_STRING_TAG = NAME + ' Iterator';
  var INCORRECT_VALUES_NAME = false;
  var IterablePrototype = Iterable.prototype;
  var nativeIterator = IterablePrototype[ITERATOR]
    || IterablePrototype['@@iterator']
    || DEFAULT && IterablePrototype[DEFAULT];
  var defaultIterator = !BUGGY_SAFARI_ITERATORS && nativeIterator || getIterationMethod(DEFAULT);
  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
  var CurrentIteratorPrototype, methods, KEY;

  // fix native
  if (anyNativeIterator) {
    CurrentIteratorPrototype = getPrototypeOf(anyNativeIterator.call(new Iterable()));
    if (IteratorPrototype !== Object.prototype && CurrentIteratorPrototype.next) {
      if (!IS_PURE && getPrototypeOf(CurrentIteratorPrototype) !== IteratorPrototype) {
        if (setPrototypeOf) {
          setPrototypeOf(CurrentIteratorPrototype, IteratorPrototype);
        } else if (typeof CurrentIteratorPrototype[ITERATOR] != 'function') {
          hide(CurrentIteratorPrototype, ITERATOR, returnThis);
        }
      }
      // Set @@toStringTag to native iterators
      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
      if (IS_PURE) Iterators[TO_STRING_TAG] = returnThis;
    }
  }

  // fix Array#{values, @@iterator}.name in V8 / FF
  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
    INCORRECT_VALUES_NAME = true;
    defaultIterator = function values() { return nativeIterator.call(this); };
  }

  // define iterator
  if ((!IS_PURE || FORCED) && IterablePrototype[ITERATOR] !== defaultIterator) {
    hide(IterablePrototype, ITERATOR, defaultIterator);
  }
  Iterators[NAME] = defaultIterator;

  // export additional methods
  if (DEFAULT) {
    methods = {
      values: getIterationMethod(VALUES),
      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
      entries: getIterationMethod(ENTRIES)
    };
    if (FORCED) for (KEY in methods) {
      if (BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
        redefine(IterablePrototype, KEY, methods[KEY]);
      }
    } else $export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS || INCORRECT_VALUES_NAME }, methods);
  }

  return methods;
};

},{"../internals/export":"node_modules/core-js/internals/export.js","../internals/create-iterator-constructor":"node_modules/core-js/internals/create-iterator-constructor.js","../internals/object-get-prototype-of":"node_modules/core-js/internals/object-get-prototype-of.js","../internals/object-set-prototype-of":"node_modules/core-js/internals/object-set-prototype-of.js","../internals/set-to-string-tag":"node_modules/core-js/internals/set-to-string-tag.js","../internals/hide":"node_modules/core-js/internals/hide.js","../internals/redefine":"node_modules/core-js/internals/redefine.js","../internals/is-pure":"node_modules/core-js/internals/is-pure.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js","../internals/iterators":"node_modules/core-js/internals/hidden-keys.js","../internals/iterators-core":"node_modules/core-js/internals/iterators-core.js"}],"node_modules/core-js/modules/es.string.iterator.js":[function(require,module,exports) {
'use strict';
var codePointAt = require('../internals/string-at');
var InternalStateModule = require('../internals/internal-state');
var defineIterator = require('../internals/define-iterator');
var STRING_ITERATOR = 'String Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(STRING_ITERATOR);

// `String.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
defineIterator(String, 'String', function (iterated) {
  setInternalState(this, {
    type: STRING_ITERATOR,
    string: String(iterated),
    index: 0
  });
// `%StringIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
}, function next() {
  var state = getInternalState(this);
  var string = state.string;
  var index = state.index;
  var point;
  if (index >= string.length) return { value: undefined, done: true };
  point = codePointAt(string, index, true);
  state.index += point.length;
  return { value: point, done: false };
});

},{"../internals/string-at":"node_modules/core-js/internals/string-at.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js","../internals/define-iterator":"node_modules/core-js/internals/define-iterator.js"}],"node_modules/core-js/internals/dom-iterables.js":[function(require,module,exports) {
// iterable DOM collections
// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
module.exports = {
  CSSRuleList: 0,
  CSSStyleDeclaration: 0,
  CSSValueList: 0,
  ClientRectList: 0,
  DOMRectList: 0,
  DOMStringList: 0,
  DOMTokenList: 1,
  DataTransferItemList: 0,
  FileList: 0,
  HTMLAllCollection: 0,
  HTMLCollection: 0,
  HTMLFormElement: 0,
  HTMLSelectElement: 0,
  MediaList: 0,
  MimeTypeArray: 0,
  NamedNodeMap: 0,
  NodeList: 1,
  PaintRequestList: 0,
  Plugin: 0,
  PluginArray: 0,
  SVGLengthList: 0,
  SVGNumberList: 0,
  SVGPathSegList: 0,
  SVGPointList: 0,
  SVGStringList: 0,
  SVGTransformList: 0,
  SourceBufferList: 0,
  StyleSheetList: 0,
  TextTrackCueList: 0,
  TextTrackList: 0,
  TouchList: 0
};

},{}],"node_modules/core-js/modules/es.array.iterator.js":[function(require,module,exports) {
'use strict';
var toIndexedObject = require('../internals/to-indexed-object');
var addToUnscopables = require('../internals/add-to-unscopables');
var Iterators = require('../internals/iterators');
var InternalStateModule = require('../internals/internal-state');
var defineIterator = require('../internals/define-iterator');
var ARRAY_ITERATOR = 'Array Iterator';
var setInternalState = InternalStateModule.set;
var getInternalState = InternalStateModule.getterFor(ARRAY_ITERATOR);

// `Array.prototype.entries` method
// https://tc39.github.io/ecma262/#sec-array.prototype.entries
// `Array.prototype.keys` method
// https://tc39.github.io/ecma262/#sec-array.prototype.keys
// `Array.prototype.values` method
// https://tc39.github.io/ecma262/#sec-array.prototype.values
// `Array.prototype[@@iterator]` method
// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
// `CreateArrayIterator` internal method
// https://tc39.github.io/ecma262/#sec-createarrayiterator
module.exports = defineIterator(Array, 'Array', function (iterated, kind) {
  setInternalState(this, {
    type: ARRAY_ITERATOR,
    target: toIndexedObject(iterated), // target
    index: 0,                          // next index
    kind: kind                         // kind
  });
// `%ArrayIteratorPrototype%.next` method
// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
}, function () {
  var state = getInternalState(this);
  var target = state.target;
  var kind = state.kind;
  var index = state.index++;
  if (!target || index >= target.length) {
    state.target = undefined;
    return { value: undefined, done: true };
  }
  if (kind == 'keys') return { value: index, done: false };
  if (kind == 'values') return { value: target[index], done: false };
  return { value: [index, target[index]], done: false };
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values%
// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
Iterators.Arguments = Iterators.Array;

// https://tc39.github.io/ecma262/#sec-array.prototype-@@unscopables
addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

},{"../internals/to-indexed-object":"node_modules/core-js/internals/to-indexed-object.js","../internals/add-to-unscopables":"node_modules/core-js/internals/add-to-unscopables.js","../internals/iterators":"node_modules/core-js/internals/hidden-keys.js","../internals/internal-state":"node_modules/core-js/internals/internal-state.js","../internals/define-iterator":"node_modules/core-js/internals/define-iterator.js"}],"node_modules/core-js/modules/web.dom-collections.iterator.js":[function(require,module,exports) {

var DOMIterables = require('../internals/dom-iterables');
var ArrayIteratorMethods = require('../modules/es.array.iterator');
var global = require('../internals/global');
var hide = require('../internals/hide');
var wellKnownSymbol = require('../internals/well-known-symbol');
var ITERATOR = wellKnownSymbol('iterator');
var TO_STRING_TAG = wellKnownSymbol('toStringTag');
var ArrayValues = ArrayIteratorMethods.values;

for (var COLLECTION_NAME in DOMIterables) {
  var Collection = global[COLLECTION_NAME];
  var CollectionPrototype = Collection && Collection.prototype;
  if (CollectionPrototype) {
    // some Chrome versions have non-configurable methods on DOMTokenList
    if (CollectionPrototype[ITERATOR] !== ArrayValues) try {
      hide(CollectionPrototype, ITERATOR, ArrayValues);
    } catch (e) {
      CollectionPrototype[ITERATOR] = ArrayValues;
    }
    if (!CollectionPrototype[TO_STRING_TAG]) hide(CollectionPrototype, TO_STRING_TAG, COLLECTION_NAME);
    if (DOMIterables[COLLECTION_NAME]) for (var METHOD_NAME in ArrayIteratorMethods) {
      // some Chrome versions have non-configurable methods on DOMTokenList
      if (CollectionPrototype[METHOD_NAME] !== ArrayIteratorMethods[METHOD_NAME]) try {
        hide(CollectionPrototype, METHOD_NAME, ArrayIteratorMethods[METHOD_NAME]);
      } catch (e) {
        CollectionPrototype[METHOD_NAME] = ArrayIteratorMethods[METHOD_NAME];
      }
    }
  }
}

},{"../internals/dom-iterables":"node_modules/core-js/internals/dom-iterables.js","../modules/es.array.iterator":"node_modules/core-js/modules/es.array.iterator.js","../internals/global":"node_modules/core-js/internals/global.js","../internals/hide":"node_modules/core-js/internals/hide.js","../internals/well-known-symbol":"node_modules/core-js/internals/well-known-symbol.js"}],"node_modules/core-js/es/symbol/iterator.js":[function(require,module,exports) {
require('../../modules/es.symbol.iterator');
require('../../modules/es.string.iterator');
require('../../modules/web.dom-collections.iterator');

module.exports = require('../../internals/wrapped-well-known-symbol').f('iterator');

},{"../../modules/es.symbol.iterator":"node_modules/core-js/modules/es.symbol.iterator.js","../../modules/es.string.iterator":"node_modules/core-js/modules/es.string.iterator.js","../../modules/web.dom-collections.iterator":"node_modules/core-js/modules/web.dom-collections.iterator.js","../../internals/wrapped-well-known-symbol":"node_modules/core-js/internals/wrapped-well-known-symbol.js"}],"node_modules/core-js/features/symbol/iterator.js":[function(require,module,exports) {
module.exports = require('../../es/symbol/iterator');

},{"../../es/symbol/iterator":"node_modules/core-js/es/symbol/iterator.js"}],"node_modules/@firebase/polyfill/dist/index.esm.js":[function(require,module,exports) {
"use strict";

require("whatwg-fetch");

require("promise-polyfill/lib/polyfill");

require("core-js/features/array/find");

require("core-js/features/array/find-index");

require("core-js/features/object/assign");

require("core-js/features/string/starts-with");

require("core-js/features/string/repeat");

require("core-js/features/symbol");

require("core-js/features/symbol/iterator");
},{"whatwg-fetch":"node_modules/@firebase/polyfill/node_modules/whatwg-fetch/fetch.js","promise-polyfill/lib/polyfill":"node_modules/promise-polyfill/lib/polyfill.js","core-js/features/array/find":"node_modules/core-js/features/array/find.js","core-js/features/array/find-index":"node_modules/core-js/features/array/find-index.js","core-js/features/object/assign":"node_modules/core-js/features/object/assign.js","core-js/features/string/starts-with":"node_modules/core-js/features/string/starts-with.js","core-js/features/string/repeat":"node_modules/core-js/features/string/repeat.js","core-js/features/symbol":"node_modules/core-js/features/symbol/index.js","core-js/features/symbol/iterator":"node_modules/core-js/features/symbol/iterator.js"}],"node_modules/tslib/tslib.es6.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.__extends = __extends;
exports.__rest = __rest;
exports.__decorate = __decorate;
exports.__param = __param;
exports.__metadata = __metadata;
exports.__awaiter = __awaiter;
exports.__generator = __generator;
exports.__exportStar = __exportStar;
exports.__values = __values;
exports.__read = __read;
exports.__spread = __spread;
exports.__await = __await;
exports.__asyncGenerator = __asyncGenerator;
exports.__asyncDelegator = __asyncDelegator;
exports.__asyncValues = __asyncValues;
exports.__makeTemplateObject = __makeTemplateObject;
exports.__importStar = __importStar;
exports.__importDefault = __importDefault;
exports.__assign = void 0;

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };

  return extendStatics(d, b);
};

function __extends(d, b) {
  extendStatics(d, b);

  function __() {
    this.constructor = d;
  }

  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function () {
  exports.__assign = __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

exports.__assign = __assign;

function __rest(s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
  return t;
}

function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
  return function (target, key) {
    decorator(target, key, paramIndex);
  };
}

function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}

function __exportStar(m, exports) {
  for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
  var m = typeof Symbol === "function" && o[Symbol.iterator],
      i = 0;
  if (m) return m.call(o);
  return {
    next: function () {
      if (o && i >= o.length) o = void 0;
      return {
        value: o && o[i++],
        done: !o
      };
    }
  };
}

function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o),
      r,
      ar = [],
      e;

  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
  } catch (error) {
    e = {
      error: error
    };
  } finally {
    try {
      if (r && !r.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }

  return ar;
}

function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

  return ar;
}

function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []),
      i,
      q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i;

  function verb(n) {
    if (g[n]) i[n] = function (v) {
      return new Promise(function (a, b) {
        q.push([n, v, a, b]) > 1 || resume(n, v);
      });
    };
  }

  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }

  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }

  function fulfill(value) {
    resume("next", value);
  }

  function reject(value) {
    resume("throw", value);
  }

  function settle(f, v) {
    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}

function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function (e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function () {
    return this;
  }, i;

  function verb(n, f) {
    i[n] = o[n] ? function (v) {
      return (p = !p) ? {
        value: __await(o[n](v)),
        done: n === "return"
      } : f ? f(v) : v;
    } : f;
  }
}

function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator],
      i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
    return this;
  }, i);

  function verb(n) {
    i[n] = o[n] && function (v) {
      return new Promise(function (resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }

  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function (v) {
      resolve({
        value: v,
        done: d
      });
    }, reject);
  }
}

function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", {
      value: raw
    });
  } else {
    cooked.raw = raw;
  }

  return cooked;
}

;

function __importStar(mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  result.default = mod;
  return result;
}

function __importDefault(mod) {
  return mod && mod.__esModule ? mod : {
    default: mod
  };
}
},{}],"node_modules/@firebase/util/dist/index.cjs.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var tslib_1 = require('tslib');

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview Firebase constants.  Some of these (@defines) can be overridden at compile-time.
 */
var CONSTANTS = {
    /**
     * @define {boolean} Whether this is the client Node.js SDK.
     */
    NODE_CLIENT: false,
    /**
     * @define {boolean} Whether this is the Admin Node.js SDK.
     */
    NODE_ADMIN: false,
    /**
     * Firebase SDK Version
     */
    SDK_VERSION: '${JSCORE_VERSION}'
};

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Throws an error if the provided assertion is falsy
 * @param {*} assertion The assertion to be tested for falsiness
 * @param {!string} message The message to display if the check fails
 */
var assert = function (assertion, message) {
    if (!assertion) {
        throw assertionError(message);
    }
};
/**
 * Returns an Error object suitable for throwing.
 * @param {string} message
 * @return {!Error}
 */
var assertionError = function (message) {
    return new Error('Firebase Database (' +
        CONSTANTS.SDK_VERSION +
        ') INTERNAL ASSERT FAILED: ' +
        message);
};

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var stringToByteArray = function (str) {
    // TODO(user): Use native implementations if/when available
    var out = [], p = 0;
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 128) {
            out[p++] = c;
        }
        else if (c < 2048) {
            out[p++] = (c >> 6) | 192;
            out[p++] = (c & 63) | 128;
        }
        else if ((c & 0xfc00) == 0xd800 &&
            i + 1 < str.length &&
            (str.charCodeAt(i + 1) & 0xfc00) == 0xdc00) {
            // Surrogate Pair
            c = 0x10000 + ((c & 0x03ff) << 10) + (str.charCodeAt(++i) & 0x03ff);
            out[p++] = (c >> 18) | 240;
            out[p++] = ((c >> 12) & 63) | 128;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
        else {
            out[p++] = (c >> 12) | 224;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
    }
    return out;
};
/**
 * Turns an array of numbers into the string given by the concatenation of the
 * characters to which the numbers correspond.
 * @param {Array<number>} bytes Array of numbers representing characters.
 * @return {string} Stringification of the array.
 */
var byteArrayToString = function (bytes) {
    // TODO(user): Use native implementations if/when available
    var out = [], pos = 0, c = 0;
    while (pos < bytes.length) {
        var c1 = bytes[pos++];
        if (c1 < 128) {
            out[c++] = String.fromCharCode(c1);
        }
        else if (c1 > 191 && c1 < 224) {
            var c2 = bytes[pos++];
            out[c++] = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
        }
        else if (c1 > 239 && c1 < 365) {
            // Surrogate Pair
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            var c4 = bytes[pos++];
            var u = (((c1 & 7) << 18) | ((c2 & 63) << 12) | ((c3 & 63) << 6) | (c4 & 63)) -
                0x10000;
            out[c++] = String.fromCharCode(0xd800 + (u >> 10));
            out[c++] = String.fromCharCode(0xdc00 + (u & 1023));
        }
        else {
            var c2 = bytes[pos++];
            var c3 = bytes[pos++];
            out[c++] = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
        }
    }
    return out.join('');
};
// Static lookup maps, lazily populated by init_()
var base64 = {
    /**
     * Maps bytes to characters.
     * @type {Object}
     * @private
     */
    byteToCharMap_: null,
    /**
     * Maps characters to bytes.
     * @type {Object}
     * @private
     */
    charToByteMap_: null,
    /**
     * Maps bytes to websafe characters.
     * @type {Object}
     * @private
     */
    byteToCharMapWebSafe_: null,
    /**
     * Maps websafe characters to bytes.
     * @type {Object}
     * @private
     */
    charToByteMapWebSafe_: null,
    /**
     * Our default alphabet, shared between
     * ENCODED_VALS and ENCODED_VALS_WEBSAFE
     * @type {string}
     */
    ENCODED_VALS_BASE: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + 'abcdefghijklmnopqrstuvwxyz' + '0123456789',
    /**
     * Our default alphabet. Value 64 (=) is special; it means "nothing."
     * @type {string}
     */
    get ENCODED_VALS() {
        return this.ENCODED_VALS_BASE + '+/=';
    },
    /**
     * Our websafe alphabet.
     * @type {string}
     */
    get ENCODED_VALS_WEBSAFE() {
        return this.ENCODED_VALS_BASE + '-_.';
    },
    /**
     * Whether this browser supports the atob and btoa functions. This extension
     * started at Mozilla but is now implemented by many browsers. We use the
     * ASSUME_* variables to avoid pulling in the full useragent detection library
     * but still allowing the standard per-browser compilations.
     *
     * @type {boolean}
     */
    HAS_NATIVE_SUPPORT: typeof atob === 'function',
    /**
     * Base64-encode an array of bytes.
     *
     * @param {Array<number>|Uint8Array} input An array of bytes (numbers with
     *     value in [0, 255]) to encode.
     * @param {boolean=} opt_webSafe Boolean indicating we should use the
     *     alternative alphabet.
     * @return {string} The base64 encoded string.
     */
    encodeByteArray: function (input, opt_webSafe) {
        if (!Array.isArray(input)) {
            throw Error('encodeByteArray takes an array as a parameter');
        }
        this.init_();
        var byteToCharMap = opt_webSafe
            ? this.byteToCharMapWebSafe_
            : this.byteToCharMap_;
        var output = [];
        for (var i = 0; i < input.length; i += 3) {
            var byte1 = input[i];
            var haveByte2 = i + 1 < input.length;
            var byte2 = haveByte2 ? input[i + 1] : 0;
            var haveByte3 = i + 2 < input.length;
            var byte3 = haveByte3 ? input[i + 2] : 0;
            var outByte1 = byte1 >> 2;
            var outByte2 = ((byte1 & 0x03) << 4) | (byte2 >> 4);
            var outByte3 = ((byte2 & 0x0f) << 2) | (byte3 >> 6);
            var outByte4 = byte3 & 0x3f;
            if (!haveByte3) {
                outByte4 = 64;
                if (!haveByte2) {
                    outByte3 = 64;
                }
            }
            output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join('');
    },
    /**
     * Base64-encode a string.
     *
     * @param {string} input A string to encode.
     * @param {boolean=} opt_webSafe If true, we should use the
     *     alternative alphabet.
     * @return {string} The base64 encoded string.
     */
    encodeString: function (input, opt_webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {
            return btoa(input);
        }
        return this.encodeByteArray(stringToByteArray(input), opt_webSafe);
    },
    /**
     * Base64-decode a string.
     *
     * @param {string} input to decode.
     * @param {boolean=} opt_webSafe True if we should use the
     *     alternative alphabet.
     * @return {string} string representing the decoded value.
     */
    decodeString: function (input, opt_webSafe) {
        // Shortcut for Mozilla browsers that implement
        // a native base64 encoder in the form of "btoa/atob"
        if (this.HAS_NATIVE_SUPPORT && !opt_webSafe) {
            return atob(input);
        }
        return byteArrayToString(this.decodeStringToByteArray(input, opt_webSafe));
    },
    /**
     * Base64-decode a string.
     *
     * In base-64 decoding, groups of four characters are converted into three
     * bytes.  If the encoder did not apply padding, the input length may not
     * be a multiple of 4.
     *
     * In this case, the last group will have fewer than 4 characters, and
     * padding will be inferred.  If the group has one or two characters, it decodes
     * to one byte.  If the group has three characters, it decodes to two bytes.
     *
     * @param {string} input Input to decode.
     * @param {boolean=} opt_webSafe True if we should use the web-safe alphabet.
     * @return {!Array<number>} bytes representing the decoded value.
     */
    decodeStringToByteArray: function (input, opt_webSafe) {
        this.init_();
        var charToByteMap = opt_webSafe
            ? this.charToByteMapWebSafe_
            : this.charToByteMap_;
        var output = [];
        for (var i = 0; i < input.length;) {
            var byte1 = charToByteMap[input.charAt(i++)];
            var haveByte2 = i < input.length;
            var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
            ++i;
            var haveByte3 = i < input.length;
            var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            var haveByte4 = i < input.length;
            var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
            ++i;
            if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
                throw Error();
            }
            var outByte1 = (byte1 << 2) | (byte2 >> 4);
            output.push(outByte1);
            if (byte3 != 64) {
                var outByte2 = ((byte2 << 4) & 0xf0) | (byte3 >> 2);
                output.push(outByte2);
                if (byte4 != 64) {
                    var outByte3 = ((byte3 << 6) & 0xc0) | byte4;
                    output.push(outByte3);
                }
            }
        }
        return output;
    },
    /**
     * Lazy static initialization function. Called before
     * accessing any of the static map variables.
     * @private
     */
    init_: function () {
        if (!this.byteToCharMap_) {
            this.byteToCharMap_ = {};
            this.charToByteMap_ = {};
            this.byteToCharMapWebSafe_ = {};
            this.charToByteMapWebSafe_ = {};
            // We want quick mappings back and forth, so we precompute two maps.
            for (var i = 0; i < this.ENCODED_VALS.length; i++) {
                this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
                this.charToByteMap_[this.byteToCharMap_[i]] = i;
                this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
                this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
                // Be forgiving when decoding and correctly decode both encodings.
                if (i >= this.ENCODED_VALS_BASE.length) {
                    this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
                    this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
                }
            }
        }
    }
};
/**
 * URL-safe base64 encoding
 * @param {!string} str
 * @return {!string}
 */
var base64Encode = function (str) {
    var utf8Bytes = stringToByteArray(str);
    return base64.encodeByteArray(utf8Bytes, true);
};
/**
 * URL-safe base64 decoding
 *
 * NOTE: DO NOT use the global atob() function - it does NOT support the
 * base64Url variant encoding.
 *
 * @param {string} str To be decoded
 * @return {?string} Decoded result, if possible
 */
var base64Decode = function (str) {
    try {
        return base64.decodeString(str, true);
    }
    catch (e) {
        console.error('base64Decode failed: ', e);
    }
    return null;
};

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Do a deep-copy of basic JavaScript Objects or Arrays.
 */
function deepCopy(value) {
    return deepExtend(undefined, value);
}
/**
 * Copy properties from source to target (recursively allows extension
 * of Objects and Arrays).  Scalar values in the target are over-written.
 * If target is undefined, an object of the appropriate type will be created
 * (and returned).
 *
 * We recursively copy all child properties of plain Objects in the source- so
 * that namespace- like dictionaries are merged.
 *
 * Note that the target can be a function, in which case the properties in
 * the source Object are copied onto it as static properties of the Function.
 */
function deepExtend(target, source) {
    if (!(source instanceof Object)) {
        return source;
    }
    switch (source.constructor) {
        case Date:
            // Treat Dates like scalars; if the target date object had any child
            // properties - they will be lost!
            var dateValue = source;
            return new Date(dateValue.getTime());
        case Object:
            if (target === undefined) {
                target = {};
            }
            break;
        case Array:
            // Always copy the array source and overwrite the target.
            target = [];
            break;
        default:
            // Not a plain Object - treat it as a scalar.
            return source;
    }
    for (var prop in source) {
        if (!source.hasOwnProperty(prop)) {
            continue;
        }
        target[prop] = deepExtend(target[prop], source[prop]);
    }
    return target;
}
// TODO: Really needed (for JSCompiler type checking)?
function patchProperty(obj, prop, value) {
    obj[prop] = value;
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var Deferred = /** @class */ (function () {
    function Deferred() {
        var _this = this;
        this.promise = new Promise(function (resolve, reject) {
            _this.resolve = resolve;
            _this.reject = reject;
        });
    }
    /**
     * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
     * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
     * and returns a node-style callback which will resolve or reject the Deferred's promise.
     * @param {((?function(?(Error)): (?|undefined))| (?function(?(Error),?=): (?|undefined)))=} callback
     * @return {!function(?(Error), ?=)}
     */
    Deferred.prototype.wrapCallback = function (callback) {
        var _this = this;
        return function (error, value) {
            if (error) {
                _this.reject(error);
            }
            else {
                _this.resolve(value);
            }
            if (typeof callback === 'function') {
                // Attaching noop handler just in case developer wasn't expecting
                // promises
                _this.promise.catch(function () { });
                // Some of our callbacks don't expect a value and our own tests
                // assert that the parameter length is 1
                if (callback.length === 1) {
                    callback(error);
                }
                else {
                    callback(error, value);
                }
            }
        };
    };
    return Deferred;
}());

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns navigator.userAgent string or '' if it's not defined.
 * @return {string} user agent string
 */
var getUA = function () {
    if (typeof navigator !== 'undefined' &&
        typeof navigator['userAgent'] === 'string') {
        return navigator['userAgent'];
    }
    else {
        return '';
    }
};
/**
 * Detect Cordova / PhoneGap / Ionic frameworks on a mobile device.
 *
 * Deliberately does not rely on checking `file://` URLs (as this fails PhoneGap in the Ripple emulator) nor
 * Cordova `onDeviceReady`, which would normally wait for a callback.
 *
 * @return {boolean} isMobileCordova
 */
var isMobileCordova = function () {
    return (typeof window !== 'undefined' &&
        !!(window['cordova'] || window['phonegap'] || window['PhoneGap']) &&
        /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA()));
};
/**
 * Detect React Native.
 *
 * @return {boolean} True if ReactNative environment is detected.
 */
var isReactNative = function () {
    return (typeof navigator === 'object' && navigator['product'] === 'ReactNative');
};
/**
 * Detect Node.js.
 *
 * @return {boolean} True if Node.js environment is detected.
 */
var isNodeSdk = function () {
    return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
};

var ERROR_NAME = 'FirebaseError';
var captureStackTrace = Error
    .captureStackTrace;
// Export for faking in tests
function patchCapture(captureFake) {
    var result = captureStackTrace;
    captureStackTrace = captureFake;
    return result;
}
var FirebaseError = /** @class */ (function () {
    function FirebaseError(code, message) {
        this.code = code;
        this.message = message;
        // We want the stack value, if implemented by Error
        if (captureStackTrace) {
            // Patches this.stack, omitted calls above ErrorFactory#create
            captureStackTrace(this, ErrorFactory.prototype.create);
        }
        else {
            try {
                // In case of IE11, stack will be set only after error is raised.
                // https://docs.microsoft.com/en-us/scripting/javascript/reference/stack-property-error-javascript
                throw Error.apply(this, arguments);
            }
            catch (err) {
                this.name = ERROR_NAME;
                // Make non-enumerable getter for the property.
                Object.defineProperty(this, 'stack', {
                    get: function () {
                        return err.stack;
                    }
                });
            }
        }
    }
    return FirebaseError;
}());
// Back-door inheritance
FirebaseError.prototype = Object.create(Error.prototype);
FirebaseError.prototype.constructor = FirebaseError;
FirebaseError.prototype.name = ERROR_NAME;
var ErrorFactory = /** @class */ (function () {
    function ErrorFactory(service, serviceName, errors) {
        this.service = service;
        this.serviceName = serviceName;
        this.errors = errors;
        // Matches {$name}, by default.
        this.pattern = /\{\$([^}]+)}/g;
        // empty
    }
    ErrorFactory.prototype.create = function (code, data) {
        if (data === undefined) {
            data = {};
        }
        var template = this.errors[code];
        var fullCode = this.service + '/' + code;
        var message;
        if (template === undefined) {
            message = 'Error';
        }
        else {
            message = template.replace(this.pattern, function (match, key) {
                var value = data[key];
                return value !== undefined ? value.toString() : '<' + key + '?>';
            });
        }
        // Service: Error message (service/code).
        message = this.serviceName + ': ' + message + ' (' + fullCode + ').';
        var err = new FirebaseError(fullCode, message);
        // Populate the Error object with message parts for programmatic
        // accesses (e.g., e.file).
        for (var prop in data) {
            if (!data.hasOwnProperty(prop) || prop.slice(-1) === '_') {
                continue;
            }
            err[prop] = data[prop];
        }
        return err;
    };
    return ErrorFactory;
}());

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Evaluates a JSON string into a javascript object.
 *
 * @param {string} str A string containing JSON.
 * @return {*} The javascript object representing the specified JSON.
 */
function jsonEval(str) {
    return JSON.parse(str);
}
/**
 * Returns JSON representing a javascript object.
 * @param {*} data Javascript object to be stringified.
 * @return {string} The JSON contents of the object.
 */
function stringify(data) {
    return JSON.stringify(data);
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Decodes a Firebase auth. token into constituent parts.
 *
 * Notes:
 * - May return with invalid / incomplete claims if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 *
 * @param {?string} token
 * @return {{header: *, claims: *, data: *, signature: string}}
 */
var decode = function (token) {
    var header = {}, claims = {}, data = {}, signature = '';
    try {
        var parts = token.split('.');
        header = jsonEval(base64Decode(parts[0]) || '');
        claims = jsonEval(base64Decode(parts[1]) || '');
        signature = parts[2];
        data = claims['d'] || {};
        delete claims['d'];
    }
    catch (e) { }
    return {
        header: header,
        claims: claims,
        data: data,
        signature: signature
    };
};
/**
 * Decodes a Firebase auth. token and checks the validity of its time-based claims. Will return true if the
 * token is within the time window authorized by the 'nbf' (not-before) and 'iat' (issued-at) claims.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 *
 * @param {?string} token
 * @return {boolean}
 */
var isValidTimestamp = function (token) {
    var claims = decode(token).claims, now = Math.floor(new Date().getTime() / 1000), validSince, validUntil;
    if (typeof claims === 'object') {
        if (claims.hasOwnProperty('nbf')) {
            validSince = claims['nbf'];
        }
        else if (claims.hasOwnProperty('iat')) {
            validSince = claims['iat'];
        }
        if (claims.hasOwnProperty('exp')) {
            validUntil = claims['exp'];
        }
        else {
            // token will expire after 24h by default
            validUntil = validSince + 86400;
        }
    }
    return (now && validSince && validUntil && now >= validSince && now <= validUntil);
};
/**
 * Decodes a Firebase auth. token and returns its issued at time if valid, null otherwise.
 *
 * Notes:
 * - May return null if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 *
 * @param {?string} token
 * @return {?number}
 */
var issuedAtTime = function (token) {
    var claims = decode(token).claims;
    if (typeof claims === 'object' && claims.hasOwnProperty('iat')) {
        return claims['iat'];
    }
    return null;
};
/**
 * Decodes a Firebase auth. token and checks the validity of its format. Expects a valid issued-at time.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 *
 * @param {?string} token
 * @return {boolean}
 */
var isValidFormat = function (token) {
    var decoded = decode(token), claims = decoded.claims;
    return !!claims && typeof claims === 'object' && claims.hasOwnProperty('iat');
};
/**
 * Attempts to peer into an auth token and determine if it's an admin auth token by looking at the claims portion.
 *
 * Notes:
 * - May return a false negative if there's no native base64 decoding support.
 * - Doesn't check if the token is actually valid.
 *
 * @param {?string} token
 * @return {boolean}
 */
var isAdmin = function (token) {
    var claims = decode(token).claims;
    return typeof claims === 'object' && claims['admin'] === true;
};

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// See http://www.devthought.com/2012/01/18/an-object-is-not-a-hash/
var contains = function (obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
};
var safeGet = function (obj, key) {
    if (Object.prototype.hasOwnProperty.call(obj, key))
        return obj[key];
    // else return undefined.
};
/**
 * Enumerates the keys/values in an object, excluding keys defined on the prototype.
 *
 * @param {?Object.<K,V>} obj Object to enumerate.
 * @param {!function(K, V)} fn Function to call for each key and value.
 * @template K,V
 */
var forEach = function (obj, fn) {
    for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            fn(key, obj[key]);
        }
    }
};
/**
 * Copies all the (own) properties from one object to another.
 * @param {!Object} objTo
 * @param {!Object} objFrom
 * @return {!Object} objTo
 */
var extend = function (objTo, objFrom) {
    forEach(objFrom, function (key, value) {
        objTo[key] = value;
    });
    return objTo;
};
/**
 * Returns a clone of the specified object.
 * @param {!Object} obj
 * @return {!Object} cloned obj.
 */
var clone = function (obj) {
    return extend({}, obj);
};
/**
 * Returns true if obj has typeof "object" and is not null.  Unlike goog.isObject(), does not return true
 * for functions.
 *
 * @param obj {*} A potential object.
 * @returns {boolean} True if it's an object.
 */
var isNonNullObject = function (obj) {
    return typeof obj === 'object' && obj !== null;
};
var isEmpty = function (obj) {
    for (var key in obj) {
        return false;
    }
    return true;
};
var getCount = function (obj) {
    var rv = 0;
    for (var key in obj) {
        rv++;
    }
    return rv;
};
var map = function (obj, f, opt_obj) {
    var res = {};
    for (var key in obj) {
        res[key] = f.call(opt_obj, obj[key], key, obj);
    }
    return res;
};
var findKey = function (obj, fn, opt_this) {
    for (var key in obj) {
        if (fn.call(opt_this, obj[key], key, obj)) {
            return key;
        }
    }
    return undefined;
};
var findValue = function (obj, fn, opt_this) {
    var key = findKey(obj, fn, opt_this);
    return key && obj[key];
};
var getAnyKey = function (obj) {
    for (var key in obj) {
        return key;
    }
};
var getValues = function (obj) {
    var res = [];
    var i = 0;
    for (var key in obj) {
        res[i++] = obj[key];
    }
    return res;
};
/**
 * Tests whether every key/value pair in an object pass the test implemented
 * by the provided function
 *
 * @param {?Object.<K,V>} obj Object to test.
 * @param {!function(K, V)} fn Function to call for each key and value.
 * @template K,V
 */
var every = function (obj, fn) {
    for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
            if (!fn(key, obj[key])) {
                return false;
            }
        }
    }
    return true;
};

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Returns a querystring-formatted string (e.g. &arg=val&arg2=val2) from a params
 * object (e.g. {arg: 'val', arg2: 'val2'})
 * Note: You must prepend it with ? when adding it to a URL.
 *
 * @param {!Object} querystringParams
 * @return {string}
 */
var querystring = function (querystringParams) {
    var params = [];
    forEach(querystringParams, function (key, value) {
        if (Array.isArray(value)) {
            value.forEach(function (arrayVal) {
                params.push(encodeURIComponent(key) + '=' + encodeURIComponent(arrayVal));
            });
        }
        else {
            params.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));
        }
    });
    return params.length ? '&' + params.join('&') : '';
};
/**
 * Decodes a querystring (e.g. ?arg=val&arg2=val2) into a params object (e.g. {arg: 'val', arg2: 'val2'})
 *
 * @param {string} querystring
 * @return {!Object}
 */
var querystringDecode = function (querystring) {
    var obj = {};
    var tokens = querystring.replace(/^\?/, '').split('&');
    tokens.forEach(function (token) {
        if (token) {
            var key = token.split('=');
            obj[key[0]] = key[1];
        }
    });
    return obj;
};

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Copyright 2011 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
/**
 * @fileoverview Abstract cryptographic hash interface.
 *
 * See Sha1 and Md5 for sample implementations.
 *
 */
/**
 * Create a cryptographic hash instance.
 *
 * @constructor
 * @struct
 */
var Hash = /** @class */ (function () {
    function Hash() {
        /**
         * The block size for the hasher.
         * @type {number}
         */
        this.blockSize = -1;
    }
    return Hash;
}());

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @fileoverview SHA-1 cryptographic hash.
 * Variable names follow the notation in FIPS PUB 180-3:
 * http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf.
 *
 * Usage:
 *   var sha1 = new sha1();
 *   sha1.update(bytes);
 *   var hash = sha1.digest();
 *
 * Performance:
 *   Chrome 23:   ~400 Mbit/s
 *   Firefox 16:  ~250 Mbit/s
 *
 */
/**
 * SHA-1 cryptographic hash constructor.
 *
 * The properties declared here are discussed in the above algorithm document.
 * @constructor
 * @extends {Hash}
 * @final
 * @struct
 */
var Sha1 = /** @class */ (function (_super) {
    tslib_1.__extends(Sha1, _super);
    function Sha1() {
        var _this = _super.call(this) || this;
        /**
         * Holds the previous values of accumulated variables a-e in the compress_
         * function.
         * @type {!Array<number>}
         * @private
         */
        _this.chain_ = [];
        /**
         * A buffer holding the partially computed hash result.
         * @type {!Array<number>}
         * @private
         */
        _this.buf_ = [];
        /**
         * An array of 80 bytes, each a part of the message to be hashed.  Referred to
         * as the message schedule in the docs.
         * @type {!Array<number>}
         * @private
         */
        _this.W_ = [];
        /**
         * Contains data needed to pad messages less than 64 bytes.
         * @type {!Array<number>}
         * @private
         */
        _this.pad_ = [];
        /**
         * @private {number}
         */
        _this.inbuf_ = 0;
        /**
         * @private {number}
         */
        _this.total_ = 0;
        _this.blockSize = 512 / 8;
        _this.pad_[0] = 128;
        for (var i = 1; i < _this.blockSize; ++i) {
            _this.pad_[i] = 0;
        }
        _this.reset();
        return _this;
    }
    Sha1.prototype.reset = function () {
        this.chain_[0] = 0x67452301;
        this.chain_[1] = 0xefcdab89;
        this.chain_[2] = 0x98badcfe;
        this.chain_[3] = 0x10325476;
        this.chain_[4] = 0xc3d2e1f0;
        this.inbuf_ = 0;
        this.total_ = 0;
    };
    /**
     * Internal compress helper function.
     * @param {!Array<number>|!Uint8Array|string} buf Block to compress.
     * @param {number=} opt_offset Offset of the block in the buffer.
     * @private
     */
    Sha1.prototype.compress_ = function (buf, opt_offset) {
        if (!opt_offset) {
            opt_offset = 0;
        }
        var W = this.W_;
        // get 16 big endian words
        if (typeof buf === 'string') {
            for (var i = 0; i < 16; i++) {
                // TODO(user): [bug 8140122] Recent versions of Safari for Mac OS and iOS
                // have a bug that turns the post-increment ++ operator into pre-increment
                // during JIT compilation.  We have code that depends heavily on SHA-1 for
                // correctness and which is affected by this bug, so I've removed all uses
                // of post-increment ++ in which the result value is used.  We can revert
                // this change once the Safari bug
                // (https://bugs.webkit.org/show_bug.cgi?id=109036) has been fixed and
                // most clients have been updated.
                W[i] =
                    (buf.charCodeAt(opt_offset) << 24) |
                        (buf.charCodeAt(opt_offset + 1) << 16) |
                        (buf.charCodeAt(opt_offset + 2) << 8) |
                        buf.charCodeAt(opt_offset + 3);
                opt_offset += 4;
            }
        }
        else {
            for (var i = 0; i < 16; i++) {
                W[i] =
                    (buf[opt_offset] << 24) |
                        (buf[opt_offset + 1] << 16) |
                        (buf[opt_offset + 2] << 8) |
                        buf[opt_offset + 3];
                opt_offset += 4;
            }
        }
        // expand to 80 words
        for (var i = 16; i < 80; i++) {
            var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
            W[i] = ((t << 1) | (t >>> 31)) & 0xffffffff;
        }
        var a = this.chain_[0];
        var b = this.chain_[1];
        var c = this.chain_[2];
        var d = this.chain_[3];
        var e = this.chain_[4];
        var f, k;
        // TODO(user): Try to unroll this loop to speed up the computation.
        for (var i = 0; i < 80; i++) {
            if (i < 40) {
                if (i < 20) {
                    f = d ^ (b & (c ^ d));
                    k = 0x5a827999;
                }
                else {
                    f = b ^ c ^ d;
                    k = 0x6ed9eba1;
                }
            }
            else {
                if (i < 60) {
                    f = (b & c) | (d & (b | c));
                    k = 0x8f1bbcdc;
                }
                else {
                    f = b ^ c ^ d;
                    k = 0xca62c1d6;
                }
            }
            var t = (((a << 5) | (a >>> 27)) + f + e + k + W[i]) & 0xffffffff;
            e = d;
            d = c;
            c = ((b << 30) | (b >>> 2)) & 0xffffffff;
            b = a;
            a = t;
        }
        this.chain_[0] = (this.chain_[0] + a) & 0xffffffff;
        this.chain_[1] = (this.chain_[1] + b) & 0xffffffff;
        this.chain_[2] = (this.chain_[2] + c) & 0xffffffff;
        this.chain_[3] = (this.chain_[3] + d) & 0xffffffff;
        this.chain_[4] = (this.chain_[4] + e) & 0xffffffff;
    };
    Sha1.prototype.update = function (bytes, opt_length) {
        // TODO(johnlenz): tighten the function signature and remove this check
        if (bytes == null) {
            return;
        }
        if (opt_length === undefined) {
            opt_length = bytes.length;
        }
        var lengthMinusBlock = opt_length - this.blockSize;
        var n = 0;
        // Using local instead of member variables gives ~5% speedup on Firefox 16.
        var buf = this.buf_;
        var inbuf = this.inbuf_;
        // The outer while loop should execute at most twice.
        while (n < opt_length) {
            // When we have no data in the block to top up, we can directly process the
            // input buffer (assuming it contains sufficient data). This gives ~25%
            // speedup on Chrome 23 and ~15% speedup on Firefox 16, but requires that
            // the data is provided in large chunks (or in multiples of 64 bytes).
            if (inbuf == 0) {
                while (n <= lengthMinusBlock) {
                    this.compress_(bytes, n);
                    n += this.blockSize;
                }
            }
            if (typeof bytes === 'string') {
                while (n < opt_length) {
                    buf[inbuf] = bytes.charCodeAt(n);
                    ++inbuf;
                    ++n;
                    if (inbuf == this.blockSize) {
                        this.compress_(buf);
                        inbuf = 0;
                        // Jump to the outer loop so we use the full-block optimization.
                        break;
                    }
                }
            }
            else {
                while (n < opt_length) {
                    buf[inbuf] = bytes[n];
                    ++inbuf;
                    ++n;
                    if (inbuf == this.blockSize) {
                        this.compress_(buf);
                        inbuf = 0;
                        // Jump to the outer loop so we use the full-block optimization.
                        break;
                    }
                }
            }
        }
        this.inbuf_ = inbuf;
        this.total_ += opt_length;
    };
    /** @override */
    Sha1.prototype.digest = function () {
        var digest = [];
        var totalBits = this.total_ * 8;
        // Add pad 0x80 0x00*.
        if (this.inbuf_ < 56) {
            this.update(this.pad_, 56 - this.inbuf_);
        }
        else {
            this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        }
        // Add # bits.
        for (var i = this.blockSize - 1; i >= 56; i--) {
            this.buf_[i] = totalBits & 255;
            totalBits /= 256; // Don't use bit-shifting here!
        }
        this.compress_(this.buf_);
        var n = 0;
        for (var i = 0; i < 5; i++) {
            for (var j = 24; j >= 0; j -= 8) {
                digest[n] = (this.chain_[i] >> j) & 255;
                ++n;
            }
        }
        return digest;
    };
    return Sha1;
}(Hash));

/**
 * Helper to make a Subscribe function (just like Promise helps make a
 * Thenable).
 *
 * @param executor Function which can make calls to a single Observer
 *     as a proxy.
 * @param onNoObservers Callback when count of Observers goes to zero.
 */
function createSubscribe(executor, onNoObservers) {
    var proxy = new ObserverProxy(executor, onNoObservers);
    return proxy.subscribe.bind(proxy);
}
/**
 * Implement fan-out for any number of Observers attached via a subscribe
 * function.
 */
var ObserverProxy = /** @class */ (function () {
    /**
     * @param executor Function which can make calls to a single Observer
     *     as a proxy.
     * @param onNoObservers Callback when count of Observers goes to zero.
     */
    function ObserverProxy(executor, onNoObservers) {
        var _this = this;
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        // Micro-task scheduling by calling task.then().
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        // Call the executor asynchronously so subscribers that are called
        // synchronously after the creation of the subscribe function
        // can still receive the very first value generated in the executor.
        this.task
            .then(function () {
            executor(_this);
        })
            .catch(function (e) {
            _this.error(e);
        });
    }
    ObserverProxy.prototype.next = function (value) {
        this.forEachObserver(function (observer) {
            observer.next(value);
        });
    };
    ObserverProxy.prototype.error = function (error) {
        this.forEachObserver(function (observer) {
            observer.error(error);
        });
        this.close(error);
    };
    ObserverProxy.prototype.complete = function () {
        this.forEachObserver(function (observer) {
            observer.complete();
        });
        this.close();
    };
    /**
     * Subscribe function that can be used to add an Observer to the fan-out list.
     *
     * - We require that no event is sent to a subscriber sychronously to their
     *   call to subscribe().
     */
    ObserverProxy.prototype.subscribe = function (nextOrObserver, error, complete) {
        var _this = this;
        var observer;
        if (nextOrObserver === undefined &&
            error === undefined &&
            complete === undefined) {
            throw new Error('Missing Observer.');
        }
        // Assemble an Observer object when passed as callback functions.
        if (implementsAnyMethods(nextOrObserver, ['next', 'error', 'complete'])) {
            observer = nextOrObserver;
        }
        else {
            observer = {
                next: nextOrObserver,
                error: error,
                complete: complete
            };
        }
        if (observer.next === undefined) {
            observer.next = noop;
        }
        if (observer.error === undefined) {
            observer.error = noop;
        }
        if (observer.complete === undefined) {
            observer.complete = noop;
        }
        var unsub = this.unsubscribeOne.bind(this, this.observers.length);
        // Attempt to subscribe to a terminated Observable - we
        // just respond to the Observer with the final error or complete
        // event.
        if (this.finalized) {
            this.task.then(function () {
                try {
                    if (_this.finalError) {
                        observer.error(_this.finalError);
                    }
                    else {
                        observer.complete();
                    }
                }
                catch (e) {
                    // nothing
                }
                return;
            });
        }
        this.observers.push(observer);
        return unsub;
    };
    // Unsubscribe is synchronous - we guarantee that no events are sent to
    // any unsubscribed Observer.
    ObserverProxy.prototype.unsubscribeOne = function (i) {
        if (this.observers === undefined || this.observers[i] === undefined) {
            return;
        }
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== undefined) {
            this.onNoObservers(this);
        }
    };
    ObserverProxy.prototype.forEachObserver = function (fn) {
        if (this.finalized) {
            // Already closed by previous event....just eat the additional values.
            return;
        }
        // Since sendOne calls asynchronously - there is no chance that
        // this.observers will become undefined.
        for (var i = 0; i < this.observers.length; i++) {
            this.sendOne(i, fn);
        }
    };
    // Call the Observer via one of it's callback function. We are careful to
    // confirm that the observe has not been unsubscribed since this asynchronous
    // function had been queued.
    ObserverProxy.prototype.sendOne = function (i, fn) {
        var _this = this;
        // Execute the callback asynchronously
        this.task.then(function () {
            if (_this.observers !== undefined && _this.observers[i] !== undefined) {
                try {
                    fn(_this.observers[i]);
                }
                catch (e) {
                    // Ignore exceptions raised in Observers or missing methods of an
                    // Observer.
                    // Log error to console. b/31404806
                    if (typeof console !== 'undefined' && console.error) {
                        console.error(e);
                    }
                }
            }
        });
    };
    ObserverProxy.prototype.close = function (err) {
        var _this = this;
        if (this.finalized) {
            return;
        }
        this.finalized = true;
        if (err !== undefined) {
            this.finalError = err;
        }
        // Proxy is no longer needed - garbage collect references
        this.task.then(function () {
            _this.observers = undefined;
            _this.onNoObservers = undefined;
        });
    };
    return ObserverProxy;
}());
/** Turn synchronous function into one called asynchronously. */
function async(fn, onError) {
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        Promise.resolve(true)
            .then(function () {
            fn.apply(void 0, args);
        })
            .catch(function (error) {
            if (onError) {
                onError(error);
            }
        });
    };
}
/**
 * Return true if the object passed in implements any of the named methods.
 */
function implementsAnyMethods(obj, methods) {
    if (typeof obj !== 'object' || obj === null) {
        return false;
    }
    for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
        var method = methods_1[_i];
        if (method in obj && typeof obj[method] === 'function') {
            return true;
        }
    }
    return false;
}
function noop() {
    // do nothing
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Check to make sure the appropriate number of arguments are provided for a public function.
 * Throws an error if it fails.
 *
 * @param {!string} fnName The function name
 * @param {!number} minCount The minimum number of arguments to allow for the function call
 * @param {!number} maxCount The maximum number of argument to allow for the function call
 * @param {!number} argCount The actual number of arguments provided.
 */
var validateArgCount = function (fnName, minCount, maxCount, argCount) {
    var argError;
    if (argCount < minCount) {
        argError = 'at least ' + minCount;
    }
    else if (argCount > maxCount) {
        argError = maxCount === 0 ? 'none' : 'no more than ' + maxCount;
    }
    if (argError) {
        var error = fnName +
            ' failed: Was called with ' +
            argCount +
            (argCount === 1 ? ' argument.' : ' arguments.') +
            ' Expects ' +
            argError +
            '.';
        throw new Error(error);
    }
};
/**
 * Generates a string to prefix an error message about failed argument validation
 *
 * @param {!string} fnName The function name
 * @param {!number} argumentNumber The index of the argument
 * @param {boolean} optional Whether or not the argument is optional
 * @return {!string} The prefix to add to the error thrown for validation.
 */
function errorPrefix(fnName, argumentNumber, optional) {
    var argName = '';
    switch (argumentNumber) {
        case 1:
            argName = optional ? 'first' : 'First';
            break;
        case 2:
            argName = optional ? 'second' : 'Second';
            break;
        case 3:
            argName = optional ? 'third' : 'Third';
            break;
        case 4:
            argName = optional ? 'fourth' : 'Fourth';
            break;
        default:
            throw new Error('errorPrefix called with argumentNumber > 4.  Need to update it?');
    }
    var error = fnName + ' failed: ';
    error += argName + ' argument ';
    return error;
}
/**
 * @param {!string} fnName
 * @param {!number} argumentNumber
 * @param {!string} namespace
 * @param {boolean} optional
 */
function validateNamespace(fnName, argumentNumber, namespace, optional) {
    if (optional && !namespace)
        return;
    if (typeof namespace !== 'string') {
        //TODO: I should do more validation here. We only allow certain chars in namespaces.
        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid firebase namespace.');
    }
}
function validateCallback(fnName, argumentNumber, callback, optional) {
    if (optional && !callback)
        return;
    if (typeof callback !== 'function')
        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid function.');
}
function validateContextObject(fnName, argumentNumber, context, optional) {
    if (optional && !context)
        return;
    if (typeof context !== 'object' || context === null)
        throw new Error(errorPrefix(fnName, argumentNumber, optional) +
            'must be a valid context object.');
}

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Code originally came from goog.crypt.stringToUtf8ByteArray, but for some reason they
// automatically replaced '\r\n' with '\n', and they didn't handle surrogate pairs,
// so it's been modified.
// Note that not all Unicode characters appear as single characters in JavaScript strings.
// fromCharCode returns the UTF-16 encoding of a character - so some Unicode characters
// use 2 characters in Javascript.  All 4-byte UTF-8 characters begin with a first
// character in the range 0xD800 - 0xDBFF (the first character of a so-called surrogate
// pair).
// See http://www.ecma-international.org/ecma-262/5.1/#sec-15.1.3
/**
 * @param {string} str
 * @return {Array}
 */
var stringToByteArray$1 = function (str) {
    var out = [], p = 0;
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        // Is this the lead surrogate in a surrogate pair?
        if (c >= 0xd800 && c <= 0xdbff) {
            var high = c - 0xd800; // the high 10 bits.
            i++;
            assert(i < str.length, 'Surrogate pair missing trail surrogate.');
            var low = str.charCodeAt(i) - 0xdc00; // the low 10 bits.
            c = 0x10000 + (high << 10) + low;
        }
        if (c < 128) {
            out[p++] = c;
        }
        else if (c < 2048) {
            out[p++] = (c >> 6) | 192;
            out[p++] = (c & 63) | 128;
        }
        else if (c < 65536) {
            out[p++] = (c >> 12) | 224;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
        else {
            out[p++] = (c >> 18) | 240;
            out[p++] = ((c >> 12) & 63) | 128;
            out[p++] = ((c >> 6) & 63) | 128;
            out[p++] = (c & 63) | 128;
        }
    }
    return out;
};
/**
 * Calculate length without actually converting; useful for doing cheaper validation.
 * @param {string} str
 * @return {number}
 */
var stringLength = function (str) {
    var p = 0;
    for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 128) {
            p++;
        }
        else if (c < 2048) {
            p += 2;
        }
        else if (c >= 0xd800 && c <= 0xdbff) {
            // Lead surrogate of a surrogate pair.  The pair together will take 4 bytes to represent.
            p += 4;
            i++; // skip trail surrogate.
        }
        else {
            p += 3;
        }
    }
    return p;
};

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

exports.assert = assert;
exports.assertionError = assertionError;
exports.base64 = base64;
exports.base64Decode = base64Decode;
exports.base64Encode = base64Encode;
exports.CONSTANTS = CONSTANTS;
exports.deepCopy = deepCopy;
exports.deepExtend = deepExtend;
exports.patchProperty = patchProperty;
exports.Deferred = Deferred;
exports.getUA = getUA;
exports.isMobileCordova = isMobileCordova;
exports.isNodeSdk = isNodeSdk;
exports.isReactNative = isReactNative;
exports.ErrorFactory = ErrorFactory;
exports.FirebaseError = FirebaseError;
exports.patchCapture = patchCapture;
exports.jsonEval = jsonEval;
exports.stringify = stringify;
exports.decode = decode;
exports.isAdmin = isAdmin;
exports.issuedAtTime = issuedAtTime;
exports.isValidFormat = isValidFormat;
exports.isValidTimestamp = isValidTimestamp;
exports.clone = clone;
exports.contains = contains;
exports.every = every;
exports.extend = extend;
exports.findKey = findKey;
exports.findValue = findValue;
exports.forEach = forEach;
exports.getAnyKey = getAnyKey;
exports.getCount = getCount;
exports.getValues = getValues;
exports.isEmpty = isEmpty;
exports.isNonNullObject = isNonNullObject;
exports.map = map;
exports.safeGet = safeGet;
exports.querystring = querystring;
exports.querystringDecode = querystringDecode;
exports.Sha1 = Sha1;
exports.async = async;
exports.createSubscribe = createSubscribe;
exports.errorPrefix = errorPrefix;
exports.validateArgCount = validateArgCount;
exports.validateCallback = validateCallback;
exports.validateContextObject = validateContextObject;
exports.validateNamespace = validateNamespace;
exports.stringLength = stringLength;
exports.stringToByteArray = stringToByteArray$1;


},{"tslib":"node_modules/tslib/tslib.es6.js"}],"node_modules/@firebase/app/dist/index.cjs.js":[function(require,module,exports) {
var global = arguments[3];
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var util = require('@firebase/util');

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var contains = function (obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
};
var DEFAULT_ENTRY_NAME = '[DEFAULT]';
// An array to capture listeners before the true auth functions
// exist
var tokenListeners = [];
/**
 * Global context object for a collection of services using
 * a shared authentication state.
 */
var FirebaseAppImpl = /** @class */ (function () {
    function FirebaseAppImpl(options, config, firebase_) {
        this.firebase_ = firebase_;
        this.isDeleted_ = false;
        this.services_ = {};
        this.name_ = config.name;
        this._automaticDataCollectionEnabled =
            config.automaticDataCollectionEnabled || false;
        this.options_ = util.deepCopy(options);
        this.INTERNAL = {
            getUid: function () { return null; },
            getToken: function () { return Promise.resolve(null); },
            addAuthTokenListener: function (callback) {
                tokenListeners.push(callback);
                // Make sure callback is called, asynchronously, in the absence of the auth module
                setTimeout(function () { return callback(null); }, 0);
            },
            removeAuthTokenListener: function (callback) {
                tokenListeners = tokenListeners.filter(function (listener) { return listener !== callback; });
            }
        };
    }
    Object.defineProperty(FirebaseAppImpl.prototype, "automaticDataCollectionEnabled", {
        get: function () {
            this.checkDestroyed_();
            return this._automaticDataCollectionEnabled;
        },
        set: function (val) {
            this.checkDestroyed_();
            this._automaticDataCollectionEnabled = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseAppImpl.prototype, "name", {
        get: function () {
            this.checkDestroyed_();
            return this.name_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FirebaseAppImpl.prototype, "options", {
        get: function () {
            this.checkDestroyed_();
            return this.options_;
        },
        enumerable: true,
        configurable: true
    });
    FirebaseAppImpl.prototype.delete = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.checkDestroyed_();
            resolve();
        })
            .then(function () {
            _this.firebase_.INTERNAL.removeApp(_this.name_);
            var services = [];
            Object.keys(_this.services_).forEach(function (serviceKey) {
                Object.keys(_this.services_[serviceKey]).forEach(function (instanceKey) {
                    services.push(_this.services_[serviceKey][instanceKey]);
                });
            });
            return Promise.all(services.map(function (service) {
                return service.INTERNAL.delete();
            }));
        })
            .then(function () {
            _this.isDeleted_ = true;
            _this.services_ = {};
        });
    };
    /**
     * Return a service instance associated with this app (creating it
     * on demand), identified by the passed instanceIdentifier.
     *
     * NOTE: Currently storage is the only one that is leveraging this
     * functionality. They invoke it by calling:
     *
     * ```javascript
     * firebase.app().storage('STORAGE BUCKET ID')
     * ```
     *
     * The service name is passed to this already
     * @internal
     */
    FirebaseAppImpl.prototype._getService = function (name, instanceIdentifier) {
        if (instanceIdentifier === void 0) { instanceIdentifier = DEFAULT_ENTRY_NAME; }
        this.checkDestroyed_();
        if (!this.services_[name]) {
            this.services_[name] = {};
        }
        if (!this.services_[name][instanceIdentifier]) {
            /**
             * If a custom instance has been defined (i.e. not '[DEFAULT]')
             * then we will pass that instance on, otherwise we pass `null`
             */
            var instanceSpecifier = instanceIdentifier !== DEFAULT_ENTRY_NAME
                ? instanceIdentifier
                : undefined;
            var service = this.firebase_.INTERNAL.factories[name](this, this.extendApp.bind(this), instanceSpecifier);
            this.services_[name][instanceIdentifier] = service;
        }
        return this.services_[name][instanceIdentifier];
    };
    /**
     * Callback function used to extend an App instance at the time
     * of service instance creation.
     */
    FirebaseAppImpl.prototype.extendApp = function (props) {
        var _this = this;
        // Copy the object onto the FirebaseAppImpl prototype
        util.deepExtend(this, props);
        /**
         * If the app has overwritten the addAuthTokenListener stub, forward
         * the active token listeners on to the true fxn.
         *
         * TODO: This function is required due to our current module
         * structure. Once we are able to rely strictly upon a single module
         * implementation, this code should be refactored and Auth should
         * provide these stubs and the upgrade logic
         */
        if (props.INTERNAL && props.INTERNAL.addAuthTokenListener) {
            tokenListeners.forEach(function (listener) {
                _this.INTERNAL.addAuthTokenListener(listener);
            });
            tokenListeners = [];
        }
    };
    /**
     * This function will throw an Error if the App has already been deleted -
     * use before performing API actions on the App.
     */
    FirebaseAppImpl.prototype.checkDestroyed_ = function () {
        if (this.isDeleted_) {
            error('app-deleted', { name: this.name_ });
        }
    };
    return FirebaseAppImpl;
}());
// Prevent dead-code elimination of these methods w/o invalid property
// copying.
(FirebaseAppImpl.prototype.name && FirebaseAppImpl.prototype.options) ||
    FirebaseAppImpl.prototype.delete ||
    console.log('dc');
/**
 * Return a firebase namespace object.
 *
 * In production, this will be called exactly once and the result
 * assigned to the 'firebase' global.  It may be called multiple times
 * in unit tests.
 */
function createFirebaseNamespace() {
    var apps_ = {};
    var factories = {};
    var appHooks = {};
    // A namespace is a plain JavaScript Object.
    var namespace = {
        // Hack to prevent Babel from modifying the object returned
        // as the firebase namespace.
        __esModule: true,
        initializeApp: initializeApp,
        app: app,
        apps: null,
        Promise: Promise,
        SDK_VERSION: '5.9.3',
        INTERNAL: {
            registerService: registerService,
            createFirebaseNamespace: createFirebaseNamespace,
            extendNamespace: extendNamespace,
            createSubscribe: util.createSubscribe,
            ErrorFactory: util.ErrorFactory,
            removeApp: removeApp,
            factories: factories,
            useAsService: useAsService,
            Promise: Promise,
            deepExtend: util.deepExtend
        }
    };
    // Inject a circular default export to allow Babel users who were previously
    // using:
    //
    //   import firebase from 'firebase';
    //   which becomes: var firebase = require('firebase').default;
    //
    // instead of
    //
    //   import * as firebase from 'firebase';
    //   which becomes: var firebase = require('firebase');
    util.patchProperty(namespace, 'default', namespace);
    // firebase.apps is a read-only getter.
    Object.defineProperty(namespace, 'apps', {
        get: getApps
    });
    /**
     * Called by App.delete() - but before any services associated with the App
     * are deleted.
     */
    function removeApp(name) {
        var app = apps_[name];
        callAppHooks(app, 'delete');
        delete apps_[name];
    }
    /**
     * Get the App object for a given name (or DEFAULT).
     */
    function app(name) {
        name = name || DEFAULT_ENTRY_NAME;
        if (!contains(apps_, name)) {
            error('no-app', { name: name });
        }
        return apps_[name];
    }
    util.patchProperty(app, 'App', FirebaseAppImpl);
    function initializeApp(options, rawConfig) {
        if (rawConfig === void 0) { rawConfig = {}; }
        if (typeof rawConfig !== 'object' || rawConfig === null) {
            var name_1 = rawConfig;
            rawConfig = { name: name_1 };
        }
        var config = rawConfig;
        if (config.name === undefined) {
            config.name = DEFAULT_ENTRY_NAME;
        }
        var name = config.name;
        if (typeof name !== 'string' || !name) {
            error('bad-app-name', { name: name + '' });
        }
        if (contains(apps_, name)) {
            error('duplicate-app', { name: name });
        }
        var app = new FirebaseAppImpl(options, config, namespace);
        apps_[name] = app;
        callAppHooks(app, 'create');
        return app;
    }
    /*
     * Return an array of all the non-deleted FirebaseApps.
     */
    function getApps() {
        // Make a copy so caller cannot mutate the apps list.
        return Object.keys(apps_).map(function (name) { return apps_[name]; });
    }
    /*
     * Register a Firebase Service.
     *
     * firebase.INTERNAL.registerService()
     *
     * TODO: Implement serviceProperties.
     */
    function registerService(name, createService, serviceProperties, appHook, allowMultipleInstances) {
        // Cannot re-register a service that already exists
        if (factories[name]) {
            error('duplicate-service', { name: name });
        }
        // Capture the service factory for later service instantiation
        factories[name] = createService;
        // Capture the appHook, if passed
        if (appHook) {
            appHooks[name] = appHook;
            // Run the **new** app hook on all existing apps
            getApps().forEach(function (app) {
                appHook('create', app);
            });
        }
        // The Service namespace is an accessor function ...
        var serviceNamespace = function (appArg) {
            if (appArg === void 0) { appArg = app(); }
            if (typeof appArg[name] !== 'function') {
                // Invalid argument.
                // This happens in the following case: firebase.storage('gs:/')
                error('invalid-app-argument', { name: name });
            }
            // Forward service instance lookup to the FirebaseApp.
            return appArg[name]();
        };
        // ... and a container for service-level properties.
        if (serviceProperties !== undefined) {
            util.deepExtend(serviceNamespace, serviceProperties);
        }
        // Monkey-patch the serviceNamespace onto the firebase namespace
        namespace[name] = serviceNamespace;
        // Patch the FirebaseAppImpl prototype
        FirebaseAppImpl.prototype[name] = function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var serviceFxn = this._getService.bind(this, name);
            return serviceFxn.apply(this, allowMultipleInstances ? args : []);
        };
        return serviceNamespace;
    }
    /**
     * Patch the top-level firebase namespace with additional properties.
     *
     * firebase.INTERNAL.extendNamespace()
     */
    function extendNamespace(props) {
        util.deepExtend(namespace, props);
    }
    function callAppHooks(app, eventName) {
        Object.keys(factories).forEach(function (serviceName) {
            // Ignore virtual services
            var factoryName = useAsService(app, serviceName);
            if (factoryName === null) {
                return;
            }
            if (appHooks[factoryName]) {
                appHooks[factoryName](eventName, app);
            }
        });
    }
    // Map the requested service to a registered service name
    // (used to map auth to serverAuth service when needed).
    function useAsService(app, name) {
        if (name === 'serverAuth') {
            return null;
        }
        var useService = name;
        var options = app.options;
        return useService;
    }
    return namespace;
}
function error(code, args) {
    throw appErrors.create(code, args);
}
var errors = {
    'no-app': "No Firebase App '{$name}' has been created - " +
        'call Firebase App.initializeApp()',
    'bad-app-name': "Illegal App name: '{$name}",
    'duplicate-app': "Firebase App named '{$name}' already exists",
    'app-deleted': "Firebase App named '{$name}' already deleted",
    'duplicate-service': "Firebase service named '{$name}' already registered",
    'sa-not-supported': 'Initializing the Firebase SDK with a service ' +
        'account is only allowed in a Node.js environment. On client ' +
        'devices, you should instead initialize the SDK with an api key and ' +
        'auth domain',
    'invalid-app-argument': 'firebase.{$name}() takes either no argument or a ' +
        'Firebase App instance.'
};
var appErrors = new util.ErrorFactory('app', 'Firebase', errors);

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Node detection logic from: https://github.com/iliakan/detect-node/
var isNode = false;
try {
    isNode =
        Object.prototype.toString.call(global.process) === '[object process]';
}
catch (e) { }
isNode &&
    console.warn("\nWarning: This is a browser-targeted Firebase bundle but it appears it is being\nrun in a Node environment.  If running in a Node environment, make sure you\nare using the bundle specified by the \"main\" field in package.json.\n\nIf you are using Webpack, you can specify \"main\" as the first item in\n\"resolve.mainFields\":\nhttps://webpack.js.org/configuration/resolve/#resolvemainfields\n\nIf using Rollup, use the rollup-plugin-node-resolve plugin and set \"module\"\nto false and \"main\" to true:\nhttps://github.com/rollup/rollup-plugin-node-resolve\n");
var firebase = createFirebaseNamespace();

exports.firebase = firebase;
exports.default = firebase;


},{"@firebase/util":"node_modules/@firebase/util/dist/index.cjs.js"}],"node_modules/firebase/app/dist/index.cjs.js":[function(require,module,exports) {
'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

require('@firebase/polyfill');
var firebase = _interopDefault(require('@firebase/app'));

/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module.exports = firebase;


},{"@firebase/polyfill":"node_modules/@firebase/polyfill/dist/index.esm.js","@firebase/app":"node_modules/@firebase/app/dist/index.cjs.js"}],"node_modules/@firebase/logger/dist/index.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setLogLevel = setLogLevel;
exports.LogLevel = exports.Logger = void 0;

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A container for all of the Logger instances
 */
var instances = [];
/**
 * The JS SDK supports 5 log levels and also allows a user the ability to
 * silence the logs altogether.
 *
 * The order is a follows:
 * DEBUG < VERBOSE < INFO < WARN < ERROR
 *
 * All of the log types above the current log level will be captured (i.e. if
 * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and
 * `VERBOSE` logs will not)
 */

var LogLevel;
exports.LogLevel = LogLevel;

(function (LogLevel) {
  LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
  LogLevel[LogLevel["VERBOSE"] = 1] = "VERBOSE";
  LogLevel[LogLevel["INFO"] = 2] = "INFO";
  LogLevel[LogLevel["WARN"] = 3] = "WARN";
  LogLevel[LogLevel["ERROR"] = 4] = "ERROR";
  LogLevel[LogLevel["SILENT"] = 5] = "SILENT";
})(LogLevel || (exports.LogLevel = LogLevel = {}));
/**
 * The default log level
 */


var defaultLogLevel = LogLevel.INFO;
/**
 * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR
 * messages on to their corresponding console counterparts (if the log method
 * is supported by the current log level)
 */

var defaultLogHandler = function (instance, logType) {
  var args = [];

  for (var _i = 2; _i < arguments.length; _i++) {
    args[_i - 2] = arguments[_i];
  }

  if (logType < instance.logLevel) return;
  var now = new Date().toISOString();

  switch (logType) {
    /**
     * By default, `console.debug` is not displayed in the developer console (in
     * chrome). To avoid forcing users to have to opt-in to these logs twice
     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`
     * logs to the `console.log` function.
     */
    case LogLevel.DEBUG:
      console.log.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
      break;

    case LogLevel.VERBOSE:
      console.log.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
      break;

    case LogLevel.INFO:
      console.info.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
      break;

    case LogLevel.WARN:
      console.warn.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
      break;

    case LogLevel.ERROR:
      console.error.apply(console, ["[" + now + "]  " + instance.name + ":"].concat(args));
      break;

    default:
      throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
  }
};

var Logger =
/** @class */
function () {
  /**
   * Gives you an instance of a Logger to capture messages according to
   * Firebase's logging scheme.
   *
   * @param name The name that the logs will be associated with
   */
  function Logger(name) {
    this.name = name;
    /**
     * The log level of the given Logger instance.
     */

    this._logLevel = defaultLogLevel;
    /**
     * The log handler for the Logger instance.
     */

    this._logHandler = defaultLogHandler;
    /**
     * Capture the current instance for later use
     */

    instances.push(this);
  }

  Object.defineProperty(Logger.prototype, "logLevel", {
    get: function () {
      return this._logLevel;
    },
    set: function (val) {
      if (!(val in LogLevel)) {
        throw new TypeError('Invalid value assigned to `logLevel`');
      }

      this._logLevel = val;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(Logger.prototype, "logHandler", {
    get: function () {
      return this._logHandler;
    },
    set: function (val) {
      if (typeof val !== 'function') {
        throw new TypeError('Value assigned to `logHandler` must be a function');
      }

      this._logHandler = val;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * The functions below are all based on the `console` interface
   */

  Logger.prototype.debug = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._logHandler.apply(this, [this, LogLevel.DEBUG].concat(args));
  };

  Logger.prototype.log = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._logHandler.apply(this, [this, LogLevel.VERBOSE].concat(args));
  };

  Logger.prototype.info = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._logHandler.apply(this, [this, LogLevel.INFO].concat(args));
  };

  Logger.prototype.warn = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._logHandler.apply(this, [this, LogLevel.WARN].concat(args));
  };

  Logger.prototype.error = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    this._logHandler.apply(this, [this, LogLevel.ERROR].concat(args));
  };

  return Logger;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


exports.Logger = Logger;

function setLogLevel(level) {
  instances.forEach(function (inst) {
    inst.logLevel = level;
  });
}
},{}],"node_modules/@firebase/webchannel-wrapper/dist/index.esm.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.XhrIo = exports.WebChannel = exports.EventType = exports.ErrorCode = exports.createWebChannelTransport = exports.default = void 0;
var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};
var e,
    goog = goog || {},
    h = commonjsGlobal;

function l(a) {
  return "string" == typeof a;
}

function n(a, b) {
  a = a.split(".");
  b = b || h;

  for (var c = 0; c < a.length; c++) if (b = b[a[c]], null == b) return null;

  return b;
}

function p() {}

function q(a) {
  var b = typeof a;
  if ("object" == b) {
    if (a) {
      if (a instanceof Array) return "array";
      if (a instanceof Object) return b;
      var c = Object.prototype.toString.call(a);
      if ("[object Window]" == c) return "object";
      if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";
      if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
    } else return "null";
  } else if ("function" == b && "undefined" == typeof a.call) return "object";
  return b;
}

function r(a) {
  return "array" == q(a);
}

function aa(a) {
  var b = q(a);
  return "array" == b || "object" == b && "number" == typeof a.length;
}

function t(a) {
  var b = typeof a;
  return "object" == b && null != a || "function" == b;
}

var u = "closure_uid_" + (1E9 * Math.random() >>> 0),
    ba = 0;

function ca(a, b, c) {
  return a.call.apply(a.bind, arguments);
}

function da(a, b, c) {
  if (!a) throw Error();

  if (2 < arguments.length) {
    var d = Array.prototype.slice.call(arguments, 2);
    return function () {
      var c = Array.prototype.slice.call(arguments);
      Array.prototype.unshift.apply(c, d);
      return a.apply(b, c);
    };
  }

  return function () {
    return a.apply(b, arguments);
  };
}

function v(a, b, c) {
  Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? v = ca : v = da;
  return v.apply(null, arguments);
}

function w(a, b) {
  var c = Array.prototype.slice.call(arguments, 1);
  return function () {
    var b = c.slice();
    b.push.apply(b, arguments);
    return a.apply(this, b);
  };
}

var x = Date.now || function () {
  return +new Date();
};

function y(a, b) {
  function c() {}

  c.prototype = b.prototype;
  a.S = b.prototype;
  a.prototype = new c();
  a.prototype.constructor = a;

  a.re = function (a, c, g) {
    for (var d = Array(arguments.length - 2), f = 2; f < arguments.length; f++) d[f - 2] = arguments[f];

    return b.prototype[c].apply(a, d);
  };
}

function z() {
  this.i = this.i;
  this.j = this.j;
}

var ea = 0;
z.prototype.i = !1;

z.prototype.La = function () {
  if (!this.i && (this.i = !0, this.G(), 0 != ea)) {
    var a = this[u] || (this[u] = ++ba);
  }
};

z.prototype.G = function () {
  if (this.j) for (; this.j.length;) this.j.shift()();
};

var ha = Array.prototype.indexOf ? function (a, b) {
  return Array.prototype.indexOf.call(a, b, void 0);
} : function (a, b) {
  if (l(a)) return l(b) && 1 == b.length ? a.indexOf(b, 0) : -1;

  for (var c = 0; c < a.length; c++) if (c in a && a[c] === b) return c;

  return -1;
},
    A = Array.prototype.forEach ? function (a, b, c) {
  Array.prototype.forEach.call(a, b, c);
} : function (a, b, c) {
  for (var d = a.length, f = l(a) ? a.split("") : a, g = 0; g < d; g++) g in f && b.call(c, f[g], g, a);
};

function ia(a) {
  a: {
    var b = ja;

    for (var c = a.length, d = l(a) ? a.split("") : a, f = 0; f < c; f++) if (f in d && b.call(void 0, d[f], f, a)) {
      b = f;
      break a;
    }

    b = -1;
  }

  return 0 > b ? null : l(a) ? a.charAt(b) : a[b];
}

function ka(a) {
  return Array.prototype.concat.apply([], arguments);
}

function la(a) {
  var b = a.length;

  if (0 < b) {
    for (var c = Array(b), d = 0; d < b; d++) c[d] = a[d];

    return c;
  }

  return [];
}

function B(a) {
  return /^[\s\xa0]*$/.test(a);
}

var ma = String.prototype.trim ? function (a) {
  return a.trim();
} : function (a) {
  return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
};

function C(a, b) {
  return -1 != a.indexOf(b);
}

function na(a, b) {
  return a < b ? -1 : a > b ? 1 : 0;
}

var D;

a: {
  var oa = h.navigator;

  if (oa) {
    var pa = oa.userAgent;

    if (pa) {
      D = pa;
      break a;
    }
  }

  D = "";
}

function qa(a, b, c) {
  for (var d in a) b.call(c, a[d], d, a);
}

function ra(a) {
  var b = {},
      c;

  for (c in a) b[c] = a[c];

  return b;
}

var sa = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");

function ta(a, b) {
  for (var c, d, f = 1; f < arguments.length; f++) {
    d = arguments[f];

    for (c in d) a[c] = d[c];

    for (var g = 0; g < sa.length; g++) c = sa[g], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
  }
}

function ua(a) {
  ua[" "](a);
  return a;
}

ua[" "] = p;

function va(a, b) {
  var c = wa;
  return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
}

var xa = C(D, "Opera"),
    E = C(D, "Trident") || C(D, "MSIE"),
    ya = C(D, "Edge"),
    za = ya || E,
    Aa = C(D, "Gecko") && !(C(D.toLowerCase(), "webkit") && !C(D, "Edge")) && !(C(D, "Trident") || C(D, "MSIE")) && !C(D, "Edge"),
    Ba = C(D.toLowerCase(), "webkit") && !C(D, "Edge");

function Ca() {
  var a = h.document;
  return a ? a.documentMode : void 0;
}

var Da;

a: {
  var Ea = "",
      Fa = function () {
    var a = D;
    if (Aa) return /rv:([^\);]+)(\)|;)/.exec(a);
    if (ya) return /Edge\/([\d\.]+)/.exec(a);
    if (E) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
    if (Ba) return /WebKit\/(\S+)/.exec(a);
    if (xa) return /(?:Version)[ \/]?(\S+)/.exec(a);
  }();

  Fa && (Ea = Fa ? Fa[1] : "");

  if (E) {
    var Ga = Ca();

    if (null != Ga && Ga > parseFloat(Ea)) {
      Da = String(Ga);
      break a;
    }
  }

  Da = Ea;
}

var wa = {};

function Ha(a) {
  return va(a, function () {
    for (var b = 0, c = ma(String(Da)).split("."), d = ma(String(a)).split("."), f = Math.max(c.length, d.length), g = 0; 0 == b && g < f; g++) {
      var k = c[g] || "",
          m = d[g] || "";

      do {
        k = /(\d*)(\D*)(.*)/.exec(k) || ["", "", "", ""];
        m = /(\d*)(\D*)(.*)/.exec(m) || ["", "", "", ""];
        if (0 == k[0].length && 0 == m[0].length) break;
        b = na(0 == k[1].length ? 0 : parseInt(k[1], 10), 0 == m[1].length ? 0 : parseInt(m[1], 10)) || na(0 == k[2].length, 0 == m[2].length) || na(k[2], m[2]);
        k = k[3];
        m = m[3];
      } while (0 == b);
    }

    return 0 <= b;
  });
}

var Ia;
var Ka = h.document;
Ia = Ka && E ? Ca() || ("CSS1Compat" == Ka.compatMode ? parseInt(Da, 10) : 5) : void 0;

var La = !E || 9 <= Number(Ia),
    Ma = E && !Ha("9"),
    Na = function () {
  if (!h.addEventListener || !Object.defineProperty) return !1;
  var a = !1,
      b = Object.defineProperty({}, "passive", {
    get: function () {
      a = !0;
    }
  });

  try {
    h.addEventListener("test", p, b), h.removeEventListener("test", p, b);
  } catch (c) {}

  return a;
}();

function F(a, b) {
  this.type = a;
  this.a = this.target = b;
  this.b = !1;
  this.hc = !0;
}

F.prototype.c = function () {
  this.hc = !1;
};

function G(a, b) {
  F.call(this, a ? a.type : "");
  this.relatedTarget = this.a = this.target = null;
  this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
  this.key = "";
  this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
  this.pointerId = 0;
  this.pointerType = "";
  this.f = null;
  a && this.g(a, b);
}

y(G, F);
var Oa = {
  2: "touch",
  3: "pen",
  4: "mouse"
};

G.prototype.g = function (a, b) {
  var c = this.type = a.type,
      d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
  this.target = a.target || a.srcElement;
  this.a = b;

  if (b = a.relatedTarget) {
    if (Aa) {
      a: {
        try {
          ua(b.nodeName);
          var f = !0;
          break a;
        } catch (g) {}

        f = !1;
      }

      f || (b = null);
    }
  } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);

  this.relatedTarget = b;
  d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
  this.button = a.button;
  this.key = a.key || "";
  this.ctrlKey = a.ctrlKey;
  this.altKey = a.altKey;
  this.shiftKey = a.shiftKey;
  this.metaKey = a.metaKey;
  this.pointerId = a.pointerId || 0;
  this.pointerType = l(a.pointerType) ? a.pointerType : Oa[a.pointerType] || "";
  this.f = a;
  a.defaultPrevented && this.c();
};

G.prototype.c = function () {
  G.S.c.call(this);
  var a = this.f;
  if (a.preventDefault) a.preventDefault();else if (a.returnValue = !1, Ma) try {
    if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) a.keyCode = -1;
  } catch (b) {}
};

var H = "closure_listenable_" + (1E6 * Math.random() | 0),
    Pa = 0;

function Qa(a, b, c, d, f) {
  this.listener = a;
  this.proxy = null;
  this.src = b;
  this.type = c;
  this.capture = !!d;
  this.ya = f;
  this.key = ++Pa;
  this.ja = this.oa = !1;
}

Qa.prototype.a = function () {
  this.ja = !0;
  this.ya = this.src = this.proxy = this.listener = null;
};

function Ra(a) {
  this.src = a;
  this.a = {};
  this.b = 0;
}

e = Ra.prototype;

e.add = function (a, b, c, d, f) {
  var g = a.toString();
  a = this.a[g];
  a || (a = this.a[g] = [], this.b++);
  var k = Sa(a, b, d, f);
  -1 < k ? (b = a[k], c || (b.oa = !1)) : (b = new Qa(b, this.src, g, !!d, f), b.oa = c, a.push(b));
  return b;
};

e.Sc = function (a, b, c, d) {
  a = a.toString();

  if (a in this.a) {
    var f = this.a[a];
    b = Sa(f, b, c, d);
    -1 < b && (f[b].a(), Array.prototype.splice.call(f, b, 1), 0 == f.length && (delete this.a[a], this.b--));
  }
};

e.fc = function (a) {
  var b = a.type;

  if (b in this.a) {
    var c = this.a[b],
        d = ha(c, a),
        f;
    (f = 0 <= d) && Array.prototype.splice.call(c, d, 1);
    f && (a.a(), 0 == this.a[b].length && (delete this.a[b], this.b--));
  }
};

e.Tc = function () {
  var b;

  for (b in this.a) {
    for (var c = this.a[b], d = 0; d < c.length; d++) c[d].a();

    delete this.a[b];
    this.b--;
  }
};

e.Rc = function (a, b, c, d) {
  a = this.a[a.toString()];
  var f = -1;
  a && (f = Sa(a, b, c, d));
  return -1 < f ? a[f] : null;
};

function Sa(a, b, c, d) {
  for (var f = 0; f < a.length; ++f) {
    var g = a[f];
    if (!g.ja && g.listener == b && g.capture == !!c && g.ya == d) return f;
  }

  return -1;
}

var Ta = "closure_lm_" + (1E6 * Math.random() | 0),
    Ua = {};

function Wa(a, b, c, d, f) {
  if (d && d.once) return Xa(a, b, c, d, f);

  if (r(b)) {
    for (var g = 0; g < b.length; g++) Wa(a, b[g], c, d, f);

    return null;
  }

  c = Ya(c);
  return a && a[H] ? a.Lb(b, c, t(d) ? !!d.capture : !!d, f) : Za(a, b, c, !1, d, f);
}

function Za(a, b, c, d, f, g) {
  if (!b) throw Error("Invalid event type");
  var k = t(f) ? !!f.capture : !!f;
  if (k && !La) return null;
  var m = $a(a);
  m || (a[Ta] = m = new Ra(a));
  c = m.add(b, c, d, k, g);
  if (c.proxy) return c;
  d = ab();
  c.proxy = d;
  d.src = a;
  d.listener = c;
  if (a.addEventListener) Na || (f = k), void 0 === f && (f = !1), a.addEventListener(b.toString(), d, f);else if (a.attachEvent) a.attachEvent(bb(b.toString()), d);else if (a.addListener && a.removeListener) a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");
  return c;
}

function ab() {
  var a = cb,
      b = La ? function (c) {
    return a.call(b.src, b.listener, c);
  } : function (c) {
    c = a.call(b.src, b.listener, c);
    if (!c) return c;
  };
  return b;
}

function Xa(a, b, c, d, f) {
  if (r(b)) {
    for (var g = 0; g < b.length; g++) Xa(a, b[g], c, d, f);

    return null;
  }

  c = Ya(c);
  return a && a[H] ? a.Mb(b, c, t(d) ? !!d.capture : !!d, f) : Za(a, b, c, !0, d, f);
}

function db(a, b, c, d, f) {
  if (r(b)) for (var g = 0; g < b.length; g++) db(a, b[g], c, d, f);else d = t(d) ? !!d.capture : !!d, c = Ya(c), a && a[H] ? a.Qc(b, c, d, f) : a && (a = $a(a)) && (b = a.Rc(b, c, d, f)) && eb(b);
}

function eb(a) {
  if ("number" != typeof a && a && !a.ja) {
    var b = a.src;
    if (b && b[H]) b.nc(a);else {
      var c = a.type,
          d = a.proxy;
      b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(bb(c), d) : b.addListener && b.removeListener && b.removeListener(d);
      (c = $a(b)) ? (c.fc(a), 0 == c.b && (c.src = null, b[Ta] = null)) : a.a();
    }
  }
}

function bb(a) {
  return a in Ua ? Ua[a] : Ua[a] = "on" + a;
}

function fb(a, b) {
  var c = a.listener,
      d = a.ya || a.src;
  a.oa && eb(a);
  return c.call(d, b);
}

function cb(a, b) {
  return a.ja ? !0 : La ? fb(a, new G(b, this)) : (b = new G(b || n("window.event"), this), fb(a, b));
}

function $a(a) {
  a = a[Ta];
  return a instanceof Ra ? a : null;
}

var gb = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);

function Ya(a) {
  if ("function" == q(a)) return a;
  a[gb] || (a[gb] = function (b) {
    return a.handleEvent(b);
  });
  return a[gb];
}

function I() {
  z.call(this);
  this.c = new Ra(this);
  this.K = this;
  this.F = null;
}

y(I, z);
I.prototype[H] = !0;
e = I.prototype;

e.addEventListener = function (a, b, c, d) {
  Wa(this, a, b, c, d);
};

e.removeEventListener = function (a, b, c, d) {
  db(this, a, b, c, d);
};

e.dispatchEvent = function (a) {
  var b,
      c = this.F;
  if (c) for (b = []; c; c = c.F) b.push(c);
  c = this.K;
  var d = a.type || a;
  if (l(a)) a = new F(a, c);else if (a instanceof F) a.target = a.target || c;else {
    var f = a;
    a = new F(d, c);
    ta(a, f);
  }
  f = !0;
  if (b) for (var g = b.length - 1; !a.b && 0 <= g; g--) {
    var k = a.a = b[g];
    f = k.ua(d, !0, a) && f;
  }
  a.b || (k = a.a = c, f = k.ua(d, !0, a) && f, a.b || (f = k.ua(d, !1, a) && f));
  if (b) for (g = 0; !a.b && g < b.length; g++) k = a.a = b[g], f = k.ua(d, !1, a) && f;
  return f;
};

e.G = function () {
  I.S.G.call(this);
  this.Id();
  this.F = null;
};

e.Lb = function (a, b, c, d) {
  return this.c.add(String(a), b, !1, c, d);
};

e.Mb = function (a, b, c, d) {
  return this.c.add(String(a), b, !0, c, d);
};

e.Qc = function (a, b, c, d) {
  this.c.Sc(String(a), b, c, d);
};

e.nc = function (a) {
  this.c.fc(a);
};

e.Id = function () {
  this.c && this.c.Tc();
};

e.ua = function (a, b, c) {
  a = this.c.a[String(a)];
  if (!a) return !0;
  a = a.concat();

  for (var d = !0, f = 0; f < a.length; ++f) {
    var g = a[f];

    if (g && !g.ja && g.capture == b) {
      var k = g.listener,
          m = g.ya || g.src;
      g.oa && this.nc(g);
      d = !1 !== k.call(m, c) && d;
    }
  }

  return d && 0 != c.hc;
};

var hb = h.JSON.stringify;

function ib(a, b) {
  this.g = 100;
  this.c = a;
  this.h = b;
  this.b = 0;
  this.a = null;
}

ib.prototype.get = function () {
  if (0 < this.b) {
    this.b--;
    var a = this.a;
    this.a = a.next;
    a.next = null;
  } else a = this.c();

  return a;
};

ib.prototype.f = function (a) {
  this.h(a);
  this.b < this.g && (this.b++, a.next = this.a, this.a = a);
};

function J() {
  this.b = this.a = null;
}

var kb = new ib(function () {
  return new jb();
}, function (a) {
  a.reset();
});

J.prototype.add = function (a, b) {
  var c = this.c();
  c.set(a, b);
  this.b ? this.b.next = c : this.a = c;
  this.b = c;
};

J.prototype.f = function () {
  var a = null;
  this.a && (a = this.a, this.a = this.a.next, this.a || (this.b = null), a.next = null);
  return a;
};

J.prototype.g = function (a) {
  kb.f(a);
};

J.prototype.c = function () {
  return kb.get();
};

function jb() {
  this.next = this.b = this.a = null;
}

jb.prototype.set = function (a, b) {
  this.a = a;
  this.b = b;
  this.next = null;
};

jb.prototype.reset = function () {
  this.next = this.b = this.a = null;
};

function lb(a) {
  h.setTimeout(function () {
    throw a;
  }, 0);
}

var mb;

function nb() {
  var a = h.Promise.resolve(void 0);

  mb = function () {
    a.then(ob);
  };
}

var pb = !1,
    qb = new J();

function ob() {
  for (var a; a = qb.f();) {
    try {
      a.a.call(a.b);
    } catch (b) {
      lb(b);
    }

    qb.g(a);
  }

  pb = !1;
}

function rb(a, b) {
  I.call(this);
  this.b = a || 1;
  this.a = b || h;
  this.f = v(this.$d, this);
  this.g = x();
}

y(rb, I);
e = rb.prototype;
e.wa = !1;
e.P = null;

e.$d = function () {
  if (this.wa) {
    var a = x() - this.g;
    0 < a && a < .8 * this.b ? this.P = this.a.setTimeout(this.f, this.b - a) : (this.P && (this.a.clearTimeout(this.P), this.P = null), this.Gc(), this.wa && (this.Na(), this.start()));
  }
};

e.Gc = function () {
  this.dispatchEvent("tick");
};

e.start = function () {
  this.wa = !0;
  this.P || (this.P = this.a.setTimeout(this.f, this.b), this.g = x());
};

e.Na = function () {
  this.wa = !1;
  this.P && (this.a.clearTimeout(this.P), this.P = null);
};

e.G = function () {
  rb.S.G.call(this);
  this.Na();
  delete this.a;
};

function sb(a, b, c) {
  if ("function" == q(a)) c && (a = v(a, c));else if (a && "function" == typeof a.handleEvent) a = v(a.handleEvent, a);else throw Error("Invalid listener argument");
  return 2147483647 < Number(b) ? -1 : h.setTimeout(a, b || 0);
}

function tb(a, b, c) {
  z.call(this);
  this.f = null != c ? v(a, c) : a;
  this.c = b;
  this.b = v(this.Cd, this);
  this.a = [];
}

y(tb, z);
e = tb.prototype;
e.Ca = !1;
e.ec = 0;
e.ba = null;

e.Hc = function (a) {
  this.a = arguments;
  this.ba || this.ec ? this.Ca = !0 : this.yb();
};

e.Pc = function () {
  this.ba && (h.clearTimeout(this.ba), this.ba = null, this.Ca = !1, this.a = []);
};

e.G = function () {
  tb.S.G.call(this);
  this.Pc();
};

e.Cd = function () {
  this.ba = null;
  this.Ca && !this.ec && (this.Ca = !1, this.yb());
};

e.yb = function () {
  this.ba = sb(this.b, this.c);
  this.f.apply(null, this.a);
};

function ub(a) {
  z.call(this);
  this.b = a;
  this.a = {};
}

y(ub, z);
var vb = [];
e = ub.prototype;

e.Jb = function (a, b, c) {
  this.wd(a, b, c);
};

e.wd = function (a, b, c) {
  r(b) || (b && (vb[0] = b.toString()), b = vb);

  for (var d = 0; d < b.length; d++) {
    var f = Wa(a, b[d], c || this.handleEvent, !1, this.b || this);
    if (!f) break;
    this.a[f.key] = f;
  }
};

e.Kb = function () {
  qa(this.a, function (a, b) {
    this.a.hasOwnProperty(b) && eb(a);
  }, this);
  this.a = {};
};

e.G = function () {
  ub.S.G.call(this);
  this.Kb();
};

e.handleEvent = function () {
  throw Error("EventHandler.handleEvent not implemented");
};

function wb() {}

var K = new I();

function xb(a) {
  F.call(this, "serverreachability", a);
}

y(xb, F);

function L(a) {
  K.dispatchEvent(new xb(K, a));
}

function yb(a) {
  F.call(this, "statevent", a);
}

y(yb, F);

function M(a) {
  K.dispatchEvent(new yb(K, a));
}

function zb(a) {
  F.call(this, "timingevent", a);
}

y(zb, F);

function N(a, b) {
  if ("function" != q(a)) throw Error("Fn must not be null and must be a function");
  return h.setTimeout(function () {
    a();
  }, b);
}

var Ab = {
  NO_ERROR: 0,
  ae: 1,
  he: 2,
  ge: 3,
  de: 4,
  fe: 5,
  ie: 6,
  qc: 7,
  TIMEOUT: 8,
  le: 9
};
var Bb = {
  ce: "complete",
  pe: "success",
  rc: "error",
  qc: "abort",
  ne: "ready",
  oe: "readystatechange",
  TIMEOUT: "timeout",
  je: "incrementaldata",
  me: "progress",
  ee: "downloadprogress",
  qe: "uploadprogress"
};

function Cb() {}

Cb.prototype.a = null;

Cb.prototype.c = function () {
  return this.a || (this.a = {});
};

function Db() {}

var O = {
  OPEN: "a",
  be: "b",
  rc: "c",
  ke: "d"
};

function Eb() {
  F.call(this, "d");
}

y(Eb, F);

function Fb() {
  F.call(this, "c");
}

y(Fb, F);
var Hb;

function Ib() {}

y(Ib, Cb);

Ib.prototype.b = function () {
  return new XMLHttpRequest();
};

Hb = new Ib();

function P(a, b, c) {
  this.g = a;
  this.da = b;
  this.ca = c || 1;
  this.I = new ub(this);
  this.L = Jb;
  a = za ? 125 : void 0;
  this.T = new rb(a);
  this.J = null;
  this.b = !1;
  this.i = this.C = this.f = this.F = this.u = this.U = this.h = null;
  this.j = [];
  this.a = null;
  this.A = 0;
  this.c = this.v = null;
  this.o = -1;
  this.l = !1;
  this.K = 0;
  this.B = null;
  this.s = this.Y = this.H = !1;
}

var Jb = 45E3,
    Kb = {},
    Lb = {};
e = P.prototype;

e.ha = function (a) {
  this.J = a;
};

e.setTimeout = function (a) {
  this.L = a;
};

e.Xc = function (a) {
  this.K = a;
};

e.Qd = function (a) {
  this.j = a;
};

e.cb = function (a, b) {
  this.F = 1;
  this.f = a.N().za();
  this.i = b;
  this.H = !0;
  this.ic(null);
};

e.bb = function (a, b, c) {
  this.F = 1;
  this.f = a.N().za();
  this.i = null;
  this.H = b;
  this.ic(c);
};

e.ic = function (a) {
  this.u = x();
  this.fa();
  this.C = this.f.N();
  this.C.Aa("t", this.ca);
  this.A = 0;
  this.a = this.g.sa(this.g.Da() ? a : null);
  0 < this.K && (this.B = new tb(v(this.oc, this, this.a), this.K));
  this.I.Jb(this.a, "readystatechange", this.Hd);
  a = this.J ? ra(this.J) : {};
  this.i ? (this.v || (this.v = "POST"), a["Content-Type"] = "application/x-www-form-urlencoded", this.a.xa(this.C, this.v, this.i, a)) : (this.v = "GET", this.a.xa(this.C, this.v, null, a));
  L(1);
};

e.Hd = function (a) {
  a = a.target;
  var b = this.B;
  b && 3 == a.W() ? b.Hc() : this.oc(a);
};

e.oc = function (a) {
  try {
    a == this.a && this.Ed();
  } catch (b) {} finally {}
};

e.Ed = function () {
  var a = this.a.W(),
      b = this.a.Db(),
      c = this.a.aa();
  if (!(3 > a || 3 == a && !za && !this.a.va())) if (this.l || 4 != a || 7 == b || (8 == b || 0 >= c ? L(3) : L(2)), this.pa(), this.o = c = this.a.aa(), b = this.a.va(), this.b = 200 == c) {
    if (this.Td()) if (c = this.Kc()) this.s = !0, this.Wa(c);else {
      this.b = !1;
      this.c = 3;
      M(12);
      this.Z();
      this.ta();
      return;
    }
    this.H ? (this.vb(a, b), za && this.b && 3 == a && this.Yd()) : this.Wa(b);
    4 == a && this.Z();
    this.b && !this.l && (4 == a ? this.g.Va(this) : (this.b = !1, this.fa()));
  } else 400 == c && 0 < b.indexOf("Unknown SID") ? (this.c = 3, M(12)) : (this.c = 0, M(13)), this.Z(), this.ta();
};

e.Td = function () {
  return this.Y && !this.s;
};

e.Kc = function () {
  if (this.a) {
    var a = this.a.ga("X-HTTP-Initial-Response");
    if (a && !B(a)) return a;
  }

  return null;
};

e.Md = function () {
  this.Y = !0;
};

e.vb = function (a, b) {
  for (var c = !0; !this.l && this.A < b.length;) {
    var d = this.Lc(b);

    if (d == Lb) {
      4 == a && (this.c = 4, M(14), c = !1);
      break;
    } else if (d == Kb) {
      this.c = 4;
      M(15);
      c = !1;
      break;
    } else this.Wa(d);
  }

  4 == a && 0 == b.length && (this.c = 1, M(16), c = !1);
  this.b = this.b && c;
  c || (this.Z(), this.ta());
};

e.Gd = function () {
  if (this.a) {
    var a = this.a.W(),
        b = this.a.va();
    this.A < b.length && (this.pa(), this.vb(a, b), this.b && 4 != a && this.fa());
  }
};

e.Yd = function () {
  this.I.Jb(this.T, "tick", this.Gd);
  this.T.start();
};

e.Lc = function (a) {
  var b = this.A,
      c = a.indexOf("\n", b);
  if (-1 == c) return Lb;
  b = Number(a.substring(b, c));
  if (isNaN(b)) return Kb;
  c += 1;
  if (c + b > a.length) return Lb;
  a = a.substr(c, b);
  this.A = c + b;
  return a;
};

e.Ld = function (a) {
  this.F = 2;
  this.f = a.N().za();
  a = !1;
  h.navigator && h.navigator.sendBeacon && (a = h.navigator.sendBeacon(this.f.toString(), ""));
  !a && h.Image && (new Image().src = this.f, a = !0);
  a || (this.a = this.g.sa(null), this.a.xa(this.f));
  this.u = x();
  this.fa();
};

e.cancel = function () {
  this.l = !0;
  this.Z();
};

e.Kd = function (a) {
  a && this.setTimeout(a);
  this.h && (this.pa(), this.fa());
};

e.fa = function () {
  this.U = x() + this.L;
  this.mc(this.L);
};

e.mc = function (a) {
  if (null != this.h) throw Error("WatchDog timer not null");
  this.h = N(v(this.Dd, this), a);
};

e.pa = function () {
  this.h && (h.clearTimeout(this.h), this.h = null);
};

e.Dd = function () {
  this.h = null;
  var a = x();
  0 <= a - this.U ? this.md() : this.mc(this.U - a);
};

e.md = function () {
  2 != this.F && (L(3), M(17));
  this.Z();
  this.c = 2;
  this.ta();
};

e.ta = function () {
  this.g.Tb() || this.l || this.g.Va(this);
};

e.Z = function () {
  this.pa();
  var a = this.B;
  a && "function" == typeof a.La && a.La();
  this.B = null;
  this.T.Na();
  this.I.Kb();
  this.a && (a = this.a, this.a = null, a.abort(), a.La());
};

e.Wa = function (a) {
  try {
    this.g.bc(this, a), L(4);
  } catch (b) {}
};

function Mb(a) {
  if (a.D && "function" == typeof a.D) return a.D();
  if (l(a)) return a.split("");

  if (aa(a)) {
    for (var b = [], c = a.length, d = 0; d < c; d++) b.push(a[d]);

    return b;
  }

  b = [];
  c = 0;

  for (d in a) b[c++] = a[d];

  return b;
}

function Nb(a, b) {
  if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);else if (aa(a) || l(a)) A(a, b, void 0);else {
    if (a.O && "function" == typeof a.O) var c = a.O();else if (a.D && "function" == typeof a.D) c = void 0;else if (aa(a) || l(a)) {
      c = [];

      for (var d = a.length, f = 0; f < d; f++) c.push(f);
    } else for (f in c = [], d = 0, a) c[d++] = f;
    d = Mb(a);
    f = d.length;

    for (var g = 0; g < f; g++) b.call(void 0, d[g], c && c[g], a);
  }
}

function Q(a, b) {
  this.b = {};
  this.a = [];
  this.c = 0;
  var c = arguments.length;

  if (1 < c) {
    if (c % 2) throw Error("Uneven number of arguments");

    for (var d = 0; d < c; d += 2) this.set(arguments[d], arguments[d + 1]);
  } else a && this.fd(a);
}

e = Q.prototype;

e.D = function () {
  this.Ka();

  for (var a = [], b = 0; b < this.a.length; b++) a.push(this.b[this.a[b]]);

  return a;
};

e.O = function () {
  this.Ka();
  return this.a.concat();
};

e.Ra = function (a) {
  return R(this.b, a);
};

e.hd = function () {
  return 0 == this.c;
};

e.gd = function () {
  this.b = {};
  this.c = this.a.length = 0;
};

e.Qb = function (a) {
  R(this.b, a) && (delete this.b[a], this.c--, this.a.length > 2 * this.c && this.Ka());
};

e.Ka = function () {
  if (this.c != this.a.length) {
    for (var a = 0, b = 0; a < this.a.length;) {
      var c = this.a[a];
      R(this.b, c) && (this.a[b++] = c);
      a++;
    }

    this.a.length = b;
  }

  if (this.c != this.a.length) {
    var d = {};

    for (b = a = 0; a < this.a.length;) c = this.a[a], R(d, c) || (this.a[b++] = c, d[c] = 1), a++;

    this.a.length = b;
  }
};

e.get = function (a, b) {
  return R(this.b, a) ? this.b[a] : b;
};

e.set = function (a, b) {
  R(this.b, a) || (this.c++, this.a.push(a));
  this.b[a] = b;
};

e.fd = function (a) {
  if (a instanceof Q) for (var b = a.O(), c = 0; c < b.length; c++) this.set(b[c], a.get(b[c]));else for (b in a) this.set(b, a[b]);
};

e.forEach = function (a, b) {
  for (var c = this.O(), d = 0; d < c.length; d++) {
    var f = c[d],
        g = this.get(f);
    a.call(b, g, f, this);
  }
};

e.Pb = function () {
  return new Q(this);
};

function R(a, b) {
  return Object.prototype.hasOwnProperty.call(a, b);
}

var Ob = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;

function Pb(a, b) {
  if (a) {
    a = a.split("&");

    for (var c = 0; c < a.length; c++) {
      var d = a[c].indexOf("="),
          f = null;

      if (0 <= d) {
        var g = a[c].substring(0, d);
        f = a[c].substring(d + 1);
      } else g = a[c];

      b(g, f ? decodeURIComponent(f.replace(/\+/g, " ")) : "");
    }
  }
}

function S(a, b) {
  this.c = this.i = this.b = "";
  this.h = null;
  this.j = this.g = "";
  this.f = this.l = !1;
  var c;
  a instanceof S ? (this.f = void 0 !== b ? b : a.f, this.ma(a.b), this.$a(a.i), this.ka(a.c), this.la(a.h), this.Ba(a.g), this.Za(a.a.Gb()), this.Ya(a.j)) : a && (c = String(a).match(Ob)) ? (this.f = !!b, this.ma(c[1] || "", !0), this.$a(c[2] || "", !0), this.ka(c[3] || "", !0), this.la(c[4]), this.Ba(c[5] || "", !0), this.Za(c[6] || "", !0), this.Ya(c[7] || "", !0)) : (this.f = !!b, this.a = new T(null, this.f));
}

e = S.prototype;

e.toString = function () {
  var a = [],
      b = this.b;
  b && a.push(U(b, Qb, !0), ":");
  var c = this.c;
  if (c || "file" == b) a.push("//"), (b = this.i) && a.push(U(b, Qb, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.h, null != c && a.push(":", String(c));
  if (c = this.g) this.Sa() && "/" != c.charAt(0) && a.push("/"), a.push(U(c, "/" == c.charAt(0) ? Rb : Sb, !0));
  (c = this.Ic()) && a.push("?", c);
  (c = this.j) && a.push("#", U(c, Tb));
  return a.join("");
};

e.resolve = function (a) {
  var b = this.N(),
      c = a.qd();
  c ? b.ma(a.b) : c = a.rd();
  c ? b.$a(a.i) : c = a.Sa();
  c ? b.ka(a.c) : c = a.od();
  var d = a.g;
  if (c) b.la(a.h);else if (c = a.Sb()) {
    if ("/" != d.charAt(0)) if (this.Sa() && !this.Sb()) d = "/" + d;else {
      var f = b.g.lastIndexOf("/");
      -1 != f && (d = b.g.substr(0, f + 1) + d);
    }
    f = d;
    if (".." == f || "." == f) d = "";else if (C(f, "./") || C(f, "/.")) {
      d = 0 == f.lastIndexOf("/", 0);
      f = f.split("/");

      for (var g = [], k = 0; k < f.length;) {
        var m = f[k++];
        "." == m ? d && k == f.length && g.push("") : ".." == m ? ((1 < g.length || 1 == g.length && "" != g[0]) && g.pop(), d && k == f.length && g.push("")) : (g.push(m), d = !0);
      }

      d = g.join("/");
    } else d = f;
  }
  c ? b.Ba(d) : c = a.pd();
  c ? b.Za(a.a.Gb()) : c = a.nd();
  c && b.Ya(a.j);
  return b;
};

e.N = function () {
  return new S(this);
};

e.ma = function (a, b) {
  this.M();
  if (this.b = b ? V(a, !0) : a) this.b = this.b.replace(/:$/, "");
};

e.qd = function () {
  return !!this.b;
};

e.$a = function (a, b) {
  this.M();
  this.i = b ? V(a) : a;
};

e.rd = function () {
  return !!this.i;
};

e.ka = function (a, b) {
  this.M();
  this.c = b ? V(a, !0) : a;
};

e.Sa = function () {
  return !!this.c;
};

e.la = function (a) {
  this.M();

  if (a) {
    a = Number(a);
    if (isNaN(a) || 0 > a) throw Error("Bad port number " + a);
    this.h = a;
  } else this.h = null;
};

e.od = function () {
  return null != this.h;
};

e.Ba = function (a, b) {
  this.M();
  this.g = b ? V(a, !0) : a;
};

e.Sb = function () {
  return !!this.g;
};

e.pd = function () {
  return "" !== this.a.toString();
};

e.Za = function (a, b) {
  this.M();
  a instanceof T ? (this.a = a, this.a.Oc(this.f)) : (b || (a = U(a, Ub)), this.a = new T(a, this.f));
};

e.Ic = function () {
  return this.a.toString();
};

e.m = function (a, b) {
  this.M();
  this.a.set(a, b);
};

e.Aa = function (a, b) {
  this.M();
  r(b) || (b = [String(b)]);
  this.a.lc(a, b);
};

e.Ya = function (a, b) {
  this.M();
  this.j = b ? V(a) : a;
};

e.nd = function () {
  return !!this.j;
};

e.za = function () {
  this.M();
  this.m("zx", Math.floor(2147483648 * Math.random()).toString(36) + Math.abs(Math.floor(2147483648 * Math.random()) ^ x()).toString(36));
  return this;
};

e.M = function () {
  if (this.l) throw Error("Tried to modify a read-only Uri");
};

function Vb(a) {
  return a instanceof S ? a.N() : new S(a, void 0);
}

function Wb(a, b, c, d) {
  var f = new S(null, void 0);
  a && f.ma(a);
  b && f.ka(b);
  c && f.la(c);
  d && f.Ba(d);
  return f;
}

function V(a, b) {
  return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
}

function U(a, b, c) {
  return l(a) ? (a = encodeURI(a).replace(b, Xb), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
}

function Xb(a) {
  a = a.charCodeAt(0);
  return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
}

var Qb = /[#\/\?@]/g,
    Sb = /[#\?:]/g,
    Rb = /[#\?]/g,
    Ub = /[#\?@]/g,
    Tb = /#/g;

function T(a, b) {
  this.b = this.a = null;
  this.c = a || null;
  this.f = !!b;
}

e = T.prototype;

e.V = function () {
  if (!this.a && (this.a = new Q(), this.b = 0, this.c)) {
    var a = this;
    Pb(this.c, function (b, c) {
      a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
    });
  }
};

e.add = function (a, b) {
  this.V();
  this.ia();
  a = this.$(a);
  var c = this.a.get(a);
  c || this.a.set(a, c = []);
  c.push(b);
  this.b += 1;
  return this;
};

e.Ib = function (a) {
  this.V();
  a = this.$(a);
  this.a.Ra(a) && (this.ia(), this.b -= this.a.get(a).length, this.a.Qb(a));
};

e.Hb = function (a) {
  this.V();
  a = this.$(a);
  return this.a.Ra(a);
};

e.forEach = function (a, b) {
  this.V();
  this.a.forEach(function (c, d) {
    A(c, function (c) {
      a.call(b, c, d, this);
    }, this);
  }, this);
};

e.O = function () {
  this.V();

  for (var a = this.a.D(), b = this.a.O(), c = [], d = 0; d < b.length; d++) for (var f = a[d], g = 0; g < f.length; g++) c.push(b[d]);

  return c;
};

e.D = function (a) {
  this.V();
  var b = [];
  if (l(a)) this.Hb(a) && (b = ka(b, this.a.get(this.$(a))));else {
    a = this.a.D();

    for (var c = 0; c < a.length; c++) b = ka(b, a[c]);
  }
  return b;
};

e.set = function (a, b) {
  this.V();
  this.ia();
  a = this.$(a);
  this.Hb(a) && (this.b -= this.a.get(a).length);
  this.a.set(a, [b]);
  this.b += 1;
  return this;
};

e.get = function (a, b) {
  if (!a) return b;
  a = this.D(a);
  return 0 < a.length ? String(a[0]) : b;
};

e.lc = function (a, b) {
  this.Ib(a);
  0 < b.length && (this.ia(), this.a.set(this.$(a), la(b)), this.b += b.length);
};

e.toString = function () {
  if (this.c) return this.c;
  if (!this.a) return "";

  for (var a = [], b = this.a.O(), c = 0; c < b.length; c++) {
    var d = b[c],
        f = encodeURIComponent(String(d));
    d = this.D(d);

    for (var g = 0; g < d.length; g++) {
      var k = f;
      "" !== d[g] && (k += "=" + encodeURIComponent(String(d[g])));
      a.push(k);
    }
  }

  return this.c = a.join("&");
};

e.ia = function () {
  this.c = null;
};

e.Gb = function () {
  var a = new T();
  a.c = this.c;
  this.a && (a.a = this.a.Pb(), a.b = this.b);
  return a;
};

e.$ = function (a) {
  a = String(a);
  this.f && (a = a.toLowerCase());
  return a;
};

e.Oc = function (a) {
  a && !this.f && (this.V(), this.ia(), this.a.forEach(function (a, c) {
    var b = c.toLowerCase();
    c != b && (this.Ib(c), this.lc(b, a));
  }, this));
  this.f = a;
};

function Zb() {}

function $b() {}

y($b, Zb);

function ac(a) {
  this.a = a;
  this.b = this.h = null;
  this.g = !1;
  this.i = null;
  this.c = -1;
  this.l = this.f = null;
}

e = ac.prototype;
e.R = null;

e.Wc = function (a) {
  this.h = a;
};

e.Vc = function (a) {
  this.i = a;
  a = this.a.Cb(this.i);
  M(3);
  var b = this.a.H.b;
  null != b ? (this.f = this.a.Oa(b[0]), this.R = 1, this.rb()) : (a.Aa("MODE", "init"), !this.a.o && this.a.j && a.Aa("X-HTTP-Session-Id", this.a.j), this.b = new P(this, void 0, void 0), this.b.ha(this.h), this.b.bb(a, !1, null), this.R = 0);
};

e.rb = function () {
  var a = this.a.H.a;
  if (null != a) M(4), a ? (M(10), this.a.na(this, !1)) : (M(11), this.a.na(this, !0));else {
    this.b = new P(this, void 0, void 0);
    this.b.ha(this.h);
    a = this.a.Bb(this.f, this.i);
    M(4);
    a.Aa("TYPE", "xmlhttp");
    var b = this.a.j,
        c = this.a.Fa;
    b && c && a.m(b, c);
    this.b.bb(a, !1, this.f);
  }
};

e.sa = function (a) {
  return this.a.sa(a);
};

e.abort = function () {
  this.b && (this.b.cancel(), this.b = null);
  this.c = -1;
};

e.Tb = function () {
  return !1;
};

e.bc = function (a, b) {
  this.c = a.o;
  if (0 == this.R) {
    if (this.Uc(a), b) {
      try {
        var c = this.a.U.a(b);
      } catch (d) {
        this.a.ab(this);
        return;
      }

      this.f = this.a.Oa(c[0]);
    } else this.a.ab(this);
  } else 1 == this.R && (this.g ? M(6) : "11111" == b ? (M(5), this.g = !0, this.Ac() && (this.c = 200, this.b.cancel(), M(11), this.a.na(this, !0))) : (M(7), this.g = !1));
};

e.Va = function () {
  this.c = this.b.o;
  this.b.b ? 0 == this.R ? (this.R = 1, this.rb()) : 1 == this.R && (this.g ? (M(11), this.a.na(this, !0)) : (M(10), this.a.na(this, !1))) : (0 == this.R ? M(8) : 1 == this.R && M(9), this.a.ab(this));
};

e.Uc = function (a) {
  if (!this.a.o && (a = a.a)) {
    var b = a.ga("X-Client-Wire-Protocol");
    this.l = b ? b : null;
    this.a.j && (a = a.ga("X-HTTP-Session-Id")) && this.a.kc(a);
  }
};

e.Da = function () {
  return this.a.Da();
};

e.Pa = function () {
  return this.a.Pa();
};

e.Ac = function () {
  return !E || 10 <= Number(Ia);
};

function bc() {
  this.a = this.b = null;
}

function cc() {
  this.a = new Q();
}

function dc(a) {
  var b = typeof a;
  return "object" == b && a || "function" == b ? "o" + (a[u] || (a[u] = ++ba)) : b.charAt(0) + a;
}

e = cc.prototype;

e.add = function (a) {
  this.a.set(dc(a), a);
};

e.ed = function (a) {
  this.a.Qb(dc(a));
};

e.jd = function () {
  this.a.gd();
};

e.Rb = function () {
  return this.a.hd();
};

e.Ob = function (a) {
  return this.a.Ra(dc(a));
};

e.D = function () {
  return this.a.D();
};

function ec(a, b) {
  this.a = a;
  this.b = b;
}

function fc(a) {
  this.g = a || gc;
  h.PerformanceNavigationTiming ? (a = h.performance.getEntriesByType("navigation"), a = 0 < a.length && ("hq" == a[0].nextHopProtocol || "h2" == a[0].nextHopProtocol)) : a = !!(h.Ja && h.Ja.Vb && h.Ja.Vb() && h.Ja.Vb().te);
  this.f = a ? this.g : 1;
  this.a = null;
  1 < this.f && (this.a = new cc());
  this.b = null;
  this.c = [];
}

var gc = 10;
e = fc.prototype;

e.kb = function (a) {
  !this.a && (C(a, "spdy") || C(a, "quic") || C(a, "h2")) && (this.f = this.g, this.a = new cc(), this.b && (this.Ha(this.b), this.b = null));
};

e.Ub = function () {
  return this.b ? !0 : this.a ? this.a.a.c >= this.f : !1;
};

e.Mc = function () {
  return this.b ? 1 : this.a ? this.a.a.c : 0;
};

e.Ta = function (a) {
  return this.b ? this.b == a : this.a ? this.a.Ob(a) : !1;
};

e.Ha = function (a) {
  this.a ? this.a.add(a) : this.b = a;
};

e.gc = function (a) {
  this.b && this.b == a ? this.b = null : this.a && this.a.Ob(a) && this.a.ed(a);
};

e.cancel = function () {
  this.c = this.Xb();
  this.b ? (this.b.cancel(), this.b = null) : this.a && !this.a.Rb() && (A(this.a.D(), function (a) {
    a.cancel();
  }), this.a.jd());
};

e.Xb = function () {
  if (null != this.b) return this.c.concat(this.b.j);

  if (null != this.a && !this.a.Rb()) {
    var a = this.c;
    A(this.a.D(), function (b) {
      a = a.concat(b.j);
    });
    return a;
  }

  return la(this.c);
};

e.wc = function (a) {
  this.c = this.c.concat(a);
};

e.Bc = function () {
  this.c.length = 0;
};

function hc() {
  this.b = this.a = void 0;
}

hc.prototype.stringify = function (a) {
  return h.JSON.stringify(a, this.a);
};

hc.prototype.parse = function (a) {
  return h.JSON.parse(a, this.b);
};

function ic() {
  this.f = new hc();
}

ic.prototype.b = function (a, b, c) {
  var d = c || "";

  try {
    Nb(a, function (a, c) {
      var f = a;
      t(a) && (f = hb(a));
      b.push(d + c + "=" + encodeURIComponent(f));
    });
  } catch (f) {
    throw b.push(d + "type=" + encodeURIComponent("_badmap")), f;
  }
};

ic.prototype.c = function (a, b, c) {
  for (var d = -1;;) {
    var f = ["count=" + b];
    -1 == d ? 0 < b ? (d = a[0].a, f.push("ofs=" + d)) : d = 0 : f.push("ofs=" + d);

    for (var g = !0, k = 0; k < b; k++) {
      var m = a[k].a,
          Gb = a[k].b;
      m -= d;
      if (0 > m) d = Math.max(0, a[k].a - 100), g = !1;else try {
        this.b(Gb, f, "req" + m + "_");
      } catch (Ac) {
        c && c(Gb);
      }
    }

    if (g) return f.join("&");
  }
};

ic.prototype.a = function (a) {
  return this.f.parse(a);
};

function jc(a, b) {
  var c = new wb(),
      d = new Image();
  d.onload = w(kc, c, d, "TestLoadImage: loaded", !0, b);
  d.onerror = w(kc, c, d, "TestLoadImage: error", !1, b);
  d.onabort = w(kc, c, d, "TestLoadImage: abort", !1, b);
  d.ontimeout = w(kc, c, d, "TestLoadImage: timeout", !1, b);
  h.setTimeout(function () {
    if (d.ontimeout) d.ontimeout();
  }, 1E4);
  d.src = a;
}

function kc(a, b, c, d, f) {
  try {
    b.onload = null, b.onerror = null, b.onabort = null, b.ontimeout = null, f(d);
  } catch (g) {}
}

var lc = h.JSON.parse;

function X(a) {
  I.call(this);
  this.headers = new Q();
  this.l = a || null;
  this.b = !1;
  this.v = this.a = null;
  this.C = "";
  this.h = 0;
  this.f = "";
  this.g = this.B = this.o = this.A = !1;
  this.u = 0;
  this.s = null;
  this.J = mc;
  this.H = this.L = this.I = !1;
}

y(X, I);
var mc = "",
    nc = /^https?$/i,
    oc = ["POST", "PUT"];
e = X.prototype;

e.Sd = function (a) {
  this.I = a;
};

e.xa = function (a, b, c, d) {
  if (this.a) throw Error("[goog.net.XhrIo] Object is active with another request=" + this.C + "; newUri=" + a);
  b = b ? b.toUpperCase() : "GET";
  this.C = a;
  this.f = "";
  this.h = 0;
  this.A = !1;
  this.b = !0;
  this.a = this.Ec();
  this.v = this.l ? this.l.c() : Hb.c();
  this.a.onreadystatechange = v(this.ac, this);
  this.L && "onprogress" in this.a && (this.a.onprogress = v(function (a) {
    this.Zb(a, !0);
  }, this), this.a.upload && (this.a.upload.onprogress = v(this.Zb, this)));

  try {
    this.B = !0, this.a.open(b, String(a), !0), this.B = !1;
  } catch (g) {
    this.Ab(g);
    return;
  }

  a = c || "";
  var f = this.headers.Pb();
  d && Nb(d, function (a, b) {
    f.set(b, a);
  });
  d = ia(f.O());
  c = h.FormData && a instanceof h.FormData;
  !(0 <= ha(oc, b)) || d || c || f.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
  f.forEach(function (a, b) {
    this.a.setRequestHeader(b, a);
  }, this);
  this.J && (this.a.responseType = this.J);
  "withCredentials" in this.a && this.a.withCredentials !== this.I && (this.a.withCredentials = this.I);

  try {
    this.sb(), 0 < this.u && ((this.H = pc(this.a)) ? (this.a.timeout = this.u, this.a.ontimeout = v(this.Nb, this)) : this.s = sb(this.Nb, this.u, this)), this.o = !0, this.a.send(a), this.o = !1;
  } catch (g) {
    this.Ab(g);
  }
};

function pc(a) {
  return E && Ha(9) && "number" == typeof a.timeout && void 0 !== a.ontimeout;
}

function ja(a) {
  return "content-type" == a.toLowerCase();
}

e.Ec = function () {
  return this.l ? this.l.b() : Hb.b();
};

e.Nb = function () {
  "undefined" != typeof goog && this.a && (this.f = "Timed out after " + this.u + "ms, aborting", this.h = 8, this.dispatchEvent("timeout"), this.abort(8));
};

e.Ab = function (a) {
  this.b = !1;
  this.a && (this.g = !0, this.a.abort(), this.g = !1);
  this.f = a;
  this.h = 5;
  this.xb();
  this.qa();
};

e.xb = function () {
  this.A || (this.A = !0, this.dispatchEvent("complete"), this.dispatchEvent("error"));
};

e.abort = function (a) {
  this.a && this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1, this.h = a || 7, this.dispatchEvent("complete"), this.dispatchEvent("abort"), this.qa());
};

e.G = function () {
  this.a && (this.b && (this.b = !1, this.g = !0, this.a.abort(), this.g = !1), this.qa(!0));
  X.S.G.call(this);
};

e.ac = function () {
  this.i || (this.B || this.o || this.g ? this.$b() : this.Bd());
};

e.Bd = function () {
  this.$b();
};

e.$b = function () {
  if (this.b && "undefined" != typeof goog && (!this.v[1] || 4 != this.W() || 2 != this.aa())) if (this.o && 4 == this.W()) sb(this.ac, 0, this);else if (this.dispatchEvent("readystatechange"), this.td()) {
    this.b = !1;

    try {
      this.vd() ? (this.dispatchEvent("complete"), this.dispatchEvent("success")) : (this.h = 6, this.f = this.Fb() + " [" + this.aa() + "]", this.xb());
    } finally {
      this.qa();
    }
  }
};

e.Zb = function (a, b) {
  this.dispatchEvent(qc(a, "progress"));
  this.dispatchEvent(qc(a, b ? "downloadprogress" : "uploadprogress"));
};

function qc(a, b) {
  return {
    type: b,
    lengthComputable: a.lengthComputable,
    loaded: a.loaded,
    total: a.total
  };
}

e.qa = function (a) {
  if (this.a) {
    this.sb();
    var b = this.a,
        c = this.v[0] ? p : null;
    this.v = this.a = null;
    a || this.dispatchEvent("ready");

    try {
      b.onreadystatechange = c;
    } catch (d) {}
  }
};

e.sb = function () {
  this.a && this.H && (this.a.ontimeout = null);
  this.s && (h.clearTimeout(this.s), this.s = null);
};

e.td = function () {
  return 4 == this.W();
};

e.vd = function () {
  var a = this.aa();

  a: switch (a) {
    case 200:
    case 201:
    case 202:
    case 204:
    case 206:
    case 304:
    case 1223:
      var b = !0;
      break a;

    default:
      b = !1;
  }

  return b || 0 === a && !this.ud();
};

e.ud = function () {
  var a = String(this.C).match(Ob)[1] || null;
  !a && h.self && h.self.location && (a = h.self.location.protocol, a = a.substr(0, a.length - 1));
  return nc.test(a ? a.toLowerCase() : "");
};

e.W = function () {
  return this.a ? this.a.readyState : 0;
};

e.aa = function () {
  try {
    return 2 < this.W() ? this.a.status : -1;
  } catch (a) {
    return -1;
  }
};

e.Fb = function () {
  try {
    return 2 < this.W() ? this.a.statusText : "";
  } catch (a) {
    return "";
  }
};

e.va = function () {
  try {
    return this.a ? this.a.responseText : "";
  } catch (a) {
    return "";
  }
};

e.Nc = function (a) {
  if (this.a) {
    var b = this.a.responseText;
    a && 0 == b.indexOf(a) && (b = b.substring(a.length));
    return lc(b);
  }
};

e.ga = function (a) {
  return this.a ? this.a.getResponseHeader(a) : null;
};

e.Db = function () {
  return this.h;
};

e.dd = function () {
  return l(this.f) ? this.f : String(this.f);
};

function rc(a) {
  var b = "";
  qa(a, function (a, d) {
    b += d;
    b += ":";
    b += a;
    b += "\r\n";
  });
  return b;
}

function sc(a, b, c) {
  a: {
    for (d in c) {
      var d = !1;
      break a;
    }

    d = !0;
  }

  if (d) return a;
  c = rc(c);

  if (l(a)) {
    b = encodeURIComponent(String(b));
    c = null != c ? "=" + encodeURIComponent(String(c)) : "";

    if (b += c) {
      c = a.indexOf("#");
      0 > c && (c = a.length);
      d = a.indexOf("?");

      if (0 > d || d > c) {
        d = c;
        var f = "";
      } else f = a.substring(d + 1, c);

      a = [a.substr(0, d), f, a.substr(c)];
      c = a[1];
      a[1] = b ? c ? c + "&" + b : b : c;
      a = a[0] + (a[1] ? "?" + a[1] : "") + a[2];
    }

    return a;
  }

  a.m(b, c);
  return a;
}

function tc(a) {
  this.gb = 22;
  this.g = [];
  this.H = new bc();
  this.da = this.fb = this.C = this.Ea = this.a = this.Fa = this.j = this.ca = this.f = this.J = this.h = null;
  this.sc = !0;
  this.zc = this.L = 0;
  this.uc = !!n("internalChannelParams.failFast", a);
  this.Ga = this.v = this.s = this.l = this.i = this.b = null;
  this.eb = !0;
  this.B = this.jb = this.K = -1;
  this.Y = this.u = this.A = 0;
  this.tc = n("internalChannelParams.baseRetryDelayMs", a) || 5E3;
  this.Fc = n("internalChannelParams.retryDelaySeedMs", a) || 1E4;
  this.pc = n("internalChannelParams.forwardChannelMaxRetries", a) || 2;
  this.ib = n("internalChannelParams.forwardChannelRequestTimeoutMs", a) || 2E4;
  this.xc = a && a.ue || void 0;
  this.F = void 0;
  this.vc = 0;
  this.T = a && a.supportsCrossDomainXhr || !1;
  this.I = "";
  this.c = new fc(a && a.concurrentRequestLimit);
  this.U = new ic();
  this.o = a && void 0 !== a.backgroundChannelTest ? a.backgroundChannelTest : !0;
  (this.hb = a && a.fastHandshake || !1) && !this.o && (this.o = !0);
  a && a.se && (this.eb = !1);
}

e = tc.prototype;
e.qb = 8;
e.w = 1;

e.bd = function (a, b, c) {
  M(0);
  this.Ea = b;
  this.ca = c || {};
  this.o && (this.H.b = [], this.H.a = !1);
  this.Dc(a);
};

e.Qa = function () {
  this.lb();

  if (3 == this.w) {
    var a = this.L++,
        b = this.C.N();
    b.m("SID", this.I);
    b.m("RID", a);
    b.m("TYPE", "terminate");
    this.ea(b);
    new P(this, a, void 0).Ld(b);
  }

  this.Yb();
};

e.Dc = function (a) {
  this.v = new ac(this);
  null === this.f && this.v.Wc(this.h);
  var b = a;
  this.f && this.h && (b = sc(a, this.f, this.h));
  this.v.Vc(b);
};

e.Cc = function () {
  this.C = this.Cb(this.Ea);
  this.Ma();
};

e.lb = function () {
  this.v && (this.v.abort(), this.v = null);
  this.a && (this.a.cancel(), this.a = null);
  this.l && (h.clearTimeout(this.l), this.l = null);
  this.ra();
  this.c.cancel();
  this.i && (h.clearTimeout(this.i), this.i = null);
};

e.cd = function (a) {
  this.h = a;
};

e.Pd = function (a) {
  this.J = a;
};

e.Nd = function (a) {
  this.f = a;
};

e.Od = function (a) {
  this.j = a;
};

e.kc = function (a) {
  this.Fa = a;
};

e.Rd = function () {
  this.T = !0;
};

e.jc = function (a) {
  this.b = a;
};

e.sd = function () {
  return !this.Ga;
};

e.Xa = function (a) {
  this.g.push(new ec(this.zc++, a));
  3 == this.w && this.Ma();
};

e.Jc = function () {
  return this.uc ? 0 : this.pc;
};

e.Tb = function () {
  return 0 == this.w;
};

e.Ma = function () {
  this.c.Ub() || this.i || (this.i = N(v(this.dc, this), 0), this.A = 0);
};

e.xd = function (a) {
  if (this.c.Mc() >= this.c.f - (this.i ? 1 : 0)) return !1;
  if (this.i) return this.g = a.j.concat(this.g), !0;
  if (1 == this.w || 2 == this.w || this.A >= this.Jc()) return !1;
  this.i = N(v(this.dc, this, a), this.Eb(this.A));
  this.A++;
  return !0;
};

e.dc = function (a) {
  this.i = null;
  this.Xd(a);
};

e.Xd = function (a) {
  1 == this.w ? a || (this.Fd(), this.w = 2) : 3 == this.w && (a ? this.Wb(a) : 0 == this.g.length || this.c.Ub() || this.Wb());
};

e.Fd = function () {
  this.L = Math.floor(1E5 * Math.random());
  var a = this.L++,
      b = new P(this, a, void 0),
      c = this.h;
  this.J && (c ? (c = ra(c), ta(c, this.J)) : c = this.J);
  null === this.f && b.ha(c);
  var d = this.wb(b),
      f = this.C.N();
  f.m("RID", a);
  0 < this.gb && f.m("CVER", this.gb);
  this.o && this.j && f.m("X-HTTP-Session-Id", this.j);
  this.ea(f);
  this.f && c && sc(f, this.f, c);
  this.c.Ha(b);
  this.hb ? (f.m("$req", d), f.m("SID", "null"), b.Md(), b.cb(f, null)) : b.cb(f, d);
};

e.Wb = function (a) {
  var b;
  a ? b = a.da : b = this.L++;
  var c = this.C.N();
  c.m("SID", this.I);
  c.m("RID", b);
  c.m("AID", this.K);
  this.ea(c);
  this.f && this.h && sc(c, this.f, this.h);
  b = new P(this, b, this.A + 1);
  null === this.f && b.ha(this.h);
  a && this.Jd(a);
  a = this.wb(b);
  b.setTimeout(Math.round(.5 * this.ib) + Math.round(.5 * this.ib * Math.random()));
  this.c.Ha(b);
  b.cb(c, a);
};

e.ea = function (a) {
  this.b && Nb({}, function (b, c) {
    a.m(c, b);
  });
};

e.wb = function (a) {
  var b = Math.min(this.g.length, 1E3),
      c = this.b ? v(this.b.yc, this.b, this) : null;
  c = this.U.c(this.g, b, c);
  a.Qd(this.g.splice(0, b));
  return c;
};

e.Jd = function (a) {
  this.g = a.j.concat(this.g);
};

e.zb = function () {
  if (!this.a && !this.l) {
    this.Y = 1;
    var a = this.cc;
    mb || nb();
    pb || (mb(), pb = !0);
    qb.add(a, this);
    this.u = 0;
  }
};

e.Ua = function () {
  if (this.a || this.l || 3 <= this.u) return !1;
  this.Y++;
  this.l = N(v(this.cc, this), this.Eb(this.u));
  this.u++;
  return !0;
};

e.cc = function () {
  this.l = null;
  this.Vd();
};

e.Vd = function () {
  this.a = new P(this, "rpc", this.Y);
  null === this.f && this.a.ha(this.h);
  this.a.Xc(this.vc);
  var a = this.fb.N();
  a.m("RID", "rpc");
  a.m("SID", this.I);
  a.m("CI", this.Ga ? "0" : "1");
  a.m("AID", this.K);
  this.ea(a);
  a.m("TYPE", "xmlhttp");
  this.f && this.h && sc(a, this.f, this.h);
  this.F && this.a.setTimeout(this.F);
  this.a.bb(a, !0, this.da);
};

e.na = function (a, b) {
  var c = a.l;
  c && this.c.kb(c);
  this.Ga = this.eb && b;
  this.B = a.c;
  this.Cc();
};

e.ab = function (a) {
  this.B = a.c;
  this.X(2);
};

e.bc = function (a, b) {
  if (0 != this.w && (this.a == a || this.c.Ta(a))) if (this.B = a.o, !a.s && this.c.Ta(a) && 3 == this.w) {
    try {
      var c = this.U.a(b);
    } catch (d) {
      c = null;
    }

    r(c) && 3 == c.length ? this.ld(c, a) : this.X(11);
  } else (a.s || this.a == a) && this.ra(), B(b) || (c = this.U.a(b), this.Ad(c, a));
};

e.ld = function (a, b) {
  0 == a[0] ? this.kd(b) : (this.jb = a[1], 0 < this.jb - this.K && this.Ud(a[2]) && !this.s && (this.s = N(v(this.yd, this), 6E3)));
};

e.kd = function (a) {
  if (!this.l) {
    if (this.a) if (this.a.u + 3E3 < a.u) this.ra(), this.a.cancel(), this.a = null;else return;
    this.Ua();
    M(18);
  }
};

e.Ud = function (a) {
  return 37500 > a && !this.sd() && 0 == this.u;
};

e.Oa = function (a) {
  return this.sc ? this.b ? this.b.$c(a) : a : null;
};

e.yd = function () {
  null != this.s && (this.s = null, this.a.cancel(), this.a = null, this.Ua(), M(19));
};

e.ra = function () {
  null != this.s && (h.clearTimeout(this.s), this.s = null);
};

e.Va = function (a) {
  var b = null;

  if (this.a == a) {
    this.ra();
    this.a = null;
    var c = 2;
  } else if (this.c.Ta(a)) b = a.j, this.c.gc(a), c = 1;else return;

  this.B = a.o;
  if (0 != this.w) if (a.b) 1 == c ? (c = x() - a.u, K.dispatchEvent(new zb(K, a.i ? a.i.length : 0, c, this.A)), this.Ma()) : this.zb();else {
    var d = a.c;
    if (3 == d || 0 == d && 0 < this.B || !(1 == c && this.xd(a) || 2 == c && this.Ua())) switch (b && 0 < b.length && this.c.wc(b), d) {
      case 1:
        this.X(5);
        break;

      case 4:
        this.X(10);
        break;

      case 3:
        this.X(6);
        break;

      default:
        this.X(2);
    }
  }
};

e.Eb = function (a) {
  var b = this.tc + Math.floor(Math.random() * this.Fc);
  this.Pa() || (b *= 2);
  return b * a;
};

e.ad = function (a) {
  if (this.o && (a = a.a)) {
    var b = a.ga("X-Client-Wire-Protocol");
    b && this.c.kb(b);
    this.j && (a = a.ga("X-HTTP-Session-Id")) && (this.kc(a), this.C.m(this.j, a));
  }
};

e.Ad = function (a, b) {
  for (var c = this.b && this.b.Ia ? [] : null, d = 0; d < a.length; d++) {
    var f = a[d];
    this.K = f[0];
    f = f[1];
    if (2 == this.w) {
      if ("c" == f[0]) {
        this.I = f[1];
        this.da = this.Oa(f[2]);
        var g = f[3];
        null != g && (this.qb = g);
        f = f[5];
        null != f && "number" == typeof f && 0 < f && (this.F = 1.5 * f);
        this.ad(b);
        this.w = 3;
        this.b && this.b.pb();
        this.Wd(b);
      } else "stop" != f[0] && "close" != f[0] || this.X(7);
    } else 3 == this.w && ("stop" == f[0] || "close" == f[0] ? (c && 0 != c.length && (this.b.Ia(this, c), c.length = 0), "stop" == f[0] ? this.X(7) : this.Qa()) : "noop" != f[0] && (c ? c.push(f) : this.b && this.b.ob(f)), this.u = 0);
  }

  c && 0 != c.length && this.b.Ia(this, c);
};

e.Wd = function (a) {
  this.fb = this.Bb(this.da, this.Ea);
  a.s ? (this.c.gc(a), a.Kd(this.F), this.a = a) : this.zb();
};

e.X = function (a) {
  if (2 == a) {
    var b = null;
    this.b && (b = null);
    var c = v(this.Zd, this);
    b || (b = new S("//www.google.com/images/cleardot.gif"), h.location && "http" == h.location.protocol || b.ma("https"), b.za());
    jc(b.toString(), c);
  } else M(2);

  this.zd(a);
};

e.Zd = function (a) {
  a ? M(2) : M(1);
};

e.zd = function (a) {
  this.w = 0;
  this.b && this.b.nb(a);
  this.Yb();
  this.lb();
};

e.Yb = function () {
  this.w = 0;
  this.B = -1;

  if (this.b) {
    if (0 != this.c.Xb().length || 0 != this.g.length) this.c.Bc(), la(this.g), this.g.length = 0;
    this.b.mb();
  }
};

e.Cb = function (a) {
  return this.ub(null, a);
};

e.Bb = function (a, b) {
  return this.ub(this.Da() ? a : null, b);
};

e.ub = function (a, b) {
  var c = Vb(b);
  if ("" != c.c) a && c.ka(a + "." + c.c), c.la(c.h);else {
    var d = h.location,
        f;
    a ? f = a + "." + d.hostname : f = d.hostname;
    c = Wb(d.protocol, f, +d.port, b);
  }
  this.ca && qa(this.ca, function (a, b) {
    c.m(b, a);
  });
  a = this.j;
  b = this.Fa;
  a && b && c.m(a, b);
  c.m("VER", this.qb);
  this.ea(c);
  return c;
};

e.sa = function (a) {
  if (a && !this.T) throw Error("Can't create secondary domain capable XhrIo object.");
  a = new X(this.xc);
  a.Sd(this.T);
  return a;
};

e.Pa = function () {
  return !!this.b && !0;
};

e.Da = function () {
  return this.T;
};

function uc() {}

e = uc.prototype;
e.Ia = null;

e.pb = function () {};

e.ob = function () {};

e.nb = function () {};

e.mb = function () {};

e.yc = function () {};

e.$c = function (a) {
  return a;
};

function vc(a) {
  for (var b = arguments[0], c = 1; c < arguments.length; c++) {
    var d = arguments[c];
    if (0 == d.lastIndexOf("/", 0)) b = d;else {
      var f;
      (f = "" == b) || (f = b.length - 1, f = 0 <= f && b.indexOf("/", f) == f);
      f ? b += d : b += "/" + d;
    }
  }

  return b;
}

function wc() {
  if (E && !(10 <= Number(Ia))) throw Error("Environmental error: no available transport.");
}

wc.prototype.a = function (a, b) {
  return new Y(a, b);
};

function Y(a, b) {
  I.call(this);
  this.a = new tc(b);
  this.g = a;
  this.o = b && b.testUrl ? b.testUrl : vc(this.g, "test");
  this.b = b && b.messageUrlParams || null;
  a = b && b.messageHeaders || null;
  b && b.clientProtocolHeaderRequired && (a ? a["X-Client-Protocol"] = "webchannel" : a = {
    "X-Client-Protocol": "webchannel"
  });
  this.a.cd(a);
  a = b && b.initMessageHeaders || null;
  b && b.messageContentType && (a ? a["X-WebChannel-Content-Type"] = b.messageContentType : a = {
    "X-WebChannel-Content-Type": b.messageContentType
  });
  b && b.tb && (a ? a["X-WebChannel-Client-Profile"] = b.tb : a = {
    "X-WebChannel-Client-Profile": b.tb
  });
  this.a.Pd(a);
  (a = b && b.httpHeadersOverwriteParam) && !B(a) && this.a.Nd(a);
  this.l = b && b.supportsCrossDomainXhr || !1;
  this.h = b && b.sendRawJson || !1;
  (b = b && b.httpSessionIdParam) && !B(b) && (this.a.Od(b), a = this.b, null !== a && b in a && (a = this.b, b in a && delete a[b]));
  this.f = new Z(this);
}

y(Y, I);
e = Y.prototype;

e.addEventListener = function (a, b, c, d) {
  Y.S.addEventListener.call(this, a, b, c, d);
};

e.removeEventListener = function (a, b, c, d) {
  Y.S.removeEventListener.call(this, a, b, c, d);
};

e.Yc = function () {
  this.a.jc(this.f);
  this.l && this.a.Rd();
  this.a.bd(this.o, this.g, this.b || void 0);
};

e.close = function () {
  this.a.Qa();
};

e.Zc = function (a) {
  if (l(a)) {
    var b = {};
    b.__data__ = a;
    this.a.Xa(b);
  } else this.h ? (b = {}, b.__data__ = hb(a), this.a.Xa(b)) : this.a.Xa(a);
};

e.G = function () {
  this.a.jc(null);
  delete this.f;
  this.a.Qa();
  delete this.a;
  Y.S.G.call(this);
};

function xc(a) {
  Eb.call(this);
  var b = a.__sm__;

  if (b) {
    a: {
      for (var c in b) {
        a = c;
        break a;
      }

      a = void 0;
    }

    (this.f = a) ? (a = this.f, this.data = null !== b && a in b ? b[a] : void 0) : this.data = b;
  } else this.data = a;
}

y(xc, Eb);

function yc() {
  Fb.call(this);
  this.status = 1;
}

y(yc, Fb);

function Z(a) {
  this.a = a;
}

y(Z, uc);

Z.prototype.pb = function () {
  this.a.dispatchEvent("a");
};

Z.prototype.ob = function (a) {
  this.a.dispatchEvent(new xc(a));
};

Z.prototype.nb = function (a) {
  this.a.dispatchEvent(new yc(a));
};

Z.prototype.mb = function () {
  this.a.dispatchEvent("b");
};

var zc = w(function (a, b) {
  function c() {}

  c.prototype = a.prototype;
  var d = new c();
  a.apply(d, Array.prototype.slice.call(arguments, 1));
  return d;
}, wc);
/*
Copyright 2017 Google Inc.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

wc.prototype.createWebChannel = wc.prototype.a;
Y.prototype.send = Y.prototype.Zc;
Y.prototype.open = Y.prototype.Yc;
Y.prototype.close = Y.prototype.close;
Ab.NO_ERROR = 0;
Ab.TIMEOUT = 8;
Ab.HTTP_ERROR = 6;
Bb.COMPLETE = "complete";
Db.EventType = O;
O.OPEN = "a";
O.CLOSE = "b";
O.ERROR = "c";
O.MESSAGE = "d";
I.prototype.listen = I.prototype.Lb;
X.prototype.listenOnce = X.prototype.Mb;
X.prototype.getLastError = X.prototype.dd;
X.prototype.getLastErrorCode = X.prototype.Db;
X.prototype.getStatus = X.prototype.aa;
X.prototype.getStatusText = X.prototype.Fb;
X.prototype.getResponseJson = X.prototype.Nc;
X.prototype.getResponseText = X.prototype.va;
X.prototype.send = X.prototype.xa;
var tmp = {
  createWebChannelTransport: zc,
  ErrorCode: Ab,
  EventType: Bb,
  WebChannel: Db,
  XhrIo: X
};
var tmp_1 = tmp.createWebChannelTransport;
exports.createWebChannelTransport = tmp_1;
var tmp_2 = tmp.ErrorCode;
exports.ErrorCode = tmp_2;
var tmp_3 = tmp.EventType;
exports.EventType = tmp_3;
var tmp_4 = tmp.WebChannel;
exports.WebChannel = tmp_4;
var tmp_5 = tmp.XhrIo;
exports.XhrIo = tmp_5;
var _default = tmp;
exports.default = _default;
},{}],"node_modules/@firebase/firestore/dist/index.cjs.js":[function(require,module,exports) {
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

function _interopDefault(ex) {
  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;
}

var firebase = _interopDefault(require('@firebase/app'));

var logger = require('@firebase/logger');

var tslib_1 = require('tslib');

var webchannelWrapper = require('@firebase/webchannel-wrapper');

var util = require('@firebase/util');
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** The semver (www.semver.org) version of the SDK. */


var SDK_VERSION = firebase.SDK_VERSION;
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var logClient = new logger.Logger('@firebase/firestore');
var LogLevel;

(function (LogLevel) {
  LogLevel[LogLevel["DEBUG"] = 0] = "DEBUG";
  LogLevel[LogLevel["ERROR"] = 1] = "ERROR";
  LogLevel[LogLevel["SILENT"] = 2] = "SILENT";
})(LogLevel || (LogLevel = {})); // Helper methods are needed because variables can't be exported as read/write


function getLogLevel() {
  if (logClient.logLevel === logger.LogLevel.DEBUG) {
    return LogLevel.DEBUG;
  } else if (logClient.logLevel === logger.LogLevel.SILENT) {
    return LogLevel.SILENT;
  } else {
    return LogLevel.ERROR;
  }
}

function setLogLevel(newLevel) {
  /**
   * Map the new log level to the associated Firebase Log Level
   */
  switch (newLevel) {
    case LogLevel.DEBUG:
      logClient.logLevel = logger.LogLevel.DEBUG;
      break;

    case LogLevel.ERROR:
      logClient.logLevel = logger.LogLevel.ERROR;
      break;

    case LogLevel.SILENT:
      logClient.logLevel = logger.LogLevel.SILENT;
      break;

    default:
      logClient.error("Firestore (" + SDK_VERSION + "): Invalid value passed to `setLogLevel`");
  }
}

function debug(tag, msg) {
  var obj = [];

  for (var _i = 2; _i < arguments.length; _i++) {
    obj[_i - 2] = arguments[_i];
  }

  if (logClient.logLevel <= logger.LogLevel.DEBUG) {
    var args = obj.map(argToString);
    logClient.debug.apply(logClient, ["Firestore (" + SDK_VERSION + ") [" + tag + "]: " + msg].concat(args));
  }
}

function error(msg) {
  var obj = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    obj[_i - 1] = arguments[_i];
  }

  if (logClient.logLevel <= logger.LogLevel.ERROR) {
    var args = obj.map(argToString);
    logClient.error.apply(logClient, ["Firestore (" + SDK_VERSION + "): " + msg].concat(args));
  }
}
/**
 * Converts an additional log parameter to a string representation.
 */


function argToString(obj) {
  if (typeof obj === 'string') {
    return obj;
  } else {
    var platform = PlatformSupport.getPlatform();

    try {
      return platform.formatJSON(obj);
    } catch (e) {
      // Converting to JSON failed, just log the object directly
      return obj;
    }
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Unconditionally fails, throwing an Error with the given message.
 *
 * Returns any so it can be used in expressions:
 * @example
 * let futureVar = fail('not implemented yet');
 */


function fail(failure) {
  // Log the failure in addition to throw an exception, just in case the
  // exception is swallowed.
  var message = "FIRESTORE (" + SDK_VERSION + ") INTERNAL ASSERTION FAILED: " + failure;
  error(message); // NOTE: We don't use FirestoreError here because these are internal failures
  // that cannot be handled by the user. (Also it would create a circular
  // dependency between the error and assert modules which doesn't work.)

  throw new Error(message);
}
/**
 * Fails if the given assertion condition is false, throwing an Error with the
 * given message if it did.
 */


function assert(assertion, message) {
  if (!assertion) {
    fail(message);
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides singleton helpers where setup code can inject a platform at runtime.
 * setPlatform needs to be set before Firestore is used and must be set exactly
 * once.
 */


var PlatformSupport =
/** @class */
function () {
  function PlatformSupport() {}

  PlatformSupport.setPlatform = function (platform) {
    if (PlatformSupport.platform) {
      fail('Platform already defined');
    }

    PlatformSupport.platform = platform;
  };

  PlatformSupport.getPlatform = function () {
    if (!PlatformSupport.platform) {
      fail('Platform not set');
    }

    return PlatformSupport.platform;
  };

  return PlatformSupport;
}();
/**
 * Returns the representation of an empty "proto" byte string for the
 * platform.
 */


function emptyByteString() {
  return PlatformSupport.getPlatform().emptyByteString;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// TODO(mcg): Change to a string enum once we've upgraded to typescript 2.4.
//  tslint:disable-next-line:variable-name Intended to look like a TS 2.4 enum


var Code = {
  // Causes are copied from:
  // https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h

  /** Not an error; returned on success. */
  OK: 'ok',

  /** The operation was cancelled (typically by the caller). */
  CANCELLED: 'cancelled',

  /** Unknown error or an error from a different error domain. */
  UNKNOWN: 'unknown',

  /**
   * Client specified an invalid argument. Note that this differs from
   * FAILED_PRECONDITION. INVALID_ARGUMENT indicates arguments that are
   * problematic regardless of the state of the system (e.g., a malformed file
   * name).
   */
  INVALID_ARGUMENT: 'invalid-argument',

  /**
   * Deadline expired before operation could complete. For operations that
   * change the state of the system, this error may be returned even if the
   * operation has completed successfully. For example, a successful response
   * from a server could have been delayed long enough for the deadline to
   * expire.
   */
  DEADLINE_EXCEEDED: 'deadline-exceeded',

  /** Some requested entity (e.g., file or directory) was not found. */
  NOT_FOUND: 'not-found',

  /**
   * Some entity that we attempted to create (e.g., file or directory) already
   * exists.
   */
  ALREADY_EXISTS: 'already-exists',

  /**
   * The caller does not have permission to execute the specified operation.
   * PERMISSION_DENIED must not be used for rejections caused by exhausting
   * some resource (use RESOURCE_EXHAUSTED instead for those errors).
   * PERMISSION_DENIED must not be used if the caller can not be identified
   * (use UNAUTHENTICATED instead for those errors).
   */
  PERMISSION_DENIED: 'permission-denied',

  /**
   * The request does not have valid authentication credentials for the
   * operation.
   */
  UNAUTHENTICATED: 'unauthenticated',

  /**
   * Some resource has been exhausted, perhaps a per-user quota, or perhaps the
   * entire file system is out of space.
   */
  RESOURCE_EXHAUSTED: 'resource-exhausted',

  /**
   * Operation was rejected because the system is not in a state required for
   * the operation's execution. For example, directory to be deleted may be
   * non-empty, an rmdir operation is applied to a non-directory, etc.
   *
   * A litmus test that may help a service implementor in deciding
   * between FAILED_PRECONDITION, ABORTED, and UNAVAILABLE:
   *  (a) Use UNAVAILABLE if the client can retry just the failing call.
   *  (b) Use ABORTED if the client should retry at a higher-level
   *      (e.g., restarting a read-modify-write sequence).
   *  (c) Use FAILED_PRECONDITION if the client should not retry until
   *      the system state has been explicitly fixed. E.g., if an "rmdir"
   *      fails because the directory is non-empty, FAILED_PRECONDITION
   *      should be returned since the client should not retry unless
   *      they have first fixed up the directory by deleting files from it.
   *  (d) Use FAILED_PRECONDITION if the client performs conditional
   *      REST Get/Update/Delete on a resource and the resource on the
   *      server does not match the condition. E.g., conflicting
   *      read-modify-write on the same resource.
   */
  FAILED_PRECONDITION: 'failed-precondition',

  /**
   * The operation was aborted, typically due to a concurrency issue like
   * sequencer check failures, transaction aborts, etc.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */
  ABORTED: 'aborted',

  /**
   * Operation was attempted past the valid range. E.g., seeking or reading
   * past end of file.
   *
   * Unlike INVALID_ARGUMENT, this error indicates a problem that may be fixed
   * if the system state changes. For example, a 32-bit file system will
   * generate INVALID_ARGUMENT if asked to read at an offset that is not in the
   * range [0,2^32-1], but it will generate OUT_OF_RANGE if asked to read from
   * an offset past the current file size.
   *
   * There is a fair bit of overlap between FAILED_PRECONDITION and
   * OUT_OF_RANGE. We recommend using OUT_OF_RANGE (the more specific error)
   * when it applies so that callers who are iterating through a space can
   * easily look for an OUT_OF_RANGE error to detect when they are done.
   */
  OUT_OF_RANGE: 'out-of-range',

  /** Operation is not implemented or not supported/enabled in this service. */
  UNIMPLEMENTED: 'unimplemented',

  /**
   * Internal errors. Means some invariants expected by underlying System has
   * been broken. If you see one of these errors, Something is very broken.
   */
  INTERNAL: 'internal',

  /**
   * The service is currently unavailable. This is a most likely a transient
   * condition and may be corrected by retrying with a backoff.
   *
   * See litmus test above for deciding between FAILED_PRECONDITION, ABORTED,
   * and UNAVAILABLE.
   */
  UNAVAILABLE: 'unavailable',

  /** Unrecoverable data loss or corruption. */
  DATA_LOSS: 'data-loss'
};
/**
 * An error class used for Firestore-generated errors. Ideally we should be
 * using FirebaseError, but integrating with it is overly arduous at the moment,
 * so we define our own compatible error class (with a `name` of 'FirebaseError'
 * and compatible `code` and `message` fields.)
 */

var FirestoreError =
/** @class */
function (_super) {
  tslib_1.__extends(FirestoreError, _super);

  function FirestoreError(code, message) {
    var _this = _super.call(this, message) || this;

    _this.code = code;
    _this.message = message;
    _this.name = 'FirebaseError'; // HACK: We write a toString property directly because Error is not a real
    // class and so inheritance does not work correctly. We could alternatively
    // do the same "back-door inheritance" trick that FirebaseError does.

    _this.toString = function () {
      return _this.name + ": [code=" + _this.code + "]: " + _this.message;
    };

    return _this;
  }

  return FirestoreError;
}(Error);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Helper function to prevent instantiation through the constructor.
 *
 * This method creates a new constructor that throws when it's invoked.
 * The prototype of that constructor is then set to the prototype of the hidden
 * "class" to expose all the prototype methods and allow for instanceof
 * checks.
 *
 * To also make all the static methods available, all properties of the
 * original constructor are copied to the new constructor.
 */


function makeConstructorPrivate(cls, optionalMessage) {
  function PublicConstructor() {
    var error = 'This constructor is private.';

    if (optionalMessage) {
      error += ' ';
      error += optionalMessage;
    }

    throw new FirestoreError(Code.INVALID_ARGUMENT, error);
  } // Make sure instanceof checks work and all methods are exposed on the public
  // constructor


  PublicConstructor.prototype = cls.prototype; // Copy any static methods/members

  for (var staticProperty in cls) {
    if (cls.hasOwnProperty(staticProperty)) {
      PublicConstructor[staticProperty] = cls[staticProperty];
    }
  }

  return PublicConstructor;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function contains(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
/** Returns the given value if it's defined or the defaultValue otherwise. */


function defaulted(value, defaultValue) {
  return value !== undefined ? value : defaultValue;
}

function forEachNumber(obj, fn) {
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var num = Number(key);

      if (!isNaN(num)) {
        fn(num, obj[key]);
      }
    }
  }
}

function values(obj) {
  var vs = [];
  forEach(obj, function (_, v) {
    return vs.push(v);
  });
  return vs;
}

function forEach(obj, fn) {
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      fn(key, obj[key]);
    }
  }
}

function isEmpty(obj) {
  assert(obj != null && typeof obj === 'object', 'isEmpty() expects object parameter.');

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      return false;
    }
  }

  return true;
}

function shallowCopy(obj) {
  assert(obj && typeof obj === 'object', 'shallowCopy() expects object parameter.');
  var result = {};

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      result[key] = obj[key];
    }
  }

  return result;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Validates that no arguments were passed in the invocation of functionName.
 *
 * Forward the magic "arguments" variable as second parameter on which the
 * parameter validation is performed:
 * validateNoArgs('myFunction', arguments);
 */


function validateNoArgs(functionName, args) {
  if (args.length !== 0) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() does not support arguments, " + 'but was called with ' + formatPlural(args.length, 'argument') + '.');
  }
}
/**
 * Validates the invocation of functionName has the exact number of arguments.
 *
 * Forward the magic "arguments" variable as second parameter on which the
 * parameter validation is performed:
 * validateExactNumberOfArgs('myFunction', arguments, 2);
 */


function validateExactNumberOfArgs(functionName, args, numberOfArgs) {
  if (args.length !== numberOfArgs) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires " + formatPlural(numberOfArgs, 'argument') + ', but was called with ' + formatPlural(args.length, 'argument') + '.');
  }
}
/**
 * Validates the invocation of functionName has at least the provided number of
 * arguments (but can have many more).
 *
 * Forward the magic "arguments" variable as second parameter on which the
 * parameter validation is performed:
 * validateAtLeastNumberOfArgs('myFunction', arguments, 2);
 */


function validateAtLeastNumberOfArgs(functionName, args, minNumberOfArgs) {
  if (args.length < minNumberOfArgs) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires at least " + formatPlural(minNumberOfArgs, 'argument') + ', but was called with ' + formatPlural(args.length, 'argument') + '.');
  }
}
/**
 * Validates the invocation of functionName has number of arguments between
 * the values provided.
 *
 * Forward the magic "arguments" variable as second parameter on which the
 * parameter validation is performed:
 * validateBetweenNumberOfArgs('myFunction', arguments, 2, 3);
 */


function validateBetweenNumberOfArgs(functionName, args, minNumberOfArgs, maxNumberOfArgs) {
  if (args.length < minNumberOfArgs || args.length > maxNumberOfArgs) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires between " + minNumberOfArgs + " and " + (maxNumberOfArgs + " arguments, but was called with ") + formatPlural(args.length, 'argument') + '.');
  }
}
/**
 * Validates the provided argument is an array and has as least the expected
 * number of elements.
 */


function validateNamedArrayAtLeastNumberOfElements(functionName, value, name, minNumberOfElements) {
  if (!(value instanceof Array) || value.length < minNumberOfElements) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires its " + name + " argument to be an " + 'array with at least ' + (formatPlural(minNumberOfElements, 'element') + "."));
  }
}
/**
 * Validates the provided positional argument has the native JavaScript type
 * using typeof checks.
 */


function validateArgType(functionName, type, position, argument) {
  validateType(functionName, type, ordinal(position) + " argument", argument);
}
/**
 * Validates the provided argument has the native JavaScript type using
 * typeof checks or is undefined.
 */


function validateOptionalArgType(functionName, type, position, argument) {
  if (argument !== undefined) {
    validateArgType(functionName, type, position, argument);
  }
}
/**
 * Validates the provided named option has the native JavaScript type using
 * typeof checks.
 */


function validateNamedType(functionName, type, optionName, argument) {
  validateType(functionName, type, optionName + " option", argument);
}
/**
 * Validates the provided named option has the native JavaScript type using
 * typeof checks or is undefined.
 */


function validateNamedOptionalType(functionName, type, optionName, argument) {
  if (argument !== undefined) {
    validateNamedType(functionName, type, optionName, argument);
  }
}

function validateArrayElements(functionName, optionName, typeDescription, argument, validator) {
  if (!(argument instanceof Array)) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires its " + optionName + " " + ("option to be an array, but it was: " + valueDescription(argument)));
  }

  for (var i = 0; i < argument.length; ++i) {
    if (!validator(argument[i])) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires all " + optionName + " " + ("elements to be " + typeDescription + ", but the value at index " + i + " ") + ("was: " + valueDescription(argument[i])));
    }
  }
}

function validateOptionalArrayElements(functionName, optionName, typeDescription, argument, validator) {
  if (argument !== undefined) {
    validateArrayElements(functionName, optionName, typeDescription, argument, validator);
  }
}
/**
 * Validates that the provided named option equals one of the expected values.
 */


function validateNamedPropertyEquals(functionName, inputName, optionName, input, expected) {
  var expectedDescription = [];

  for (var _i = 0, expected_1 = expected; _i < expected_1.length; _i++) {
    var val = expected_1[_i];

    if (val === input) {
      return;
    }

    expectedDescription.push(valueDescription(val));
  }

  var actualDescription = valueDescription(input);
  throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid value " + actualDescription + " provided to function " + functionName + "() for option " + ("\"" + optionName + "\". Acceptable values: " + expectedDescription.join(', ')));
}
/**
 * Validates that the provided named option equals one of the expected values or
 * is undefined.
 */


function validateNamedOptionalPropertyEquals(functionName, inputName, optionName, input, expected) {
  if (input !== undefined) {
    validateNamedPropertyEquals(functionName, inputName, optionName, input, expected);
  }
}
/** Helper to validate the type of a provided input. */


function validateType(functionName, type, inputName, input) {
  var valid = false;

  if (type === 'object') {
    valid = isPlainObject(input);
  } else if (type === 'non-empty string') {
    valid = typeof input === 'string' && input !== '';
  } else {
    valid = typeof input === type;
  }

  if (!valid) {
    var description = valueDescription(input);
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires its " + inputName + " " + ("to be of type " + type + ", but it was: " + description));
  }
}
/**
 * Returns true if it's a non-null object without a custom prototype
 * (i.e. excludes Array, Date, etc.).
 */


function isPlainObject(input) {
  return typeof input === 'object' && input !== null && (Object.getPrototypeOf(input) === Object.prototype || Object.getPrototypeOf(input) === null);
}
/** Returns a string describing the type / value of the provided input. */


function valueDescription(input) {
  if (input === undefined) {
    return 'undefined';
  } else if (input === null) {
    return 'null';
  } else if (typeof input === 'string') {
    if (input.length > 20) {
      input = input.substring(0, 20) + "...";
    }

    return JSON.stringify(input);
  } else if (typeof input === 'number' || typeof input === 'boolean') {
    return '' + input;
  } else if (typeof input === 'object') {
    if (input instanceof Array) {
      return 'an array';
    } else {
      var customObjectName = tryGetCustomObjectType(input);

      if (customObjectName) {
        return "a custom " + customObjectName + " object";
      } else {
        return 'an object';
      }
    }
  } else if (typeof input === 'function') {
    return 'a function';
  } else {
    return fail('Unknown wrong type: ' + typeof input);
  }
}
/** Hacky method to try to get the constructor name for an object. */


function tryGetCustomObjectType(input) {
  if (input.constructor) {
    var funcNameRegex = /function\s+([^\s(]+)\s*\(/;
    var results = funcNameRegex.exec(input.constructor.toString());

    if (results && results.length > 1) {
      return results[1];
    }
  }

  return null;
}
/** Validates the provided argument is defined. */


function validateDefined(functionName, position, argument) {
  if (argument === undefined) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires a valid " + ordinal(position) + " " + "argument, but it was undefined.");
  }
}
/**
 * Validates the provided positional argument is an object, and its keys and
 * values match the expected keys and types provided in optionTypes.
 */


function validateOptionNames(functionName, options, optionNames) {
  forEach(options, function (key, _) {
    if (optionNames.indexOf(key) < 0) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Unknown option '" + key + "' passed to function " + functionName + "(). " + 'Available options: ' + optionNames.join(', '));
    }
  });
}
/**
 * Helper method to throw an error that the provided argument did not pass
 * an instanceof check.
 */


function invalidClassError(functionName, type, position, argument) {
  var description = valueDescription(argument);
  return new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires its " + ordinal(position) + " " + ("argument to be a " + type + ", but it was: " + description));
}
/** Converts a number to its english word representation */


function ordinal(num) {
  switch (num) {
    case 1:
      return 'first';

    case 2:
      return 'second';

    case 3:
      return 'third';

    default:
      return num + 'th';
  }
}
/**
 * Formats the given word as plural conditionally given the preceding number.
 */


function formatPlural(num, str) {
  return num + " " + str + (num === 1 ? '' : 's');
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// tslint:disable-next-line:class-as-namespace


var AutoId =
/** @class */
function () {
  function AutoId() {}

  AutoId.newId = function () {
    // Alphanumeric characters
    var chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    var autoId = '';

    for (var i = 0; i < 20; i++) {
      autoId += chars.charAt(Math.floor(Math.random() * chars.length));
    }

    assert(autoId.length === 20, 'Invalid auto ID: ' + autoId);
    return autoId;
  };

  return AutoId;
}();

function primitiveComparator(left, right) {
  if (left < right) return -1;
  if (left > right) return 1;
  return 0;
}
/** Helper to compare nullable (or undefined-able) objects using isEqual(). */


function equals(left, right) {
  if (left !== null && left !== undefined) {
    return !!(right && left.isEqual(right));
  } else {
    // HACK: Explicitly cast since TypeScript's type narrowing apparently isn't
    // smart enough.
    return left === right;
  }
}
/** Helper to compare arrays using isEqual(). */


function arrayEquals(left, right) {
  if (left.length !== right.length) {
    return false;
  }

  for (var i = 0; i < left.length; i++) {
    if (!left[i].isEqual(right[i])) {
      return false;
    }
  }

  return true;
}
/**
 * Returns the immediate lexicographically-following string. This is useful to
 * construct an inclusive range for indexeddb iterators.
 */


function immediateSuccessor(s) {
  // Return the input string, with an additional NUL byte appended.
  return s + '\0';
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Helper function to assert Uint8Array is available at runtime. */


function assertUint8ArrayAvailable() {
  if (typeof Uint8Array === 'undefined') {
    throw new FirestoreError(Code.UNIMPLEMENTED, 'Uint8Arrays are not available in this environment.');
  }
}
/** Helper function to assert Base64 functions are available at runtime. */


function assertBase64Available() {
  if (!PlatformSupport.getPlatform().base64Available) {
    throw new FirestoreError(Code.UNIMPLEMENTED, 'Blobs are unavailable in Firestore in this environment.');
  }
}
/**
 * Immutable class holding a blob (binary data).
 * This class is directly exposed in the public API.
 *
 * Note that while you can't hide the constructor in JavaScript code, we are
 * using the hack above to make sure no-one outside this module can call it.
 */


var Blob =
/** @class */
function () {
  function Blob(binaryString) {
    assertBase64Available();
    this._binaryString = binaryString;
  }

  Blob.fromBase64String = function (base64) {
    validateExactNumberOfArgs('Blob.fromBase64String', arguments, 1);
    validateArgType('Blob.fromBase64String', 'string', 1, base64);
    assertBase64Available();

    try {
      var binaryString = PlatformSupport.getPlatform().atob(base64);
      return new Blob(binaryString);
    } catch (e) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Failed to construct Blob from Base64 string: ' + e);
    }
  };

  Blob.fromUint8Array = function (array) {
    validateExactNumberOfArgs('Blob.fromUint8Array', arguments, 1);
    assertUint8ArrayAvailable();

    if (!(array instanceof Uint8Array)) {
      throw invalidClassError('Blob.fromUint8Array', 'Uint8Array', 1, array);
    } // We can't call array.map directly because it expects the return type to
    // be a Uint8Array, whereas we can convert it to a regular array by invoking
    // map on the Array prototype.


    var binaryString = Array.prototype.map.call(array, function (char) {
      return String.fromCharCode(char);
    }).join('');
    return new Blob(binaryString);
  };

  Blob.prototype.toBase64 = function () {
    validateExactNumberOfArgs('Blob.toBase64', arguments, 0);
    assertBase64Available();
    return PlatformSupport.getPlatform().btoa(this._binaryString);
  };

  Blob.prototype.toUint8Array = function () {
    validateExactNumberOfArgs('Blob.toUint8Array', arguments, 0);
    assertUint8ArrayAvailable();
    var buffer = new Uint8Array(this._binaryString.length);

    for (var i = 0; i < this._binaryString.length; i++) {
      buffer[i] = this._binaryString.charCodeAt(i);
    }

    return buffer;
  };

  Blob.prototype.toString = function () {
    return 'Blob(base64: ' + this.toBase64() + ')';
  };

  Blob.prototype.isEqual = function (other) {
    return this._binaryString === other._binaryString;
  };
  /**
   * Actually private to JS consumers of our API, so this function is prefixed
   * with an underscore.
   */


  Blob.prototype._compareTo = function (other) {
    return primitiveComparator(this._binaryString, other._binaryString);
  };

  return Blob;
}(); // Public instance that disallows construction at runtime. This constructor is
// used when exporting Blob on firebase.firestore.Blob and will be called Blob
// publicly. Internally we still use Blob which has a type checked private
// constructor. Note that Blob and PublicBlob can be used interchangeably in
// instanceof checks.
// For our internal TypeScript code PublicBlob doesn't exist as a type, and so
// we need to use Blob as type and export it too.
// tslint:disable-next-line:variable-name We're treating this as a class name.


var PublicBlob = makeConstructorPrivate(Blob, 'Use Blob.fromUint8Array() or Blob.fromBase64String() instead.');
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Immutable class representing a geo point as latitude-longitude pair.
 * This class is directly exposed in the public API, including its constructor.
 */

var GeoPoint =
/** @class */
function () {
  function GeoPoint(latitude, longitude) {
    validateExactNumberOfArgs('GeoPoint', arguments, 2);
    validateArgType('GeoPoint', 'number', 1, latitude);
    validateArgType('GeoPoint', 'number', 2, longitude);

    if (!isFinite(latitude) || latitude < -90 || latitude > 90) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Latitude must be a number between -90 and 90, but was: ' + latitude);
    }

    if (!isFinite(longitude) || longitude < -180 || longitude > 180) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Longitude must be a number between -180 and 180, but was: ' + longitude);
    }

    this._lat = latitude;
    this._long = longitude;
  }

  Object.defineProperty(GeoPoint.prototype, "latitude", {
    /**
     * Returns the latitude of this geo point, a number between -90 and 90.
     */
    get: function () {
      return this._lat;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(GeoPoint.prototype, "longitude", {
    /**
     * Returns the longitude of this geo point, a number between -180 and 180.
     */
    get: function () {
      return this._long;
    },
    enumerable: true,
    configurable: true
  });

  GeoPoint.prototype.isEqual = function (other) {
    return this._lat === other._lat && this._long === other._long;
  };
  /**
   * Actually private to JS consumers of our API, so this function is prefixed
   * with an underscore.
   */


  GeoPoint.prototype._compareTo = function (other) {
    return primitiveComparator(this._lat, other._lat) || primitiveComparator(this._long, other._long);
  };

  return GeoPoint;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Timestamp =
/** @class */
function () {
  function Timestamp(seconds, nanoseconds) {
    this.seconds = seconds;
    this.nanoseconds = nanoseconds;

    if (nanoseconds < 0) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + nanoseconds);
    }

    if (nanoseconds >= 1e9) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp nanoseconds out of range: ' + nanoseconds);
    } // Midnight at the beginning of 1/1/1 is the earliest Firestore supports.


    if (seconds < -62135596800) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + seconds);
    } // This will break in the year 10,000.


    if (seconds >= 253402300800) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Timestamp seconds out of range: ' + seconds);
    }
  }

  Timestamp.now = function () {
    return Timestamp.fromMillis(Date.now());
  };

  Timestamp.fromDate = function (date) {
    return Timestamp.fromMillis(date.getTime());
  };

  Timestamp.fromMillis = function (milliseconds) {
    var seconds = Math.floor(milliseconds / 1000);
    var nanos = (milliseconds - seconds * 1000) * 1e6;
    return new Timestamp(seconds, nanos);
  };

  Timestamp.prototype.toDate = function () {
    return new Date(this.toMillis());
  };

  Timestamp.prototype.toMillis = function () {
    return this.seconds * 1000 + this.nanoseconds / 1e6;
  };

  Timestamp.prototype._compareTo = function (other) {
    if (this.seconds === other.seconds) {
      return primitiveComparator(this.nanoseconds, other.nanoseconds);
    }

    return primitiveComparator(this.seconds, other.seconds);
  };

  Timestamp.prototype.isEqual = function (other) {
    return other.seconds === this.seconds && other.nanoseconds === this.nanoseconds;
  };

  Timestamp.prototype.toString = function () {
    return 'Timestamp(seconds=' + this.seconds + ', nanoseconds=' + this.nanoseconds + ')';
  };

  return Timestamp;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var DatabaseInfo =
/** @class */
function () {
  /**
   * Constructs a DatabaseInfo using the provided host, databaseId and
   * persistenceKey.
   *
   * @param databaseId The database to use.
   * @param persistenceKey A unique identifier for this Firestore's local
   * storage (used in conjunction with the databaseId).
   * @param host The Firestore backend host to connect to.
   * @param ssl Whether to use SSL when connecting.
   */
  function DatabaseInfo(databaseId, persistenceKey, host, ssl) {
    this.databaseId = databaseId;
    this.persistenceKey = persistenceKey;
    this.host = host;
    this.ssl = ssl;
  }

  return DatabaseInfo;
}();
/** The default database name for a project. */


var DEFAULT_DATABASE_NAME = '(default)';
/** Represents the database ID a Firestore client is associated with. */

var DatabaseId =
/** @class */
function () {
  function DatabaseId(projectId, database) {
    this.projectId = projectId;
    this.database = database ? database : DEFAULT_DATABASE_NAME;
  }

  Object.defineProperty(DatabaseId.prototype, "isDefaultDatabase", {
    get: function () {
      return this.database === DEFAULT_DATABASE_NAME;
    },
    enumerable: true,
    configurable: true
  });

  DatabaseId.prototype.isEqual = function (other) {
    return other instanceof DatabaseId && other.projectId === this.projectId && other.database === this.database;
  };

  DatabaseId.prototype.compareTo = function (other) {
    return primitiveComparator(this.projectId, other.projectId) || primitiveComparator(this.database, other.database);
  };

  return DatabaseId;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var DOCUMENT_KEY_NAME = '__name__';
/**
 * Path represents an ordered sequence of string segments.
 */

var Path =
/** @class */
function () {
  function Path(segments, offset, length) {
    this.init(segments, offset, length);
  }
  /**
   * An initialization method that can be called from outside the constructor.
   * We need this so that we can have a non-static construct method that returns
   * the polymorphic `this` type.
   */


  Path.prototype.init = function (segments, offset, length) {
    if (offset === undefined) {
      offset = 0;
    } else if (offset > segments.length) {
      fail('offset ' + offset + ' out of range ' + segments.length);
    }

    if (length === undefined) {
      length = segments.length - offset;
    } else if (length > segments.length - offset) {
      fail('length ' + length + ' out of range ' + (segments.length - offset));
    }

    this.segments = segments;
    this.offset = offset;
    this.len = length;
  };
  /**
   * Constructs a new instance of Path using the same concrete type as `this`.
   * We need this instead of using the normal constructor, because polymorphic
   * `this` doesn't work on static methods.
   */


  Path.prototype.construct = function (segments, offset, length) {
    var path = Object.create(Object.getPrototypeOf(this));
    path.init(segments, offset, length);
    return path;
  };

  Object.defineProperty(Path.prototype, "length", {
    get: function () {
      return this.len;
    },
    enumerable: true,
    configurable: true
  });

  Path.prototype.isEqual = function (other) {
    return Path.comparator(this, other) === 0;
  };

  Path.prototype.child = function (nameOrPath) {
    var segments = this.segments.slice(this.offset, this.limit());

    if (nameOrPath instanceof Path) {
      nameOrPath.forEach(function (segment) {
        segments.push(segment);
      });
    } else if (typeof nameOrPath === 'string') {
      segments.push(nameOrPath);
    } else {
      fail('Unknown parameter type for Path.child(): ' + nameOrPath);
    }

    return this.construct(segments);
  };
  /** The index of one past the last segment of the path. */


  Path.prototype.limit = function () {
    return this.offset + this.length;
  };

  Path.prototype.popFirst = function (size) {
    size = size === undefined ? 1 : size;
    assert(this.length >= size, "Can't call popFirst() with less segments");
    return this.construct(this.segments, this.offset + size, this.length - size);
  };

  Path.prototype.popLast = function () {
    assert(!this.isEmpty(), "Can't call popLast() on empty path");
    return this.construct(this.segments, this.offset, this.length - 1);
  };

  Path.prototype.firstSegment = function () {
    assert(!this.isEmpty(), "Can't call firstSegment() on empty path");
    return this.segments[this.offset];
  };

  Path.prototype.lastSegment = function () {
    return this.get(this.length - 1);
  };

  Path.prototype.get = function (index) {
    assert(index < this.length, 'Index out of range');
    return this.segments[this.offset + index];
  };

  Path.prototype.isEmpty = function () {
    return this.length === 0;
  };

  Path.prototype.isPrefixOf = function (other) {
    if (other.length < this.length) {
      return false;
    }

    for (var i = 0; i < this.length; i++) {
      if (this.get(i) !== other.get(i)) {
        return false;
      }
    }

    return true;
  };

  Path.prototype.isImmediateParentOf = function (potentialChild) {
    if (this.length + 1 !== potentialChild.length) {
      return false;
    }

    for (var i = 0; i < this.length; i++) {
      if (this.get(i) !== potentialChild.get(i)) {
        return false;
      }
    }

    return true;
  };

  Path.prototype.forEach = function (fn) {
    for (var i = this.offset, end = this.limit(); i < end; i++) {
      fn(this.segments[i]);
    }
  };

  Path.prototype.toArray = function () {
    return this.segments.slice(this.offset, this.limit());
  };

  Path.comparator = function (p1, p2) {
    var len = Math.min(p1.length, p2.length);

    for (var i = 0; i < len; i++) {
      var left = p1.get(i);
      var right = p2.get(i);
      if (left < right) return -1;
      if (left > right) return 1;
    }

    if (p1.length < p2.length) return -1;
    if (p1.length > p2.length) return 1;
    return 0;
  };

  return Path;
}();
/**
 * A slash-separated path for navigating resources (documents and collections)
 * within Firestore.
 */


var ResourcePath =
/** @class */
function (_super) {
  tslib_1.__extends(ResourcePath, _super);

  function ResourcePath() {
    return _super !== null && _super.apply(this, arguments) || this;
  }

  ResourcePath.prototype.canonicalString = function () {
    // NOTE: The client is ignorant of any path segments containing escape
    // sequences (e.g. __id123__) and just passes them through raw (they exist
    // for legacy reasons and should not be used frequently).
    return this.toArray().join('/');
  };

  ResourcePath.prototype.toString = function () {
    return this.canonicalString();
  };
  /**
   * Creates a resource path from the given slash-delimited string.
   */


  ResourcePath.fromString = function (path) {
    // NOTE: The client is ignorant of any path segments containing escape
    // sequences (e.g. __id123__) and just passes them through raw (they exist
    // for legacy reasons and should not be used frequently).
    if (path.indexOf('//') >= 0) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid path (" + path + "). Paths must not contain // in them.");
    } // We may still have an empty segment at the beginning or end if they had a
    // leading or trailing slash (which we allow).


    var segments = path.split('/').filter(function (segment) {
      return segment.length > 0;
    });
    return new ResourcePath(segments);
  };

  ResourcePath.EMPTY_PATH = new ResourcePath([]);
  return ResourcePath;
}(Path);

var identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
/** A dot-separated path for navigating sub-objects within a document. */

var FieldPath =
/** @class */
function (_super) {
  tslib_1.__extends(FieldPath, _super);

  function FieldPath() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  /**
   * Returns true if the string could be used as a segment in a field path
   * without escaping.
   */


  FieldPath.isValidIdentifier = function (segment) {
    return identifierRegExp.test(segment);
  };

  FieldPath.prototype.canonicalString = function () {
    return this.toArray().map(function (str) {
      str = str.replace('\\', '\\\\').replace('`', '\\`');

      if (!FieldPath.isValidIdentifier(str)) {
        str = '`' + str + '`';
      }

      return str;
    }).join('.');
  };

  FieldPath.prototype.toString = function () {
    return this.canonicalString();
  };
  /**
   * Returns true if this field references the key of a document.
   */


  FieldPath.prototype.isKeyField = function () {
    return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;
  };
  /**
   * The field designating the key of a document.
   */


  FieldPath.keyField = function () {
    return new FieldPath([DOCUMENT_KEY_NAME]);
  };
  /**
   * Parses a field string from the given server-formatted string.
   *
   * - Splitting the empty string is not allowed (for now at least).
   * - Empty segments within the string (e.g. if there are two consecutive
   *   separators) are not allowed.
   *
   * TODO(b/37244157): we should make this more strict. Right now, it allows
   * non-identifier path components, even if they aren't escaped.
   */


  FieldPath.fromServerFormat = function (path) {
    var segments = [];
    var current = '';
    var i = 0;

    var addCurrentSegment = function () {
      if (current.length === 0) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field path (" + path + "). Paths must not be empty, begin " + "with '.', end with '.', or contain '..'");
      }

      segments.push(current);
      current = '';
    };

    var inBackticks = false;

    while (i < path.length) {
      var c = path[i];

      if (c === '\\') {
        if (i + 1 === path.length) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has trailing escape character: ' + path);
        }

        var next = path[i + 1];

        if (!(next === '\\' || next === '.' || next === '`')) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Path has invalid escape sequence: ' + path);
        }

        current += next;
        i += 2;
      } else if (c === '`') {
        inBackticks = !inBackticks;
        i++;
      } else if (c === '.' && !inBackticks) {
        addCurrentSegment();
        i++;
      } else {
        current += c;
        i++;
      }
    }

    addCurrentSegment();

    if (inBackticks) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Unterminated ` in path: ' + path);
    }

    return new FieldPath(segments);
  };

  FieldPath.EMPTY_PATH = new FieldPath([]);
  return FieldPath;
}(Path);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var DocumentKey =
/** @class */
function () {
  function DocumentKey(path) {
    this.path = path;
    assert(DocumentKey.isDocumentKey(path), 'Invalid DocumentKey with an odd number of segments: ' + path.toArray().join('/'));
  }
  /** Returns true if the document is in the specified collectionId. */


  DocumentKey.prototype.hasCollectionId = function (collectionId) {
    return this.path.length >= 2 && this.path.get(this.path.length - 2) === collectionId;
  };

  DocumentKey.prototype.isEqual = function (other) {
    return other !== null && ResourcePath.comparator(this.path, other.path) === 0;
  };

  DocumentKey.prototype.toString = function () {
    return this.path.toString();
  };

  DocumentKey.comparator = function (k1, k2) {
    return ResourcePath.comparator(k1.path, k2.path);
  };

  DocumentKey.isDocumentKey = function (path) {
    return path.length % 2 === 0;
  };
  /**
   * Creates and returns a new document key with the given segments.
   *
   * @param path The segments of the path to the document
   * @return A new instance of DocumentKey
   */


  DocumentKey.fromSegments = function (segments) {
    return new DocumentKey(new ResourcePath(segments.slice()));
  };
  /**
   * Creates and returns a new document key using '/' to split the string into
   * segments.
   *
   * @param path The slash-separated path string to the document
   * @return A new instance of DocumentKey
   */


  DocumentKey.fromPathString = function (path) {
    return new DocumentKey(ResourcePath.fromString(path));
  };

  DocumentKey.EMPTY = new DocumentKey(new ResourcePath([]));
  return DocumentKey;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * The result of a lookup for a given path may be an existing document or a
 * marker that this document does not exist at a given version.
 */


var MaybeDocument =
/** @class */
function () {
  function MaybeDocument(key, version) {
    this.key = key;
    this.version = version;
  }

  MaybeDocument.compareByKey = function (d1, d2) {
    return DocumentKey.comparator(d1.key, d2.key);
  };

  return MaybeDocument;
}();
/**
 * Represents a document in Firestore with a key, version, data and whether the
 * data has local mutations applied to it.
 */


var Document =
/** @class */
function (_super) {
  tslib_1.__extends(Document, _super);

  function Document(key, version, data, options,
  /**
   * Memoized serialized form of the document for optimization purposes (avoids repeated
   * serialization). Might be undefined.
   */
  proto) {
    var _this = _super.call(this, key, version) || this;

    _this.data = data;
    _this.proto = proto;
    _this.hasLocalMutations = !!options.hasLocalMutations;
    _this.hasCommittedMutations = !!options.hasCommittedMutations;
    return _this;
  }

  Document.prototype.field = function (path) {
    return this.data.field(path);
  };

  Document.prototype.fieldValue = function (path) {
    var field = this.field(path);
    return field ? field.value() : undefined;
  };

  Document.prototype.value = function () {
    return this.data.value();
  };

  Document.prototype.isEqual = function (other) {
    return other instanceof Document && this.key.isEqual(other.key) && this.version.isEqual(other.version) && this.data.isEqual(other.data) && this.hasLocalMutations === other.hasLocalMutations && this.hasCommittedMutations === other.hasCommittedMutations;
  };

  Document.prototype.toString = function () {
    return "Document(" + this.key + ", " + this.version + ", " + this.data.toString() + ", " + ("{hasLocalMutations: " + this.hasLocalMutations + "}), ") + ("{hasCommittedMutations: " + this.hasCommittedMutations + "})");
  };

  Object.defineProperty(Document.prototype, "hasPendingWrites", {
    get: function () {
      return this.hasLocalMutations || this.hasCommittedMutations;
    },
    enumerable: true,
    configurable: true
  });

  Document.compareByField = function (field, d1, d2) {
    var v1 = d1.field(field);
    var v2 = d2.field(field);

    if (v1 !== undefined && v2 !== undefined) {
      return v1.compareTo(v2);
    } else {
      return fail("Trying to compare documents on fields that don't exist");
    }
  };

  return Document;
}(MaybeDocument);
/**
 * A class representing a deleted document.
 * Version is set to 0 if we don't point to any specific time, otherwise it
 * denotes time we know it didn't exist at.
 */


var NoDocument =
/** @class */
function (_super) {
  tslib_1.__extends(NoDocument, _super);

  function NoDocument(key, version, options) {
    var _this = _super.call(this, key, version) || this;

    _this.hasCommittedMutations = !!(options && options.hasCommittedMutations);
    return _this;
  }

  NoDocument.prototype.toString = function () {
    return "NoDocument(" + this.key + ", " + this.version + ")";
  };

  Object.defineProperty(NoDocument.prototype, "hasPendingWrites", {
    get: function () {
      return this.hasCommittedMutations;
    },
    enumerable: true,
    configurable: true
  });

  NoDocument.prototype.isEqual = function (other) {
    return other instanceof NoDocument && other.hasCommittedMutations === this.hasCommittedMutations && other.version.isEqual(this.version) && other.key.isEqual(this.key);
  };

  return NoDocument;
}(MaybeDocument);
/**
 * A class representing an existing document whose data is unknown (e.g. a
 * document that was updated without a known base document).
 */


var UnknownDocument =
/** @class */
function (_super) {
  tslib_1.__extends(UnknownDocument, _super);

  function UnknownDocument(key, version) {
    return _super.call(this, key, version) || this;
  }

  UnknownDocument.prototype.toString = function () {
    return "UnknownDocument(" + this.key + ", " + this.version + ")";
  };

  Object.defineProperty(UnknownDocument.prototype, "hasPendingWrites", {
    get: function () {
      return true;
    },
    enumerable: true,
    configurable: true
  });

  UnknownDocument.prototype.isEqual = function (other) {
    return other instanceof UnknownDocument && other.version.isEqual(this.version) && other.key.isEqual(this.key);
  };

  return UnknownDocument;
}(MaybeDocument);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// An immutable sorted map implementation, based on a Left-leaning Red-Black
// tree.


var SortedMap =
/** @class */
function () {
  function SortedMap(comparator, root) {
    this.comparator = comparator;
    this.root = root ? root : LLRBNode.EMPTY;
  } // Returns a copy of the map, with the specified key/value added or replaced.


  SortedMap.prototype.insert = function (key, value) {
    return new SortedMap(this.comparator, this.root.insert(key, value, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
  }; // Returns a copy of the map, with the specified key removed.


  SortedMap.prototype.remove = function (key) {
    return new SortedMap(this.comparator, this.root.remove(key, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
  }; // Returns the value of the node with the given key, or null.


  SortedMap.prototype.get = function (key) {
    var node = this.root;

    while (!node.isEmpty()) {
      var cmp = this.comparator(key, node.key);

      if (cmp === 0) {
        return node.value;
      } else if (cmp < 0) {
        node = node.left;
      } else if (cmp > 0) {
        node = node.right;
      }
    }

    return null;
  }; // Returns the index of the element in this sorted map, or -1 if it doesn't
  // exist.


  SortedMap.prototype.indexOf = function (key) {
    // Number of nodes that were pruned when descending right
    var prunedNodes = 0;
    var node = this.root;

    while (!node.isEmpty()) {
      var cmp = this.comparator(key, node.key);

      if (cmp === 0) {
        return prunedNodes + node.left.size;
      } else if (cmp < 0) {
        node = node.left;
      } else {
        // Count all nodes left of the node plus the node itself
        prunedNodes += node.left.size + 1;
        node = node.right;
      }
    } // Node not found


    return -1;
  };

  SortedMap.prototype.isEmpty = function () {
    return this.root.isEmpty();
  };

  Object.defineProperty(SortedMap.prototype, "size", {
    // Returns the total number of nodes in the map.
    get: function () {
      return this.root.size;
    },
    enumerable: true,
    configurable: true
  }); // Returns the minimum key in the map.

  SortedMap.prototype.minKey = function () {
    return this.root.minKey();
  }; // Returns the maximum key in the map.


  SortedMap.prototype.maxKey = function () {
    return this.root.maxKey();
  }; // Traverses the map in key order and calls the specified action function
  // for each key/value pair. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.


  SortedMap.prototype.inorderTraversal = function (action) {
    return this.root.inorderTraversal(action);
  };

  SortedMap.prototype.forEach = function (fn) {
    this.inorderTraversal(function (k, v) {
      fn(k, v);
      return false;
    });
  };

  SortedMap.prototype.toString = function () {
    var descriptions = [];
    this.inorderTraversal(function (k, v) {
      descriptions.push(k + ":" + v);
      return false;
    });
    return "{" + descriptions.join(', ') + "}";
  }; // Traverses the map in reverse key order and calls the specified action
  // function for each key/value pair. If action returns true, traversal is
  // aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.


  SortedMap.prototype.reverseTraversal = function (action) {
    return this.root.reverseTraversal(action);
  }; // Returns an iterator over the SortedMap.


  SortedMap.prototype.getIterator = function () {
    return new SortedMapIterator(this.root, null, this.comparator, false);
  };

  SortedMap.prototype.getIteratorFrom = function (key) {
    return new SortedMapIterator(this.root, key, this.comparator, false);
  };

  SortedMap.prototype.getReverseIterator = function () {
    return new SortedMapIterator(this.root, null, this.comparator, true);
  };

  SortedMap.prototype.getReverseIteratorFrom = function (key) {
    return new SortedMapIterator(this.root, key, this.comparator, true);
  };

  return SortedMap;
}(); // end SortedMap
// An iterator over an LLRBNode.


var SortedMapIterator =
/** @class */
function () {
  function SortedMapIterator(node, startKey, comparator, isReverse) {
    this.isReverse = isReverse;
    this.nodeStack = [];
    var cmp = 1;

    while (!node.isEmpty()) {
      cmp = startKey ? comparator(node.key, startKey) : 1; // flip the comparison if we're going in reverse

      if (isReverse) cmp *= -1;

      if (cmp < 0) {
        // This node is less than our start key. ignore it
        if (this.isReverse) {
          node = node.left;
        } else {
          node = node.right;
        }
      } else if (cmp === 0) {
        // This node is exactly equal to our start key. Push it on the stack,
        // but stop iterating;
        this.nodeStack.push(node);
        break;
      } else {
        // This node is greater than our start key, add it to the stack and move
        // to the next one
        this.nodeStack.push(node);

        if (this.isReverse) {
          node = node.right;
        } else {
          node = node.left;
        }
      }
    }
  }

  SortedMapIterator.prototype.getNext = function () {
    assert(this.nodeStack.length > 0, 'getNext() called on iterator when hasNext() is false.');
    var node = this.nodeStack.pop();
    var result = {
      key: node.key,
      value: node.value
    };

    if (this.isReverse) {
      node = node.left;

      while (!node.isEmpty()) {
        this.nodeStack.push(node);
        node = node.right;
      }
    } else {
      node = node.right;

      while (!node.isEmpty()) {
        this.nodeStack.push(node);
        node = node.left;
      }
    }

    return result;
  };

  SortedMapIterator.prototype.hasNext = function () {
    return this.nodeStack.length > 0;
  };

  SortedMapIterator.prototype.peek = function () {
    if (this.nodeStack.length === 0) return null;
    var node = this.nodeStack[this.nodeStack.length - 1];
    return {
      key: node.key,
      value: node.value
    };
  };

  return SortedMapIterator;
}(); // end SortedMapIterator
// Represents a node in a Left-leaning Red-Black tree.


var LLRBNode =
/** @class */
function () {
  function LLRBNode(key, value, color, left, right) {
    this.key = key;
    this.value = value;
    this.color = color != null ? color : LLRBNode.RED;
    this.left = left != null ? left : LLRBNode.EMPTY;
    this.right = right != null ? right : LLRBNode.EMPTY;
    this.size = this.left.size + 1 + this.right.size;
  } // Returns a copy of the current node, optionally replacing pieces of it.


  LLRBNode.prototype.copy = function (key, value, color, left, right) {
    return new LLRBNode(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
  };

  LLRBNode.prototype.isEmpty = function () {
    return false;
  }; // Traverses the tree in key order and calls the specified action function
  // for each node. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.


  LLRBNode.prototype.inorderTraversal = function (action) {
    return this.left.inorderTraversal(action) || action(this.key, this.value) || this.right.inorderTraversal(action);
  }; // Traverses the tree in reverse key order and calls the specified action
  // function for each node. If action returns true, traversal is aborted.
  // Returns the first truthy value returned by action, or the last falsey
  // value returned by action.


  LLRBNode.prototype.reverseTraversal = function (action) {
    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);
  }; // Returns the minimum node in the tree.


  LLRBNode.prototype.min = function () {
    if (this.left.isEmpty()) {
      return this;
    } else {
      return this.left.min();
    }
  }; // Returns the maximum key in the tree.


  LLRBNode.prototype.minKey = function () {
    return this.min().key;
  }; // Returns the maximum key in the tree.


  LLRBNode.prototype.maxKey = function () {
    if (this.right.isEmpty()) {
      return this.key;
    } else {
      return this.right.maxKey();
    }
  }; // Returns new tree, with the key/value added.


  LLRBNode.prototype.insert = function (key, value, comparator) {
    var n = this;
    var cmp = comparator(key, n.key);

    if (cmp < 0) {
      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
    } else if (cmp === 0) {
      n = n.copy(null, value, null, null, null);
    } else {
      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
    }

    return n.fixUp();
  };

  LLRBNode.prototype.removeMin = function () {
    if (this.left.isEmpty()) {
      return LLRBNode.EMPTY;
    }

    var n = this;
    if (!n.left.isRed() && !n.left.left.isRed()) n = n.moveRedLeft();
    n = n.copy(null, null, null, n.left.removeMin(), null);
    return n.fixUp();
  }; // Returns new tree, with the specified item removed.


  LLRBNode.prototype.remove = function (key, comparator) {
    var smallest;
    var n = this;

    if (comparator(key, n.key) < 0) {
      if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {
        n = n.moveRedLeft();
      }

      n = n.copy(null, null, null, n.left.remove(key, comparator), null);
    } else {
      if (n.left.isRed()) n = n.rotateRight();

      if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {
        n = n.moveRedRight();
      }

      if (comparator(key, n.key) === 0) {
        if (n.right.isEmpty()) {
          return LLRBNode.EMPTY;
        } else {
          smallest = n.right.min();
          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());
        }
      }

      n = n.copy(null, null, null, null, n.right.remove(key, comparator));
    }

    return n.fixUp();
  };

  LLRBNode.prototype.isRed = function () {
    return this.color;
  }; // Returns new tree after performing any needed rotations.


  LLRBNode.prototype.fixUp = function () {
    var n = this;
    if (n.right.isRed() && !n.left.isRed()) n = n.rotateLeft();
    if (n.left.isRed() && n.left.left.isRed()) n = n.rotateRight();
    if (n.left.isRed() && n.right.isRed()) n = n.colorFlip();
    return n;
  };

  LLRBNode.prototype.moveRedLeft = function () {
    var n = this.colorFlip();

    if (n.right.left.isRed()) {
      n = n.copy(null, null, null, null, n.right.rotateRight());
      n = n.rotateLeft();
      n = n.colorFlip();
    }

    return n;
  };

  LLRBNode.prototype.moveRedRight = function () {
    var n = this.colorFlip();

    if (n.left.left.isRed()) {
      n = n.rotateRight();
      n = n.colorFlip();
    }

    return n;
  };

  LLRBNode.prototype.rotateLeft = function () {
    var nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);
    return this.right.copy(null, null, this.color, nl, null);
  };

  LLRBNode.prototype.rotateRight = function () {
    var nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);
    return this.left.copy(null, null, this.color, null, nr);
  };

  LLRBNode.prototype.colorFlip = function () {
    var left = this.left.copy(null, null, !this.left.color, null, null);
    var right = this.right.copy(null, null, !this.right.color, null, null);
    return this.copy(null, null, !this.color, left, right);
  }; // For testing.


  LLRBNode.prototype.checkMaxDepth = function () {
    var blackDepth = this.check();

    if (Math.pow(2.0, blackDepth) <= this.size + 1) {
      return true;
    } else {
      return false;
    }
  }; // In a balanced RB tree, the black-depth (number of black nodes) from root to
  // leaves is equal on both sides.  This function verifies that or asserts.


  LLRBNode.prototype.check = function () {
    if (this.isRed() && this.left.isRed()) {
      throw fail('Red node has red child(' + this.key + ',' + this.value + ')');
    }

    if (this.right.isRed()) {
      throw fail('Right child of (' + this.key + ',' + this.value + ') is red');
    }

    var blackDepth = this.left.check();

    if (blackDepth !== this.right.check()) {
      throw fail('Black depths differ');
    } else {
      return blackDepth + (this.isRed() ? 0 : 1);
    }
  }; // tslint:disable-next-line:no-any Empty node is shared between all LLRB trees.


  LLRBNode.EMPTY = null;
  LLRBNode.RED = true;
  LLRBNode.BLACK = false;
  return LLRBNode;
}(); // end LLRBNode
// Represents an empty node (a leaf node in the Red-Black Tree).


var LLRBEmptyNode =
/** @class */
function () {
  function LLRBEmptyNode() {
    this.size = 0;
  } // Returns a copy of the current node.


  LLRBEmptyNode.prototype.copy = function (key, value, color, left, right) {
    return this;
  }; // Returns a copy of the tree, with the specified key/value added.


  LLRBEmptyNode.prototype.insert = function (key, value, comparator) {
    return new LLRBNode(key, value);
  }; // Returns a copy of the tree, with the specified key removed.


  LLRBEmptyNode.prototype.remove = function (key, comparator) {
    return this;
  };

  LLRBEmptyNode.prototype.isEmpty = function () {
    return true;
  };

  LLRBEmptyNode.prototype.inorderTraversal = function (action) {
    return false;
  };

  LLRBEmptyNode.prototype.reverseTraversal = function (action) {
    return false;
  };

  LLRBEmptyNode.prototype.minKey = function () {
    return null;
  };

  LLRBEmptyNode.prototype.maxKey = function () {
    return null;
  };

  LLRBEmptyNode.prototype.isRed = function () {
    return false;
  }; // For testing.


  LLRBEmptyNode.prototype.checkMaxDepth = function () {
    return true;
  };

  LLRBEmptyNode.prototype.check = function () {
    return 0;
  };

  return LLRBEmptyNode;
}(); // end LLRBEmptyNode


LLRBNode.EMPTY = new LLRBEmptyNode();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var TypeOrder;

(function (TypeOrder) {
  // This order is defined by the backend.
  TypeOrder[TypeOrder["NullValue"] = 0] = "NullValue";
  TypeOrder[TypeOrder["BooleanValue"] = 1] = "BooleanValue";
  TypeOrder[TypeOrder["NumberValue"] = 2] = "NumberValue";
  TypeOrder[TypeOrder["TimestampValue"] = 3] = "TimestampValue";
  TypeOrder[TypeOrder["StringValue"] = 4] = "StringValue";
  TypeOrder[TypeOrder["BlobValue"] = 5] = "BlobValue";
  TypeOrder[TypeOrder["RefValue"] = 6] = "RefValue";
  TypeOrder[TypeOrder["GeoPointValue"] = 7] = "GeoPointValue";
  TypeOrder[TypeOrder["ArrayValue"] = 8] = "ArrayValue";
  TypeOrder[TypeOrder["ObjectValue"] = 9] = "ObjectValue";
})(TypeOrder || (TypeOrder = {}));
/** Defines the return value for pending server timestamps. */


var ServerTimestampBehavior;

(function (ServerTimestampBehavior) {
  ServerTimestampBehavior[ServerTimestampBehavior["Default"] = 0] = "Default";
  ServerTimestampBehavior[ServerTimestampBehavior["Estimate"] = 1] = "Estimate";
  ServerTimestampBehavior[ServerTimestampBehavior["Previous"] = 2] = "Previous";
})(ServerTimestampBehavior || (ServerTimestampBehavior = {}));
/** Holds properties that define field value deserialization options. */


var FieldValueOptions =
/** @class */
function () {
  function FieldValueOptions(serverTimestampBehavior, timestampsInSnapshots) {
    this.serverTimestampBehavior = serverTimestampBehavior;
    this.timestampsInSnapshots = timestampsInSnapshots;
  }

  FieldValueOptions.fromSnapshotOptions = function (options, timestampsInSnapshots) {
    switch (options.serverTimestamps) {
      case 'estimate':
        return new FieldValueOptions(ServerTimestampBehavior.Estimate, timestampsInSnapshots);

      case 'previous':
        return new FieldValueOptions(ServerTimestampBehavior.Previous, timestampsInSnapshots);

      case 'none': // Fall-through intended.

      case undefined:
        return new FieldValueOptions(ServerTimestampBehavior.Default, timestampsInSnapshots);

      default:
        return fail('fromSnapshotOptions() called with invalid options.');
    }
  };

  return FieldValueOptions;
}();
/**
 * A field value represents a datatype as stored by Firestore.
 */


var FieldValue =
/** @class */
function () {
  function FieldValue() {}

  FieldValue.prototype.toString = function () {
    var val = this.value();
    return val === null ? 'null' : val.toString();
  };

  FieldValue.prototype.defaultCompareTo = function (other) {
    assert(this.typeOrder !== other.typeOrder, 'Default compareTo should not be used for values of same type.');
    var cmp = primitiveComparator(this.typeOrder, other.typeOrder);
    return cmp;
  };

  return FieldValue;
}();

var NullValue =
/** @class */
function (_super) {
  tslib_1.__extends(NullValue, _super);

  function NullValue() {
    var _this = _super.call(this) || this;

    _this.typeOrder = TypeOrder.NullValue; // internalValue is unused but we add it to work around
    // https://github.com/Microsoft/TypeScript/issues/15585

    _this.internalValue = null;
    return _this;
  }

  NullValue.prototype.value = function (options) {
    return null;
  };

  NullValue.prototype.isEqual = function (other) {
    return other instanceof NullValue;
  };

  NullValue.prototype.compareTo = function (other) {
    if (other instanceof NullValue) {
      return 0;
    }

    return this.defaultCompareTo(other);
  };

  NullValue.INSTANCE = new NullValue();
  return NullValue;
}(FieldValue);

var BooleanValue =
/** @class */
function (_super) {
  tslib_1.__extends(BooleanValue, _super);

  function BooleanValue(internalValue) {
    var _this = _super.call(this) || this;

    _this.internalValue = internalValue;
    _this.typeOrder = TypeOrder.BooleanValue;
    return _this;
  }

  BooleanValue.prototype.value = function (options) {
    return this.internalValue;
  };

  BooleanValue.prototype.isEqual = function (other) {
    return other instanceof BooleanValue && this.internalValue === other.internalValue;
  };

  BooleanValue.prototype.compareTo = function (other) {
    if (other instanceof BooleanValue) {
      return primitiveComparator(this, other);
    }

    return this.defaultCompareTo(other);
  };

  BooleanValue.of = function (value) {
    return value ? BooleanValue.TRUE : BooleanValue.FALSE;
  };

  BooleanValue.TRUE = new BooleanValue(true);
  BooleanValue.FALSE = new BooleanValue(false);
  return BooleanValue;
}(FieldValue);
/** Base class for IntegerValue and DoubleValue. */


var NumberValue =
/** @class */
function (_super) {
  tslib_1.__extends(NumberValue, _super);

  function NumberValue(internalValue) {
    var _this = _super.call(this) || this;

    _this.internalValue = internalValue;
    _this.typeOrder = TypeOrder.NumberValue;
    return _this;
  }

  NumberValue.prototype.value = function (options) {
    return this.internalValue;
  };

  NumberValue.prototype.compareTo = function (other) {
    if (other instanceof NumberValue) {
      return numericComparator(this.internalValue, other.internalValue);
    }

    return this.defaultCompareTo(other);
  };

  return NumberValue;
}(FieldValue);
/** Utility function to compare doubles (using Firestore semantics for NaN). */


function numericComparator(left, right) {
  if (left < right) {
    return -1;
  } else if (left > right) {
    return 1;
  } else if (left === right) {
    return 0;
  } else {
    // one or both are NaN.
    if (isNaN(left)) {
      return isNaN(right) ? 0 : -1;
    } else {
      return 1;
    }
  }
}
/**
 * Utility function to check numbers for equality using Firestore semantics
 * (NaN === NaN, -0.0 !== 0.0).
 */


function numericEquals(left, right) {
  // Implemented based on Object.is() polyfill from
  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
  if (left === right) {
    // +0 != -0
    return left !== 0 || 1 / left === 1 / right;
  } else {
    // NaN == NaN
    return left !== left && right !== right;
  }
}

var IntegerValue =
/** @class */
function (_super) {
  tslib_1.__extends(IntegerValue, _super);

  function IntegerValue(internalValue) {
    return _super.call(this, internalValue) || this;
  }

  IntegerValue.prototype.isEqual = function (other) {
    // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,
    // but that doesn't make them equal via isEqual().
    if (other instanceof IntegerValue) {
      return numericEquals(this.internalValue, other.internalValue);
    } else {
      return false;
    }
  };

  return IntegerValue;
}(NumberValue);

var DoubleValue =
/** @class */
function (_super) {
  tslib_1.__extends(DoubleValue, _super);

  function DoubleValue(internalValue) {
    var _this = _super.call(this, internalValue) || this;

    _this.internalValue = internalValue;
    return _this;
  }

  DoubleValue.prototype.isEqual = function (other) {
    // NOTE: DoubleValue and IntegerValue instances may compareTo() the same,
    // but that doesn't make them equal via isEqual().
    if (other instanceof DoubleValue) {
      return numericEquals(this.internalValue, other.internalValue);
    } else {
      return false;
    }
  };

  DoubleValue.NAN = new DoubleValue(NaN);
  DoubleValue.POSITIVE_INFINITY = new DoubleValue(Infinity);
  DoubleValue.NEGATIVE_INFINITY = new DoubleValue(-Infinity);
  return DoubleValue;
}(NumberValue); // TODO(b/37267885): Add truncation support


var StringValue =
/** @class */
function (_super) {
  tslib_1.__extends(StringValue, _super);

  function StringValue(internalValue) {
    var _this = _super.call(this) || this;

    _this.internalValue = internalValue;
    _this.typeOrder = TypeOrder.StringValue;
    return _this;
  }

  StringValue.prototype.value = function (options) {
    return this.internalValue;
  };

  StringValue.prototype.isEqual = function (other) {
    return other instanceof StringValue && this.internalValue === other.internalValue;
  };

  StringValue.prototype.compareTo = function (other) {
    if (other instanceof StringValue) {
      return primitiveComparator(this.internalValue, other.internalValue);
    }

    return this.defaultCompareTo(other);
  };

  return StringValue;
}(FieldValue);

var TimestampValue =
/** @class */
function (_super) {
  tslib_1.__extends(TimestampValue, _super);

  function TimestampValue(internalValue) {
    var _this = _super.call(this) || this;

    _this.internalValue = internalValue;
    _this.typeOrder = TypeOrder.TimestampValue;
    return _this;
  }

  TimestampValue.prototype.value = function (options) {
    if (!options || options.timestampsInSnapshots) {
      return this.internalValue;
    } else {
      return this.internalValue.toDate();
    }
  };

  TimestampValue.prototype.isEqual = function (other) {
    return other instanceof TimestampValue && this.internalValue.isEqual(other.internalValue);
  };

  TimestampValue.prototype.compareTo = function (other) {
    if (other instanceof TimestampValue) {
      return this.internalValue._compareTo(other.internalValue);
    } else if (other instanceof ServerTimestampValue) {
      // Concrete timestamps come before server timestamps.
      return -1;
    } else {
      return this.defaultCompareTo(other);
    }
  };

  return TimestampValue;
}(FieldValue);
/**
 * Represents a locally-applied ServerTimestamp.
 *
 * Notes:
 * - ServerTimestampValue instances are created as the result of applying a
 *   TransformMutation (see TransformMutation.applyTo()). They can only exist in
 *   the local view of a document. Therefore they do not need to be parsed or
 *   serialized.
 * - When evaluated locally (e.g. for snapshot.data()), they by default
 *   evaluate to `null`. This behavior can be configured by passing custom
 *   FieldValueOptions to value().
 * - With respect to other ServerTimestampValues, they sort by their
 *   localWriteTime.
 */


var ServerTimestampValue =
/** @class */
function (_super) {
  tslib_1.__extends(ServerTimestampValue, _super);

  function ServerTimestampValue(localWriteTime, previousValue) {
    var _this = _super.call(this) || this;

    _this.localWriteTime = localWriteTime;
    _this.previousValue = previousValue;
    _this.typeOrder = TypeOrder.TimestampValue;
    return _this;
  }

  ServerTimestampValue.prototype.value = function (options) {
    if (options && options.serverTimestampBehavior === ServerTimestampBehavior.Estimate) {
      return new TimestampValue(this.localWriteTime).value(options);
    } else if (options && options.serverTimestampBehavior === ServerTimestampBehavior.Previous) {
      return this.previousValue ? this.previousValue.value(options) : null;
    } else {
      return null;
    }
  };

  ServerTimestampValue.prototype.isEqual = function (other) {
    return other instanceof ServerTimestampValue && this.localWriteTime.isEqual(other.localWriteTime);
  };

  ServerTimestampValue.prototype.compareTo = function (other) {
    if (other instanceof ServerTimestampValue) {
      return this.localWriteTime._compareTo(other.localWriteTime);
    } else if (other instanceof TimestampValue) {
      // Server timestamps come after all concrete timestamps.
      return 1;
    } else {
      return this.defaultCompareTo(other);
    }
  };

  ServerTimestampValue.prototype.toString = function () {
    return '<ServerTimestamp localTime=' + this.localWriteTime.toString() + '>';
  };

  return ServerTimestampValue;
}(FieldValue);

var BlobValue =
/** @class */
function (_super) {
  tslib_1.__extends(BlobValue, _super);

  function BlobValue(internalValue) {
    var _this = _super.call(this) || this;

    _this.internalValue = internalValue;
    _this.typeOrder = TypeOrder.BlobValue;
    return _this;
  }

  BlobValue.prototype.value = function (options) {
    return this.internalValue;
  };

  BlobValue.prototype.isEqual = function (other) {
    return other instanceof BlobValue && this.internalValue.isEqual(other.internalValue);
  };

  BlobValue.prototype.compareTo = function (other) {
    if (other instanceof BlobValue) {
      return this.internalValue._compareTo(other.internalValue);
    }

    return this.defaultCompareTo(other);
  };

  return BlobValue;
}(FieldValue);

var RefValue =
/** @class */
function (_super) {
  tslib_1.__extends(RefValue, _super);

  function RefValue(databaseId, key) {
    var _this = _super.call(this) || this;

    _this.databaseId = databaseId;
    _this.key = key;
    _this.typeOrder = TypeOrder.RefValue;
    return _this;
  }

  RefValue.prototype.value = function (options) {
    return this.key;
  };

  RefValue.prototype.isEqual = function (other) {
    if (other instanceof RefValue) {
      return this.key.isEqual(other.key) && this.databaseId.isEqual(other.databaseId);
    } else {
      return false;
    }
  };

  RefValue.prototype.compareTo = function (other) {
    if (other instanceof RefValue) {
      var cmp = this.databaseId.compareTo(other.databaseId);
      return cmp !== 0 ? cmp : DocumentKey.comparator(this.key, other.key);
    }

    return this.defaultCompareTo(other);
  };

  return RefValue;
}(FieldValue);

var GeoPointValue =
/** @class */
function (_super) {
  tslib_1.__extends(GeoPointValue, _super);

  function GeoPointValue(internalValue) {
    var _this = _super.call(this) || this;

    _this.internalValue = internalValue;
    _this.typeOrder = TypeOrder.GeoPointValue;
    return _this;
  }

  GeoPointValue.prototype.value = function (options) {
    return this.internalValue;
  };

  GeoPointValue.prototype.isEqual = function (other) {
    return other instanceof GeoPointValue && this.internalValue.isEqual(other.internalValue);
  };

  GeoPointValue.prototype.compareTo = function (other) {
    if (other instanceof GeoPointValue) {
      return this.internalValue._compareTo(other.internalValue);
    }

    return this.defaultCompareTo(other);
  };

  return GeoPointValue;
}(FieldValue);

var ObjectValue =
/** @class */
function (_super) {
  tslib_1.__extends(ObjectValue, _super);

  function ObjectValue(internalValue) {
    var _this = _super.call(this) || this;

    _this.internalValue = internalValue;
    _this.typeOrder = TypeOrder.ObjectValue;
    return _this;
  }

  ObjectValue.prototype.value = function (options) {
    var result = {};
    this.internalValue.inorderTraversal(function (key, val) {
      result[key] = val.value(options);
    });
    return result;
  };

  ObjectValue.prototype.forEach = function (action) {
    this.internalValue.inorderTraversal(action);
  };

  ObjectValue.prototype.isEqual = function (other) {
    if (other instanceof ObjectValue) {
      var it1 = this.internalValue.getIterator();
      var it2 = other.internalValue.getIterator();

      while (it1.hasNext() && it2.hasNext()) {
        var next1 = it1.getNext();
        var next2 = it2.getNext();

        if (next1.key !== next2.key || !next1.value.isEqual(next2.value)) {
          return false;
        }
      }

      return !it1.hasNext() && !it2.hasNext();
    }

    return false;
  };

  ObjectValue.prototype.compareTo = function (other) {
    if (other instanceof ObjectValue) {
      var it1 = this.internalValue.getIterator();
      var it2 = other.internalValue.getIterator();

      while (it1.hasNext() && it2.hasNext()) {
        var next1 = it1.getNext();
        var next2 = it2.getNext();
        var cmp = primitiveComparator(next1.key, next2.key) || next1.value.compareTo(next2.value);

        if (cmp) {
          return cmp;
        }
      } // Only equal if both iterators are exhausted


      return primitiveComparator(it1.hasNext(), it2.hasNext());
    } else {
      return this.defaultCompareTo(other);
    }
  };

  ObjectValue.prototype.set = function (path, to) {
    assert(!path.isEmpty(), 'Cannot set field for empty path on ObjectValue');

    if (path.length === 1) {
      return this.setChild(path.firstSegment(), to);
    } else {
      var child = this.child(path.firstSegment());

      if (!(child instanceof ObjectValue)) {
        child = ObjectValue.EMPTY;
      }

      var newChild = child.set(path.popFirst(), to);
      return this.setChild(path.firstSegment(), newChild);
    }
  };

  ObjectValue.prototype.delete = function (path) {
    assert(!path.isEmpty(), 'Cannot delete field for empty path on ObjectValue');

    if (path.length === 1) {
      return new ObjectValue(this.internalValue.remove(path.firstSegment()));
    } else {
      // nested field
      var child = this.child(path.firstSegment());

      if (child instanceof ObjectValue) {
        var newChild = child.delete(path.popFirst());
        return new ObjectValue(this.internalValue.insert(path.firstSegment(), newChild));
      } else {
        // Don't actually change a primitive value to an object for a delete
        return this;
      }
    }
  };

  ObjectValue.prototype.contains = function (path) {
    return this.field(path) !== undefined;
  };

  ObjectValue.prototype.field = function (path) {
    assert(!path.isEmpty(), "Can't get field of empty path");
    var field = this;
    path.forEach(function (pathSegment) {
      if (field instanceof ObjectValue) {
        field = field.internalValue.get(pathSegment) || undefined;
      } else {
        field = undefined;
      }
    });
    return field;
  };

  ObjectValue.prototype.toString = function () {
    return this.internalValue.toString();
  };

  ObjectValue.prototype.child = function (childName) {
    return this.internalValue.get(childName) || undefined;
  };

  ObjectValue.prototype.setChild = function (childName, value) {
    return new ObjectValue(this.internalValue.insert(childName, value));
  };

  ObjectValue.EMPTY = new ObjectValue(new SortedMap(primitiveComparator));
  return ObjectValue;
}(FieldValue);

var ArrayValue =
/** @class */
function (_super) {
  tslib_1.__extends(ArrayValue, _super);

  function ArrayValue(internalValue) {
    var _this = _super.call(this) || this;

    _this.internalValue = internalValue;
    _this.typeOrder = TypeOrder.ArrayValue;
    return _this;
  }

  ArrayValue.prototype.value = function (options) {
    return this.internalValue.map(function (v) {
      return v.value(options);
    });
  };

  ArrayValue.prototype.forEach = function (action) {
    this.internalValue.forEach(action);
  };

  ArrayValue.prototype.isEqual = function (other) {
    if (other instanceof ArrayValue) {
      if (this.internalValue.length !== other.internalValue.length) {
        return false;
      }

      for (var i = 0; i < this.internalValue.length; i++) {
        if (!this.internalValue[i].isEqual(other.internalValue[i])) {
          return false;
        }
      }

      return true;
    }

    return false;
  };

  ArrayValue.prototype.compareTo = function (other) {
    if (other instanceof ArrayValue) {
      var minLength = Math.min(this.internalValue.length, other.internalValue.length);

      for (var i = 0; i < minLength; i++) {
        var cmp = this.internalValue[i].compareTo(other.internalValue[i]);

        if (cmp) {
          return cmp;
        }
      }

      return primitiveComparator(this.internalValue.length, other.internalValue.length);
    } else {
      return this.defaultCompareTo(other);
    }
  };

  ArrayValue.prototype.toString = function () {
    var descriptions = this.internalValue.map(function (v) {
      return v.toString();
    });
    return "[" + descriptions.join(',') + "]";
  };

  return ArrayValue;
}(FieldValue);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// Untyped Number alias we can use to check for ES6 methods / properties.
// tslint:disable-next-line:no-any variable-name


var NumberAsAny = Number;
/**
 * Minimum safe integer in Javascript because of floating point precision.
 * Added to not rely on ES6 features.
 */

var MIN_SAFE_INTEGER = NumberAsAny.MIN_SAFE_INTEGER || -(Math.pow(2, 53) - 1);
/**
 * Maximum safe integer in Javascript because of floating point precision.
 * Added to not rely on ES6 features.
 */

var MAX_SAFE_INTEGER = NumberAsAny.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
/**
 * Returns whether an number is an integer, uses native implementation if
 * available.
 * Added to not rely on ES6 features.
 * @param value The value to test for being an integer
 */

var isInteger = NumberAsAny.isInteger || function (value) {
  return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
};
/**
 * Returns whether a variable is either undefined or null.
 */


function isNullOrUndefined(value) {
  return value === null || value === undefined;
}
/**
 * Returns whether a value is an integer and in the safe integer range
 * @param value The value to test for being an integer and in the safe range
 */


function isSafeInteger(value) {
  return isInteger(value) && value <= MAX_SAFE_INTEGER && value >= MIN_SAFE_INTEGER;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Query =
/** @class */
function () {
  /**
   * Initializes a Query with a path and optional additional query constraints.
   * Path must currently be empty if this is a collection group query.
   */
  function Query(path, collectionGroup, explicitOrderBy, filters, limit, startAt, endAt) {
    if (collectionGroup === void 0) {
      collectionGroup = null;
    }

    if (explicitOrderBy === void 0) {
      explicitOrderBy = [];
    }

    if (filters === void 0) {
      filters = [];
    }

    if (limit === void 0) {
      limit = null;
    }

    if (startAt === void 0) {
      startAt = null;
    }

    if (endAt === void 0) {
      endAt = null;
    }

    this.path = path;
    this.collectionGroup = collectionGroup;
    this.explicitOrderBy = explicitOrderBy;
    this.filters = filters;
    this.limit = limit;
    this.startAt = startAt;
    this.endAt = endAt;
    this.memoizedCanonicalId = null;
    this.memoizedOrderBy = null;

    if (this.startAt) {
      this.assertValidBound(this.startAt);
    }

    if (this.endAt) {
      this.assertValidBound(this.endAt);
    }
  }

  Query.atPath = function (path) {
    return new Query(path);
  };

  Object.defineProperty(Query.prototype, "orderBy", {
    get: function () {
      if (this.memoizedOrderBy === null) {
        var inequalityField = this.getInequalityFilterField();
        var firstOrderByField = this.getFirstOrderByField();

        if (inequalityField !== null && firstOrderByField === null) {
          // In order to implicitly add key ordering, we must also add the
          // inequality filter field for it to be a valid query.
          // Note that the default inequality field and key ordering is ascending.
          if (inequalityField.isKeyField()) {
            this.memoizedOrderBy = [KEY_ORDERING_ASC];
          } else {
            this.memoizedOrderBy = [new OrderBy(inequalityField), KEY_ORDERING_ASC];
          }
        } else {
          assert(inequalityField === null || firstOrderByField !== null && inequalityField.isEqual(firstOrderByField), 'First orderBy should match inequality field.');
          this.memoizedOrderBy = [];
          var foundKeyOrdering = false;

          for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {
            var orderBy = _a[_i];
            this.memoizedOrderBy.push(orderBy);

            if (orderBy.field.isKeyField()) {
              foundKeyOrdering = true;
            }
          }

          if (!foundKeyOrdering) {
            // The order of the implicit key ordering always matches the last
            // explicit order by
            var lastDirection = this.explicitOrderBy.length > 0 ? this.explicitOrderBy[this.explicitOrderBy.length - 1].dir : Direction.ASCENDING;
            this.memoizedOrderBy.push(lastDirection === Direction.ASCENDING ? KEY_ORDERING_ASC : KEY_ORDERING_DESC);
          }
        }
      }

      return this.memoizedOrderBy;
    },
    enumerable: true,
    configurable: true
  });

  Query.prototype.addFilter = function (filter) {
    assert(this.getInequalityFilterField() == null || !(filter instanceof RelationFilter) || !filter.isInequality() || filter.field.isEqual(this.getInequalityFilterField()), 'Query must only have one inequality field.');
    assert(!this.isDocumentQuery(), 'No filtering allowed for document query');
    var newFilters = this.filters.concat([filter]);
    return new Query(this.path, this.collectionGroup, this.explicitOrderBy.slice(), newFilters, this.limit, this.startAt, this.endAt);
  };

  Query.prototype.addOrderBy = function (orderBy) {
    assert(!this.startAt && !this.endAt, 'Bounds must be set after orderBy'); // TODO(dimond): validate that orderBy does not list the same key twice.

    var newOrderBy = this.explicitOrderBy.concat([orderBy]);
    return new Query(this.path, this.collectionGroup, newOrderBy, this.filters.slice(), this.limit, this.startAt, this.endAt);
  };

  Query.prototype.withLimit = function (limit) {
    return new Query(this.path, this.collectionGroup, this.explicitOrderBy.slice(), this.filters.slice(), limit, this.startAt, this.endAt);
  };

  Query.prototype.withStartAt = function (bound) {
    return new Query(this.path, this.collectionGroup, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, bound, this.endAt);
  };

  Query.prototype.withEndAt = function (bound) {
    return new Query(this.path, this.collectionGroup, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, this.startAt, bound);
  };
  /**
   * Helper to convert a collection group query into a collection query at a
   * specific path. This is used when executing collection group queries, since
   * we have to split the query into a set of collection queries at multiple
   * paths.
   */


  Query.prototype.asCollectionQueryAtPath = function (path) {
    return new Query(path,
    /*collectionGroup=*/
    null, this.explicitOrderBy.slice(), this.filters.slice(), this.limit, this.startAt, this.endAt);
  }; // TODO(b/29183165): This is used to get a unique string from a query to, for
  // example, use as a dictionary key, but the implementation is subject to
  // collisions. Make it collision-free.


  Query.prototype.canonicalId = function () {
    if (this.memoizedCanonicalId === null) {
      var canonicalId = this.path.canonicalString();

      if (this.isCollectionGroupQuery()) {
        canonicalId += '|cg:' + this.collectionGroup;
      }

      canonicalId += '|f:';

      for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {
        var filter = _a[_i];
        canonicalId += filter.canonicalId();
        canonicalId += ',';
      }

      canonicalId += '|ob:'; // TODO(dimond): make this collision resistant

      for (var _b = 0, _c = this.orderBy; _b < _c.length; _b++) {
        var orderBy = _c[_b];
        canonicalId += orderBy.canonicalId();
        canonicalId += ',';
      }

      if (!isNullOrUndefined(this.limit)) {
        canonicalId += '|l:';
        canonicalId += this.limit;
      }

      if (this.startAt) {
        canonicalId += '|lb:';
        canonicalId += this.startAt.canonicalId();
      }

      if (this.endAt) {
        canonicalId += '|ub:';
        canonicalId += this.endAt.canonicalId();
      }

      this.memoizedCanonicalId = canonicalId;
    }

    return this.memoizedCanonicalId;
  };

  Query.prototype.toString = function () {
    var str = 'Query(' + this.path.canonicalString();

    if (this.isCollectionGroupQuery()) {
      str += ' collectionGroup=' + this.collectionGroup;
    }

    if (this.filters.length > 0) {
      str += ", filters: [" + this.filters.join(', ') + "]";
    }

    if (!isNullOrUndefined(this.limit)) {
      str += ', limit: ' + this.limit;
    }

    if (this.explicitOrderBy.length > 0) {
      str += ", orderBy: [" + this.explicitOrderBy.join(', ') + "]";
    }

    if (this.startAt) {
      str += ', startAt: ' + this.startAt.canonicalId();
    }

    if (this.endAt) {
      str += ', endAt: ' + this.endAt.canonicalId();
    }

    return str + ')';
  };

  Query.prototype.isEqual = function (other) {
    if (this.limit !== other.limit) {
      return false;
    }

    if (this.orderBy.length !== other.orderBy.length) {
      return false;
    }

    for (var i = 0; i < this.orderBy.length; i++) {
      if (!this.orderBy[i].isEqual(other.orderBy[i])) {
        return false;
      }
    }

    if (this.filters.length !== other.filters.length) {
      return false;
    }

    for (var i = 0; i < this.filters.length; i++) {
      if (!this.filters[i].isEqual(other.filters[i])) {
        return false;
      }
    }

    if (this.collectionGroup !== other.collectionGroup) {
      return false;
    }

    if (!this.path.isEqual(other.path)) {
      return false;
    }

    if (this.startAt !== null ? !this.startAt.isEqual(other.startAt) : other.startAt !== null) {
      return false;
    }

    return this.endAt !== null ? this.endAt.isEqual(other.endAt) : other.endAt === null;
  };

  Query.prototype.docComparator = function (d1, d2) {
    var comparedOnKeyField = false;

    for (var _i = 0, _a = this.orderBy; _i < _a.length; _i++) {
      var orderBy = _a[_i];
      var comp = orderBy.compare(d1, d2);
      if (comp !== 0) return comp;
      comparedOnKeyField = comparedOnKeyField || orderBy.field.isKeyField();
    } // Assert that we actually compared by key


    assert(comparedOnKeyField, "orderBy used that doesn't compare on key field");
    return 0;
  };

  Query.prototype.matches = function (doc) {
    return this.matchesPathAndCollectionGroup(doc) && this.matchesOrderBy(doc) && this.matchesFilters(doc) && this.matchesBounds(doc);
  };

  Query.prototype.hasLimit = function () {
    return !isNullOrUndefined(this.limit);
  };

  Query.prototype.getFirstOrderByField = function () {
    return this.explicitOrderBy.length > 0 ? this.explicitOrderBy[0].field : null;
  };

  Query.prototype.getInequalityFilterField = function () {
    for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {
      var filter = _a[_i];

      if (filter instanceof RelationFilter && filter.isInequality()) {
        return filter.field;
      }
    }

    return null;
  };

  Query.prototype.hasArrayContainsFilter = function () {
    return this.filters.find(function (filter) {
      return filter instanceof RelationFilter && filter.op === RelationOp.ARRAY_CONTAINS;
    }) !== undefined;
  };

  Query.prototype.isDocumentQuery = function () {
    return DocumentKey.isDocumentKey(this.path) && this.collectionGroup === null && this.filters.length === 0;
  };

  Query.prototype.isCollectionGroupQuery = function () {
    return this.collectionGroup !== null;
  };

  Query.prototype.matchesPathAndCollectionGroup = function (doc) {
    var docPath = doc.key.path;

    if (this.collectionGroup !== null) {
      // NOTE: this.path is currently always empty since we don't expose Collection
      // Group queries rooted at a document path yet.
      return doc.key.hasCollectionId(this.collectionGroup) && this.path.isPrefixOf(docPath);
    } else if (DocumentKey.isDocumentKey(this.path)) {
      // exact match for document queries
      return this.path.isEqual(docPath);
    } else {
      // shallow ancestor queries by default
      return this.path.isImmediateParentOf(docPath);
    }
  };
  /**
   * A document must have a value for every ordering clause in order to show up
   * in the results.
   */


  Query.prototype.matchesOrderBy = function (doc) {
    for (var _i = 0, _a = this.explicitOrderBy; _i < _a.length; _i++) {
      var orderBy = _a[_i]; // order by key always matches

      if (!orderBy.field.isKeyField() && doc.field(orderBy.field) === undefined) {
        return false;
      }
    }

    return true;
  };

  Query.prototype.matchesFilters = function (doc) {
    for (var _i = 0, _a = this.filters; _i < _a.length; _i++) {
      var filter = _a[_i];

      if (!filter.matches(doc)) {
        return false;
      }
    }

    return true;
  };
  /**
   * Makes sure a document is within the bounds, if provided.
   */


  Query.prototype.matchesBounds = function (doc) {
    if (this.startAt && !this.startAt.sortsBeforeDocument(this.orderBy, doc)) {
      return false;
    }

    if (this.endAt && this.endAt.sortsBeforeDocument(this.orderBy, doc)) {
      return false;
    }

    return true;
  };

  Query.prototype.assertValidBound = function (bound) {
    assert(bound.position.length <= this.orderBy.length, 'Bound is longer than orderBy');
  };

  return Query;
}();

var Filter =
/** @class */
function () {
  function Filter() {}
  /**
   * Creates a filter based on the provided arguments.
   */


  Filter.create = function (field, op, value) {
    if (value.isEqual(NullValue.INSTANCE)) {
      if (op !== RelationOp.EQUAL) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals comparisons on null.');
      }

      return new NullFilter(field);
    } else if (value.isEqual(DoubleValue.NAN)) {
      if (op !== RelationOp.EQUAL) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You can only perform equals comparisons on NaN.');
      }

      return new NanFilter(field);
    } else {
      return new RelationFilter(field, op, value);
    }
  };

  return Filter;
}();

var RelationOp =
/** @class */
function () {
  function RelationOp(name) {
    this.name = name;
  }

  RelationOp.fromString = function (op) {
    switch (op) {
      case '<':
        return RelationOp.LESS_THAN;

      case '<=':
        return RelationOp.LESS_THAN_OR_EQUAL;

      case '==':
        return RelationOp.EQUAL;

      case '>=':
        return RelationOp.GREATER_THAN_OR_EQUAL;

      case '>':
        return RelationOp.GREATER_THAN;

      case 'array-contains':
        return RelationOp.ARRAY_CONTAINS;

      default:
        return fail('Unknown relation: ' + op);
    }
  };

  RelationOp.prototype.toString = function () {
    return this.name;
  };

  RelationOp.prototype.isEqual = function (other) {
    return this.name === other.name;
  };

  RelationOp.LESS_THAN = new RelationOp('<');
  RelationOp.LESS_THAN_OR_EQUAL = new RelationOp('<=');
  RelationOp.EQUAL = new RelationOp('==');
  RelationOp.GREATER_THAN = new RelationOp('>');
  RelationOp.GREATER_THAN_OR_EQUAL = new RelationOp('>=');
  RelationOp.ARRAY_CONTAINS = new RelationOp('array-contains');
  return RelationOp;
}();

var RelationFilter =
/** @class */
function (_super) {
  tslib_1.__extends(RelationFilter, _super);

  function RelationFilter(field, op, value) {
    var _this = _super.call(this) || this;

    _this.field = field;
    _this.op = op;
    _this.value = value;
    return _this;
  }

  RelationFilter.prototype.matches = function (doc) {
    if (this.field.isKeyField()) {
      assert(this.value instanceof RefValue, 'Comparing on key, but filter value not a RefValue');
      assert(this.op !== RelationOp.ARRAY_CONTAINS, "array-contains queries don't make sense on document keys.");
      var refValue = this.value;
      var comparison = DocumentKey.comparator(doc.key, refValue.key);
      return this.matchesComparison(comparison);
    } else {
      var val = doc.field(this.field);
      return val !== undefined && this.matchesValue(val);
    }
  };

  RelationFilter.prototype.matchesValue = function (value) {
    var _this = this;

    if (this.op === RelationOp.ARRAY_CONTAINS) {
      return value instanceof ArrayValue && value.internalValue.find(function (element) {
        return element.isEqual(_this.value);
      }) !== undefined;
    } else {
      // Only compare types with matching backend order (such as double and int).
      return this.value.typeOrder === value.typeOrder && this.matchesComparison(value.compareTo(this.value));
    }
  };

  RelationFilter.prototype.matchesComparison = function (comparison) {
    switch (this.op) {
      case RelationOp.LESS_THAN:
        return comparison < 0;

      case RelationOp.LESS_THAN_OR_EQUAL:
        return comparison <= 0;

      case RelationOp.EQUAL:
        return comparison === 0;

      case RelationOp.GREATER_THAN:
        return comparison > 0;

      case RelationOp.GREATER_THAN_OR_EQUAL:
        return comparison >= 0;

      default:
        return fail('Unknown relation op' + this.op);
    }
  };

  RelationFilter.prototype.isInequality = function () {
    return this.op !== RelationOp.EQUAL && this.op !== RelationOp.ARRAY_CONTAINS;
  };

  RelationFilter.prototype.canonicalId = function () {
    // TODO(b/29183165): Technically, this won't be unique if two values have
    // the same description, such as the int 3 and the string "3". So we should
    // add the types in here somehow, too.
    return this.field.canonicalString() + this.op.toString() + this.value.toString();
  };

  RelationFilter.prototype.isEqual = function (other) {
    if (other instanceof RelationFilter) {
      return this.op.isEqual(other.op) && this.field.isEqual(other.field) && this.value.isEqual(other.value);
    } else {
      return false;
    }
  };

  RelationFilter.prototype.toString = function () {
    return this.field.canonicalString() + " " + this.op + " " + this.value.value();
  };

  return RelationFilter;
}(Filter);
/**
 * Filter that matches 'null' values.
 */


var NullFilter =
/** @class */
function (_super) {
  tslib_1.__extends(NullFilter, _super);

  function NullFilter(field) {
    var _this = _super.call(this) || this;

    _this.field = field;
    return _this;
  }

  NullFilter.prototype.matches = function (doc) {
    var val = doc.field(this.field);
    return val !== undefined && val.value() === null;
  };

  NullFilter.prototype.canonicalId = function () {
    return this.field.canonicalString() + ' IS null';
  };

  NullFilter.prototype.toString = function () {
    return this.field.canonicalString() + " IS null";
  };

  NullFilter.prototype.isEqual = function (other) {
    if (other instanceof NullFilter) {
      return this.field.isEqual(other.field);
    } else {
      return false;
    }
  };

  return NullFilter;
}(Filter);
/**
 * Filter that matches 'NaN' values.
 */


var NanFilter =
/** @class */
function (_super) {
  tslib_1.__extends(NanFilter, _super);

  function NanFilter(field) {
    var _this = _super.call(this) || this;

    _this.field = field;
    return _this;
  }

  NanFilter.prototype.matches = function (doc) {
    var field = doc.field(this.field);
    var val = field && field.value();
    return typeof val === 'number' && isNaN(val);
  };

  NanFilter.prototype.canonicalId = function () {
    return this.field.canonicalString() + ' IS NaN';
  };

  NanFilter.prototype.toString = function () {
    return this.field.canonicalString() + " IS NaN";
  };

  NanFilter.prototype.isEqual = function (other) {
    if (other instanceof NanFilter) {
      return this.field.isEqual(other.field);
    } else {
      return false;
    }
  };

  return NanFilter;
}(Filter);
/**
 * The direction of sorting in an order by.
 */


var Direction =
/** @class */
function () {
  function Direction(name) {
    this.name = name;
  }

  Direction.prototype.toString = function () {
    return this.name;
  };

  Direction.ASCENDING = new Direction('asc');
  Direction.DESCENDING = new Direction('desc');
  return Direction;
}();
/**
 * Represents a bound of a query.
 *
 * The bound is specified with the given components representing a position and
 * whether it's just before or just after the position (relative to whatever the
 * query order is).
 *
 * The position represents a logical index position for a query. It's a prefix
 * of values for the (potentially implicit) order by clauses of a query.
 *
 * Bound provides a function to determine whether a document comes before or
 * after a bound. This is influenced by whether the position is just before or
 * just after the provided values.
 */


var Bound =
/** @class */
function () {
  function Bound(position, before) {
    this.position = position;
    this.before = before;
  }

  Bound.prototype.canonicalId = function () {
    // TODO(b/29183165): Make this collision robust.
    var canonicalId = this.before ? 'b:' : 'a:';

    for (var _i = 0, _a = this.position; _i < _a.length; _i++) {
      var component = _a[_i];
      canonicalId += component.toString();
    }

    return canonicalId;
  };
  /**
   * Returns true if a document sorts before a bound using the provided sort
   * order.
   */


  Bound.prototype.sortsBeforeDocument = function (orderBy, doc) {
    assert(this.position.length <= orderBy.length, "Bound has more components than query's orderBy");
    var comparison = 0;

    for (var i = 0; i < this.position.length; i++) {
      var orderByComponent = orderBy[i];
      var component = this.position[i];

      if (orderByComponent.field.isKeyField()) {
        assert(component instanceof RefValue, 'Bound has a non-key value where the key path is being used.');
        comparison = DocumentKey.comparator(component.key, doc.key);
      } else {
        var docValue = doc.field(orderByComponent.field);
        assert(docValue !== undefined, 'Field should exist since document matched the orderBy already.');
        comparison = component.compareTo(docValue);
      }

      if (orderByComponent.dir === Direction.DESCENDING) {
        comparison = comparison * -1;
      }

      if (comparison !== 0) {
        break;
      }
    }

    return this.before ? comparison <= 0 : comparison < 0;
  };

  Bound.prototype.isEqual = function (other) {
    if (other === null) {
      return false;
    }

    if (this.before !== other.before || this.position.length !== other.position.length) {
      return false;
    }

    for (var i = 0; i < this.position.length; i++) {
      var thisPosition = this.position[i];
      var otherPosition = other.position[i];
      return thisPosition.isEqual(otherPosition);
    }

    return true;
  };

  return Bound;
}();
/**
 * An ordering on a field, in some Direction. Direction defaults to ASCENDING.
 */


var OrderBy =
/** @class */
function () {
  function OrderBy(field, dir) {
    this.field = field;

    if (dir === undefined) {
      dir = Direction.ASCENDING;
    }

    this.dir = dir;
    this.isKeyOrderBy = field.isKeyField();
  }

  OrderBy.prototype.compare = function (d1, d2) {
    var comparison = this.isKeyOrderBy ? Document.compareByKey(d1, d2) : Document.compareByField(this.field, d1, d2);

    switch (this.dir) {
      case Direction.ASCENDING:
        return comparison;

      case Direction.DESCENDING:
        return -1 * comparison;

      default:
        return fail('Unknown direction: ' + this.dir);
    }
  };

  OrderBy.prototype.canonicalId = function () {
    // TODO(b/29183165): Make this collision robust.
    return this.field.canonicalString() + this.dir.toString();
  };

  OrderBy.prototype.toString = function () {
    return this.field.canonicalString() + " (" + this.dir + ")";
  };

  OrderBy.prototype.isEqual = function (other) {
    return this.dir === other.dir && this.field.isEqual(other.field);
  };

  return OrderBy;
}();

var KEY_ORDERING_ASC = new OrderBy(FieldPath.keyField(), Direction.ASCENDING);
var KEY_ORDERING_DESC = new OrderBy(FieldPath.keyField(), Direction.DESCENDING);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A version of a document in Firestore. This corresponds to the version
 * timestamp, such as update_time or read_time.
 */

var SnapshotVersion =
/** @class */
function () {
  function SnapshotVersion(timestamp) {
    this.timestamp = timestamp;
  } // TODO(b/34176344): Once we no longer need to use the old alpha protos,
  // delete this constructor and use a timestamp-backed version everywhere.


  SnapshotVersion.fromMicroseconds = function (value) {
    var seconds = Math.floor(value / 1e6);
    var nanos = value % 1e6 * 1e3;
    return new SnapshotVersion(new Timestamp(seconds, nanos));
  };

  SnapshotVersion.fromTimestamp = function (value) {
    return new SnapshotVersion(value);
  };

  SnapshotVersion.forDeletedDoc = function () {
    return SnapshotVersion.MIN;
  };

  SnapshotVersion.prototype.compareTo = function (other) {
    return this.timestamp._compareTo(other.timestamp);
  };

  SnapshotVersion.prototype.isEqual = function (other) {
    return this.timestamp.isEqual(other.timestamp);
  };
  /** Returns a number representation of the version for use in spec tests. */


  SnapshotVersion.prototype.toMicroseconds = function () {
    // Convert to microseconds.
    return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1000;
  };

  SnapshotVersion.prototype.toString = function () {
    return 'SnapshotVersion(' + this.timestamp.toString() + ')';
  };

  SnapshotVersion.prototype.toTimestamp = function () {
    return this.timestamp;
  };

  SnapshotVersion.MIN = new SnapshotVersion(new Timestamp(0, 0));
  return SnapshotVersion;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** An enumeration of the different purposes we have for queries. */


var QueryPurpose;

(function (QueryPurpose) {
  /** A regular, normal query. */
  QueryPurpose[QueryPurpose["Listen"] = 0] = "Listen";
  /**
   * The query was used to refill a query after an existence filter mismatch.
   */

  QueryPurpose[QueryPurpose["ExistenceFilterMismatch"] = 1] = "ExistenceFilterMismatch";
  /** The query was used to resolve a limbo document. */

  QueryPurpose[QueryPurpose["LimboResolution"] = 2] = "LimboResolution";
})(QueryPurpose || (QueryPurpose = {}));
/**
 * An immutable set of metadata that the local store tracks for each query.
 */


var QueryData =
/** @class */
function () {
  function QueryData(
  /** The query being listened to. */
  query,
  /**
   * The target ID to which the query corresponds; Assigned by the
   * LocalStore for user listens and by the SyncEngine for limbo watches.
   */
  targetId,
  /** The purpose of the query. */
  purpose,
  /** The sequence number of the last transaction during which this query data was modified */
  sequenceNumber,
  /** The latest snapshot version seen for this target. */
  snapshotVersion,
  /**
   * An opaque, server-assigned token that allows watching a query to be
   * resumed after disconnecting without retransmitting all the data that
   * matches the query. The resume token essentially identifies a point in
   * time from which the server should resume sending results.
   */
  resumeToken) {
    if (snapshotVersion === void 0) {
      snapshotVersion = SnapshotVersion.MIN;
    }

    if (resumeToken === void 0) {
      resumeToken = emptyByteString();
    }

    this.query = query;
    this.targetId = targetId;
    this.purpose = purpose;
    this.sequenceNumber = sequenceNumber;
    this.snapshotVersion = snapshotVersion;
    this.resumeToken = resumeToken;
  }
  /**
   * Creates a new query data instance with an updated snapshot version and
   * resume token.
   */


  QueryData.prototype.copy = function (overwrite) {
    return new QueryData(this.query, this.targetId, this.purpose, overwrite.sequenceNumber === undefined ? this.sequenceNumber : overwrite.sequenceNumber, overwrite.snapshotVersion === undefined ? this.snapshotVersion : overwrite.snapshotVersion, overwrite.resumeToken === undefined ? this.resumeToken : overwrite.resumeToken);
  };

  QueryData.prototype.isEqual = function (other) {
    return this.targetId === other.targetId && this.purpose === other.purpose && this.sequenceNumber === other.sequenceNumber && this.snapshotVersion.isEqual(other.snapshotVersion) && this.resumeToken === other.resumeToken && this.query.isEqual(other.query);
  };

  return QueryData;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * SortedSet is an immutable (copy-on-write) collection that holds elements
 * in order specified by the provided comparator.
 *
 * NOTE: if provided comparator returns 0 for two elements, we consider them to
 * be equal!
 */


var SortedSet =
/** @class */
function () {
  function SortedSet(comparator) {
    this.comparator = comparator;
    this.data = new SortedMap(this.comparator);
  }
  /**
   * Creates a SortedSet from the keys of the map.
   * This is currently implemented as an O(n) copy.
   */


  SortedSet.fromMapKeys = function (map) {
    var keys = new SortedSet(map.comparator);
    map.forEach(function (key) {
      keys = keys.add(key);
    });
    return keys;
  };

  SortedSet.prototype.has = function (elem) {
    return this.data.get(elem) !== null;
  };

  SortedSet.prototype.first = function () {
    return this.data.minKey();
  };

  SortedSet.prototype.last = function () {
    return this.data.maxKey();
  };

  Object.defineProperty(SortedSet.prototype, "size", {
    get: function () {
      return this.data.size;
    },
    enumerable: true,
    configurable: true
  });

  SortedSet.prototype.indexOf = function (elem) {
    return this.data.indexOf(elem);
  };
  /** Iterates elements in order defined by "comparator" */


  SortedSet.prototype.forEach = function (cb) {
    this.data.inorderTraversal(function (k, v) {
      cb(k);
      return false;
    });
  };
  /** Iterates over `elem`s such that: range[0] <= elem < range[1]. */


  SortedSet.prototype.forEachInRange = function (range, cb) {
    var iter = this.data.getIteratorFrom(range[0]);

    while (iter.hasNext()) {
      var elem = iter.getNext();
      if (this.comparator(elem.key, range[1]) >= 0) return;
      cb(elem.key);
    }
  };
  /**
   * Iterates over `elem`s such that: start <= elem until false is returned.
   */


  SortedSet.prototype.forEachWhile = function (cb, start) {
    var iter;

    if (start !== undefined) {
      iter = this.data.getIteratorFrom(start);
    } else {
      iter = this.data.getIterator();
    }

    while (iter.hasNext()) {
      var elem = iter.getNext();
      var result = cb(elem.key);
      if (!result) return;
    }
  };
  /** Finds the least element greater than or equal to `elem`. */


  SortedSet.prototype.firstAfterOrEqual = function (elem) {
    var iter = this.data.getIteratorFrom(elem);
    return iter.hasNext() ? iter.getNext().key : null;
  };

  SortedSet.prototype.getIterator = function () {
    return new SortedSetIterator(this.data.getIterator());
  };

  SortedSet.prototype.getIteratorFrom = function (key) {
    return new SortedSetIterator(this.data.getIteratorFrom(key));
  };
  /** Inserts or updates an element */


  SortedSet.prototype.add = function (elem) {
    return this.copy(this.data.remove(elem).insert(elem, true));
  };
  /** Deletes an element */


  SortedSet.prototype.delete = function (elem) {
    if (!this.has(elem)) return this;
    return this.copy(this.data.remove(elem));
  };

  SortedSet.prototype.isEmpty = function () {
    return this.data.isEmpty();
  };

  SortedSet.prototype.unionWith = function (other) {
    var result = this;
    other.forEach(function (elem) {
      result = result.add(elem);
    });
    return result;
  };

  SortedSet.prototype.isEqual = function (other) {
    if (!(other instanceof SortedSet)) return false;
    if (this.size !== other.size) return false;
    var thisIt = this.data.getIterator();
    var otherIt = other.data.getIterator();

    while (thisIt.hasNext()) {
      var thisElem = thisIt.getNext().key;
      var otherElem = otherIt.getNext().key;
      if (this.comparator(thisElem, otherElem) !== 0) return false;
    }

    return true;
  };

  SortedSet.prototype.toArray = function () {
    var res = [];
    this.forEach(function (targetId) {
      res.push(targetId);
    });
    return res;
  };

  SortedSet.prototype.toString = function () {
    var result = [];
    this.forEach(function (elem) {
      return result.push(elem);
    });
    return 'SortedSet(' + result.toString() + ')';
  };

  SortedSet.prototype.copy = function (data) {
    var result = new SortedSet(this.comparator);
    result.data = data;
    return result;
  };

  return SortedSet;
}();

var SortedSetIterator =
/** @class */
function () {
  function SortedSetIterator(iter) {
    this.iter = iter;
  }

  SortedSetIterator.prototype.getNext = function () {
    return this.iter.getNext().key;
  };

  SortedSetIterator.prototype.hasNext = function () {
    return this.iter.hasNext();
  };

  return SortedSetIterator;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides a set of fields that can be used to partially patch a document.
 * FieldMask is used in conjunction with ObjectValue.
 * Examples:
 *   foo - Overwrites foo entirely with the provided value. If foo is not
 *         present in the companion ObjectValue, the field is deleted.
 *   foo.bar - Overwrites only the field bar of the object foo.
 *             If foo is not an object, foo is replaced with an object
 *             containing foo
 */


var FieldMask =
/** @class */
function () {
  function FieldMask(fields) {
    this.fields = fields; // TODO(dimond): validation of FieldMask
  }

  FieldMask.fromSet = function (fields) {
    return new FieldMask(fields);
  };

  FieldMask.fromArray = function (fields) {
    var fieldsAsSet = new SortedSet(FieldPath.comparator);
    fields.forEach(function (fieldPath) {
      return fieldsAsSet = fieldsAsSet.add(fieldPath);
    });
    return new FieldMask(fieldsAsSet);
  };
  /**
   * Verifies that `fieldPath` is included by at least one field in this field
   * mask.
   *
   * This is an O(n) operation, where `n` is the size of the field mask.
   */


  FieldMask.prototype.covers = function (fieldPath) {
    var found = false;
    this.fields.forEach(function (fieldMaskPath) {
      if (fieldMaskPath.isPrefixOf(fieldPath)) {
        found = true;
      }
    });
    return found;
  };
  /**
   * Applies this field mask to the provided object value and returns an object
   * that only contains fields that are specified in both the input object and
   * this field mask.
   */


  FieldMask.prototype.applyTo = function (data) {
    var filteredObject = ObjectValue.EMPTY;
    this.fields.forEach(function (fieldMaskPath) {
      if (fieldMaskPath.isEmpty()) {
        return data;
      } else {
        var newValue = data.field(fieldMaskPath);

        if (newValue !== undefined) {
          filteredObject = filteredObject.set(fieldMaskPath, newValue);
        }
      }
    });
    return filteredObject;
  };

  FieldMask.prototype.isEqual = function (other) {
    return this.fields.isEqual(other.fields);
  };

  return FieldMask;
}();
/** A field path and the TransformOperation to perform upon it. */


var FieldTransform =
/** @class */
function () {
  function FieldTransform(field, transform) {
    this.field = field;
    this.transform = transform;
  }

  Object.defineProperty(FieldTransform.prototype, "isIdempotent", {
    /** Whether this field transform is idempotent. */
    get: function () {
      return this.transform.isIdempotent;
    },
    enumerable: true,
    configurable: true
  });

  FieldTransform.prototype.isEqual = function (other) {
    return this.field.isEqual(other.field) && this.transform.isEqual(other.transform);
  };

  return FieldTransform;
}();
/** The result of successfully applying a mutation to the backend. */


var MutationResult =
/** @class */
function () {
  function MutationResult(
  /**
   * The version at which the mutation was committed:
   *
   * - For most operations, this is the updateTime in the WriteResult.
   * - For deletes, the commitTime of the WriteResponse (because deletes are
   *   not stored and have no updateTime).
   *
   * Note that these versions can be different: No-op writes will not change
   * the updateTime even though the commitTime advances.
   */
  version,
  /**
   * The resulting fields returned from the backend after a
   * TransformMutation has been committed. Contains one FieldValue for each
   * FieldTransform that was in the mutation.
   *
   * Will be null if the mutation was not a TransformMutation.
   */
  transformResults) {
    this.version = version;
    this.transformResults = transformResults;
  }

  return MutationResult;
}();

var MutationType;

(function (MutationType) {
  MutationType[MutationType["Set"] = 0] = "Set";
  MutationType[MutationType["Patch"] = 1] = "Patch";
  MutationType[MutationType["Transform"] = 2] = "Transform";
  MutationType[MutationType["Delete"] = 3] = "Delete";
})(MutationType || (MutationType = {}));
/**
 * Encodes a precondition for a mutation. This follows the model that the
 * backend accepts with the special case of an explicit "empty" precondition
 * (meaning no precondition).
 */


var Precondition =
/** @class */
function () {
  function Precondition(updateTime, exists) {
    this.updateTime = updateTime;
    this.exists = exists;
    assert(updateTime === undefined || exists === undefined, 'Precondition can specify "exists" or "updateTime" but not both');
  }
  /** Creates a new Precondition with an exists flag. */


  Precondition.exists = function (exists) {
    return new Precondition(undefined, exists);
  };
  /** Creates a new Precondition based on a version a document exists at. */


  Precondition.updateTime = function (version) {
    return new Precondition(version);
  };

  Object.defineProperty(Precondition.prototype, "isNone", {
    /** Returns whether this Precondition is empty. */
    get: function () {
      return this.updateTime === undefined && this.exists === undefined;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Returns true if the preconditions is valid for the given document
   * (or null if no document is available).
   */

  Precondition.prototype.isValidFor = function (maybeDoc) {
    if (this.updateTime !== undefined) {
      return maybeDoc instanceof Document && maybeDoc.version.isEqual(this.updateTime);
    } else if (this.exists !== undefined) {
      return this.exists === maybeDoc instanceof Document;
    } else {
      assert(this.isNone, 'Precondition should be empty');
      return true;
    }
  };

  Precondition.prototype.isEqual = function (other) {
    return equals(this.updateTime, other.updateTime) && this.exists === other.exists;
  };

  Precondition.NONE = new Precondition();
  return Precondition;
}();
/**
 * A mutation describes a self-contained change to a document. Mutations can
 * create, replace, delete, and update subsets of documents.
 *
 * Mutations not only act on the value of the document but also it version.
 *
 * For local mutations (mutations that haven't been committed yet), we preserve
 * the existing version for Set, Patch, and Transform mutations. For Delete
 * mutations, we reset the version to 0.
 *
 * Here's the expected transition table.
 *
 * MUTATION           APPLIED TO            RESULTS IN
 *
 * SetMutation        Document(v3)          Document(v3)
 * SetMutation        NoDocument(v3)        Document(v0)
 * SetMutation        null                  Document(v0)
 * PatchMutation      Document(v3)          Document(v3)
 * PatchMutation      NoDocument(v3)        NoDocument(v3)
 * PatchMutation      null                  null
 * TransformMutation  Document(v3)          Document(v3)
 * TransformMutation  NoDocument(v3)        NoDocument(v3)
 * TransformMutation  null                  null
 * DeleteMutation     Document(v3)          NoDocument(v0)
 * DeleteMutation     NoDocument(v3)        NoDocument(v0)
 * DeleteMutation     null                  NoDocument(v0)
 *
 * For acknowledged mutations, we use the updateTime of the WriteResponse as
 * the resulting version for Set, Patch, and Transform mutations. As deletes
 * have no explicit update time, we use the commitTime of the WriteResponse for
 * Delete mutations.
 *
 * If a mutation is acknowledged by the backend but fails the precondition check
 * locally, we return an `UnknownDocument` and rely on Watch to send us the
 * updated version.
 *
 * Note that TransformMutations don't create Documents (in the case of being
 * applied to a NoDocument), even though they would on the backend. This is
 * because the client always combines the TransformMutation with a SetMutation
 * or PatchMutation and we only want to apply the transform if the prior
 * mutation resulted in a Document (always true for a SetMutation, but not
 * necessarily for a PatchMutation).
 *
 * ## Subclassing Notes
 *
 * Subclasses of Mutation need to implement applyToRemoteDocument() and
 * applyToLocalView() to implement the actual behavior of applying the mutation
 * to some source document.
 */


var Mutation =
/** @class */
function () {
  function Mutation() {}

  Mutation.prototype.verifyKeyMatches = function (maybeDoc) {
    if (maybeDoc != null) {
      assert(maybeDoc.key.isEqual(this.key), 'Can only apply a mutation to a document with the same key');
    }
  };
  /**
   * Returns the version from the given document for use as the result of a
   * mutation. Mutations are defined to return the version of the base document
   * only if it is an existing document. Deleted and unknown documents have a
   * post-mutation version of SnapshotVersion.MIN.
   */


  Mutation.getPostMutationVersion = function (maybeDoc) {
    if (maybeDoc instanceof Document) {
      return maybeDoc.version;
    } else {
      return SnapshotVersion.MIN;
    }
  };

  return Mutation;
}();
/**
 * A mutation that creates or replaces the document at the given key with the
 * object value contents.
 */


var SetMutation =
/** @class */
function (_super) {
  tslib_1.__extends(SetMutation, _super);

  function SetMutation(key, value, precondition) {
    var _this = _super.call(this) || this;

    _this.key = key;
    _this.value = value;
    _this.precondition = precondition;
    _this.type = MutationType.Set;
    return _this;
  }

  SetMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {
    this.verifyKeyMatches(maybeDoc);
    assert(mutationResult.transformResults == null, 'Transform results received by SetMutation.'); // Unlike applyToLocalView, if we're applying a mutation to a remote
    // document the server has accepted the mutation so the precondition must
    // have held.

    var version = mutationResult.version;
    return new Document(this.key, version, this.value, {
      hasCommittedMutations: true
    });
  };

  SetMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {
    this.verifyKeyMatches(maybeDoc);

    if (!this.precondition.isValidFor(maybeDoc)) {
      return maybeDoc;
    }

    var version = Mutation.getPostMutationVersion(maybeDoc);
    return new Document(this.key, version, this.value, {
      hasLocalMutations: true
    });
  };

  Object.defineProperty(SetMutation.prototype, "isIdempotent", {
    get: function () {
      return true;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(SetMutation.prototype, "fieldMask", {
    get: function () {
      return null;
    },
    enumerable: true,
    configurable: true
  });

  SetMutation.prototype.isEqual = function (other) {
    return other instanceof SetMutation && this.key.isEqual(other.key) && this.value.isEqual(other.value) && this.precondition.isEqual(other.precondition);
  };

  return SetMutation;
}(Mutation);
/**
 * A mutation that modifies fields of the document at the given key with the
 * given values. The values are applied through a field mask:
 *
 *  * When a field is in both the mask and the values, the corresponding field
 *    is updated.
 *  * When a field is in neither the mask nor the values, the corresponding
 *    field is unmodified.
 *  * When a field is in the mask but not in the values, the corresponding field
 *    is deleted.
 *  * When a field is not in the mask but is in the values, the values map is
 *    ignored.
 */


var PatchMutation =
/** @class */
function (_super) {
  tslib_1.__extends(PatchMutation, _super);

  function PatchMutation(key, data, fieldMask, precondition) {
    var _this = _super.call(this) || this;

    _this.key = key;
    _this.data = data;
    _this.fieldMask = fieldMask;
    _this.precondition = precondition;
    _this.type = MutationType.Patch;
    return _this;
  }

  PatchMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {
    this.verifyKeyMatches(maybeDoc);
    assert(mutationResult.transformResults == null, 'Transform results received by PatchMutation.');

    if (!this.precondition.isValidFor(maybeDoc)) {
      // Since the mutation was not rejected, we know that the  precondition
      // matched on the backend. We therefore must not have the expected version
      // of the document in our cache and return an UnknownDocument with the
      // known updateTime.
      return new UnknownDocument(this.key, mutationResult.version);
    }

    var newData = this.patchDocument(maybeDoc);
    return new Document(this.key, mutationResult.version, newData, {
      hasCommittedMutations: true
    });
  };

  PatchMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {
    this.verifyKeyMatches(maybeDoc);

    if (!this.precondition.isValidFor(maybeDoc)) {
      return maybeDoc;
    }

    var version = Mutation.getPostMutationVersion(maybeDoc);
    var newData = this.patchDocument(maybeDoc);
    return new Document(this.key, version, newData, {
      hasLocalMutations: true
    });
  };

  Object.defineProperty(PatchMutation.prototype, "isIdempotent", {
    get: function () {
      return true;
    },
    enumerable: true,
    configurable: true
  });

  PatchMutation.prototype.isEqual = function (other) {
    return other instanceof PatchMutation && this.key.isEqual(other.key) && this.fieldMask.isEqual(other.fieldMask) && this.precondition.isEqual(other.precondition);
  };
  /**
   * Patches the data of document if available or creates a new document. Note
   * that this does not check whether or not the precondition of this patch
   * holds.
   */


  PatchMutation.prototype.patchDocument = function (maybeDoc) {
    var data;

    if (maybeDoc instanceof Document) {
      data = maybeDoc.data;
    } else {
      data = ObjectValue.EMPTY;
    }

    return this.patchObject(data);
  };

  PatchMutation.prototype.patchObject = function (data) {
    var _this = this;

    this.fieldMask.fields.forEach(function (fieldPath) {
      if (!fieldPath.isEmpty()) {
        var newValue = _this.data.field(fieldPath);

        if (newValue !== undefined) {
          data = data.set(fieldPath, newValue);
        } else {
          data = data.delete(fieldPath);
        }
      }
    });
    return data;
  };

  return PatchMutation;
}(Mutation);
/**
 * A mutation that modifies specific fields of the document with transform
 * operations. Currently the only supported transform is a server timestamp, but
 * IP Address, increment(n), etc. could be supported in the future.
 *
 * It is somewhat similar to a PatchMutation in that it patches specific fields
 * and has no effect when applied to a null or NoDocument (see comment on
 * Mutation for rationale).
 */


var TransformMutation =
/** @class */
function (_super) {
  tslib_1.__extends(TransformMutation, _super);

  function TransformMutation(key, fieldTransforms) {
    var _this = _super.call(this) || this;

    _this.key = key;
    _this.fieldTransforms = fieldTransforms;
    _this.type = MutationType.Transform; // NOTE: We set a precondition of exists: true as a safety-check, since we
    // always combine TransformMutations with a SetMutation or PatchMutation which
    // (if successful) should end up with an existing document.

    _this.precondition = Precondition.exists(true);
    return _this;
  }

  TransformMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {
    this.verifyKeyMatches(maybeDoc);
    assert(mutationResult.transformResults != null, 'Transform results missing for TransformMutation.');

    if (!this.precondition.isValidFor(maybeDoc)) {
      // Since the mutation was not rejected, we know that the  precondition
      // matched on the backend. We therefore must not have the expected version
      // of the document in our cache and return an UnknownDocument with the
      // known updateTime.
      return new UnknownDocument(this.key, mutationResult.version);
    }

    var doc = this.requireDocument(maybeDoc);
    var transformResults = this.serverTransformResults(maybeDoc, mutationResult.transformResults);
    var version = mutationResult.version;
    var newData = this.transformObject(doc.data, transformResults);
    return new Document(this.key, version, newData, {
      hasCommittedMutations: true
    });
  };

  TransformMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {
    this.verifyKeyMatches(maybeDoc);

    if (!this.precondition.isValidFor(maybeDoc)) {
      return maybeDoc;
    }

    var doc = this.requireDocument(maybeDoc);
    var transformResults = this.localTransformResults(localWriteTime, baseDoc);
    var newData = this.transformObject(doc.data, transformResults);
    return new Document(this.key, doc.version, newData, {
      hasLocalMutations: true
    });
  };

  Object.defineProperty(TransformMutation.prototype, "isIdempotent", {
    get: function () {
      for (var _i = 0, _a = this.fieldTransforms; _i < _a.length; _i++) {
        var fieldTransform = _a[_i];

        if (!fieldTransform.isIdempotent) {
          return false;
        }
      }

      return true;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TransformMutation.prototype, "fieldMask", {
    get: function () {
      var fieldMask = new SortedSet(FieldPath.comparator);
      this.fieldTransforms.forEach(function (transform) {
        return fieldMask = fieldMask.add(transform.field);
      });
      return new FieldMask(fieldMask);
    },
    enumerable: true,
    configurable: true
  });

  TransformMutation.prototype.isEqual = function (other) {
    return other instanceof TransformMutation && this.key.isEqual(other.key) && arrayEquals(this.fieldTransforms, other.fieldTransforms) && this.precondition.isEqual(other.precondition);
  };
  /**
   * Asserts that the given MaybeDocument is actually a Document and verifies
   * that it matches the key for this mutation. Since we only support
   * transformations with precondition exists this method is guaranteed to be
   * safe.
   */


  TransformMutation.prototype.requireDocument = function (maybeDoc) {
    assert(maybeDoc instanceof Document, 'Unknown MaybeDocument type ' + maybeDoc);
    var doc = maybeDoc;
    assert(doc.key.isEqual(this.key), 'Can only transform a document with the same key');
    return doc;
  };
  /**
   * Creates a list of "transform results" (a transform result is a field value
   * representing the result of applying a transform) for use after a
   * TransformMutation has been acknowledged by the server.
   *
   * @param baseDoc The document prior to applying this mutation batch.
   * @param serverTransformResults The transform results received by the server.
   * @return The transform results list.
   */


  TransformMutation.prototype.serverTransformResults = function (baseDoc, serverTransformResults) {
    var transformResults = [];
    assert(this.fieldTransforms.length === serverTransformResults.length, "server transform result count (" + serverTransformResults.length + ") " + ("should match field transform count (" + this.fieldTransforms.length + ")"));

    for (var i = 0; i < serverTransformResults.length; i++) {
      var fieldTransform = this.fieldTransforms[i];
      var transform = fieldTransform.transform;
      var previousValue = null;

      if (baseDoc instanceof Document) {
        previousValue = baseDoc.field(fieldTransform.field) || null;
      }

      transformResults.push(transform.applyToRemoteDocument(previousValue, serverTransformResults[i]));
    }

    return transformResults;
  };
  /**
   * Creates a list of "transform results" (a transform result is a field value
   * representing the result of applying a transform) for use when applying a
   * TransformMutation locally.
   *
   * @param localWriteTime The local time of the transform mutation (used to
   *     generate ServerTimestampValues).
   * @param baseDoc The document prior to applying this mutation batch.
   * @return The transform results list.
   */


  TransformMutation.prototype.localTransformResults = function (localWriteTime, baseDoc) {
    var transformResults = [];

    for (var _i = 0, _a = this.fieldTransforms; _i < _a.length; _i++) {
      var fieldTransform = _a[_i];
      var transform = fieldTransform.transform;
      var previousValue = null;

      if (baseDoc instanceof Document) {
        previousValue = baseDoc.field(fieldTransform.field) || null;
      }

      transformResults.push(transform.applyToLocalView(previousValue, localWriteTime));
    }

    return transformResults;
  };

  TransformMutation.prototype.transformObject = function (data, transformResults) {
    assert(transformResults.length === this.fieldTransforms.length, 'TransformResults length mismatch.');

    for (var i = 0; i < this.fieldTransforms.length; i++) {
      var fieldTransform = this.fieldTransforms[i];
      var fieldPath = fieldTransform.field;
      data = data.set(fieldPath, transformResults[i]);
    }

    return data;
  };

  return TransformMutation;
}(Mutation);
/** A mutation that deletes the document at the given key. */


var DeleteMutation =
/** @class */
function (_super) {
  tslib_1.__extends(DeleteMutation, _super);

  function DeleteMutation(key, precondition) {
    var _this = _super.call(this) || this;

    _this.key = key;
    _this.precondition = precondition;
    _this.type = MutationType.Delete;
    return _this;
  }

  DeleteMutation.prototype.applyToRemoteDocument = function (maybeDoc, mutationResult) {
    this.verifyKeyMatches(maybeDoc);
    assert(mutationResult.transformResults == null, 'Transform results received by DeleteMutation.'); // Unlike applyToLocalView, if we're applying a mutation to a remote
    // document the server has accepted the mutation so the precondition must
    // have held.

    return new NoDocument(this.key, mutationResult.version, {
      hasCommittedMutations: true
    });
  };

  DeleteMutation.prototype.applyToLocalView = function (maybeDoc, baseDoc, localWriteTime) {
    this.verifyKeyMatches(maybeDoc);

    if (!this.precondition.isValidFor(maybeDoc)) {
      return maybeDoc;
    }

    if (maybeDoc) {
      assert(maybeDoc.key.isEqual(this.key), 'Can only apply mutation to document with same key');
    }

    return new NoDocument(this.key, SnapshotVersion.forDeletedDoc());
  };

  DeleteMutation.prototype.isEqual = function (other) {
    return other instanceof DeleteMutation && this.key.isEqual(other.key) && this.precondition.isEqual(other.precondition);
  };

  Object.defineProperty(DeleteMutation.prototype, "isIdempotent", {
    get: function () {
      return true;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(DeleteMutation.prototype, "fieldMask", {
    get: function () {
      return null;
    },
    enumerable: true,
    configurable: true
  });
  return DeleteMutation;
}(Mutation);
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Transforms a value into a server-generated timestamp. */


var ServerTimestampTransform =
/** @class */
function () {
  function ServerTimestampTransform() {
    this.isIdempotent = true;
  }

  ServerTimestampTransform.prototype.applyToLocalView = function (previousValue, localWriteTime) {
    return new ServerTimestampValue(localWriteTime, previousValue);
  };

  ServerTimestampTransform.prototype.applyToRemoteDocument = function (previousValue, transformResult) {
    return transformResult;
  };

  ServerTimestampTransform.prototype.isEqual = function (other) {
    return other instanceof ServerTimestampTransform;
  };

  ServerTimestampTransform.instance = new ServerTimestampTransform();
  return ServerTimestampTransform;
}();
/** Transforms an array value via a union operation. */


var ArrayUnionTransformOperation =
/** @class */
function () {
  function ArrayUnionTransformOperation(elements) {
    this.elements = elements;
    this.isIdempotent = true;
  }

  ArrayUnionTransformOperation.prototype.applyToLocalView = function (previousValue, localWriteTime) {
    return this.apply(previousValue);
  };

  ArrayUnionTransformOperation.prototype.applyToRemoteDocument = function (previousValue, transformResult) {
    // The server just sends null as the transform result for array operations,
    // so we have to calculate a result the same as we do for local
    // applications.
    return this.apply(previousValue);
  };

  ArrayUnionTransformOperation.prototype.apply = function (previousValue) {
    var result = coercedFieldValuesArray(previousValue);

    var _loop_1 = function (toUnion) {
      if (!result.find(function (element) {
        return element.isEqual(toUnion);
      })) {
        result.push(toUnion);
      }
    };

    for (var _i = 0, _a = this.elements; _i < _a.length; _i++) {
      var toUnion = _a[_i];

      _loop_1(toUnion);
    }

    return new ArrayValue(result);
  };

  ArrayUnionTransformOperation.prototype.isEqual = function (other) {
    return other instanceof ArrayUnionTransformOperation && arrayEquals(other.elements, this.elements);
  };

  return ArrayUnionTransformOperation;
}();
/** Transforms an array value via a remove operation. */


var ArrayRemoveTransformOperation =
/** @class */
function () {
  function ArrayRemoveTransformOperation(elements) {
    this.elements = elements;
    this.isIdempotent = true;
  }

  ArrayRemoveTransformOperation.prototype.applyToLocalView = function (previousValue, localWriteTime) {
    return this.apply(previousValue);
  };

  ArrayRemoveTransformOperation.prototype.applyToRemoteDocument = function (previousValue, transformResult) {
    // The server just sends null as the transform result for array operations,
    // so we have to calculate a result the same as we do for local
    // applications.
    return this.apply(previousValue);
  };

  ArrayRemoveTransformOperation.prototype.apply = function (previousValue) {
    var result = coercedFieldValuesArray(previousValue);

    var _loop_2 = function (toRemove) {
      result = result.filter(function (element) {
        return !element.isEqual(toRemove);
      });
    };

    for (var _i = 0, _a = this.elements; _i < _a.length; _i++) {
      var toRemove = _a[_i];

      _loop_2(toRemove);
    }

    return new ArrayValue(result);
  };

  ArrayRemoveTransformOperation.prototype.isEqual = function (other) {
    return other instanceof ArrayRemoveTransformOperation && arrayEquals(other.elements, this.elements);
  };

  return ArrayRemoveTransformOperation;
}();
/**
 * Implements the backend semantics for locally computed NUMERIC_ADD (increment)
 * transforms. Converts all field values to integers or doubles, but unlike the
 * backend does not cap integer values at 2^63. Instead, JavaScript number
 * arithmetic is used and precision loss can occur for values greater than 2^53.
 */


var NumericIncrementTransformOperation =
/** @class */
function () {
  function NumericIncrementTransformOperation(operand) {
    this.operand = operand;
    this.isIdempotent = false;
  }

  NumericIncrementTransformOperation.prototype.applyToLocalView = function (previousValue, localWriteTime) {
    // PORTING NOTE: Since JavaScript's integer arithmetic is limited to 53 bit
    // precision and resolves overflows by reducing precision, we do not
    // manually cap overflows at 2^63.
    // Return an integer value iff the previous value and the operand is an
    // integer.
    if (previousValue instanceof IntegerValue && this.operand instanceof IntegerValue) {
      var sum = previousValue.internalValue + this.operand.internalValue;
      return new IntegerValue(sum);
    } else if (previousValue instanceof NumberValue) {
      var sum = previousValue.internalValue + this.operand.internalValue;
      return new DoubleValue(sum);
    } else {
      // If the existing value is not a number, use the value of the transform as
      // the new base value.
      return this.operand;
    }
  };

  NumericIncrementTransformOperation.prototype.applyToRemoteDocument = function (previousValue, transformResult) {
    assert(transformResult !== null, "Didn't receive transformResult for NUMERIC_ADD transform");
    return transformResult;
  };

  NumericIncrementTransformOperation.prototype.isEqual = function (other) {
    return other instanceof NumericIncrementTransformOperation && this.operand.isEqual(other.operand);
  };

  return NumericIncrementTransformOperation;
}();

function coercedFieldValuesArray(value) {
  if (value instanceof ArrayValue) {
    return value.internalValue.slice();
  } else {
    // coerce to empty array.
    return [];
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ExistenceFilter =
/** @class */
function () {
  // TODO(b/33078163): just use simplest form of existence filter for now
  function ExistenceFilter(count) {
    this.count = count;
  }

  ExistenceFilter.prototype.isEqual = function (other) {
    return other && other.count === this.count;
  };

  return ExistenceFilter;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Error Codes describing the different ways GRPC can fail. These are copied
 * directly from GRPC's sources here:
 *
 * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h
 *
 * Important! The names of these identifiers matter because the string forms
 * are used for reverse lookups from the webchannel stream. Do NOT change the
 * names of these identifiers.
 */


var RpcCode;

(function (RpcCode) {
  RpcCode[RpcCode["OK"] = 0] = "OK";
  RpcCode[RpcCode["CANCELLED"] = 1] = "CANCELLED";
  RpcCode[RpcCode["UNKNOWN"] = 2] = "UNKNOWN";
  RpcCode[RpcCode["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
  RpcCode[RpcCode["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
  RpcCode[RpcCode["NOT_FOUND"] = 5] = "NOT_FOUND";
  RpcCode[RpcCode["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
  RpcCode[RpcCode["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
  RpcCode[RpcCode["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
  RpcCode[RpcCode["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
  RpcCode[RpcCode["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
  RpcCode[RpcCode["ABORTED"] = 10] = "ABORTED";
  RpcCode[RpcCode["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
  RpcCode[RpcCode["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
  RpcCode[RpcCode["INTERNAL"] = 13] = "INTERNAL";
  RpcCode[RpcCode["UNAVAILABLE"] = 14] = "UNAVAILABLE";
  RpcCode[RpcCode["DATA_LOSS"] = 15] = "DATA_LOSS";
})(RpcCode || (RpcCode = {}));
/**
 * Determines whether an error code represents a permanent error when received
 * in response to a non-write operation.
 *
 * See isPermanentWriteError for classifying write errors.
 */


function isPermanentError(code) {
  switch (code) {
    case Code.OK:
      return fail('Treated status OK as error');

    case Code.CANCELLED:
    case Code.UNKNOWN:
    case Code.DEADLINE_EXCEEDED:
    case Code.RESOURCE_EXHAUSTED:
    case Code.INTERNAL:
    case Code.UNAVAILABLE: // Unauthenticated means something went wrong with our token and we need
    // to retry with new credentials which will happen automatically.

    case Code.UNAUTHENTICATED:
      return false;

    case Code.INVALID_ARGUMENT:
    case Code.NOT_FOUND:
    case Code.ALREADY_EXISTS:
    case Code.PERMISSION_DENIED:
    case Code.FAILED_PRECONDITION: // Aborted might be retried in some scenarios, but that is dependant on
    // the context and should handled individually by the calling code.
    // See https://cloud.google.com/apis/design/errors.

    case Code.ABORTED:
    case Code.OUT_OF_RANGE:
    case Code.UNIMPLEMENTED:
    case Code.DATA_LOSS:
      return true;

    default:
      return fail('Unknown status code: ' + code);
  }
}
/**
 * Determines whether an error code represents a permanent error when received
 * in response to a write operation.
 *
 * Write operations must be handled specially because as of b/119437764, ABORTED
 * errors on the write stream should be retried too (even though ABORTED errors
 * are not generally retryable).
 *
 * Note that during the initial handshake on the write stream an ABORTED error
 * signals that we should discard our stream token (i.e. it is permanent). This
 * means a handshake error should be classified with isPermanentError, above.
 */


function isPermanentWriteError(code) {
  return isPermanentError(code) && code !== Code.ABORTED;
}
/**
 * Maps an error Code from a GRPC status identifier like 'NOT_FOUND'.
 *
 * @returns The Code equivalent to the given status string or undefined if
 *     there is no match.
 */


function mapCodeFromRpcStatus(status) {
  // tslint:disable-next-line:no-any lookup by string
  var code = RpcCode[status];

  if (code === undefined) {
    return undefined;
  }

  return mapCodeFromRpcCode(code);
}
/**
 * Maps an error Code from GRPC status code number, like 0, 1, or 14. These
 * are not the same as HTTP status codes.
 *
 * @returns The Code equivalent to the given GRPC status code. Fails if there
 *     is no match.
 */


function mapCodeFromRpcCode(code) {
  if (code === undefined) {
    // This shouldn't normally happen, but in certain error cases (like trying
    // to send invalid proto messages) we may get an error with no GRPC code.
    error('GRPC error has no .code');
    return Code.UNKNOWN;
  }

  switch (code) {
    case RpcCode.OK:
      return Code.OK;

    case RpcCode.CANCELLED:
      return Code.CANCELLED;

    case RpcCode.UNKNOWN:
      return Code.UNKNOWN;

    case RpcCode.DEADLINE_EXCEEDED:
      return Code.DEADLINE_EXCEEDED;

    case RpcCode.RESOURCE_EXHAUSTED:
      return Code.RESOURCE_EXHAUSTED;

    case RpcCode.INTERNAL:
      return Code.INTERNAL;

    case RpcCode.UNAVAILABLE:
      return Code.UNAVAILABLE;

    case RpcCode.UNAUTHENTICATED:
      return Code.UNAUTHENTICATED;

    case RpcCode.INVALID_ARGUMENT:
      return Code.INVALID_ARGUMENT;

    case RpcCode.NOT_FOUND:
      return Code.NOT_FOUND;

    case RpcCode.ALREADY_EXISTS:
      return Code.ALREADY_EXISTS;

    case RpcCode.PERMISSION_DENIED:
      return Code.PERMISSION_DENIED;

    case RpcCode.FAILED_PRECONDITION:
      return Code.FAILED_PRECONDITION;

    case RpcCode.ABORTED:
      return Code.ABORTED;

    case RpcCode.OUT_OF_RANGE:
      return Code.OUT_OF_RANGE;

    case RpcCode.UNIMPLEMENTED:
      return Code.UNIMPLEMENTED;

    case RpcCode.DATA_LOSS:
      return Code.DATA_LOSS;

    default:
      return fail('Unknown status code: ' + code);
  }
}
/**
 * Maps an RPC code from a Code. This is the reverse operation from
 * mapCodeFromRpcCode and should really only be used in tests.
 */


function mapRpcCodeFromCode(code) {
  if (code === undefined) {
    return RpcCode.OK;
  }

  switch (code) {
    case Code.OK:
      return RpcCode.OK;

    case Code.CANCELLED:
      return RpcCode.CANCELLED;

    case Code.UNKNOWN:
      return RpcCode.UNKNOWN;

    case Code.DEADLINE_EXCEEDED:
      return RpcCode.DEADLINE_EXCEEDED;

    case Code.RESOURCE_EXHAUSTED:
      return RpcCode.RESOURCE_EXHAUSTED;

    case Code.INTERNAL:
      return RpcCode.INTERNAL;

    case Code.UNAVAILABLE:
      return RpcCode.UNAVAILABLE;

    case Code.UNAUTHENTICATED:
      return RpcCode.UNAUTHENTICATED;

    case Code.INVALID_ARGUMENT:
      return RpcCode.INVALID_ARGUMENT;

    case Code.NOT_FOUND:
      return RpcCode.NOT_FOUND;

    case Code.ALREADY_EXISTS:
      return RpcCode.ALREADY_EXISTS;

    case Code.PERMISSION_DENIED:
      return RpcCode.PERMISSION_DENIED;

    case Code.FAILED_PRECONDITION:
      return RpcCode.FAILED_PRECONDITION;

    case Code.ABORTED:
      return RpcCode.ABORTED;

    case Code.OUT_OF_RANGE:
      return RpcCode.OUT_OF_RANGE;

    case Code.UNIMPLEMENTED:
      return RpcCode.UNIMPLEMENTED;

    case Code.DATA_LOSS:
      return RpcCode.DATA_LOSS;

    default:
      return fail('Unknown status code: ' + code);
  }
}
/**
 * Converts an HTTP Status Code to the equivalent error code.
 *
 * @param status An HTTP Status Code, like 200, 404, 503, etc.
 * @returns The equivalent Code. Unknown status codes are mapped to
 *     Code.UNKNOWN.
 */


function mapCodeFromHttpStatus(status) {
  // The canonical error codes for Google APIs [1] specify mapping onto HTTP
  // status codes but the mapping is not bijective. In each case of ambiguity
  // this function chooses a primary error.
  //
  // [1]
  // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto
  switch (status) {
    case 200:
      // OK
      return Code.OK;

    case 400:
      // Bad Request
      return Code.INVALID_ARGUMENT;
    // Other possibilities based on the forward mapping
    // return Code.FAILED_PRECONDITION;
    // return Code.OUT_OF_RANGE;

    case 401:
      // Unauthorized
      return Code.UNAUTHENTICATED;

    case 403:
      // Forbidden
      return Code.PERMISSION_DENIED;

    case 404:
      // Not Found
      return Code.NOT_FOUND;

    case 409:
      // Conflict
      return Code.ABORTED;
    // Other possibilities:
    // return Code.ALREADY_EXISTS;

    case 416:
      // Range Not Satisfiable
      return Code.OUT_OF_RANGE;

    case 429:
      // Too Many Requests
      return Code.RESOURCE_EXHAUSTED;

    case 499:
      // Client Closed Request
      return Code.CANCELLED;

    case 500:
      // Internal Server Error
      return Code.UNKNOWN;
    // Other possibilities:
    // return Code.INTERNAL;
    // return Code.DATA_LOSS;

    case 501:
      // Unimplemented
      return Code.UNIMPLEMENTED;

    case 503:
      // Service Unavailable
      return Code.UNAVAILABLE;

    case 504:
      // Gateway Timeout
      return Code.DEADLINE_EXCEEDED;

    default:
      if (status >= 200 && status < 300) return Code.OK;
      if (status >= 400 && status < 500) return Code.FAILED_PRECONDITION;
      if (status >= 500 && status < 600) return Code.INTERNAL;
      return Code.UNKNOWN;
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var EMPTY_MAYBE_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);

function maybeDocumentMap() {
  return EMPTY_MAYBE_DOCUMENT_MAP;
}

function nullableMaybeDocumentMap() {
  return maybeDocumentMap();
}

var EMPTY_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);

function documentMap() {
  return EMPTY_DOCUMENT_MAP;
}

var EMPTY_DOCUMENT_VERSION_MAP = new SortedMap(DocumentKey.comparator);

function documentVersionMap() {
  return EMPTY_DOCUMENT_VERSION_MAP;
}

var EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);

function documentKeySet() {
  var keys = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    keys[_i] = arguments[_i];
  }

  var set = EMPTY_DOCUMENT_KEY_SET;

  for (var _a = 0, keys_1 = keys; _a < keys_1.length; _a++) {
    var key = keys_1[_a];
    set = set.add(key);
  }

  return set;
}

var EMPTY_TARGET_ID_SET = new SortedSet(primitiveComparator);

function targetIdSet() {
  return EMPTY_TARGET_ID_SET;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * DocumentSet is an immutable (copy-on-write) collection that holds documents
 * in order specified by the provided comparator. We always add a document key
 * comparator on top of what is provided to guarantee document equality based on
 * the key.
 */


var DocumentSet =
/** @class */
function () {
  /** The default ordering is by key if the comparator is omitted */
  function DocumentSet(comp) {
    // We are adding document key comparator to the end as it's the only
    // guaranteed unique property of a document.
    if (comp) {
      this.comparator = function (d1, d2) {
        return comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);
      };
    } else {
      this.comparator = function (d1, d2) {
        return DocumentKey.comparator(d1.key, d2.key);
      };
    }

    this.keyedMap = documentMap();
    this.sortedSet = new SortedMap(this.comparator);
  }
  /**
   * Returns an empty copy of the existing DocumentSet, using the same
   * comparator.
   */


  DocumentSet.emptySet = function (oldSet) {
    return new DocumentSet(oldSet.comparator);
  };

  DocumentSet.prototype.has = function (key) {
    return this.keyedMap.get(key) != null;
  };

  DocumentSet.prototype.get = function (key) {
    return this.keyedMap.get(key);
  };

  DocumentSet.prototype.first = function () {
    return this.sortedSet.minKey();
  };

  DocumentSet.prototype.last = function () {
    return this.sortedSet.maxKey();
  };

  DocumentSet.prototype.isEmpty = function () {
    return this.sortedSet.isEmpty();
  };
  /**
   * Returns the index of the provided key in the document set, or -1 if the
   * document key is not present in the set;
   */


  DocumentSet.prototype.indexOf = function (key) {
    var doc = this.keyedMap.get(key);
    return doc ? this.sortedSet.indexOf(doc) : -1;
  };

  Object.defineProperty(DocumentSet.prototype, "size", {
    get: function () {
      return this.sortedSet.size;
    },
    enumerable: true,
    configurable: true
  });
  /** Iterates documents in order defined by "comparator" */

  DocumentSet.prototype.forEach = function (cb) {
    this.sortedSet.inorderTraversal(function (k, v) {
      cb(k);
      return false;
    });
  };
  /** Inserts or updates a document with the same key */


  DocumentSet.prototype.add = function (doc) {
    // First remove the element if we have it.
    var set = this.delete(doc.key);
    return set.copy(set.keyedMap.insert(doc.key, doc), set.sortedSet.insert(doc, null));
  };
  /** Deletes a document with a given key */


  DocumentSet.prototype.delete = function (key) {
    var doc = this.get(key);

    if (!doc) {
      return this;
    }

    return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc));
  };

  DocumentSet.prototype.isEqual = function (other) {
    if (!(other instanceof DocumentSet)) return false;
    if (this.size !== other.size) return false;
    var thisIt = this.sortedSet.getIterator();
    var otherIt = other.sortedSet.getIterator();

    while (thisIt.hasNext()) {
      var thisDoc = thisIt.getNext().key;
      var otherDoc = otherIt.getNext().key;
      if (!thisDoc.isEqual(otherDoc)) return false;
    }

    return true;
  };

  DocumentSet.prototype.toString = function () {
    var docStrings = [];
    this.forEach(function (doc) {
      docStrings.push(doc.toString());
    });

    if (docStrings.length === 0) {
      return 'DocumentSet ()';
    } else {
      return 'DocumentSet (\n  ' + docStrings.join('  \n') + '\n)';
    }
  };

  DocumentSet.prototype.copy = function (keyedMap, sortedSet) {
    var newSet = new DocumentSet();
    newSet.comparator = this.comparator;
    newSet.keyedMap = keyedMap;
    newSet.sortedSet = sortedSet;
    return newSet;
  };

  return DocumentSet;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var ChangeType;

(function (ChangeType) {
  ChangeType[ChangeType["Added"] = 0] = "Added";
  ChangeType[ChangeType["Removed"] = 1] = "Removed";
  ChangeType[ChangeType["Modified"] = 2] = "Modified";
  ChangeType[ChangeType["Metadata"] = 3] = "Metadata";
})(ChangeType || (ChangeType = {}));

var SyncState;

(function (SyncState) {
  SyncState[SyncState["Local"] = 0] = "Local";
  SyncState[SyncState["Synced"] = 1] = "Synced";
})(SyncState || (SyncState = {}));
/**
 * DocumentChangeSet keeps track of a set of changes to docs in a query, merging
 * duplicate events for the same doc.
 */


var DocumentChangeSet =
/** @class */
function () {
  function DocumentChangeSet() {
    this.changeMap = new SortedMap(DocumentKey.comparator);
  }

  DocumentChangeSet.prototype.track = function (change) {
    var key = change.doc.key;
    var oldChange = this.changeMap.get(key);

    if (!oldChange) {
      this.changeMap = this.changeMap.insert(key, change);
      return;
    } // Merge the new change with the existing change.


    if (change.type !== ChangeType.Added && oldChange.type === ChangeType.Metadata) {
      this.changeMap = this.changeMap.insert(key, change);
    } else if (change.type === ChangeType.Metadata && oldChange.type !== ChangeType.Removed) {
      this.changeMap = this.changeMap.insert(key, {
        type: oldChange.type,
        doc: change.doc
      });
    } else if (change.type === ChangeType.Modified && oldChange.type === ChangeType.Modified) {
      this.changeMap = this.changeMap.insert(key, {
        type: ChangeType.Modified,
        doc: change.doc
      });
    } else if (change.type === ChangeType.Modified && oldChange.type === ChangeType.Added) {
      this.changeMap = this.changeMap.insert(key, {
        type: ChangeType.Added,
        doc: change.doc
      });
    } else if (change.type === ChangeType.Removed && oldChange.type === ChangeType.Added) {
      this.changeMap = this.changeMap.remove(key);
    } else if (change.type === ChangeType.Removed && oldChange.type === ChangeType.Modified) {
      this.changeMap = this.changeMap.insert(key, {
        type: ChangeType.Removed,
        doc: oldChange.doc
      });
    } else if (change.type === ChangeType.Added && oldChange.type === ChangeType.Removed) {
      this.changeMap = this.changeMap.insert(key, {
        type: ChangeType.Modified,
        doc: change.doc
      });
    } else {
      // This includes these cases, which don't make sense:
      // Added->Added
      // Removed->Removed
      // Modified->Added
      // Removed->Modified
      // Metadata->Added
      // Removed->Metadata
      fail('unsupported combination of changes: ' + JSON.stringify(change) + ' after ' + JSON.stringify(oldChange));
    }
  };

  DocumentChangeSet.prototype.getChanges = function () {
    var changes = [];
    this.changeMap.inorderTraversal(function (key, change) {
      changes.push(change);
    });
    return changes;
  };

  return DocumentChangeSet;
}();

var ViewSnapshot =
/** @class */
function () {
  function ViewSnapshot(query, docs, oldDocs, docChanges, mutatedKeys, fromCache, syncStateChanged, excludesMetadataChanges) {
    this.query = query;
    this.docs = docs;
    this.oldDocs = oldDocs;
    this.docChanges = docChanges;
    this.mutatedKeys = mutatedKeys;
    this.fromCache = fromCache;
    this.syncStateChanged = syncStateChanged;
    this.excludesMetadataChanges = excludesMetadataChanges;
  }
  /** Returns a view snapshot as if all documents in the snapshot were added. */


  ViewSnapshot.fromInitialDocuments = function (query, documents, mutatedKeys, fromCache) {
    var changes = [];
    documents.forEach(function (doc) {
      changes.push({
        type: ChangeType.Added,
        doc: doc
      });
    });
    return new ViewSnapshot(query, documents, DocumentSet.emptySet(documents), changes, mutatedKeys, fromCache, true, false);
  };

  Object.defineProperty(ViewSnapshot.prototype, "hasPendingWrites", {
    get: function () {
      return !this.mutatedKeys.isEmpty();
    },
    enumerable: true,
    configurable: true
  });

  ViewSnapshot.prototype.isEqual = function (other) {
    if (this.fromCache !== other.fromCache || this.syncStateChanged !== other.syncStateChanged || !this.mutatedKeys.isEqual(other.mutatedKeys) || !this.query.isEqual(other.query) || !this.docs.isEqual(other.docs) || !this.oldDocs.isEqual(other.oldDocs)) {
      return false;
    }

    var changes = this.docChanges;
    var otherChanges = other.docChanges;

    if (changes.length !== otherChanges.length) {
      return false;
    }

    for (var i = 0; i < changes.length; i++) {
      if (changes[i].type !== otherChanges[i].type || !changes[i].doc.isEqual(otherChanges[i].doc)) {
        return false;
      }
    }

    return true;
  };

  return ViewSnapshot;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An event from the RemoteStore. It is split into targetChanges (changes to the
 * state or the set of documents in our watched targets) and documentUpdates
 * (changes to the actual documents).
 */


var RemoteEvent =
/** @class */
function () {
  function RemoteEvent(
  /**
   * The snapshot version this event brings us up to, or MIN if not set.
   */
  snapshotVersion,
  /**
   * A map from target to changes to the target. See TargetChange.
   */
  targetChanges,
  /**
   * A set of targets that is known to be inconsistent. Listens for these
   * targets should be re-established without resume tokens.
   */
  targetMismatches,
  /**
   * A set of which documents have changed or been deleted, along with the
   * doc's new values (if not deleted).
   */
  documentUpdates,
  /**
   * A set of which document updates are due only to limbo resolution targets.
   */
  resolvedLimboDocuments) {
    this.snapshotVersion = snapshotVersion;
    this.targetChanges = targetChanges;
    this.targetMismatches = targetMismatches;
    this.documentUpdates = documentUpdates;
    this.resolvedLimboDocuments = resolvedLimboDocuments;
  }
  /**
   * HACK: Views require RemoteEvents in order to determine whether the view is
   * CURRENT, but secondary tabs don't receive remote events. So this method is
   * used to create a synthesized RemoteEvent that can be used to apply a
   * CURRENT status change to a View, for queries executed in a different tab.
   */
  // PORTING NOTE: Multi-tab only


  RemoteEvent.createSynthesizedRemoteEventForCurrentChange = function (targetId, current) {
    var _a;

    var targetChanges = (_a = {}, _a[targetId] = TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current), _a);
    return new RemoteEvent(SnapshotVersion.MIN, targetChanges, targetIdSet(), maybeDocumentMap(), documentKeySet());
  };

  return RemoteEvent;
}();
/**
 * A TargetChange specifies the set of changes for a specific target as part of
 * a RemoteEvent. These changes track which documents are added, modified or
 * removed, as well as the target's resume token and whether the target is
 * marked CURRENT.
 * The actual changes *to* documents are not part of the TargetChange since
 * documents may be part of multiple targets.
 */


var TargetChange =
/** @class */
function () {
  function TargetChange(
  /**
   * An opaque, server-assigned token that allows watching a query to be resumed
   * after disconnecting without retransmitting all the data that matches the
   * query. The resume token essentially identifies a point in time from which
   * the server should resume sending results.
   */
  resumeToken,
  /**
   * The "current" (synced) status of this target. Note that "current"
   * has special meaning in the RPC protocol that implies that a target is
   * both up-to-date and consistent with the rest of the watch stream.
   */
  current,
  /**
   * The set of documents that were newly assigned to this target as part of
   * this remote event.
   */
  addedDocuments,
  /**
   * The set of documents that were already assigned to this target but received
   * an update during this remote event.
   */
  modifiedDocuments,
  /**
   * The set of documents that were removed from this target as part of this
   * remote event.
   */
  removedDocuments) {
    this.resumeToken = resumeToken;
    this.current = current;
    this.addedDocuments = addedDocuments;
    this.modifiedDocuments = modifiedDocuments;
    this.removedDocuments = removedDocuments;
  }
  /**
   * HACK: Views require TargetChanges in order to determine whether the view is
   * CURRENT, but secondary tabs don't receive remote events. So this method is
   * used to create a synthesized TargetChanges that can be used to apply a
   * CURRENT status change to a View, for queries executed in a different tab.
   */
  // PORTING NOTE: Multi-tab only


  TargetChange.createSynthesizedTargetChangeForCurrentChange = function (targetId, current) {
    return new TargetChange(emptyByteString(), current, documentKeySet(), documentKeySet(), documentKeySet());
  };

  return TargetChange;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Represents a changed document and a list of target ids to which this change
 * applies.
 *
 * If document has been deleted NoDocument will be provided.
 */


var DocumentWatchChange =
/** @class */
function () {
  function DocumentWatchChange(
  /** The new document applies to all of these targets. */
  updatedTargetIds,
  /** The new document is removed from all of these targets. */
  removedTargetIds,
  /** The key of the document for this change. */
  key,
  /**
   * The new document or NoDocument if it was deleted. Is null if the
   * document went out of view without the server sending a new document.
   */
  newDoc) {
    this.updatedTargetIds = updatedTargetIds;
    this.removedTargetIds = removedTargetIds;
    this.key = key;
    this.newDoc = newDoc;
  }

  return DocumentWatchChange;
}();

var ExistenceFilterChange =
/** @class */
function () {
  function ExistenceFilterChange(targetId, existenceFilter) {
    this.targetId = targetId;
    this.existenceFilter = existenceFilter;
  }

  return ExistenceFilterChange;
}();

var WatchTargetChangeState;

(function (WatchTargetChangeState) {
  WatchTargetChangeState[WatchTargetChangeState["NoChange"] = 0] = "NoChange";
  WatchTargetChangeState[WatchTargetChangeState["Added"] = 1] = "Added";
  WatchTargetChangeState[WatchTargetChangeState["Removed"] = 2] = "Removed";
  WatchTargetChangeState[WatchTargetChangeState["Current"] = 3] = "Current";
  WatchTargetChangeState[WatchTargetChangeState["Reset"] = 4] = "Reset";
})(WatchTargetChangeState || (WatchTargetChangeState = {}));

var WatchTargetChange =
/** @class */
function () {
  function WatchTargetChange(
  /** What kind of change occurred to the watch target. */
  state,
  /** The target IDs that were added/removed/set. */
  targetIds,
  /**
   * An opaque, server-assigned token that allows watching a query to be
   * resumed after disconnecting without retransmitting all the data that
   * matches the query. The resume token essentially identifies a point in
   * time from which the server should resume sending results.
   */
  resumeToken,
  /** An RPC error indicating why the watch failed. */
  cause) {
    if (resumeToken === void 0) {
      resumeToken = emptyByteString();
    }

    if (cause === void 0) {
      cause = null;
    }

    this.state = state;
    this.targetIds = targetIds;
    this.resumeToken = resumeToken;
    this.cause = cause;
  }

  return WatchTargetChange;
}();
/** Tracks the internal state of a Watch target. */


var TargetState =
/** @class */
function () {
  function TargetState() {
    /**
     * The number of pending responses (adds or removes) that we are waiting on.
     * We only consider targets active that have no pending responses.
     */
    this.pendingResponses = 0;
    /**
     * Keeps track of the document changes since the last raised snapshot.
     *
     * These changes are continuously updated as we receive document updates and
     * always reflect the current set of changes against the last issued snapshot.
     */

    this.documentChanges = snapshotChangesMap();
    /** See public getters for explanations of these fields. */

    this._resumeToken = emptyByteString();
    this._current = false;
    /**
     * Whether this target state should be included in the next snapshot. We
     * initialize to true so that newly-added targets are included in the next
     * RemoteEvent.
     */

    this._hasPendingChanges = true;
  }

  Object.defineProperty(TargetState.prototype, "current", {
    /**
     * Whether this target has been marked 'current'.
     *
     * 'Current' has special meaning in the RPC protocol: It implies that the
     * Watch backend has sent us all changes up to the point at which the target
     * was added and that the target is consistent with the rest of the watch
     * stream.
     */
    get: function () {
      return this._current;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TargetState.prototype, "resumeToken", {
    /** The last resume token sent to us for this target. */
    get: function () {
      return this._resumeToken;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TargetState.prototype, "isPending", {
    /** Whether this target has pending target adds or target removes. */
    get: function () {
      return this.pendingResponses !== 0;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(TargetState.prototype, "hasPendingChanges", {
    /** Whether we have modified any state that should trigger a snapshot. */
    get: function () {
      return this._hasPendingChanges;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Applies the resume token to the TargetChange, but only when it has a new
   * value. Empty resumeTokens are discarded.
   */

  TargetState.prototype.updateResumeToken = function (resumeToken) {
    if (resumeToken.length > 0) {
      this._hasPendingChanges = true;
      this._resumeToken = resumeToken;
    }
  };
  /**
   * Creates a target change from the current set of changes.
   *
   * To reset the document changes after raising this snapshot, call
   * `clearPendingChanges()`.
   */


  TargetState.prototype.toTargetChange = function () {
    var addedDocuments = documentKeySet();
    var modifiedDocuments = documentKeySet();
    var removedDocuments = documentKeySet();
    this.documentChanges.forEach(function (key, changeType) {
      switch (changeType) {
        case ChangeType.Added:
          addedDocuments = addedDocuments.add(key);
          break;

        case ChangeType.Modified:
          modifiedDocuments = modifiedDocuments.add(key);
          break;

        case ChangeType.Removed:
          removedDocuments = removedDocuments.add(key);
          break;

        default:
          fail('Encountered invalid change type: ' + changeType);
      }
    });
    return new TargetChange(this._resumeToken, this._current, addedDocuments, modifiedDocuments, removedDocuments);
  };
  /**
   * Resets the document changes and sets `hasPendingChanges` to false.
   */


  TargetState.prototype.clearPendingChanges = function () {
    this._hasPendingChanges = false;
    this.documentChanges = snapshotChangesMap();
  };

  TargetState.prototype.addDocumentChange = function (key, changeType) {
    this._hasPendingChanges = true;
    this.documentChanges = this.documentChanges.insert(key, changeType);
  };

  TargetState.prototype.removeDocumentChange = function (key) {
    this._hasPendingChanges = true;
    this.documentChanges = this.documentChanges.remove(key);
  };

  TargetState.prototype.recordPendingTargetRequest = function () {
    this.pendingResponses += 1;
  };

  TargetState.prototype.recordTargetResponse = function () {
    this.pendingResponses -= 1;
  };

  TargetState.prototype.markCurrent = function () {
    this._hasPendingChanges = true;
    this._current = true;
  };

  return TargetState;
}();
/**
 * A helper class to accumulate watch changes into a RemoteEvent.
 */


var WatchChangeAggregator =
/** @class */
function () {
  function WatchChangeAggregator(metadataProvider) {
    this.metadataProvider = metadataProvider;
    /** The internal state of all tracked targets. */

    this.targetStates = {};
    /** Keeps track of the documents to update since the last raised snapshot. */

    this.pendingDocumentUpdates = maybeDocumentMap();
    /** A mapping of document keys to their set of target IDs. */

    this.pendingDocumentTargetMapping = documentTargetMap();
    /**
     * A list of targets with existence filter mismatches. These targets are
     * known to be inconsistent and their listens needs to be re-established by
     * RemoteStore.
     */

    this.pendingTargetResets = new SortedSet(primitiveComparator);
  }
  /**
   * Processes and adds the DocumentWatchChange to the current set of changes.
   */


  WatchChangeAggregator.prototype.handleDocumentChange = function (docChange) {
    for (var _i = 0, _a = docChange.updatedTargetIds; _i < _a.length; _i++) {
      var targetId = _a[_i];

      if (docChange.newDoc instanceof Document) {
        this.addDocumentToTarget(targetId, docChange.newDoc);
      } else if (docChange.newDoc instanceof NoDocument) {
        this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);
      }
    }

    for (var _b = 0, _c = docChange.removedTargetIds; _b < _c.length; _b++) {
      var targetId = _c[_b];
      this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);
    }
  };
  /** Processes and adds the WatchTargetChange to the current set of changes. */


  WatchChangeAggregator.prototype.handleTargetChange = function (targetChange) {
    var _this = this;

    this.forEachTarget(targetChange, function (targetId) {
      var targetState = _this.ensureTargetState(targetId);

      switch (targetChange.state) {
        case WatchTargetChangeState.NoChange:
          if (_this.isActiveTarget(targetId)) {
            targetState.updateResumeToken(targetChange.resumeToken);
          }

          break;

        case WatchTargetChangeState.Added:
          // We need to decrement the number of pending acks needed from watch
          // for this targetId.
          targetState.recordTargetResponse();

          if (!targetState.isPending) {
            // We have a freshly added target, so we need to reset any state
            // that we had previously. This can happen e.g. when remove and add
            // back a target for existence filter mismatches.
            targetState.clearPendingChanges();
          }

          targetState.updateResumeToken(targetChange.resumeToken);
          break;

        case WatchTargetChangeState.Removed:
          // We need to keep track of removed targets to we can post-filter and
          // remove any target changes.
          // We need to decrement the number of pending acks needed from watch
          // for this targetId.
          targetState.recordTargetResponse();

          if (!targetState.isPending) {
            _this.removeTarget(targetId);
          }

          assert(!targetChange.cause, 'WatchChangeAggregator does not handle errored targets');
          break;

        case WatchTargetChangeState.Current:
          if (_this.isActiveTarget(targetId)) {
            targetState.markCurrent();
            targetState.updateResumeToken(targetChange.resumeToken);
          }

          break;

        case WatchTargetChangeState.Reset:
          if (_this.isActiveTarget(targetId)) {
            // Reset the target and synthesizes removes for all existing
            // documents. The backend will re-add any documents that still
            // match the target before it sends the next global snapshot.
            _this.resetTarget(targetId);

            targetState.updateResumeToken(targetChange.resumeToken);
          }

          break;

        default:
          fail('Unknown target watch change state: ' + targetChange.state);
      }
    });
  };
  /**
   * Iterates over all targetIds that the watch change applies to: either the
   * targetIds explicitly listed in the change or the targetIds of all currently
   * active targets.
   */


  WatchChangeAggregator.prototype.forEachTarget = function (targetChange, fn) {
    if (targetChange.targetIds.length > 0) {
      targetChange.targetIds.forEach(fn);
    } else {
      forEachNumber(this.targetStates, fn);
    }
  };
  /**
   * Handles existence filters and synthesizes deletes for filter mismatches.
   * Targets that are invalidated by filter mismatches are added to
   * `pendingTargetResets`.
   */


  WatchChangeAggregator.prototype.handleExistenceFilter = function (watchChange) {
    var targetId = watchChange.targetId;
    var expectedCount = watchChange.existenceFilter.count;
    var queryData = this.queryDataForActiveTarget(targetId);

    if (queryData) {
      var query = queryData.query;

      if (query.isDocumentQuery()) {
        if (expectedCount === 0) {
          // The existence filter told us the document does not exist. We deduce
          // that this document does not exist and apply a deleted document to
          // our updates. Without applying this deleted document there might be
          // another query that will raise this document as part of a snapshot
          // until it is resolved, essentially exposing inconsistency between
          // queries.
          var key = new DocumentKey(query.path);
          this.removeDocumentFromTarget(targetId, key, new NoDocument(key, SnapshotVersion.forDeletedDoc()));
        } else {
          assert(expectedCount === 1, 'Single document existence filter with count: ' + expectedCount);
        }
      } else {
        var currentSize = this.getCurrentDocumentCountForTarget(targetId);

        if (currentSize !== expectedCount) {
          // Existence filter mismatch: We reset the mapping and raise a new
          // snapshot with `isFromCache:true`.
          this.resetTarget(targetId);
          this.pendingTargetResets = this.pendingTargetResets.add(targetId);
        }
      }
    }
  };
  /**
   * Converts the currently accumulated state into a remote event at the
   * provided snapshot version. Resets the accumulated changes before returning.
   */


  WatchChangeAggregator.prototype.createRemoteEvent = function (snapshotVersion) {
    var _this = this;

    var targetChanges = {};
    forEachNumber(this.targetStates, function (targetId, targetState) {
      var queryData = _this.queryDataForActiveTarget(targetId);

      if (queryData) {
        if (targetState.current && queryData.query.isDocumentQuery()) {
          // Document queries for document that don't exist can produce an empty
          // result set. To update our local cache, we synthesize a document
          // delete if we have not previously received the document. This
          // resolves the limbo state of the document, removing it from
          // limboDocumentRefs.
          //
          // TODO(dimond): Ideally we would have an explicit lookup query
          // instead resulting in an explicit delete message and we could
          // remove this special logic.
          var key = new DocumentKey(queryData.query.path);

          if (_this.pendingDocumentUpdates.get(key) === null && !_this.targetContainsDocument(targetId, key)) {
            _this.removeDocumentFromTarget(targetId, key, new NoDocument(key, snapshotVersion));
          }
        }

        if (targetState.hasPendingChanges) {
          targetChanges[targetId] = targetState.toTargetChange();
          targetState.clearPendingChanges();
        }
      }
    });
    var resolvedLimboDocuments = documentKeySet(); // We extract the set of limbo-only document updates as the GC logic
    // special-cases documents that do not appear in the query cache.
    //
    // TODO(gsoltis): Expand on this comment once GC is available in the JS
    // client.

    this.pendingDocumentTargetMapping.forEach(function (key, targets) {
      var isOnlyLimboTarget = true;
      targets.forEachWhile(function (targetId) {
        var queryData = _this.queryDataForActiveTarget(targetId);

        if (queryData && queryData.purpose !== QueryPurpose.LimboResolution) {
          isOnlyLimboTarget = false;
          return false;
        }

        return true;
      });

      if (isOnlyLimboTarget) {
        resolvedLimboDocuments = resolvedLimboDocuments.add(key);
      }
    });
    var remoteEvent = new RemoteEvent(snapshotVersion, targetChanges, this.pendingTargetResets, this.pendingDocumentUpdates, resolvedLimboDocuments);
    this.pendingDocumentUpdates = maybeDocumentMap();
    this.pendingDocumentTargetMapping = documentTargetMap();
    this.pendingTargetResets = new SortedSet(primitiveComparator);
    return remoteEvent;
  };
  /**
   * Adds the provided document to the internal list of document updates and
   * its document key to the given target's mapping.
   */
  // Visible for testing.


  WatchChangeAggregator.prototype.addDocumentToTarget = function (targetId, document) {
    if (!this.isActiveTarget(targetId)) {
      return;
    }

    var changeType = this.targetContainsDocument(targetId, document.key) ? ChangeType.Modified : ChangeType.Added;
    var targetState = this.ensureTargetState(targetId);
    targetState.addDocumentChange(document.key, changeType);
    this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(document.key, document);
    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(document.key, this.ensureDocumentTargetMapping(document.key).add(targetId));
  };
  /**
   * Removes the provided document from the target mapping. If the
   * document no longer matches the target, but the document's state is still
   * known (e.g. we know that the document was deleted or we received the change
   * that caused the filter mismatch), the new document can be provided
   * to update the remote document cache.
   */
  // Visible for testing.


  WatchChangeAggregator.prototype.removeDocumentFromTarget = function (targetId, key, updatedDocument) {
    if (!this.isActiveTarget(targetId)) {
      return;
    }

    var targetState = this.ensureTargetState(targetId);

    if (this.targetContainsDocument(targetId, key)) {
      targetState.addDocumentChange(key, ChangeType.Removed);
    } else {
      // The document may have entered and left the target before we raised a
      // snapshot, so we can just ignore the change.
      targetState.removeDocumentChange(key);
    }

    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, this.ensureDocumentTargetMapping(key).delete(targetId));

    if (updatedDocument) {
      this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(key, updatedDocument);
    }
  };

  WatchChangeAggregator.prototype.removeTarget = function (targetId) {
    delete this.targetStates[targetId];
  };
  /**
   * Returns the current count of documents in the target. This includes both
   * the number of documents that the LocalStore considers to be part of the
   * target as well as any accumulated changes.
   */


  WatchChangeAggregator.prototype.getCurrentDocumentCountForTarget = function (targetId) {
    var targetState = this.ensureTargetState(targetId);
    var targetChange = targetState.toTargetChange();
    return this.metadataProvider.getRemoteKeysForTarget(targetId).size + targetChange.addedDocuments.size - targetChange.removedDocuments.size;
  };
  /**
   * Increment the number of acks needed from watch before we can consider the
   * server to be 'in-sync' with the client's active targets.
   */


  WatchChangeAggregator.prototype.recordPendingTargetRequest = function (targetId) {
    // For each request we get we need to record we need a response for it.
    var targetState = this.ensureTargetState(targetId);
    targetState.recordPendingTargetRequest();
  };

  WatchChangeAggregator.prototype.ensureTargetState = function (targetId) {
    if (!this.targetStates[targetId]) {
      this.targetStates[targetId] = new TargetState();
    }

    return this.targetStates[targetId];
  };

  WatchChangeAggregator.prototype.ensureDocumentTargetMapping = function (key) {
    var targetMapping = this.pendingDocumentTargetMapping.get(key);

    if (!targetMapping) {
      targetMapping = new SortedSet(primitiveComparator);
      this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, targetMapping);
    }

    return targetMapping;
  };
  /**
   * Verifies that the user is still interested in this target (by calling
   * `getQueryDataForTarget()`) and that we are not waiting for pending ADDs
   * from watch.
   */


  WatchChangeAggregator.prototype.isActiveTarget = function (targetId) {
    return this.queryDataForActiveTarget(targetId) !== null;
  };
  /**
   * Returns the QueryData for an active target (i.e. a target that the user
   * is still interested in that has no outstanding target change requests).
   */


  WatchChangeAggregator.prototype.queryDataForActiveTarget = function (targetId) {
    var targetState = this.targetStates[targetId];
    return targetState && targetState.isPending ? null : this.metadataProvider.getQueryDataForTarget(targetId);
  };
  /**
   * Resets the state of a Watch target to its initial state (e.g. sets
   * 'current' to false, clears the resume token and removes its target mapping
   * from all documents).
   */


  WatchChangeAggregator.prototype.resetTarget = function (targetId) {
    var _this = this;

    assert(!this.targetStates[targetId].isPending, 'Should only reset active targets');
    this.targetStates[targetId] = new TargetState(); // Trigger removal for any documents currently mapped to this target.
    // These removals will be part of the initial snapshot if Watch does not
    // resend these documents.

    var existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);
    existingKeys.forEach(function (key) {
      _this.removeDocumentFromTarget(targetId, key,
      /*updatedDocument=*/
      null);
    });
  };
  /**
   * Returns whether the LocalStore considers the document to be part of the
   * specified target.
   */


  WatchChangeAggregator.prototype.targetContainsDocument = function (targetId, key) {
    var existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);
    return existingKeys.has(key);
  };

  return WatchChangeAggregator;
}();

function documentTargetMap() {
  return new SortedMap(DocumentKey.comparator);
}

function snapshotChangesMap() {
  return new SortedMap(DocumentKey.comparator);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var DIRECTIONS = function () {
  var dirs = {};
  dirs[Direction.ASCENDING.name] = 'ASCENDING';
  dirs[Direction.DESCENDING.name] = 'DESCENDING';
  return dirs;
}();

var OPERATORS = function () {
  var ops = {};
  ops[RelationOp.LESS_THAN.name] = 'LESS_THAN';
  ops[RelationOp.LESS_THAN_OR_EQUAL.name] = 'LESS_THAN_OR_EQUAL';
  ops[RelationOp.GREATER_THAN.name] = 'GREATER_THAN';
  ops[RelationOp.GREATER_THAN_OR_EQUAL.name] = 'GREATER_THAN_OR_EQUAL';
  ops[RelationOp.EQUAL.name] = 'EQUAL';
  ops[RelationOp.ARRAY_CONTAINS.name] = 'ARRAY_CONTAINS';
  return ops;
}(); // A RegExp matching ISO 8601 UTC timestamps with optional fraction.


var ISO_REG_EXP = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);

function assertPresent(value, description) {
  assert(!isNullOrUndefined(value), description + ' is missing');
}

function parseInt64(value) {
  // TODO(bjornick): Handle int64 greater than 53 bits.
  if (typeof value === 'number') {
    return value;
  } else if (typeof value === 'string') {
    return Number(value);
  } else {
    return fail("can't parse " + value);
  }
}
/**
 * Generates JsonObject values for the Datastore API suitable for sending to
 * either GRPC stub methods or via the JSON/HTTP REST API.
 * TODO(klimt): We can remove the databaseId argument if we keep the full
 * resource name in documents.
 */


var JsonProtoSerializer =
/** @class */
function () {
  function JsonProtoSerializer(databaseId, options) {
    this.databaseId = databaseId;
    this.options = options;
  }

  JsonProtoSerializer.prototype.emptyByteString = function () {
    if (this.options.useProto3Json) {
      return '';
    } else {
      return new Uint8Array(0);
    }
  };

  JsonProtoSerializer.prototype.unsafeCastProtoByteString = function (byteString) {
    // byteStrings can be either string or UInt8Array, but the typings say
    // it's always a string. Cast as string to avoid type check failing
    return byteString;
  };

  JsonProtoSerializer.prototype.fromRpcStatus = function (status) {
    var code = status.code === undefined ? Code.UNKNOWN : mapCodeFromRpcCode(status.code);
    return new FirestoreError(code, status.message || '');
  };
  /**
   * Returns a value for a number (or undefined) that's appropriate to put into
   * a google.protobuf.Int32Value proto.
   * DO NOT USE THIS FOR ANYTHING ELSE.
   * This method cheats. It's typed as returning "number" because that's what
   * our generated proto interfaces say Int32Value must be. But GRPC actually
   * expects a { value: <number> } struct.
   */


  JsonProtoSerializer.prototype.toInt32Value = function (val) {
    if (!isNullOrUndefined(val)) {
      // tslint:disable-next-line:no-any We need to match generated Proto types.
      return {
        value: val
      };
    } else {
      return undefined;
    }
  };
  /**
   * Returns a number (or null) from a google.protobuf.Int32Value proto.
   * DO NOT USE THIS FOR ANYTHING ELSE.
   * This method cheats. It's typed as accepting "number" because that's what
   * our generated proto interfaces say Int32Value must be, but it actually
   * accepts { value: number } to match our serialization in toInt32Value().
   */


  JsonProtoSerializer.prototype.fromInt32Value = function (val) {
    var result;

    if (typeof val === 'object') {
      // tslint:disable-next-line:no-any We need to match generated Proto types.
      result = val.value;
    } else {
      // We accept raw numbers (without the {value: ... } wrapper) for
      // compatibility with legacy persisted data.
      result = val;
    }

    return isNullOrUndefined(result) ? null : result;
  };
  /**
   * Returns a value for a Date that's appropriate to put into a proto.
   * DO NOT USE THIS FOR ANYTHING ELSE.
   * This method cheats. It's typed as returning "string" because that's what
   * our generated proto interfaces say dates must be. But it's easier and safer
   * to actually return a Timestamp proto.
   */


  JsonProtoSerializer.prototype.toTimestamp = function (timestamp) {
    return {
      seconds: timestamp.seconds,
      nanos: timestamp.nanoseconds // tslint:disable-next-line:no-any

    };
  };

  JsonProtoSerializer.prototype.fromTimestamp = function (date) {
    // The json interface (for the browser) will return an iso timestamp string,
    // while the proto js library (for node) will return a
    // google.protobuf.Timestamp instance.
    if (typeof date === 'string') {
      // TODO(b/37282237): Use strings for Proto3 timestamps
      // assert(this.options.useProto3Json,
      //   'The timestamp string format requires Proto3.');
      return this.fromIso8601String(date);
    } else {
      assert(!!date, 'Cannot deserialize null or undefined timestamp.'); // TODO(b/37282237): Use strings for Proto3 timestamps
      // assert(!this.options.useProto3Json,
      //   'The timestamp instance format requires Proto JS.');

      var seconds = parseInt64(date.seconds || '0');
      var nanos = date.nanos || 0;
      return new Timestamp(seconds, nanos);
    }
  };

  JsonProtoSerializer.prototype.fromIso8601String = function (utc) {
    // The date string can have higher precision (nanos) than the Date class
    // (millis), so we do some custom parsing here.
    // Parse the nanos right out of the string.
    var nanos = 0;
    var fraction = ISO_REG_EXP.exec(utc);
    assert(!!fraction, 'invalid timestamp: ' + utc);

    if (fraction[1]) {
      // Pad the fraction out to 9 digits (nanos).
      var nanoStr = fraction[1];
      nanoStr = (nanoStr + '000000000').substr(0, 9);
      nanos = Number(nanoStr);
    } // Parse the date to get the seconds.


    var date = new Date(utc);
    var seconds = Math.floor(date.getTime() / 1000);
    return new Timestamp(seconds, nanos);
  };
  /**
   * Returns a value for bytes that's appropriate to put in a proto.
   * DO NOT USE THIS FOR ANYTHING ELSE.
   * This method cheats. It's typed as returning "string" because that's what
   * our generated proto interfaces say bytes must be. But it should return
   * an Uint8Array in Node.
   */


  JsonProtoSerializer.prototype.toBytes = function (bytes) {
    if (this.options.useProto3Json) {
      return bytes.toBase64();
    } else {
      // The typings say it's a string, but it needs to be a Uint8Array in Node.
      return this.unsafeCastProtoByteString(bytes.toUint8Array());
    }
  };
  /**
   * Parse the blob from the protos into the internal Blob class. Note that the
   * typings assume all blobs are strings, but they are actually Uint8Arrays
   * on Node.
   */


  JsonProtoSerializer.prototype.fromBlob = function (blob) {
    if (typeof blob === 'string') {
      assert(this.options.useProto3Json, 'Expected bytes to be passed in as Uint8Array, but got a string instead.');
      return Blob.fromBase64String(blob);
    } else {
      assert(!this.options.useProto3Json, 'Expected bytes to be passed in as string, but got something else instead.');
      return Blob.fromUint8Array(blob);
    }
  };

  JsonProtoSerializer.prototype.toVersion = function (version) {
    return this.toTimestamp(version.toTimestamp());
  };

  JsonProtoSerializer.prototype.fromVersion = function (version) {
    assert(!!version, "Trying to deserialize version that isn't set");
    return SnapshotVersion.fromTimestamp(this.fromTimestamp(version));
  };

  JsonProtoSerializer.prototype.toResourceName = function (databaseId, path) {
    return this.fullyQualifiedPrefixPath(databaseId).child('documents').child(path).canonicalString();
  };

  JsonProtoSerializer.prototype.fromResourceName = function (name) {
    var resource = ResourcePath.fromString(name);
    assert(this.isValidResourceName(resource), 'Tried to deserialize invalid key ' + resource.toString());
    return resource;
  };

  JsonProtoSerializer.prototype.toName = function (key) {
    return this.toResourceName(this.databaseId, key.path);
  };

  JsonProtoSerializer.prototype.fromName = function (name) {
    var resource = this.fromResourceName(name);
    assert(resource.get(1) === this.databaseId.projectId, 'Tried to deserialize key from different project: ' + resource.get(1) + ' vs ' + this.databaseId.projectId);
    assert(!resource.get(3) && !this.databaseId.database || resource.get(3) === this.databaseId.database, 'Tried to deserialize key from different database: ' + resource.get(3) + ' vs ' + this.databaseId.database);
    return new DocumentKey(this.extractLocalPathFromResourceName(resource));
  };

  JsonProtoSerializer.prototype.toQueryPath = function (path) {
    return this.toResourceName(this.databaseId, path);
  };

  JsonProtoSerializer.prototype.fromQueryPath = function (name) {
    var resourceName = this.fromResourceName(name); // In v1beta1 queries for collections at the root did not have a trailing
    // "/documents". In v1 all resource paths contain "/documents". Preserve the
    // ability to read the v1beta1 form for compatibility with queries persisted
    // in the local query cache.

    if (resourceName.length === 4) {
      return ResourcePath.EMPTY_PATH;
    }

    return this.extractLocalPathFromResourceName(resourceName);
  };

  Object.defineProperty(JsonProtoSerializer.prototype, "encodedDatabaseId", {
    get: function () {
      var path = new ResourcePath(['projects', this.databaseId.projectId, 'databases', this.databaseId.database]);
      return path.canonicalString();
    },
    enumerable: true,
    configurable: true
  });

  JsonProtoSerializer.prototype.fullyQualifiedPrefixPath = function (databaseId) {
    return new ResourcePath(['projects', databaseId.projectId, 'databases', databaseId.database]);
  };

  JsonProtoSerializer.prototype.extractLocalPathFromResourceName = function (resourceName) {
    assert(resourceName.length > 4 && resourceName.get(4) === 'documents', 'tried to deserialize invalid key ' + resourceName.toString());
    return resourceName.popFirst(5);
  };

  JsonProtoSerializer.prototype.isValidResourceName = function (path) {
    // Resource names have at least 4 components (project ID, database ID)
    return path.length >= 4 && path.get(0) === 'projects' && path.get(2) === 'databases';
  };

  JsonProtoSerializer.prototype.toValue = function (val) {
    if (val instanceof NullValue) {
      return {
        nullValue: 'NULL_VALUE'
      };
    } else if (val instanceof BooleanValue) {
      return {
        booleanValue: val.value()
      };
    } else if (val instanceof IntegerValue) {
      return {
        integerValue: '' + val.value()
      };
    } else if (val instanceof DoubleValue) {
      var doubleValue = val.value();

      if (this.options.useProto3Json) {
        // Proto 3 let's us encode NaN and Infinity as string values as
        // expected by the backend. This is currently not checked by our unit
        // tests because they rely on protobuf.js.
        if (isNaN(doubleValue)) {
          return {
            doubleValue: 'NaN'
          };
        } else if (doubleValue === Infinity) {
          return {
            doubleValue: 'Infinity'
          };
        } else if (doubleValue === -Infinity) {
          return {
            doubleValue: '-Infinity'
          };
        }
      }

      return {
        doubleValue: val.value()
      };
    } else if (val instanceof StringValue) {
      return {
        stringValue: val.value()
      };
    } else if (val instanceof ObjectValue) {
      return {
        mapValue: this.toMapValue(val)
      };
    } else if (val instanceof ArrayValue) {
      return {
        arrayValue: this.toArrayValue(val)
      };
    } else if (val instanceof TimestampValue) {
      return {
        timestampValue: this.toTimestamp(val.internalValue)
      };
    } else if (val instanceof GeoPointValue) {
      return {
        geoPointValue: {
          latitude: val.value().latitude,
          longitude: val.value().longitude
        }
      };
    } else if (val instanceof BlobValue) {
      return {
        bytesValue: this.toBytes(val.value())
      };
    } else if (val instanceof RefValue) {
      return {
        referenceValue: this.toResourceName(val.databaseId, val.key.path)
      };
    } else {
      return fail('Unknown FieldValue ' + JSON.stringify(val));
    }
  };

  JsonProtoSerializer.prototype.fromValue = function (obj) {
    var _this = this; // tslint:disable-next-line:no-any


    var type = obj['value_type'];

    if (hasTag(obj, type, 'nullValue')) {
      return NullValue.INSTANCE;
    } else if (hasTag(obj, type, 'booleanValue')) {
      return BooleanValue.of(obj.booleanValue);
    } else if (hasTag(obj, type, 'integerValue')) {
      return new IntegerValue(parseInt64(obj.integerValue));
    } else if (hasTag(obj, type, 'doubleValue')) {
      if (this.options.useProto3Json) {
        // Proto 3 uses the string values 'NaN' and 'Infinity'.
        if (obj.doubleValue === 'NaN') {
          return DoubleValue.NAN;
        } else if (obj.doubleValue === 'Infinity') {
          return DoubleValue.POSITIVE_INFINITY;
        } else if (obj.doubleValue === '-Infinity') {
          return DoubleValue.NEGATIVE_INFINITY;
        }
      }

      return new DoubleValue(obj.doubleValue);
    } else if (hasTag(obj, type, 'stringValue')) {
      return new StringValue(obj.stringValue);
    } else if (hasTag(obj, type, 'mapValue')) {
      return this.fromFields(obj.mapValue.fields || {});
    } else if (hasTag(obj, type, 'arrayValue')) {
      // "values" is not present if the array is empty
      assertPresent(obj.arrayValue, 'arrayValue');
      var values = obj.arrayValue.values || [];
      return new ArrayValue(values.map(function (v) {
        return _this.fromValue(v);
      }));
    } else if (hasTag(obj, type, 'timestampValue')) {
      assertPresent(obj.timestampValue, 'timestampValue');
      return new TimestampValue(this.fromTimestamp(obj.timestampValue));
    } else if (hasTag(obj, type, 'geoPointValue')) {
      assertPresent(obj.geoPointValue, 'geoPointValue');
      var latitude = obj.geoPointValue.latitude || 0;
      var longitude = obj.geoPointValue.longitude || 0;
      return new GeoPointValue(new GeoPoint(latitude, longitude));
    } else if (hasTag(obj, type, 'bytesValue')) {
      assertPresent(obj.bytesValue, 'bytesValue');
      var blob = this.fromBlob(obj.bytesValue);
      return new BlobValue(blob);
    } else if (hasTag(obj, type, 'referenceValue')) {
      assertPresent(obj.referenceValue, 'referenceValue');
      var resourceName = this.fromResourceName(obj.referenceValue);
      var dbId = new DatabaseId(resourceName.get(1), resourceName.get(3));
      var key = new DocumentKey(this.extractLocalPathFromResourceName(resourceName));
      return new RefValue(dbId, key);
    } else {
      return fail('Unknown Value proto ' + JSON.stringify(obj));
    }
  };
  /** Creates an api.Document from key and fields (but no create/update time) */


  JsonProtoSerializer.prototype.toMutationDocument = function (key, fields) {
    return {
      name: this.toName(key),
      fields: this.toFields(fields)
    };
  };

  JsonProtoSerializer.prototype.toDocument = function (document) {
    assert(!document.hasLocalMutations, "Can't serialize documents with mutations.");
    return {
      name: this.toName(document.key),
      fields: this.toFields(document.data),
      updateTime: this.toTimestamp(document.version.toTimestamp())
    };
  };

  JsonProtoSerializer.prototype.fromDocument = function (document, hasCommittedMutations) {
    return new Document(this.fromName(document.name), this.fromVersion(document.updateTime), this.fromFields(document.fields || {}), {
      hasCommittedMutations: !!hasCommittedMutations
    });
  };

  JsonProtoSerializer.prototype.toFields = function (fields) {
    var _this = this;

    var result = {};
    fields.forEach(function (key, value) {
      result[key] = _this.toValue(value);
    });
    return result;
  };

  JsonProtoSerializer.prototype.fromFields = function (object) {
    var _this = this; // Proto map<string, Value> gets mapped to Object, so cast it.


    var map = object;
    var result = ObjectValue.EMPTY;
    forEach(map, function (key, value) {
      result = result.set(new FieldPath([key]), _this.fromValue(value));
    });
    return result;
  };

  JsonProtoSerializer.prototype.toMapValue = function (map) {
    return {
      fields: this.toFields(map)
    };
  };

  JsonProtoSerializer.prototype.toArrayValue = function (array) {
    var _this = this;

    var result = [];
    array.forEach(function (value) {
      result.push(_this.toValue(value));
    });
    return {
      values: result
    };
  };

  JsonProtoSerializer.prototype.fromFound = function (doc) {
    assert(!!doc.found, 'Tried to deserialize a found document from a missing document.');
    assertPresent(doc.found.name, 'doc.found.name');
    assertPresent(doc.found.updateTime, 'doc.found.updateTime');
    var key = this.fromName(doc.found.name);
    var version = this.fromVersion(doc.found.updateTime);
    var fields = this.fromFields(doc.found.fields || {});
    return new Document(key, version, fields, {}, doc.found);
  };

  JsonProtoSerializer.prototype.fromMissing = function (result) {
    assert(!!result.missing, 'Tried to deserialize a missing document from a found document.');
    assert(!!result.readTime, 'Tried to deserialize a missing document without a read time.');
    var key = this.fromName(result.missing);
    var version = this.fromVersion(result.readTime);
    return new NoDocument(key, version);
  };

  JsonProtoSerializer.prototype.fromMaybeDocument = function (result) {
    // tslint:disable-next-line:no-any
    var type = result['result'];

    if (hasTag(result, type, 'found')) {
      return this.fromFound(result);
    } else if (hasTag(result, type, 'missing')) {
      return this.fromMissing(result);
    }

    return fail('invalid batch get response: ' + JSON.stringify(result));
  };

  JsonProtoSerializer.prototype.toWatchTargetChangeState = function (state) {
    switch (state) {
      case WatchTargetChangeState.Added:
        return 'ADD';

      case WatchTargetChangeState.Current:
        return 'CURRENT';

      case WatchTargetChangeState.NoChange:
        return 'NO_CHANGE';

      case WatchTargetChangeState.Removed:
        return 'REMOVE';

      case WatchTargetChangeState.Reset:
        return 'RESET';

      default:
        return fail('Unknown WatchTargetChangeState: ' + state);
    }
  };

  JsonProtoSerializer.prototype.toTestWatchChange = function (watchChange) {
    if (watchChange instanceof ExistenceFilterChange) {
      return {
        filter: {
          count: watchChange.existenceFilter.count,
          targetId: watchChange.targetId
        }
      };
    }

    if (watchChange instanceof DocumentWatchChange) {
      if (watchChange.newDoc instanceof Document) {
        var doc = watchChange.newDoc;
        return {
          documentChange: {
            document: {
              name: this.toName(doc.key),
              fields: this.toFields(doc.data),
              updateTime: this.toVersion(doc.version)
            },
            targetIds: watchChange.updatedTargetIds,
            removedTargetIds: watchChange.removedTargetIds
          }
        };
      } else if (watchChange.newDoc instanceof NoDocument) {
        var doc = watchChange.newDoc;
        return {
          documentDelete: {
            document: this.toName(doc.key),
            readTime: this.toVersion(doc.version),
            removedTargetIds: watchChange.removedTargetIds
          }
        };
      } else if (watchChange.newDoc === null) {
        return {
          documentRemove: {
            document: this.toName(watchChange.key),
            removedTargetIds: watchChange.removedTargetIds
          }
        };
      }
    }

    if (watchChange instanceof WatchTargetChange) {
      var cause = undefined;

      if (watchChange.cause) {
        cause = {
          code: mapRpcCodeFromCode(watchChange.cause.code),
          message: watchChange.cause.message
        };
      }

      return {
        targetChange: {
          targetChangeType: this.toWatchTargetChangeState(watchChange.state),
          targetIds: watchChange.targetIds,
          resumeToken: this.unsafeCastProtoByteString(watchChange.resumeToken),
          cause: cause
        }
      };
    }

    return fail('Unrecognized watch change: ' + JSON.stringify(watchChange));
  };

  JsonProtoSerializer.prototype.fromWatchChange = function (change) {
    // tslint:disable-next-line:no-any
    var type = change['response_type'];
    var watchChange;

    if (hasTag(change, type, 'targetChange')) {
      assertPresent(change.targetChange, 'targetChange'); // proto3 default value is unset in JSON (undefined), so use 'NO_CHANGE'
      // if unset

      var state = this.fromWatchTargetChangeState(change.targetChange.targetChangeType || 'NO_CHANGE');
      var targetIds = change.targetChange.targetIds || [];
      var resumeToken = change.targetChange.resumeToken || this.emptyByteString();
      var causeProto = change.targetChange.cause;
      var cause = causeProto && this.fromRpcStatus(causeProto);
      watchChange = new WatchTargetChange(state, targetIds, resumeToken, cause || null);
    } else if (hasTag(change, type, 'documentChange')) {
      assertPresent(change.documentChange, 'documentChange');
      assertPresent(change.documentChange.document, 'documentChange.name');
      assertPresent(change.documentChange.document.name, 'documentChange.document.name');
      assertPresent(change.documentChange.document.updateTime, 'documentChange.document.updateTime');
      var entityChange = change.documentChange;
      var key = this.fromName(entityChange.document.name);
      var version = this.fromVersion(entityChange.document.updateTime);
      var fields = this.fromFields(entityChange.document.fields || {}); // The document may soon be re-serialized back to protos in order to store it in local
      // persistence. Memoize the encoded form to avoid encoding it again.

      var doc = new Document(key, version, fields, {}, entityChange.document);
      var updatedTargetIds = entityChange.targetIds || [];
      var removedTargetIds = entityChange.removedTargetIds || [];
      watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc.key, doc);
    } else if (hasTag(change, type, 'documentDelete')) {
      assertPresent(change.documentDelete, 'documentDelete');
      assertPresent(change.documentDelete.document, 'documentDelete.document');
      var docDelete = change.documentDelete;
      var key = this.fromName(docDelete.document);
      var version = docDelete.readTime ? this.fromVersion(docDelete.readTime) : SnapshotVersion.forDeletedDoc();
      var doc = new NoDocument(key, version);
      var removedTargetIds = docDelete.removedTargetIds || [];
      watchChange = new DocumentWatchChange([], removedTargetIds, doc.key, doc);
    } else if (hasTag(change, type, 'documentRemove')) {
      assertPresent(change.documentRemove, 'documentRemove');
      assertPresent(change.documentRemove.document, 'documentRemove');
      var docRemove = change.documentRemove;
      var key = this.fromName(docRemove.document);
      var removedTargetIds = docRemove.removedTargetIds || [];
      watchChange = new DocumentWatchChange([], removedTargetIds, key, null);
    } else if (hasTag(change, type, 'filter')) {
      // TODO(dimond): implement existence filter parsing with strategy.
      assertPresent(change.filter, 'filter');
      assertPresent(change.filter.targetId, 'filter.targetId');
      var filter = change.filter;
      var count = filter.count || 0;
      var existenceFilter = new ExistenceFilter(count);
      var targetId = filter.targetId;
      watchChange = new ExistenceFilterChange(targetId, existenceFilter);
    } else {
      return fail('Unknown change type ' + JSON.stringify(change));
    }

    return watchChange;
  };

  JsonProtoSerializer.prototype.fromWatchTargetChangeState = function (state) {
    if (state === 'NO_CHANGE') {
      return WatchTargetChangeState.NoChange;
    } else if (state === 'ADD') {
      return WatchTargetChangeState.Added;
    } else if (state === 'REMOVE') {
      return WatchTargetChangeState.Removed;
    } else if (state === 'CURRENT') {
      return WatchTargetChangeState.Current;
    } else if (state === 'RESET') {
      return WatchTargetChangeState.Reset;
    } else {
      return fail('Got unexpected TargetChange.state: ' + state);
    }
  };

  JsonProtoSerializer.prototype.versionFromListenResponse = function (change) {
    // We have only reached a consistent snapshot for the entire stream if there
    // is a read_time set and it applies to all targets (i.e. the list of
    // targets is empty). The backend is guaranteed to send such responses.
    // tslint:disable-next-line:no-any
    var type = change['response_type'];

    if (!hasTag(change, type, 'targetChange')) {
      return SnapshotVersion.MIN;
    }

    var targetChange = change.targetChange;

    if (targetChange.targetIds && targetChange.targetIds.length) {
      return SnapshotVersion.MIN;
    }

    if (!targetChange.readTime) {
      return SnapshotVersion.MIN;
    }

    return this.fromVersion(targetChange.readTime);
  };

  JsonProtoSerializer.prototype.toMutation = function (mutation) {
    var _this = this;

    var result;

    if (mutation instanceof SetMutation) {
      result = {
        update: this.toMutationDocument(mutation.key, mutation.value)
      };
    } else if (mutation instanceof DeleteMutation) {
      result = {
        delete: this.toName(mutation.key)
      };
    } else if (mutation instanceof PatchMutation) {
      result = {
        update: this.toMutationDocument(mutation.key, mutation.data),
        updateMask: this.toDocumentMask(mutation.fieldMask)
      };
    } else if (mutation instanceof TransformMutation) {
      result = {
        transform: {
          document: this.toName(mutation.key),
          fieldTransforms: mutation.fieldTransforms.map(function (transform) {
            return _this.toFieldTransform(transform);
          })
        }
      };
    } else {
      return fail('Unknown mutation type ' + mutation.type);
    }

    if (!mutation.precondition.isNone) {
      result.currentDocument = this.toPrecondition(mutation.precondition);
    }

    return result;
  };

  JsonProtoSerializer.prototype.fromMutation = function (proto) {
    var _this = this;

    var precondition = proto.currentDocument ? this.fromPrecondition(proto.currentDocument) : Precondition.NONE;

    if (proto.update) {
      assertPresent(proto.update.name, 'name');
      var key = this.fromName(proto.update.name);
      var value = this.fromFields(proto.update.fields || {});

      if (proto.updateMask) {
        var fieldMask = this.fromDocumentMask(proto.updateMask);
        return new PatchMutation(key, value, fieldMask, precondition);
      } else {
        return new SetMutation(key, value, precondition);
      }
    } else if (proto.delete) {
      var key = this.fromName(proto.delete);
      return new DeleteMutation(key, precondition);
    } else if (proto.transform) {
      var key = this.fromName(proto.transform.document);
      var fieldTransforms = proto.transform.fieldTransforms.map(function (transform) {
        return _this.fromFieldTransform(transform);
      });
      assert(precondition.exists === true, 'Transforms only support precondition "exists == true"');
      return new TransformMutation(key, fieldTransforms);
    } else {
      return fail('unknown mutation proto: ' + JSON.stringify(proto));
    }
  };

  JsonProtoSerializer.prototype.toPrecondition = function (precondition) {
    assert(!precondition.isNone, "Can't serialize an empty precondition");

    if (precondition.updateTime !== undefined) {
      return {
        updateTime: this.toVersion(precondition.updateTime)
      };
    } else if (precondition.exists !== undefined) {
      return {
        exists: precondition.exists
      };
    } else {
      return fail('Unknown precondition');
    }
  };

  JsonProtoSerializer.prototype.fromPrecondition = function (precondition) {
    if (precondition.updateTime !== undefined) {
      return Precondition.updateTime(this.fromVersion(precondition.updateTime));
    } else if (precondition.exists !== undefined) {
      return Precondition.exists(precondition.exists);
    } else {
      return Precondition.NONE;
    }
  };

  JsonProtoSerializer.prototype.fromWriteResult = function (proto, commitTime) {
    var _this = this; // NOTE: Deletes don't have an updateTime.


    var version = proto.updateTime ? this.fromVersion(proto.updateTime) : this.fromVersion(commitTime);
    var transformResults = null;

    if (proto.transformResults && proto.transformResults.length > 0) {
      transformResults = proto.transformResults.map(function (result) {
        return _this.fromValue(result);
      });
    }

    return new MutationResult(version, transformResults);
  };

  JsonProtoSerializer.prototype.fromWriteResults = function (protos, commitTime) {
    var _this = this;

    if (protos && protos.length > 0) {
      assert(commitTime !== undefined, 'Received a write result without a commit time');
      return protos.map(function (proto) {
        return _this.fromWriteResult(proto, commitTime);
      });
    } else {
      return [];
    }
  };

  JsonProtoSerializer.prototype.toFieldTransform = function (fieldTransform) {
    var _this = this;

    var transform = fieldTransform.transform;

    if (transform instanceof ServerTimestampTransform) {
      return {
        fieldPath: fieldTransform.field.canonicalString(),
        setToServerValue: 'REQUEST_TIME'
      };
    } else if (transform instanceof ArrayUnionTransformOperation) {
      return {
        fieldPath: fieldTransform.field.canonicalString(),
        appendMissingElements: {
          values: transform.elements.map(function (v) {
            return _this.toValue(v);
          })
        }
      };
    } else if (transform instanceof ArrayRemoveTransformOperation) {
      return {
        fieldPath: fieldTransform.field.canonicalString(),
        removeAllFromArray: {
          values: transform.elements.map(function (v) {
            return _this.toValue(v);
          })
        }
      };
    } else if (transform instanceof NumericIncrementTransformOperation) {
      return {
        fieldPath: fieldTransform.field.canonicalString(),
        increment: this.toValue(transform.operand)
      };
    } else {
      throw fail('Unknown transform: ' + fieldTransform.transform);
    }
  };

  JsonProtoSerializer.prototype.fromFieldTransform = function (proto) {
    var _this = this; // tslint:disable-next-line:no-any We need to match generated Proto types.


    var type = proto['transform_type'];
    var transform = null;

    if (hasTag(proto, type, 'setToServerValue')) {
      assert(proto.setToServerValue === 'REQUEST_TIME', 'Unknown server value transform proto: ' + JSON.stringify(proto));
      transform = ServerTimestampTransform.instance;
    } else if (hasTag(proto, type, 'appendMissingElements')) {
      var values = proto.appendMissingElements.values || [];
      transform = new ArrayUnionTransformOperation(values.map(function (v) {
        return _this.fromValue(v);
      }));
    } else if (hasTag(proto, type, 'removeAllFromArray')) {
      var values = proto.removeAllFromArray.values || [];
      transform = new ArrayRemoveTransformOperation(values.map(function (v) {
        return _this.fromValue(v);
      }));
    } else if (hasTag(proto, type, 'increment')) {
      var operand = this.fromValue(proto.increment);
      assert(operand instanceof NumberValue, 'NUMERIC_ADD transform requires a NumberValue');
      transform = new NumericIncrementTransformOperation(operand);
    } else {
      fail('Unknown transform proto: ' + JSON.stringify(proto));
    }

    var fieldPath = FieldPath.fromServerFormat(proto.fieldPath);
    return new FieldTransform(fieldPath, transform);
  };

  JsonProtoSerializer.prototype.toDocumentsTarget = function (query) {
    return {
      documents: [this.toQueryPath(query.path)]
    };
  };

  JsonProtoSerializer.prototype.fromDocumentsTarget = function (documentsTarget) {
    var count = documentsTarget.documents.length;
    assert(count === 1, 'DocumentsTarget contained other than 1 document: ' + count);
    var name = documentsTarget.documents[0];
    return Query.atPath(this.fromQueryPath(name));
  };

  JsonProtoSerializer.prototype.toQueryTarget = function (query) {
    // Dissect the path into parent, collectionId, and optional key filter.
    var result = {
      structuredQuery: {}
    };
    var path = query.path;

    if (query.collectionGroup !== null) {
      assert(path.length % 2 === 0, 'Collection Group queries should be within a document path or root.');
      result.parent = this.toQueryPath(path);
      result.structuredQuery.from = [{
        collectionId: query.collectionGroup,
        allDescendants: true
      }];
    } else {
      assert(path.length % 2 !== 0, 'Document queries with filters are not supported.');
      result.parent = this.toQueryPath(path.popLast());
      result.structuredQuery.from = [{
        collectionId: path.lastSegment()
      }];
    }

    var where = this.toFilter(query.filters);

    if (where) {
      result.structuredQuery.where = where;
    }

    var orderBy = this.toOrder(query.orderBy);

    if (orderBy) {
      result.structuredQuery.orderBy = orderBy;
    }

    var limit = this.toInt32Value(query.limit);

    if (limit !== undefined) {
      result.structuredQuery.limit = limit;
    }

    if (query.startAt) {
      result.structuredQuery.startAt = this.toCursor(query.startAt);
    }

    if (query.endAt) {
      result.structuredQuery.endAt = this.toCursor(query.endAt);
    }

    return result;
  };

  JsonProtoSerializer.prototype.fromQueryTarget = function (target) {
    var path = this.fromQueryPath(target.parent);
    var query = target.structuredQuery;
    var fromCount = query.from ? query.from.length : 0;
    var collectionGroup = null;

    if (fromCount > 0) {
      assert(fromCount === 1, 'StructuredQuery.from with more than one collection is not supported.');
      var from = query.from[0];

      if (from.allDescendants) {
        collectionGroup = from.collectionId;
      } else {
        path = path.child(from.collectionId);
      }
    }

    var filterBy = [];

    if (query.where) {
      filterBy = this.fromFilter(query.where);
    }

    var orderBy = [];

    if (query.orderBy) {
      orderBy = this.fromOrder(query.orderBy);
    }

    var limit = null;

    if (query.limit) {
      limit = this.fromInt32Value(query.limit);
    }

    var startAt = null;

    if (query.startAt) {
      startAt = this.fromCursor(query.startAt);
    }

    var endAt = null;

    if (query.endAt) {
      endAt = this.fromCursor(query.endAt);
    }

    return new Query(path, collectionGroup, orderBy, filterBy, limit, startAt, endAt);
  };

  JsonProtoSerializer.prototype.toListenRequestLabels = function (queryData) {
    var value = this.toLabel(queryData.purpose);

    if (value == null) {
      return null;
    } else {
      return {
        'goog-listen-tags': value
      };
    }
  };

  JsonProtoSerializer.prototype.toLabel = function (purpose) {
    switch (purpose) {
      case QueryPurpose.Listen:
        return null;

      case QueryPurpose.ExistenceFilterMismatch:
        return 'existence-filter-mismatch';

      case QueryPurpose.LimboResolution:
        return 'limbo-document';

      default:
        return fail('Unrecognized query purpose: ' + purpose);
    }
  };

  JsonProtoSerializer.prototype.toTarget = function (queryData) {
    var result;
    var query = queryData.query;

    if (query.isDocumentQuery()) {
      result = {
        documents: this.toDocumentsTarget(query)
      };
    } else {
      result = {
        query: this.toQueryTarget(query)
      };
    }

    result.targetId = queryData.targetId;

    if (queryData.resumeToken.length > 0) {
      result.resumeToken = this.unsafeCastProtoByteString(queryData.resumeToken);
    }

    return result;
  };

  JsonProtoSerializer.prototype.toFilter = function (filters) {
    var _this = this;

    if (filters.length === 0) return;
    var protos = filters.map(function (filter) {
      return filter instanceof RelationFilter ? _this.toRelationFilter(filter) : _this.toUnaryFilter(filter);
    });

    if (protos.length === 1) {
      return protos[0];
    }

    return {
      compositeFilter: {
        op: 'AND',
        filters: protos
      }
    };
  };

  JsonProtoSerializer.prototype.fromFilter = function (filter) {
    var _this = this;

    if (!filter) {
      return [];
    } else if (filter.unaryFilter !== undefined) {
      return [this.fromUnaryFilter(filter)];
    } else if (filter.fieldFilter !== undefined) {
      return [this.fromRelationFilter(filter)];
    } else if (filter.compositeFilter !== undefined) {
      return filter.compositeFilter.filters.map(function (f) {
        return _this.fromFilter(f);
      }).reduce(function (accum, current) {
        return accum.concat(current);
      });
    } else {
      return fail('Unknown filter: ' + JSON.stringify(filter));
    }
  };

  JsonProtoSerializer.prototype.toOrder = function (orderBys) {
    var _this = this;

    if (orderBys.length === 0) return;
    return orderBys.map(function (order) {
      return _this.toPropertyOrder(order);
    });
  };

  JsonProtoSerializer.prototype.fromOrder = function (orderBys) {
    var _this = this;

    return orderBys.map(function (order) {
      return _this.fromPropertyOrder(order);
    });
  };

  JsonProtoSerializer.prototype.toCursor = function (cursor) {
    var _this = this;

    return {
      before: cursor.before,
      values: cursor.position.map(function (component) {
        return _this.toValue(component);
      })
    };
  };

  JsonProtoSerializer.prototype.fromCursor = function (cursor) {
    var _this = this;

    var before = !!cursor.before;
    var position = cursor.values.map(function (component) {
      return _this.fromValue(component);
    });
    return new Bound(position, before);
  }; // visible for testing


  JsonProtoSerializer.prototype.toDirection = function (dir) {
    return DIRECTIONS[dir.name];
  }; // visible for testing


  JsonProtoSerializer.prototype.fromDirection = function (dir) {
    switch (dir) {
      case 'ASCENDING':
        return Direction.ASCENDING;

      case 'DESCENDING':
        return Direction.DESCENDING;

      default:
        return undefined;
    }
  }; // visible for testing


  JsonProtoSerializer.prototype.toOperatorName = function (op) {
    return OPERATORS[op.name];
  };

  JsonProtoSerializer.prototype.fromOperatorName = function (op) {
    switch (op) {
      case 'EQUAL':
        return RelationOp.EQUAL;

      case 'GREATER_THAN':
        return RelationOp.GREATER_THAN;

      case 'GREATER_THAN_OR_EQUAL':
        return RelationOp.GREATER_THAN_OR_EQUAL;

      case 'LESS_THAN':
        return RelationOp.LESS_THAN;

      case 'LESS_THAN_OR_EQUAL':
        return RelationOp.LESS_THAN_OR_EQUAL;

      case 'ARRAY_CONTAINS':
        return RelationOp.ARRAY_CONTAINS;

      case 'OPERATOR_UNSPECIFIED':
        return fail('Unspecified relation');

      default:
        return fail('Unknown relation');
    }
  };

  JsonProtoSerializer.prototype.toFieldPathReference = function (path) {
    return {
      fieldPath: path.canonicalString()
    };
  };

  JsonProtoSerializer.prototype.fromFieldPathReference = function (fieldReference) {
    return FieldPath.fromServerFormat(fieldReference.fieldPath);
  }; // visible for testing


  JsonProtoSerializer.prototype.toPropertyOrder = function (orderBy) {
    return {
      field: this.toFieldPathReference(orderBy.field),
      direction: this.toDirection(orderBy.dir)
    };
  };

  JsonProtoSerializer.prototype.fromPropertyOrder = function (orderBy) {
    return new OrderBy(this.fromFieldPathReference(orderBy.field), this.fromDirection(orderBy.direction));
  }; // visible for testing


  JsonProtoSerializer.prototype.toRelationFilter = function (filter) {
    if (filter instanceof RelationFilter) {
      return {
        fieldFilter: {
          field: this.toFieldPathReference(filter.field),
          op: this.toOperatorName(filter.op),
          value: this.toValue(filter.value)
        }
      };
    } else {
      return fail('Unrecognized filter: ' + JSON.stringify(filter));
    }
  };

  JsonProtoSerializer.prototype.fromRelationFilter = function (filter) {
    return new RelationFilter(this.fromFieldPathReference(filter.fieldFilter.field), this.fromOperatorName(filter.fieldFilter.op), this.fromValue(filter.fieldFilter.value));
  }; // visible for testing


  JsonProtoSerializer.prototype.toUnaryFilter = function (filter) {
    if (filter instanceof NanFilter) {
      return {
        unaryFilter: {
          field: this.toFieldPathReference(filter.field),
          op: 'IS_NAN'
        }
      };
    } else if (filter instanceof NullFilter) {
      return {
        unaryFilter: {
          field: this.toFieldPathReference(filter.field),
          op: 'IS_NULL'
        }
      };
    } else {
      return fail('Unrecognized filter: ' + JSON.stringify(filter));
    }
  };

  JsonProtoSerializer.prototype.fromUnaryFilter = function (filter) {
    switch (filter.unaryFilter.op) {
      case 'IS_NAN':
        var nanField = this.fromFieldPathReference(filter.unaryFilter.field);
        return new NanFilter(nanField);

      case 'IS_NULL':
        var nullField = this.fromFieldPathReference(filter.unaryFilter.field);
        return new NullFilter(nullField);

      case 'OPERATOR_UNSPECIFIED':
        return fail('Unspecified filter');

      default:
        return fail('Unknown filter');
    }
  };

  JsonProtoSerializer.prototype.toDocumentMask = function (fieldMask) {
    var canonicalFields = [];
    fieldMask.fields.forEach(function (field) {
      return canonicalFields.push(field.canonicalString());
    });
    return {
      fieldPaths: canonicalFields
    };
  };

  JsonProtoSerializer.prototype.fromDocumentMask = function (proto) {
    var paths = proto.fieldPaths || [];
    var fields = paths.map(function (path) {
      return FieldPath.fromServerFormat(path);
    });
    return FieldMask.fromArray(fields);
  };

  return JsonProtoSerializer;
}();
/**
 * Checks for a specific oneof tag in a protocol buffer message.
 *
 * This intentionally accommodates two distinct cases:
 *
 * 1) Messages containing a type tag: these are the format produced by GRPC in
 * return values. These may contain default-value mappings for all tags in the
 * oneof but the type tag specifies which one was actually set.
 *
 * 2) Messages that don't contain a type tag: these are the format required by
 * GRPC as inputs. If we emitted objects with type tags, ProtoBuf.js would
 * choke claiming that the tags aren't fields in the Message.
 *
 * Allowing both formats here makes the serializer able to consume the outputs
 * it produces: for all messages it supports, fromX(toX(value)) == value.
 *
 * Note that case 2 suffers from ambiguity: if multiple tags are present
 * without a type tag then the callers are structured in such a way that the
 * first invocation will win. Since we only parse in this mode when parsing
 * the output of a serialize method this works, but it's not a general
 * solution.
 *
 * Unfortunately there is no general solution here because proto3 makes it
 * impossible to distinguish unset from explicitly set fields: both have the
 * default value for the type. Without the type tag but multiple value tags
 * it's possible to have default values for each tag in the oneof and not be
 * able to know which was actually in effect.
 */


function hasTag(obj, type, tag) {
  return type === tag || !type && tag in obj;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Provides a simple helper class that implements the Stream interface to
 * bridge to other implementations that are streams but do not implement the
 * interface. The stream callbacks are invoked with the callOn... methods.
 */


var StreamBridge =
/** @class */
function () {
  function StreamBridge(args) {
    this.sendFn = args.sendFn;
    this.closeFn = args.closeFn;
  }

  StreamBridge.prototype.onOpen = function (callback) {
    assert(!this.wrappedOnOpen, 'Called onOpen on stream twice!');
    this.wrappedOnOpen = callback;
  };

  StreamBridge.prototype.onClose = function (callback) {
    assert(!this.wrappedOnClose, 'Called onClose on stream twice!');
    this.wrappedOnClose = callback;
  };

  StreamBridge.prototype.onMessage = function (callback) {
    assert(!this.wrappedOnMessage, 'Called onMessage on stream twice!');
    this.wrappedOnMessage = callback;
  };

  StreamBridge.prototype.close = function () {
    this.closeFn();
  };

  StreamBridge.prototype.send = function (msg) {
    this.sendFn(msg);
  };

  StreamBridge.prototype.callOnOpen = function () {
    assert(this.wrappedOnOpen !== undefined, 'Cannot call onOpen because no callback was set');
    this.wrappedOnOpen();
  };

  StreamBridge.prototype.callOnClose = function (err) {
    assert(this.wrappedOnClose !== undefined, 'Cannot call onClose because no callback was set');
    this.wrappedOnClose(err);
  };

  StreamBridge.prototype.callOnMessage = function (msg) {
    assert(this.wrappedOnMessage !== undefined, 'Cannot call onMessage because no callback was set');
    this.wrappedOnMessage(msg);
  };

  return StreamBridge;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG = 'Connection';
var RPC_STREAM_SERVICE = 'google.firestore.v1.Firestore';
var RPC_URL_VERSION = 'v1';
/** Maps RPC names to the corresponding REST endpoint name. */

var RPC_NAME_REST_MAPPING = {
  BatchGetDocuments: 'batchGet',
  Commit: 'commit'
}; // TODO(b/38203344): The SDK_VERSION is set independently from Firebase because
// we are doing out-of-band releases. Once we release as part of Firebase, we
// should use the Firebase version instead.

var X_GOOG_API_CLIENT_VALUE = 'gl-js/ fire/' + SDK_VERSION;
var XHR_TIMEOUT_SECS = 15;

var WebChannelConnection =
/** @class */
function () {
  function WebChannelConnection(info) {
    this.databaseId = info.databaseId;
    var proto = info.ssl ? 'https' : 'http';
    this.baseUrl = proto + '://' + info.host;
  }
  /**
   * Modifies the headers for a request, adding any authorization token if
   * present and any additional headers for the request.
   */


  WebChannelConnection.prototype.modifyHeadersForRequest = function (headers, token) {
    if (token) {
      for (var header in token.authHeaders) {
        if (token.authHeaders.hasOwnProperty(header)) {
          headers[header] = token.authHeaders[header];
        }
      }
    }

    headers['X-Goog-Api-Client'] = X_GOOG_API_CLIENT_VALUE;
  };

  WebChannelConnection.prototype.invokeRPC = function (rpcName, request, token) {
    var _this = this;

    var url = this.makeUrl(rpcName);
    return new Promise(function (resolve, reject) {
      // tslint:disable-next-line:no-any XhrIo doesn't have TS typings.
      var xhr = new webchannelWrapper.XhrIo();
      xhr.listenOnce(webchannelWrapper.EventType.COMPLETE, function () {
        try {
          switch (xhr.getLastErrorCode()) {
            case webchannelWrapper.ErrorCode.NO_ERROR:
              var json = xhr.getResponseJson();
              debug(LOG_TAG, 'XHR received:', JSON.stringify(json));
              resolve(json);
              break;

            case webchannelWrapper.ErrorCode.TIMEOUT:
              debug(LOG_TAG, 'RPC "' + rpcName + '" timed out');
              reject(new FirestoreError(Code.DEADLINE_EXCEEDED, 'Request time out'));
              break;

            case webchannelWrapper.ErrorCode.HTTP_ERROR:
              var status_1 = xhr.getStatus();
              debug(LOG_TAG, 'RPC "' + rpcName + '" failed with status:', status_1, 'response text:', xhr.getResponseText());

              if (status_1 > 0) {
                reject(new FirestoreError(mapCodeFromHttpStatus(status_1), 'Server responded with status ' + xhr.getStatusText()));
              } else {
                // If we received an HTTP_ERROR but there's no status code,
                // it's most probably a connection issue
                debug(LOG_TAG, 'RPC "' + rpcName + '" failed');
                reject(new FirestoreError(Code.UNAVAILABLE, 'Connection failed.'));
              }

              break;

            default:
              fail('RPC "' + rpcName + '" failed with unanticipated ' + 'webchannel error ' + xhr.getLastErrorCode() + ': ' + xhr.getLastError() + ', giving up.');
          }
        } finally {
          debug(LOG_TAG, 'RPC "' + rpcName + '" completed.');
        }
      });
      var requestString = JSON.stringify(request);
      debug(LOG_TAG, 'XHR sending: ', url + ' ' + requestString); // Content-Type: text/plain will avoid preflight requests which might
      // mess with CORS and redirects by proxies. If we add custom headers
      // we will need to change this code to potentially use the
      // $httpOverwrite parameter supported by ESF to avoid
      // triggering preflight requests.

      var headers = {
        'Content-Type': 'text/plain'
      };

      _this.modifyHeadersForRequest(headers, token);

      xhr.send(url, 'POST', requestString, headers, XHR_TIMEOUT_SECS);
    });
  };

  WebChannelConnection.prototype.invokeStreamingRPC = function (rpcName, request, token) {
    // The REST API automatically aggregates all of the streamed results, so we
    // can just use the normal invoke() method.
    return this.invokeRPC(rpcName, request, token);
  };

  WebChannelConnection.prototype.openStream = function (rpcName, token) {
    var urlParts = [this.baseUrl, '/', RPC_STREAM_SERVICE, '/', rpcName, '/channel'];
    var webchannelTransport = webchannelWrapper.createWebChannelTransport();
    var request = {
      // Background channel test avoids the initial two test calls and decreases
      // initial cold start time.
      // TODO(dimond): wenboz@ mentioned this might affect use with proxies and
      // we should monitor closely for any reports.
      backgroundChannelTest: true,
      // Required for backend stickiness, routing behavior is based on this
      // parameter.
      httpSessionIdParam: 'gsessionid',
      initMessageHeaders: {},
      messageUrlParams: {
        // This param is used to improve routing and project isolation by the
        // backend and must be included in every request.
        database: "projects/" + this.databaseId.projectId + "/databases/" + this.databaseId.database
      },
      sendRawJson: true,
      supportsCrossDomainXhr: true,
      internalChannelParams: {
        // Override the default timeout (randomized between 10-20 seconds) since
        // a large write batch on a slow internet connection may take a long
        // time to send to the backend. Rather than have WebChannel impose a
        // tight timeout which could lead to infinite timeouts and retries, we
        // set it very large (5-10 minutes) and rely on the browser's builtin
        // timeouts to kick in if the request isn't working.
        forwardChannelRequestTimeoutMs: 10 * 60 * 1000
      }
    };
    this.modifyHeadersForRequest(request.initMessageHeaders, token); // Sending the custom headers we just added to request.initMessageHeaders
    // (Authorization, etc.) will trigger the browser to make a CORS preflight
    // request because the XHR will no longer meet the criteria for a "simple"
    // CORS request:
    // https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#Simple_requests
    //
    // Therefore to avoid the CORS preflight request (an extra network
    // roundtrip), we use the httpHeadersOverwriteParam option to specify that
    // the headers should instead be encoded into a special "$httpHeaders" query
    // parameter, which is recognized by the webchannel backend. This is
    // formally defined here:
    // https://github.com/google/closure-library/blob/b0e1815b13fb92a46d7c9b3c30de5d6a396a3245/closure/goog/net/rpc/httpcors.js#L32
    //
    // But for some unclear reason (see
    // https://github.com/firebase/firebase-js-sdk/issues/703), this breaks
    // ReactNative and so we exclude it, which just means ReactNative may be
    // subject to the extra network roundtrip for CORS preflight.

    if (!util.isReactNative()) {
      request['httpHeadersOverwriteParam'] = '$httpHeaders';
    }

    var url = urlParts.join('');
    debug(LOG_TAG, 'Creating WebChannel: ' + url + ' ' + request); // tslint:disable-next-line:no-any Because listen isn't defined on it.

    var channel = webchannelTransport.createWebChannel(url, request); // WebChannel supports sending the first message with the handshake - saving
    // a network round trip. However, it will have to call send in the same
    // JS event loop as open. In order to enforce this, we delay actually
    // opening the WebChannel until send is called. Whether we have called
    // open is tracked with this variable.

    var opened = false; // A flag to determine whether the stream was closed (by us or through an
    // error/close event) to avoid delivering multiple close events or sending
    // on a closed stream

    var closed = false;
    var streamBridge = new StreamBridge({
      sendFn: function (msg) {
        if (!closed) {
          if (!opened) {
            debug(LOG_TAG, 'Opening WebChannel transport.');
            channel.open();
            opened = true;
          }

          debug(LOG_TAG, 'WebChannel sending:', msg);
          channel.send(msg);
        } else {
          debug(LOG_TAG, 'Not sending because WebChannel is closed:', msg);
        }
      },
      closeFn: function () {
        return channel.close();
      }
    }); // Closure events are guarded and exceptions are swallowed, so catch any
    // exception and rethrow using a setTimeout so they become visible again.
    // Note that eventually this function could go away if we are confident
    // enough the code is exception free.

    var unguardedEventListen = function (type, fn) {
      // TODO(dimond): closure typing seems broken because WebChannel does
      // not implement goog.events.Listenable
      channel.listen(type, function (param) {
        try {
          fn(param);
        } catch (e) {
          setTimeout(function () {
            throw e;
          }, 0);
        }
      });
    };

    unguardedEventListen(webchannelWrapper.WebChannel.EventType.OPEN, function () {
      if (!closed) {
        debug(LOG_TAG, 'WebChannel transport opened.');
      }
    });
    unguardedEventListen(webchannelWrapper.WebChannel.EventType.CLOSE, function () {
      if (!closed) {
        closed = true;
        debug(LOG_TAG, 'WebChannel transport closed');
        streamBridge.callOnClose();
      }
    });
    unguardedEventListen(webchannelWrapper.WebChannel.EventType.ERROR, function (err) {
      if (!closed) {
        closed = true;
        debug(LOG_TAG, 'WebChannel transport errored:', err);
        streamBridge.callOnClose(new FirestoreError(Code.UNAVAILABLE, 'The operation could not be completed'));
      }
    });
    unguardedEventListen(webchannelWrapper.WebChannel.EventType.MESSAGE, function (msg) {
      if (!closed) {
        var msgData = msg.data[0];
        assert(!!msgData, 'Got a webchannel message without data.'); // TODO(b/35143891): There is a bug in One Platform that caused errors
        // (and only errors) to be wrapped in an extra array. To be forward
        // compatible with the bug we need to check either condition. The latter
        // can be removed once the fix has been rolled out.

        var error = // tslint:disable-next-line:no-any msgData.error is not typed.
        msgData.error || msgData[0] && msgData[0].error;

        if (error) {
          debug(LOG_TAG, 'WebChannel received error:', error); // error.status will be a string like 'OK' or 'NOT_FOUND'.

          var status_2 = error.status;
          var code = mapCodeFromRpcStatus(status_2);
          var message = error.message;

          if (code === undefined) {
            code = Code.INTERNAL;
            message = 'Unknown error status: ' + status_2 + ' with message ' + error.message;
          } // Mark closed so no further events are propagated


          closed = true;
          streamBridge.callOnClose(new FirestoreError(code, message));
          channel.close();
        } else {
          debug(LOG_TAG, 'WebChannel received:', msgData);
          streamBridge.callOnMessage(msgData);
        }
      }
    });
    setTimeout(function () {
      // Technically we could/should wait for the WebChannel opened event,
      // but because we want to send the first message with the WebChannel
      // handshake we pretend the channel opened here (asynchronously), and
      // then delay the actual open until the first message is sent.
      streamBridge.callOnOpen();
    }, 0);
    return streamBridge;
  }; // visible for testing


  WebChannelConnection.prototype.makeUrl = function (rpcName) {
    var urlRpcName = RPC_NAME_REST_MAPPING[rpcName];
    assert(urlRpcName !== undefined, 'Unknown REST mapping for: ' + rpcName);
    var url = [this.baseUrl, '/', RPC_URL_VERSION];
    url.push('/projects/');
    url.push(this.databaseId.projectId);
    url.push('/databases/');
    url.push(this.databaseId.database);
    url.push('/documents');
    url.push(':');
    url.push(urlRpcName);
    return url.join('');
  };

  return WebChannelConnection;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var BrowserPlatform =
/** @class */
function () {
  function BrowserPlatform() {
    this.emptyByteString = '';
    this.base64Available = typeof atob !== 'undefined';
  }

  Object.defineProperty(BrowserPlatform.prototype, "document", {
    get: function () {
      return typeof document !== 'undefined' ? document : null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(BrowserPlatform.prototype, "window", {
    get: function () {
      return typeof window !== 'undefined' ? window : null;
    },
    enumerable: true,
    configurable: true
  });

  BrowserPlatform.prototype.loadConnection = function (databaseInfo) {
    return Promise.resolve(new WebChannelConnection(databaseInfo));
  };

  BrowserPlatform.prototype.newSerializer = function (databaseId) {
    return new JsonProtoSerializer(databaseId, {
      useProto3Json: true
    });
  };

  BrowserPlatform.prototype.formatJSON = function (value) {
    return JSON.stringify(value);
  };

  BrowserPlatform.prototype.atob = function (encoded) {
    return atob(encoded);
  };

  BrowserPlatform.prototype.btoa = function (raw) {
    return btoa(raw);
  };

  return BrowserPlatform;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * This code needs to run before Firestore is used. This can be achieved in
 * several ways:
 *   1) Through the JSCompiler compiling this code and then (automatically)
 *      executing it before exporting the Firestore symbols.
 *   2) Through importing this module first in a Firestore main module
 */


PlatformSupport.setPlatform(new BrowserPlatform());
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * `ListenSequence` is a monotonic sequence. It is initialized with a minimum value to
 * exceed. All subsequent calls to next will return increasing values. If provided with a
 * `SequenceNumberSyncer`, it will additionally bump its next value when told of a new value, as
 * well as write out sequence numbers that it produces via `next()`.
 */

var ListenSequence =
/** @class */
function () {
  function ListenSequence(previousValue, sequenceNumberSyncer) {
    var _this = this;

    this.previousValue = previousValue;

    if (sequenceNumberSyncer) {
      sequenceNumberSyncer.sequenceNumberHandler = function (sequenceNumber) {
        return _this.setPreviousValue(sequenceNumber);
      };

      this.writeNewSequenceNumber = function (sequenceNumber) {
        return sequenceNumberSyncer.writeSequenceNumber(sequenceNumber);
      };
    }
  }

  ListenSequence.prototype.setPreviousValue = function (externalPreviousValue) {
    this.previousValue = Math.max(externalPreviousValue, this.previousValue);
    return this.previousValue;
  };

  ListenSequence.prototype.next = function () {
    var nextValue = ++this.previousValue;

    if (this.writeNewSequenceNumber) {
      this.writeNewSequenceNumber(nextValue);
    }

    return nextValue;
  };

  ListenSequence.INVALID = -1;
  return ListenSequence;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var Deferred =
/** @class */
function () {
  function Deferred() {
    var _this = this;

    this.promise = new Promise(function (resolve, reject) {
      _this.resolve = resolve;
      _this.reject = reject;
    });
  }

  return Deferred;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Wellknown "timer" IDs used when scheduling delayed operations on the
 * AsyncQueue. These IDs can then be used from tests to check for the presence
 * of operations or to run them early.
 *
 * The string values are used when encoding these timer IDs in JSON spec tests.
 */


var TimerId;

(function (TimerId) {
  /** All can be used with runDelayedOperationsEarly() to run all timers. */
  TimerId["All"] = "all";
  /**
   * The following 4 timers are used in persistent_stream.ts for the listen and
   * write streams. The "Idle" timer is used to close the stream due to
   * inactivity. The "ConnectionBackoff" timer is used to restart a stream once
   * the appropriate backoff delay has elapsed.
   */

  TimerId["ListenStreamIdle"] = "listen_stream_idle";
  TimerId["ListenStreamConnectionBackoff"] = "listen_stream_connection_backoff";
  TimerId["WriteStreamIdle"] = "write_stream_idle";
  TimerId["WriteStreamConnectionBackoff"] = "write_stream_connection_backoff";
  /**
   * A timer used in online_state_tracker.ts to transition from
   * OnlineState.Unknown to Offline after a set timeout, rather than waiting
   * indefinitely for success or failure.
   */

  TimerId["OnlineStateTimeout"] = "online_state_timeout";
  /**
   * A timer used to update the client metadata in IndexedDb, which is used
   * to determine the primary leaseholder.
   */

  TimerId["ClientMetadataRefresh"] = "client_metadata_refresh";
  /** A timer used to periodically attempt LRU Garbage collection */

  TimerId["LruGarbageCollection"] = "lru_garbage_collection";
})(TimerId || (TimerId = {}));
/**
 * Represents an operation scheduled to be run in the future on an AsyncQueue.
 *
 * It is created via DelayedOperation.createAndSchedule().
 *
 * Supports cancellation (via cancel()) and early execution (via skipDelay()).
 */


var DelayedOperation =
/** @class */
function () {
  function DelayedOperation(asyncQueue, timerId, targetTimeMs, op, removalCallback) {
    this.asyncQueue = asyncQueue;
    this.timerId = timerId;
    this.targetTimeMs = targetTimeMs;
    this.op = op;
    this.removalCallback = removalCallback;
    this.deferred = new Deferred();
    this.then = this.deferred.promise.then.bind(this.deferred.promise);
    this.catch = this.deferred.promise.catch.bind(this.deferred.promise); // It's normal for the deferred promise to be canceled (due to cancellation)
    // and so we attach a dummy catch callback to avoid
    // 'UnhandledPromiseRejectionWarning' log spam.

    this.deferred.promise.catch(function (err) {});
  }
  /**
   * Creates and returns a DelayedOperation that has been scheduled to be
   * executed on the provided asyncQueue after the provided delayMs.
   *
   * @param asyncQueue The queue to schedule the operation on.
   * @param id A Timer ID identifying the type of operation this is.
   * @param delayMs The delay (ms) before the operation should be scheduled.
   * @param op The operation to run.
   * @param removalCallback A callback to be called synchronously once the
   *   operation is executed or canceled, notifying the AsyncQueue to remove it
   *   from its delayedOperations list.
   *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and
   *   the DelayedOperation class public.
   */


  DelayedOperation.createAndSchedule = function (asyncQueue, timerId, delayMs, op, removalCallback) {
    var targetTime = Date.now() + delayMs;
    var delayedOp = new DelayedOperation(asyncQueue, timerId, targetTime, op, removalCallback);
    delayedOp.start(delayMs);
    return delayedOp;
  };
  /**
   * Starts the timer. This is called immediately after construction by
   * createAndSchedule().
   */


  DelayedOperation.prototype.start = function (delayMs) {
    var _this = this;

    this.timerHandle = setTimeout(function () {
      return _this.handleDelayElapsed();
    }, delayMs);
  };
  /**
   * Queues the operation to run immediately (if it hasn't already been run or
   * canceled).
   */


  DelayedOperation.prototype.skipDelay = function () {
    return this.handleDelayElapsed();
  };
  /**
   * Cancels the operation if it hasn't already been executed or canceled. The
   * promise will be rejected.
   *
   * As long as the operation has not yet been run, calling cancel() provides a
   * guarantee that the operation will not be run.
   */


  DelayedOperation.prototype.cancel = function (reason) {
    if (this.timerHandle !== null) {
      this.clearTimeout();
      this.deferred.reject(new FirestoreError(Code.CANCELLED, 'Operation cancelled' + (reason ? ': ' + reason : '')));
    }
  };

  DelayedOperation.prototype.handleDelayElapsed = function () {
    var _this = this;

    this.asyncQueue.enqueueAndForget(function () {
      if (_this.timerHandle !== null) {
        _this.clearTimeout();

        return _this.op().then(function (result) {
          return _this.deferred.resolve(result);
        });
      } else {
        return Promise.resolve();
      }
    });
  };

  DelayedOperation.prototype.clearTimeout = function () {
    if (this.timerHandle !== null) {
      this.removalCallback(this);
      clearTimeout(this.timerHandle);
      this.timerHandle = null;
    }
  };

  return DelayedOperation;
}();

var AsyncQueue =
/** @class */
function () {
  function AsyncQueue() {
    // The last promise in the queue.
    this.tail = Promise.resolve(); // Operations scheduled to be queued in the future. Operations are
    // automatically removed after they are run or canceled.

    this.delayedOperations = []; // Flag set while there's an outstanding AsyncQueue operation, used for
    // assertion sanity-checks.

    this.operationInProgress = false;
  }
  /**
   * Adds a new operation to the queue without waiting for it to complete (i.e.
   * we ignore the Promise result).
   */


  AsyncQueue.prototype.enqueueAndForget = function (op) {
    // tslint:disable-next-line:no-floating-promises
    this.enqueue(op);
  };
  /**
   * Adds a new operation to the queue. Returns a promise that will be resolved
   * when the promise returned by the new operation is (with its value).
   */


  AsyncQueue.prototype.enqueue = function (op) {
    var _this = this;

    this.verifyNotFailed();
    var newTail = this.tail.then(function () {
      _this.operationInProgress = true;
      return op().catch(function (error$1) {
        _this.failure = error$1;
        _this.operationInProgress = false;
        var message = error$1.stack || error$1.message || '';
        error('INTERNAL UNHANDLED ERROR: ', message); // Escape the promise chain and throw the error globally so that
        // e.g. any global crash reporting library detects and reports it.
        // (but not for simulated errors in our tests since this breaks mocha)

        if (message.indexOf('Firestore Test Simulated Error') < 0) {
          setTimeout(function () {
            throw error$1;
          }, 0);
        } // Re-throw the error so that this.tail becomes a rejected Promise and
        // all further attempts to chain (via .then) will just short-circuit
        // and return the rejected Promise.


        throw error$1;
      }).then(function (result) {
        _this.operationInProgress = false;
        return result;
      });
    });
    this.tail = newTail;
    return newTail;
  };
  /**
   * Schedules an operation to be queued on the AsyncQueue once the specified
   * `delayMs` has elapsed. The returned CancelablePromise can be used to cancel
   * the operation prior to its running.
   */


  AsyncQueue.prototype.enqueueAfterDelay = function (timerId, delayMs, op) {
    var _this = this;

    this.verifyNotFailed();
    assert(delayMs >= 0, "Attempted to schedule an operation with a negative delay of " + delayMs); // While not necessarily harmful, we currently don't expect to have multiple
    // ops with the same timer id in the queue, so defensively reject them.

    assert(!this.containsDelayedOperation(timerId), "Attempted to schedule multiple operations with timer id " + timerId + ".");
    var delayedOp = DelayedOperation.createAndSchedule(this, timerId, delayMs, op, function (op) {
      return _this.removeDelayedOperation(op);
    });
    this.delayedOperations.push(delayedOp);
    return delayedOp;
  };

  AsyncQueue.prototype.verifyNotFailed = function () {
    if (this.failure) {
      fail('AsyncQueue is already failed: ' + (this.failure.stack || this.failure.message));
    }
  };
  /**
   * Verifies there's an operation currently in-progress on the AsyncQueue.
   * Unfortunately we can't verify that the running code is in the promise chain
   * of that operation, so this isn't a foolproof check, but it should be enough
   * to catch some bugs.
   */


  AsyncQueue.prototype.verifyOperationInProgress = function () {
    assert(this.operationInProgress, 'verifyOpInProgress() called when no op in progress on this queue.');
  };
  /**
   * Waits until all currently queued tasks are finished executing. Delayed
   * operations are not run.
   */


  AsyncQueue.prototype.drain = function () {
    return this.enqueue(function () {
      return Promise.resolve();
    });
  };
  /**
   * For Tests: Determine if a delayed operation with a particular TimerId
   * exists.
   */


  AsyncQueue.prototype.containsDelayedOperation = function (timerId) {
    for (var _i = 0, _a = this.delayedOperations; _i < _a.length; _i++) {
      var op = _a[_i];

      if (op.timerId === timerId) {
        return true;
      }
    }

    return false;
  };
  /**
   * For Tests: Runs some or all delayed operations early.
   *
   * @param lastTimerId Delayed operations up to and including this TimerId will
   *  be drained. Throws if no such operation exists. Pass TimerId.All to run
   *  all delayed operations.
   * @returns a Promise that resolves once all operations have been run.
   */


  AsyncQueue.prototype.runDelayedOperationsEarly = function (lastTimerId) {
    var _this = this; // Note that draining may generate more delayed ops, so we do that first.


    return this.drain().then(function () {
      assert(lastTimerId === TimerId.All || _this.containsDelayedOperation(lastTimerId), "Attempted to drain to missing operation " + lastTimerId); // Run ops in the same order they'd run if they ran naturally.

      _this.delayedOperations.sort(function (a, b) {
        return a.targetTimeMs - b.targetTimeMs;
      });

      for (var _i = 0, _a = _this.delayedOperations; _i < _a.length; _i++) {
        var op = _a[_i];
        op.skipDelay();

        if (lastTimerId !== TimerId.All && op.timerId === lastTimerId) {
          break;
        }
      }

      return _this.drain();
    });
  };
  /** Called once a DelayedOperation is run or canceled. */


  AsyncQueue.prototype.removeDelayedOperation = function (op) {
    // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.
    var index = this.delayedOperations.indexOf(op);
    assert(index >= 0, 'Delayed operation not found.');
    this.delayedOperations.splice(index, 1);
  };

  return AsyncQueue;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var escapeChar = '\u0001';
var encodedSeparatorChar = '\u0001';
var encodedNul = '\u0010';
var encodedEscape = '\u0011';
/**
 * Encodes a resource path into a IndexedDb-compatible string form.
 */

function encode(path) {
  var result = '';

  for (var i = 0; i < path.length; i++) {
    if (result.length > 0) {
      result = encodeSeparator(result);
    }

    result = encodeSegment(path.get(i), result);
  }

  return encodeSeparator(result);
}
/** Encodes a single segment of a resource path into the given result */


function encodeSegment(segment, resultBuf) {
  var result = resultBuf;
  var length = segment.length;

  for (var i = 0; i < length; i++) {
    var c = segment.charAt(i);

    switch (c) {
      case '\0':
        result += escapeChar + encodedNul;
        break;

      case escapeChar:
        result += escapeChar + encodedEscape;
        break;

      default:
        result += c;
    }
  }

  return result;
}
/** Encodes a path separator into the given result */


function encodeSeparator(result) {
  return result + escapeChar + encodedSeparatorChar;
}
/**
 * Decodes the given IndexedDb-compatible string form of a resource path into
 * a ResourcePath instance. Note that this method is not suitable for use with
 * decoding resource names from the server; those are One Platform format
 * strings.
 */


function decode(path) {
  // Event the empty path must encode as a path of at least length 2. A path
  // with exactly 2 must be the empty path.
  var length = path.length;
  assert(length >= 2, 'Invalid path ' + path);

  if (length === 2) {
    assert(path.charAt(0) === escapeChar && path.charAt(1) === encodedSeparatorChar, 'Non-empty path ' + path + ' had length 2');
    return ResourcePath.EMPTY_PATH;
  } // Escape characters cannot exist past the second-to-last position in the
  // source value.


  var lastReasonableEscapeIndex = length - 2;
  var segments = [];
  var segmentBuilder = '';

  for (var start = 0; start < length;) {
    // The last two characters of a valid encoded path must be a separator, so
    // there must be an end to this segment.
    var end = path.indexOf(escapeChar, start);

    if (end < 0 || end > lastReasonableEscapeIndex) {
      fail('Invalid encoded resource path: "' + path + '"');
    }

    var next = path.charAt(end + 1);

    switch (next) {
      case encodedSeparatorChar:
        var currentPiece = path.substring(start, end);
        var segment = void 0;

        if (segmentBuilder.length === 0) {
          // Avoid copying for the common case of a segment that excludes \0
          // and \001
          segment = currentPiece;
        } else {
          segmentBuilder += currentPiece;
          segment = segmentBuilder;
          segmentBuilder = '';
        }

        segments.push(segment);
        break;

      case encodedNul:
        segmentBuilder += path.substring(start, end);
        segmentBuilder += '\0';
        break;

      case encodedEscape:
        // The escape character can be used in the output to encode itself.
        segmentBuilder += path.substring(start, end + 1);
        break;

      default:
        fail('Invalid encoded resource path: "' + path + '"');
    }

    start = end + 2;
  }

  return new ResourcePath(segments);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var BATCHID_UNKNOWN = -1;
/**
 * A batch of mutations that will be sent as one unit to the backend.
 */

var MutationBatch =
/** @class */
function () {
  /**
   * @param batchId The unique ID of this mutation batch.
   * @param localWriteTime The original write time of this mutation.
   * @param baseMutations Mutations that are used to populate the base
   * values when this mutation is applied locally. This can be used to locally
   * overwrite values that are persisted in the remote document cache. Base
   * mutations are never sent to the backend.
   * @param mutations The user-provided mutations in this mutation batch.
   * User-provided mutations are applied both locally and remotely on the
   * backend.
   */
  function MutationBatch(batchId, localWriteTime, baseMutations, mutations) {
    this.batchId = batchId;
    this.localWriteTime = localWriteTime;
    this.baseMutations = baseMutations;
    this.mutations = mutations;
    assert(mutations.length > 0, 'Cannot create an empty mutation batch');
  }
  /**
   * Applies all the mutations in this MutationBatch to the specified document
   * to create a new remote document
   *
   * @param docKey The key of the document to apply mutations to.
   * @param maybeDoc The document to apply mutations to.
   * @param batchResult The result of applying the MutationBatch to the
   * backend.
   */


  MutationBatch.prototype.applyToRemoteDocument = function (docKey, maybeDoc, batchResult) {
    if (maybeDoc) {
      assert(maybeDoc.key.isEqual(docKey), "applyToRemoteDocument: key " + docKey + " should match maybeDoc key\n        " + maybeDoc.key);
    }

    var mutationResults = batchResult.mutationResults;
    assert(mutationResults.length === this.mutations.length, "Mismatch between mutations length\n      (" + this.mutations.length + ") and mutation results length\n      (" + mutationResults.length + ").");

    for (var i = 0; i < this.mutations.length; i++) {
      var mutation = this.mutations[i];

      if (mutation.key.isEqual(docKey)) {
        var mutationResult = mutationResults[i];
        maybeDoc = mutation.applyToRemoteDocument(maybeDoc, mutationResult);
      }
    }

    return maybeDoc;
  };
  /**
   * Computes the local view of a document given all the mutations in this
   * batch.
   *
   * @param docKey The key of the document to apply mutations to.
   * @param maybeDoc The document to apply mutations to.
   */


  MutationBatch.prototype.applyToLocalView = function (docKey, maybeDoc) {
    if (maybeDoc) {
      assert(maybeDoc.key.isEqual(docKey), "applyToLocalDocument: key " + docKey + " should match maybeDoc key\n        " + maybeDoc.key);
    } // First, apply the base state. This allows us to apply non-idempotent
    // transform against a consistent set of values.


    for (var _i = 0, _a = this.baseMutations; _i < _a.length; _i++) {
      var mutation = _a[_i];

      if (mutation.key.isEqual(docKey)) {
        maybeDoc = mutation.applyToLocalView(maybeDoc, maybeDoc, this.localWriteTime);
      }
    }

    var baseDoc = maybeDoc; // Second, apply all user-provided mutations.

    for (var _b = 0, _c = this.mutations; _b < _c.length; _b++) {
      var mutation = _c[_b];

      if (mutation.key.isEqual(docKey)) {
        maybeDoc = mutation.applyToLocalView(maybeDoc, baseDoc, this.localWriteTime);
      }
    }

    return maybeDoc;
  };
  /**
   * Computes the local view for all provided documents given the mutations in
   * this batch.
   */


  MutationBatch.prototype.applyToLocalDocumentSet = function (maybeDocs) {
    var _this = this; // TODO(mrschmidt): This implementation is O(n^2). If we apply the mutations
    // directly (as done in `applyToLocalView()`), we can reduce the complexity
    // to O(n).


    var mutatedDocuments = maybeDocs;
    this.mutations.forEach(function (m) {
      var mutatedDocument = _this.applyToLocalView(m.key, maybeDocs.get(m.key));

      if (mutatedDocument) {
        mutatedDocuments = mutatedDocuments.insert(m.key, mutatedDocument);
      }
    });
    return mutatedDocuments;
  };

  MutationBatch.prototype.keys = function () {
    return this.mutations.reduce(function (keys, m) {
      return keys.add(m.key);
    }, documentKeySet());
  };

  MutationBatch.prototype.isEqual = function (other) {
    return this.batchId === other.batchId && arrayEquals(this.mutations, other.mutations) && arrayEquals(this.baseMutations, other.baseMutations);
  };

  return MutationBatch;
}();
/** The result of applying a mutation batch to the backend. */


var MutationBatchResult =
/** @class */
function () {
  function MutationBatchResult(batch, commitVersion, mutationResults, streamToken,
  /**
   * A pre-computed mapping from each mutated document to the resulting
   * version.
   */
  docVersions) {
    this.batch = batch;
    this.commitVersion = commitVersion;
    this.mutationResults = mutationResults;
    this.streamToken = streamToken;
    this.docVersions = docVersions;
  }
  /**
   * Creates a new MutationBatchResult for the given batch and results. There
   * must be one result for each mutation in the batch. This static factory
   * caches a document=>version mapping (docVersions).
   */


  MutationBatchResult.from = function (batch, commitVersion, results, streamToken) {
    assert(batch.mutations.length === results.length, 'Mutations sent ' + batch.mutations.length + ' must equal results received ' + results.length);
    var versionMap = documentVersionMap();
    var mutations = batch.mutations;

    for (var i = 0; i < mutations.length; i++) {
      versionMap = versionMap.insert(mutations[i].key, results[i].version);
    }

    return new MutationBatchResult(batch, commitVersion, results, streamToken, versionMap);
  };

  return MutationBatchResult;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * PersistencePromise<> is essentially a re-implementation of Promise<> except
 * it has a .next() method instead of .then() and .next() and .catch() callbacks
 * are executed synchronously when a PersistencePromise resolves rather than
 * asynchronously (Promise<> implementations use setImmediate() or similar).
 *
 * This is necessary to interoperate with IndexedDB which will automatically
 * commit transactions if control is returned to the event loop without
 * synchronously initiating another operation on the transaction.
 *
 * NOTE: .then() and .catch() only allow a single consumer, unlike normal
 * Promises.
 */


var PersistencePromise =
/** @class */
function () {
  function PersistencePromise(callback) {
    var _this = this; // NOTE: next/catchCallback will always point to our own wrapper functions,
    // not the user's raw next() or catch() callbacks.
    // tslint:disable-next-line:no-any Accept any result type for the next call in the Promise chain.


    this.nextCallback = null; // tslint:disable-next-line:no-any Accept any result type for the error handler.

    this.catchCallback = null; // When the operation resolves, we'll set result or error and mark isDone.

    this.result = undefined;
    this.error = undefined;
    this.isDone = false; // Set to true when .then() or .catch() are called and prevents additional
    // chaining.

    this.callbackAttached = false;
    callback(function (value) {
      _this.isDone = true;
      _this.result = value;

      if (_this.nextCallback) {
        // value should be defined unless T is Void, but we can't express
        // that in the type system.
        _this.nextCallback(value);
      }
    }, function (error) {
      _this.isDone = true;
      _this.error = error;

      if (_this.catchCallback) {
        _this.catchCallback(error);
      }
    });
  }

  PersistencePromise.prototype.catch = function (fn) {
    return this.next(undefined, fn);
  };

  PersistencePromise.prototype.next = function (nextFn, catchFn) {
    var _this = this;

    if (this.callbackAttached) {
      fail('Called next() or catch() twice for PersistencePromise');
    }

    this.callbackAttached = true;

    if (this.isDone) {
      if (!this.error) {
        return this.wrapSuccess(nextFn, this.result);
      } else {
        return this.wrapFailure(catchFn, this.error);
      }
    } else {
      return new PersistencePromise(function (resolve, reject) {
        _this.nextCallback = function (value) {
          _this.wrapSuccess(nextFn, value).next(resolve, reject);
        };

        _this.catchCallback = function (error) {
          _this.wrapFailure(catchFn, error).next(resolve, reject);
        };
      });
    }
  };

  PersistencePromise.prototype.toPromise = function () {
    var _this = this;

    return new Promise(function (resolve, reject) {
      _this.next(resolve, reject);
    });
  };

  PersistencePromise.prototype.wrapUserFunction = function (fn) {
    try {
      var result = fn();

      if (result instanceof PersistencePromise) {
        return result;
      } else {
        return PersistencePromise.resolve(result);
      }
    } catch (e) {
      return PersistencePromise.reject(e);
    }
  };

  PersistencePromise.prototype.wrapSuccess = function (nextFn, value) {
    if (nextFn) {
      return this.wrapUserFunction(function () {
        return nextFn(value);
      });
    } else {
      // If there's no nextFn, then R must be the same as T but we
      // can't express that in the type system.
      // tslint:disable-next-line:no-any
      return PersistencePromise.resolve(value);
    }
  };

  PersistencePromise.prototype.wrapFailure = function (catchFn, error) {
    if (catchFn) {
      return this.wrapUserFunction(function () {
        return catchFn(error);
      });
    } else {
      return PersistencePromise.reject(error);
    }
  };

  PersistencePromise.resolve = function (result) {
    return new PersistencePromise(function (resolve, reject) {
      resolve(result);
    });
  };

  PersistencePromise.reject = function (error) {
    return new PersistencePromise(function (resolve, reject) {
      reject(error);
    });
  };

  PersistencePromise.waitFor = function ( // tslint:disable-next-line:no-any Accept all Promise types in waitFor().
  all) {
    return new PersistencePromise(function (resolve, reject) {
      var expectedCount = 0;
      var resolvedCount = 0;
      var done = false;
      all.forEach(function (element) {
        ++expectedCount;
        element.next(function () {
          ++resolvedCount;

          if (done && resolvedCount === expectedCount) {
            resolve();
          }
        }, function (err) {
          return reject(err);
        });
      });
      done = true;

      if (resolvedCount === expectedCount) {
        resolve();
      }
    });
  };
  /**
   * Given an array of predicate functions that asynchronously evaluate to a
   * boolean, implements a short-circuiting `or` between the results. Predicates
   * will be evaluated until one of them returns `true`, then stop. The final
   * result will be whether any of them returned `true`.
   */


  PersistencePromise.or = function (predicates) {
    var p = PersistencePromise.resolve(false);

    var _loop_1 = function (predicate) {
      p = p.next(function (isTrue) {
        if (isTrue) {
          return PersistencePromise.resolve(isTrue);
        } else {
          return predicate();
        }
      });
    };

    for (var _i = 0, predicates_1 = predicates; _i < predicates_1.length; _i++) {
      var predicate = predicates_1[_i];

      _loop_1(predicate);
    }

    return p;
  };
  /**
   * Given an iterable, call the given function on each element in the
   * collection and wait for all of the resulting concurrent PersistencePromises
   * to resolve.
   */


  PersistencePromise.forEach = function (collection, f) {
    var _this = this;

    var promises = [];
    collection.forEach(function (r, s) {
      promises.push(f.call(_this, r, s));
    });
    return this.waitFor(promises);
  };

  return PersistencePromise;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** A mutation queue for a specific user, backed by IndexedDB. */


var IndexedDbMutationQueue =
/** @class */
function () {
  function IndexedDbMutationQueue(
  /**
   * The normalized userId (e.g. null UID => "" userId) used to store /
   * retrieve mutations.
   */
  userId, serializer, indexManager, referenceDelegate) {
    this.userId = userId;
    this.serializer = serializer;
    this.indexManager = indexManager;
    this.referenceDelegate = referenceDelegate;
    /**
     * Caches the document keys for pending mutation batches. If the mutation
     * has been removed from IndexedDb, the cached value may continue to
     * be used to retrieve the batch's document keys. To remove a cached value
     * locally, `removeCachedMutationKeys()` should be invoked either directly
     * or through `removeMutationBatches()`.
     *
     * With multi-tab, when the primary client acknowledges or rejects a mutation,
     * this cache is used by secondary clients to invalidate the local
     * view of the documents that were previously affected by the mutation.
     */
    // PORTING NOTE: Multi-tab only.

    this.documentKeysByBatchId = {};
  }
  /**
   * Creates a new mutation queue for the given user.
   * @param user The user for which to create a mutation queue.
   * @param serializer The serializer to use when persisting to IndexedDb.
   */


  IndexedDbMutationQueue.forUser = function (user, serializer, indexManager, referenceDelegate) {
    // TODO(mcg): Figure out what constraints there are on userIDs
    // In particular, are there any reserved characters? are empty ids allowed?
    // For the moment store these together in the same mutations table assuming
    // that empty userIDs aren't allowed.
    assert(user.uid !== '', 'UserID must not be an empty string.');
    var userId = user.isAuthenticated() ? user.uid : '';
    return new IndexedDbMutationQueue(userId, serializer, indexManager, referenceDelegate);
  };

  IndexedDbMutationQueue.prototype.checkEmpty = function (transaction) {
    var empty = true;
    var range = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);
    return mutationsStore(transaction).iterate({
      index: DbMutationBatch.userMutationsIndex,
      range: range
    }, function (key, value, control) {
      empty = false;
      control.done();
    }).next(function () {
      return empty;
    });
  };

  IndexedDbMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {
    return this.getMutationQueueMetadata(transaction).next(function (metadata) {
      metadata.lastStreamToken = convertStreamToken(streamToken);
      return mutationQueuesStore(transaction).put(metadata);
    });
  };

  IndexedDbMutationQueue.prototype.getLastStreamToken = function (transaction) {
    return this.getMutationQueueMetadata(transaction).next(function (metadata) {
      return metadata.lastStreamToken;
    });
  };

  IndexedDbMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {
    return this.getMutationQueueMetadata(transaction).next(function (metadata) {
      metadata.lastStreamToken = convertStreamToken(streamToken);
      return mutationQueuesStore(transaction).put(metadata);
    });
  };

  IndexedDbMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, baseMutations, mutations) {
    var _this = this;

    var documentStore = documentMutationsStore(transaction);
    var mutationStore = mutationsStore(transaction); // The IndexedDb implementation in Chrome (and Firefox) does not handle
    // compound indices that include auto-generated keys correctly. To ensure
    // that the index entry is added correctly in all browsers, we perform two
    // writes: The first write is used to retrieve the next auto-generated Batch
    // ID, and the second write populates the index and stores the actual
    // mutation batch.
    // See: https://bugs.chromium.org/p/chromium/issues/detail?id=701972
    // tslint:disable-next-line:no-any We write an empty object to obtain key

    return mutationStore.add({}).next(function (batchId) {
      assert(typeof batchId === 'number', 'Auto-generated key is not a number');
      var batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);

      var dbBatch = _this.serializer.toDbMutationBatch(_this.userId, batch);

      _this.documentKeysByBatchId[batchId] = batch.keys();
      var promises = [];

      for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {
        var mutation = mutations_1[_i];
        var indexKey = DbDocumentMutation.key(_this.userId, mutation.key.path, batchId);
        promises.push(mutationStore.put(dbBatch));
        promises.push(documentStore.put(indexKey, DbDocumentMutation.PLACEHOLDER));
        promises.push(_this.indexManager.addToCollectionParentIndex(transaction, mutation.key.path.popLast()));
      }

      return PersistencePromise.waitFor(promises).next(function () {
        return batch;
      });
    });
  };

  IndexedDbMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {
    var _this = this;

    return mutationsStore(transaction).get(batchId).next(function (dbBatch) {
      if (dbBatch) {
        assert(dbBatch.userId === _this.userId, "Unexpected user '" + dbBatch.userId + "' for mutation batch " + batchId);
        return _this.serializer.fromDbMutationBatch(dbBatch);
      }

      return null;
    });
  };

  IndexedDbMutationQueue.prototype.lookupMutationKeys = function (transaction, batchId) {
    var _this = this;

    if (this.documentKeysByBatchId[batchId]) {
      return PersistencePromise.resolve(this.documentKeysByBatchId[batchId]);
    } else {
      return this.lookupMutationBatch(transaction, batchId).next(function (batch) {
        if (batch) {
          var keys = batch.keys();
          _this.documentKeysByBatchId[batchId] = keys;
          return keys;
        } else {
          return null;
        }
      });
    }
  };

  IndexedDbMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {
    var _this = this;

    return this.getMutationQueueMetadata(transaction).next(function (metadata) {
      var nextBatchId = batchId + 1;
      var range = IDBKeyRange.lowerBound([_this.userId, nextBatchId]);
      var foundBatch = null;
      return mutationsStore(transaction).iterate({
        index: DbMutationBatch.userMutationsIndex,
        range: range
      }, function (key, dbBatch, control) {
        if (dbBatch.userId === _this.userId) {
          assert(dbBatch.batchId >= nextBatchId, 'Should have found mutation after ' + nextBatchId);
          foundBatch = _this.serializer.fromDbMutationBatch(dbBatch);
        }

        control.done();
      }).next(function () {
        return foundBatch;
      });
    });
  };

  IndexedDbMutationQueue.prototype.getAllMutationBatches = function (transaction) {
    var _this = this;

    var range = IDBKeyRange.bound([this.userId, BATCHID_UNKNOWN], [this.userId, Number.POSITIVE_INFINITY]);
    return mutationsStore(transaction).loadAll(DbMutationBatch.userMutationsIndex, range).next(function (dbBatches) {
      return dbBatches.map(function (dbBatch) {
        return _this.serializer.fromDbMutationBatch(dbBatch);
      });
    });
  };

  IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {
    var _this = this; // Scan the document-mutation index starting with a prefix starting with
    // the given documentKey.


    var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, documentKey.path);
    var indexStart = IDBKeyRange.lowerBound(indexPrefix);
    var results = [];
    return documentMutationsStore(transaction).iterate({
      range: indexStart
    }, function (indexKey, _, control) {
      var userID = indexKey[0],
          encodedPath = indexKey[1],
          batchId = indexKey[2]; // Only consider rows matching exactly the specific key of
      // interest. Note that because we order by path first, and we
      // order terminators before path separators, we'll encounter all
      // the index rows for documentKey contiguously. In particular, all
      // the rows for documentKey will occur before any rows for
      // documents nested in a subcollection beneath documentKey so we
      // can stop as soon as we hit any such row.

      var path = decode(encodedPath);

      if (userID !== _this.userId || !documentKey.path.isEqual(path)) {
        control.done();
        return;
      } // Look up the mutation batch in the store.


      return mutationsStore(transaction).get(batchId).next(function (mutation) {
        if (!mutation) {
          throw fail('Dangling document-mutation reference found: ' + indexKey + ' which points to ' + batchId);
        }

        assert(mutation.userId === _this.userId, "Unexpected user '" + mutation.userId + "' for mutation batch " + batchId);
        results.push(_this.serializer.fromDbMutationBatch(mutation));
      });
    }).next(function () {
      return results;
    });
  };

  IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKeys = function (transaction, documentKeys) {
    var _this = this;

    var uniqueBatchIDs = new SortedSet(primitiveComparator);
    var promises = [];
    documentKeys.forEach(function (documentKey) {
      var indexStart = DbDocumentMutation.prefixForPath(_this.userId, documentKey.path);
      var range = IDBKeyRange.lowerBound(indexStart);
      var promise = documentMutationsStore(transaction).iterate({
        range: range
      }, function (indexKey, _, control) {
        var userID = indexKey[0],
            encodedPath = indexKey[1],
            batchID = indexKey[2]; // Only consider rows matching exactly the specific key of
        // interest. Note that because we order by path first, and we
        // order terminators before path separators, we'll encounter all
        // the index rows for documentKey contiguously. In particular, all
        // the rows for documentKey will occur before any rows for
        // documents nested in a subcollection beneath documentKey so we
        // can stop as soon as we hit any such row.

        var path = decode(encodedPath);

        if (userID !== _this.userId || !documentKey.path.isEqual(path)) {
          control.done();
          return;
        }

        uniqueBatchIDs = uniqueBatchIDs.add(batchID);
      });
      promises.push(promise);
    });
    return PersistencePromise.waitFor(promises).next(function () {
      return _this.lookupMutationBatches(transaction, uniqueBatchIDs);
    });
  };

  IndexedDbMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {
    var _this = this;

    assert(!query.isDocumentQuery(), "Document queries shouldn't go down this path");
    assert(!query.isCollectionGroupQuery(), 'CollectionGroup queries should be handled in LocalDocumentsView');
    var queryPath = query.path;
    var immediateChildrenLength = queryPath.length + 1; // TODO(mcg): Actually implement a single-collection query
    //
    // This is actually executing an ancestor query, traversing the whole
    // subtree below the collection which can be horrifically inefficient for
    // some structures. The right way to solve this is to implement the full
    // value index, but that's not in the cards in the near future so this is
    // the best we can do for the moment.
    //
    // Since we don't yet index the actual properties in the mutations, our
    // current approach is to just return all mutation batches that affect
    // documents in the collection being queried.

    var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, queryPath);
    var indexStart = IDBKeyRange.lowerBound(indexPrefix); // Collect up unique batchIDs encountered during a scan of the index. Use a
    // SortedSet to accumulate batch IDs so they can be traversed in order in a
    // scan of the main table.

    var uniqueBatchIDs = new SortedSet(primitiveComparator);
    return documentMutationsStore(transaction).iterate({
      range: indexStart
    }, function (indexKey, _, control) {
      var userID = indexKey[0],
          encodedPath = indexKey[1],
          batchID = indexKey[2];
      var path = decode(encodedPath);

      if (userID !== _this.userId || !queryPath.isPrefixOf(path)) {
        control.done();
        return;
      } // Rows with document keys more than one segment longer than the
      // query path can't be matches. For example, a query on 'rooms'
      // can't match the document /rooms/abc/messages/xyx.
      // TODO(mcg): we'll need a different scanner when we implement
      // ancestor queries.


      if (path.length !== immediateChildrenLength) {
        return;
      }

      uniqueBatchIDs = uniqueBatchIDs.add(batchID);
    }).next(function () {
      return _this.lookupMutationBatches(transaction, uniqueBatchIDs);
    });
  };

  IndexedDbMutationQueue.prototype.lookupMutationBatches = function (transaction, batchIDs) {
    var _this = this;

    var results = [];
    var promises = []; // TODO(rockwood): Implement this using iterate.

    batchIDs.forEach(function (batchId) {
      promises.push(mutationsStore(transaction).get(batchId).next(function (mutation) {
        if (mutation === null) {
          throw fail('Dangling document-mutation reference found, ' + 'which points to ' + batchId);
        }

        assert(mutation.userId === _this.userId, "Unexpected user '" + mutation.userId + "' for mutation batch " + batchId);
        results.push(_this.serializer.fromDbMutationBatch(mutation));
      }));
    });
    return PersistencePromise.waitFor(promises).next(function () {
      return results;
    });
  };

  IndexedDbMutationQueue.prototype.removeMutationBatch = function (transaction, batch) {
    var _this = this;

    return removeMutationBatch(transaction.simpleDbTransaction, this.userId, batch).next(function (removedDocuments) {
      _this.removeCachedMutationKeys(batch.batchId);

      return PersistencePromise.forEach(removedDocuments, function (key) {
        return _this.referenceDelegate.removeMutationReference(transaction, key);
      });
    });
  };

  IndexedDbMutationQueue.prototype.removeCachedMutationKeys = function (batchId) {
    delete this.documentKeysByBatchId[batchId];
  };

  IndexedDbMutationQueue.prototype.performConsistencyCheck = function (txn) {
    var _this = this;

    return this.checkEmpty(txn).next(function (empty) {
      if (!empty) {
        return PersistencePromise.resolve();
      } // Verify that there are no entries in the documentMutations index if
      // the queue is empty.


      var startRange = IDBKeyRange.lowerBound(DbDocumentMutation.prefixForUser(_this.userId));
      var danglingMutationReferences = [];
      return documentMutationsStore(txn).iterate({
        range: startRange
      }, function (key, _, control) {
        var userID = key[0];

        if (userID !== _this.userId) {
          control.done();
          return;
        } else {
          var path = decode(key[1]);
          danglingMutationReferences.push(path);
        }
      }).next(function () {
        assert(danglingMutationReferences.length === 0, 'Document leak -- detected dangling mutation references when queue is empty. ' + 'Dangling keys: ' + danglingMutationReferences.map(function (p) {
          return p.canonicalString();
        }));
      });
    });
  };

  IndexedDbMutationQueue.prototype.containsKey = function (txn, key) {
    return mutationQueueContainsKey(txn, this.userId, key);
  }; // PORTING NOTE: Multi-tab only (state is held in memory in other clients).

  /** Returns the mutation queue's metadata from IndexedDb. */


  IndexedDbMutationQueue.prototype.getMutationQueueMetadata = function (transaction) {
    var _this = this;

    return mutationQueuesStore(transaction).get(this.userId).next(function (metadata) {
      return metadata || new DbMutationQueue(_this.userId, BATCHID_UNKNOWN,
      /*lastStreamToken=*/
      '');
    });
  };

  return IndexedDbMutationQueue;
}();
/**
 * @return true if the mutation queue for the given user contains a pending
 *         mutation for the given key.
 */


function mutationQueueContainsKey(txn, userId, key) {
  var indexKey = DbDocumentMutation.prefixForPath(userId, key.path);
  var encodedPath = indexKey[1];
  var startRange = IDBKeyRange.lowerBound(indexKey);
  var containsKey = false;
  return documentMutationsStore(txn).iterate({
    range: startRange,
    keysOnly: true
  }, function (key, value, control) {
    var userID = key[0],
        keyPath = key[1],

    /*batchID*/
    _ = key[2];

    if (userID === userId && keyPath === encodedPath) {
      containsKey = true;
    }

    control.done();
  }).next(function () {
    return containsKey;
  });
}
/** Returns true if any mutation queue contains the given document. */


function mutationQueuesContainKey(txn, docKey) {
  var found = false;
  return mutationQueuesStore(txn).iterateSerial(function (userId) {
    return mutationQueueContainsKey(txn, userId, docKey).next(function (containsKey) {
      if (containsKey) {
        found = true;
      }

      return PersistencePromise.resolve(!containsKey);
    });
  }).next(function () {
    return found;
  });
}
/**
 * Delete a mutation batch and the associated document mutations.
 * @return A PersistencePromise of the document mutations that were removed.
 */


function removeMutationBatch(txn, userId, batch) {
  var mutationStore = txn.store(DbMutationBatch.store);
  var indexTxn = txn.store(DbDocumentMutation.store);
  var promises = [];
  var range = IDBKeyRange.only(batch.batchId);
  var numDeleted = 0;
  var removePromise = mutationStore.iterate({
    range: range
  }, function (key, value, control) {
    numDeleted++;
    return control.delete();
  });
  promises.push(removePromise.next(function () {
    assert(numDeleted === 1, 'Dangling document-mutation reference found: Missing batch ' + batch.batchId);
  }));
  var removedDocuments = [];

  for (var _i = 0, _a = batch.mutations; _i < _a.length; _i++) {
    var mutation = _a[_i];
    var indexKey = DbDocumentMutation.key(userId, mutation.key.path, batch.batchId);
    promises.push(indexTxn.delete(indexKey));
    removedDocuments.push(mutation.key);
  }

  return PersistencePromise.waitFor(promises).next(function () {
    return removedDocuments;
  });
}

function convertStreamToken(token) {
  if (token instanceof Uint8Array) {
    // TODO(b/78771403): Convert tokens to strings during deserialization
    assert(undefined === 'YES', 'Persisting non-string stream tokens is only supported with mock persistence.');
    return token.toString();
  } else {
    return token;
  }
}
/**
 * Helper to get a typed SimpleDbStore for the mutations object store.
 */


function mutationsStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbMutationBatch.store);
}
/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */


function documentMutationsStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbDocumentMutation.store);
}
/**
 * Helper to get a typed SimpleDbStore for the mutationQueues object store.
 */


function mutationQueuesStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbMutationQueue.store);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var RESERVED_BITS = 1;
var GeneratorIds;

(function (GeneratorIds) {
  GeneratorIds[GeneratorIds["QueryCache"] = 0] = "QueryCache";
  GeneratorIds[GeneratorIds["SyncEngine"] = 1] = "SyncEngine"; // The target IDs for limbo detection are odd (end in 1).
})(GeneratorIds || (GeneratorIds = {}));
/**
 * Generates monotonically increasing target IDs for sending targets to the
 * watch stream.
 *
 * The client constructs two generators, one for the query cache (via
 * forQueryCache()), and one for limbo documents (via forSyncEngine()). These
 * two generators produce non-overlapping IDs (by using even and odd IDs
 * respectively).
 *
 * By separating the target ID space, the query cache can generate target IDs
 * that persist across client restarts, while sync engine can independently
 * generate in-memory target IDs that are transient and can be reused after a
 * restart.
 */
// TODO(mrschmidt): Explore removing this class in favor of generating these IDs
// directly in SyncEngine and LocalStore.


var TargetIdGenerator =
/** @class */
function () {
  /**
   * Instantiates a new TargetIdGenerator. If a seed is provided, the generator
   * will use the seed value as the next target ID.
   */
  function TargetIdGenerator(generatorId, seed) {
    this.generatorId = generatorId;
    assert((generatorId & RESERVED_BITS) === generatorId, "Generator ID " + generatorId + " contains more than " + RESERVED_BITS + " reserved bits");
    this.seek(seed !== undefined ? seed : this.generatorId);
  }

  TargetIdGenerator.prototype.next = function () {
    var nextId = this.nextId;
    this.nextId += 1 << RESERVED_BITS;
    return nextId;
  };
  /**
   * Returns the ID that follows the given ID. Subsequent calls to `next()`
   * use the newly returned target ID as their base.
   */
  // PORTING NOTE: Multi-tab only.


  TargetIdGenerator.prototype.after = function (targetId) {
    this.seek(targetId + (1 << RESERVED_BITS));
    return this.next();
  };

  TargetIdGenerator.prototype.seek = function (targetId) {
    assert((targetId & RESERVED_BITS) === this.generatorId, 'Cannot supply target ID from different generator ID');
    this.nextId = targetId;
  };

  TargetIdGenerator.forQueryCache = function () {
    // We seed the query cache generator to return '2' as its first ID, as there
    // is no differentiation in the protocol layer between an unset number and
    // the number '0'. If we were to sent a target with target ID '0', the
    // backend would consider it unset and replace it with its own ID.
    var targetIdGenerator = new TargetIdGenerator(GeneratorIds.QueryCache, 2);
    return targetIdGenerator;
  };

  TargetIdGenerator.forSyncEngine = function () {
    // Sync engine assigns target IDs for limbo document detection.
    return new TargetIdGenerator(GeneratorIds.SyncEngine);
  };

  return TargetIdGenerator;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$1 = 'SimpleDb';
/**
 * Provides a wrapper around IndexedDb with a simplified interface that uses
 * Promise-like return values to chain operations. Real promises cannot be used
 * since .then() continuations are executed asynchronously (e.g. via
 * .setImmediate), which would cause IndexedDB to end the transaction.
 * See PersistencePromise for more details.
 */

var SimpleDb =
/** @class */
function () {
  function SimpleDb(db) {
    this.db = db;
  }
  /**
   * Opens the specified database, creating or upgrading it if necessary.
   *
   * Note that `version` must not be a downgrade. IndexedDB does not support downgrading the schema
   * version. We currently do not support any way to do versioning outside of IndexedDB's versioning
   * mechanism, as only version-upgrade transactions are allowed to do things like create
   * objectstores.
   */


  SimpleDb.openOrCreate = function (name, version, schemaConverter) {
    assert(SimpleDb.isAvailable(), 'IndexedDB not supported in current environment.');
    debug(LOG_TAG$1, 'Opening database:', name);
    return new PersistencePromise(function (resolve, reject) {
      // TODO(mikelehen): Investigate browser compatibility.
      // https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB
      // suggests IE9 and older WebKit browsers handle upgrade
      // differently. They expect setVersion, as described here:
      // https://developer.mozilla.org/en-US/docs/Web/API/IDBVersionChangeRequest/setVersion
      var request = window.indexedDB.open(name, version);

      request.onsuccess = function (event) {
        var db = event.target.result;
        resolve(new SimpleDb(db));
      };

      request.onblocked = function () {
        reject(new FirestoreError(Code.FAILED_PRECONDITION, 'Cannot upgrade IndexedDB schema while another tab is open. ' + 'Close all tabs that access Firestore and reload this page to proceed.'));
      };

      request.onerror = function (event) {
        var error = event.target.error;

        if (error.name === 'VersionError') {
          reject(new FirestoreError(Code.FAILED_PRECONDITION, 'A newer version of the Firestore SDK was previously used and so the persisted ' + 'data is not compatible with the version of the SDK you are now using. The SDK ' + 'will operate with persistence disabled. If you need persistence, please ' + 're-upgrade to a newer version of the SDK or else clear the persisted IndexedDB ' + 'data for your app to start fresh.'));
        } else {
          reject(error);
        }
      };

      request.onupgradeneeded = function (event) {
        debug(LOG_TAG$1, 'Database "' + name + '" requires upgrade from version:', event.oldVersion);
        var db = event.target.result; // We are provided a version upgrade transaction from the request, so
        // we wrap that in a SimpleDbTransaction to allow use of our friendlier
        // API for schema migration operations.

        var txn = new SimpleDbTransaction(request.transaction);
        schemaConverter.createOrUpgrade(db, txn, event.oldVersion, SCHEMA_VERSION).next(function () {
          debug(LOG_TAG$1, 'Database upgrade to version ' + SCHEMA_VERSION + ' complete');
        });
      };
    }).toPromise();
  };
  /** Deletes the specified database. */


  SimpleDb.delete = function (name) {
    debug(LOG_TAG$1, 'Removing database:', name);
    return wrapRequest(window.indexedDB.deleteDatabase(name)).toPromise();
  };
  /** Returns true if IndexedDB is available in the current environment. */


  SimpleDb.isAvailable = function () {
    if (typeof window === 'undefined' || window.indexedDB == null) {
      return false;
    } // We extensively use indexed array values and compound keys,
    // which IE and Edge do not support. However, they still have indexedDB
    // defined on the window, so we need to check for them here and make sure
    // to return that persistence is not enabled for those browsers.
    // For tracking support of this feature, see here:
    // https://developer.microsoft.com/en-us/microsoft-edge/platform/status/indexeddbarraysandmultientrysupport/
    // If we are running in Node using the IndexedDBShim, `window` is defined,
    // but `window.navigator` is not. In this case, we support IndexedDB and
    // return `true`.


    if (window.navigator === undefined) {
      return undefined === 'YES';
    } // Check the UA string to find out the browser.
    // TODO(mikelehen): Move this logic into packages/util/environment.ts


    var ua = window.navigator.userAgent; // IE 10
    // ua = 'Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)';
    // IE 11
    // ua = 'Mozilla/5.0 (Windows NT 6.3; Trident/7.0; rv:11.0) like Gecko';
    // Edge
    // ua = 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML,
    // like Gecko) Chrome/39.0.2171.71 Safari/537.36 Edge/12.0';

    if (ua.indexOf('MSIE ') > 0 || ua.indexOf('Trident/') > 0 || ua.indexOf('Edge/') > 0) {
      return false;
    } else {
      return true;
    }
  };
  /** Helper to get a typed SimpleDbStore from a transaction. */


  SimpleDb.getStore = function (txn, store) {
    return txn.store(store);
  };

  SimpleDb.prototype.runTransaction = function (mode, objectStores, transactionFn) {
    var transaction = SimpleDbTransaction.open(this.db, mode, objectStores);
    var transactionFnResult = transactionFn(transaction).catch(function (error) {
      // Abort the transaction if there was an error.
      transaction.abort(error); // We cannot actually recover, and calling `abort()` will cause the transaction's
      // completion promise to be rejected. This in turn means that we won't use
      // `transactionFnResult` below. We return a rejection here so that we don't add the
      // possibility of returning `void` to the type of `transactionFnResult`.

      return PersistencePromise.reject(error);
    }).toPromise(); // As noted above, errors are propagated by aborting the transaction. So
    // we swallow any error here to avoid the browser logging it as unhandled.

    transactionFnResult.catch(function () {}); // Wait for the transaction to complete (i.e. IndexedDb's onsuccess event to
    // fire), but still return the original transactionFnResult back to the
    // caller.

    return transaction.completionPromise.then(function () {
      return transactionFnResult;
    });
  };

  SimpleDb.prototype.close = function () {
    this.db.close();
  };

  return SimpleDb;
}();
/**
 * A controller for iterating over a key range or index. It allows an iterate
 * callback to delete the currently-referenced object, or jump to a new key
 * within the key range or index.
 */


var IterationController =
/** @class */
function () {
  function IterationController(dbCursor) {
    this.dbCursor = dbCursor;
    this.shouldStop = false;
    this.nextKey = null;
  }

  Object.defineProperty(IterationController.prototype, "isDone", {
    get: function () {
      return this.shouldStop;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(IterationController.prototype, "skipToKey", {
    get: function () {
      return this.nextKey;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(IterationController.prototype, "cursor", {
    set: function (value) {
      this.dbCursor = value;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * This function can be called to stop iteration at any point.
   */

  IterationController.prototype.done = function () {
    this.shouldStop = true;
  };
  /**
   * This function can be called to skip to that next key, which could be
   * an index or a primary key.
   */


  IterationController.prototype.skip = function (key) {
    this.nextKey = key;
  };
  /**
   * Delete the current cursor value from the object store.
   *
   * NOTE: You CANNOT do this with a keysOnly query.
   */


  IterationController.prototype.delete = function () {
    return wrapRequest(this.dbCursor.delete());
  };

  return IterationController;
}();
/**
 * Wraps an IDBTransaction and exposes a store() method to get a handle to a
 * specific object store.
 */


var SimpleDbTransaction =
/** @class */
function () {
  function SimpleDbTransaction(transaction) {
    var _this = this;

    this.transaction = transaction;
    this.aborted = false;
    /**
     * A promise that resolves with the result of the IndexedDb transaction.
     */

    this.completionDeferred = new Deferred();

    this.transaction.oncomplete = function () {
      _this.completionDeferred.resolve();
    };

    this.transaction.onabort = function () {
      if (transaction.error) {
        _this.completionDeferred.reject(transaction.error);
      } else {
        _this.completionDeferred.resolve();
      }
    };

    this.transaction.onerror = function (event) {
      _this.completionDeferred.reject(event.target.error);
    };
  }

  SimpleDbTransaction.open = function (db, mode, objectStoreNames) {
    return new SimpleDbTransaction(db.transaction(objectStoreNames, mode));
  };

  Object.defineProperty(SimpleDbTransaction.prototype, "completionPromise", {
    get: function () {
      return this.completionDeferred.promise;
    },
    enumerable: true,
    configurable: true
  });

  SimpleDbTransaction.prototype.abort = function (error) {
    if (error) {
      this.completionDeferred.reject(error);
    }

    if (!this.aborted) {
      debug(LOG_TAG$1, 'Aborting transaction:', error ? error.message : 'Client-initiated abort');
      this.aborted = true;
      this.transaction.abort();
    }
  };
  /**
   * Returns a SimpleDbStore<KeyType, ValueType> for the specified store. All
   * operations performed on the SimpleDbStore happen within the context of this
   * transaction and it cannot be used anymore once the transaction is
   * completed.
   *
   * Note that we can't actually enforce that the KeyType and ValueType are
   * correct, but they allow type safety through the rest of the consuming code.
   */


  SimpleDbTransaction.prototype.store = function (storeName) {
    var store = this.transaction.objectStore(storeName);
    assert(!!store, 'Object store not part of transaction: ' + storeName);
    return new SimpleDbStore(store);
  };

  return SimpleDbTransaction;
}();
/**
 * A wrapper around an IDBObjectStore providing an API that:
 *
 * 1) Has generic KeyType / ValueType parameters to provide strongly-typed
 * methods for acting against the object store.
 * 2) Deals with IndexedDB's onsuccess / onerror event callbacks, making every
 * method return a PersistencePromise instead.
 * 3) Provides a higher-level API to avoid needing to do excessive wrapping of
 * intermediate IndexedDB types (IDBCursorWithValue, etc.)
 */


var SimpleDbStore =
/** @class */
function () {
  function SimpleDbStore(store) {
    this.store = store;
  }

  SimpleDbStore.prototype.put = function (keyOrValue, value) {
    var request;

    if (value !== undefined) {
      debug(LOG_TAG$1, 'PUT', this.store.name, keyOrValue, value);
      request = this.store.put(value, keyOrValue);
    } else {
      debug(LOG_TAG$1, 'PUT', this.store.name, '<auto-key>', keyOrValue);
      request = this.store.put(keyOrValue);
    }

    return wrapRequest(request);
  };
  /**
   * Adds a new value into an Object Store and returns the new key. Similar to
   * IndexedDb's `add()`, this method will fail on primary key collisions.
   *
   * @param value The object to write.
   * @return The key of the value to add.
   */


  SimpleDbStore.prototype.add = function (value) {
    debug(LOG_TAG$1, 'ADD', this.store.name, value, value);
    var request = this.store.add(value);
    return wrapRequest(request);
  };
  /**
   * Gets the object with the specified key from the specified store, or null
   * if no object exists with the specified key.
   *
   * @key The key of the object to get.
   * @return The object with the specified key or null if no object exists.
   */


  SimpleDbStore.prototype.get = function (key) {
    var _this = this;

    var request = this.store.get(key); // tslint:disable-next-line:no-any We're doing an unsafe cast to ValueType.

    return wrapRequest(request).next(function (result) {
      // Normalize nonexistence to null.
      if (result === undefined) {
        result = null;
      }

      debug(LOG_TAG$1, 'GET', _this.store.name, key, result);
      return result;
    });
  };

  SimpleDbStore.prototype.delete = function (key) {
    debug(LOG_TAG$1, 'DELETE', this.store.name, key);
    var request = this.store.delete(key);
    return wrapRequest(request);
  };
  /**
   * If we ever need more of the count variants, we can add overloads. For now,
   * all we need is to count everything in a store.
   *
   * Returns the number of rows in the store.
   */


  SimpleDbStore.prototype.count = function () {
    debug(LOG_TAG$1, 'COUNT', this.store.name);
    var request = this.store.count();
    return wrapRequest(request);
  };

  SimpleDbStore.prototype.loadAll = function (indexOrRange, range) {
    var cursor = this.cursor(this.options(indexOrRange, range));
    var results = [];
    return this.iterateCursor(cursor, function (key, value) {
      results.push(value);
    }).next(function () {
      return results;
    });
  };

  SimpleDbStore.prototype.deleteAll = function (indexOrRange, range) {
    debug(LOG_TAG$1, 'DELETE ALL', this.store.name);
    var options = this.options(indexOrRange, range);
    options.keysOnly = false;
    var cursor = this.cursor(options);
    return this.iterateCursor(cursor, function (key, value, control) {
      // NOTE: Calling delete() on a cursor is documented as more efficient than
      // calling delete() on an object store with a single key
      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/delete),
      // however, this requires us *not* to use a keysOnly cursor
      // (https://developer.mozilla.org/en-US/docs/Web/API/IDBCursor/delete). We
      // may want to compare the performance of each method.
      return control.delete();
    });
  };

  SimpleDbStore.prototype.iterate = function (optionsOrCallback, callback) {
    var options;

    if (!callback) {
      options = {};
      callback = optionsOrCallback;
    } else {
      options = optionsOrCallback;
    }

    var cursor = this.cursor(options);
    return this.iterateCursor(cursor, callback);
  };
  /**
   * Iterates over a store, but waits for the given callback to complete for
   * each entry before iterating the next entry. This allows the callback to do
   * asynchronous work to determine if this iteration should continue.
   *
   * The provided callback should return `true` to continue iteration, and
   * `false` otherwise.
   */


  SimpleDbStore.prototype.iterateSerial = function (callback) {
    var cursorRequest = this.cursor({});
    return new PersistencePromise(function (resolve, reject) {
      cursorRequest.onerror = function (event) {
        reject(event.target.error);
      };

      cursorRequest.onsuccess = function (event) {
        var cursor = event.target.result;

        if (!cursor) {
          resolve();
          return;
        }

        callback(cursor.primaryKey, cursor.value).next(function (shouldContinue) {
          if (shouldContinue) {
            cursor.continue();
          } else {
            resolve();
          }
        });
      };
    });
  };

  SimpleDbStore.prototype.iterateCursor = function (cursorRequest, fn) {
    var results = [];
    return new PersistencePromise(function (resolve, reject) {
      cursorRequest.onerror = function (event) {
        reject(event.target.error);
      };

      cursorRequest.onsuccess = function (event) {
        var cursor = event.target.result;

        if (!cursor) {
          resolve();
          return;
        }

        var controller = new IterationController(cursor);
        var userResult = fn(cursor.primaryKey, cursor.value, controller);

        if (userResult instanceof PersistencePromise) {
          var userPromise = userResult.catch(function (err) {
            controller.done();
            return PersistencePromise.reject(err);
          });
          results.push(userPromise);
        }

        if (controller.isDone) {
          resolve();
        } else if (controller.skipToKey === null) {
          cursor.continue();
        } else {
          cursor.continue(controller.skipToKey);
        }
      };
    }).next(function () {
      return PersistencePromise.waitFor(results);
    });
  };

  SimpleDbStore.prototype.options = function (indexOrRange, range) {
    var indexName = undefined;

    if (indexOrRange !== undefined) {
      if (typeof indexOrRange === 'string') {
        indexName = indexOrRange;
      } else {
        assert(range === undefined, '3rd argument must not be defined if 2nd is a range.');
        range = indexOrRange;
      }
    }

    return {
      index: indexName,
      range: range
    };
  };

  SimpleDbStore.prototype.cursor = function (options) {
    var direction = 'next';

    if (options.reverse) {
      direction = 'prev';
    }

    if (options.index) {
      var index = this.store.index(options.index);

      if (options.keysOnly) {
        return index.openKeyCursor(options.range, direction);
      } else {
        return index.openCursor(options.range, direction);
      }
    } else {
      return this.store.openCursor(options.range, direction);
    }
  };

  return SimpleDbStore;
}();
/**
 * Wraps an IDBRequest in a PersistencePromise, using the onsuccess / onerror
 * handlers to resolve / reject the PersistencePromise as appropriate.
 */


function wrapRequest(request) {
  return new PersistencePromise(function (resolve, reject) {
    request.onsuccess = function (event) {
      var result = event.target.result;
      resolve(result);
    };

    request.onerror = function (event) {
      reject(event.target.error);
    };
  });
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var IndexedDbQueryCache =
/** @class */
function () {
  function IndexedDbQueryCache(referenceDelegate, serializer) {
    this.referenceDelegate = referenceDelegate;
    this.serializer = serializer; // PORTING NOTE: We don't cache global metadata for the query cache, since
    // some of it (in particular `highestTargetId`) can be modified by secondary
    // tabs. We could perhaps be more granular (and e.g. still cache
    // `lastRemoteSnapshotVersion` in memory) but for simplicity we currently go
    // to IndexedDb whenever we need to read metadata. We can revisit if it turns
    // out to have a meaningful performance impact.

    this.targetIdGenerator = TargetIdGenerator.forQueryCache();
  }

  IndexedDbQueryCache.prototype.allocateTargetId = function (transaction) {
    var _this = this;

    return this.retrieveMetadata(transaction).next(function (metadata) {
      metadata.highestTargetId = _this.targetIdGenerator.after(metadata.highestTargetId);
      return _this.saveMetadata(transaction, metadata).next(function () {
        return metadata.highestTargetId;
      });
    });
  };

  IndexedDbQueryCache.prototype.getLastRemoteSnapshotVersion = function (transaction) {
    return this.retrieveMetadata(transaction).next(function (metadata) {
      return SnapshotVersion.fromTimestamp(new Timestamp(metadata.lastRemoteSnapshotVersion.seconds, metadata.lastRemoteSnapshotVersion.nanoseconds));
    });
  };

  IndexedDbQueryCache.prototype.getHighestSequenceNumber = function (transaction) {
    return getHighestListenSequenceNumber(transaction.simpleDbTransaction);
  };

  IndexedDbQueryCache.prototype.setTargetsMetadata = function (transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {
    var _this = this;

    return this.retrieveMetadata(transaction).next(function (metadata) {
      metadata.highestListenSequenceNumber = highestListenSequenceNumber;

      if (lastRemoteSnapshotVersion) {
        metadata.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion.toTimestamp();
      }

      if (highestListenSequenceNumber > metadata.highestListenSequenceNumber) {
        metadata.highestListenSequenceNumber = highestListenSequenceNumber;
      }

      return _this.saveMetadata(transaction, metadata);
    });
  };

  IndexedDbQueryCache.prototype.addQueryData = function (transaction, queryData) {
    var _this = this;

    return this.saveQueryData(transaction, queryData).next(function () {
      return _this.retrieveMetadata(transaction).next(function (metadata) {
        metadata.targetCount += 1;

        _this.updateMetadataFromQueryData(queryData, metadata);

        return _this.saveMetadata(transaction, metadata);
      });
    });
  };

  IndexedDbQueryCache.prototype.updateQueryData = function (transaction, queryData) {
    return this.saveQueryData(transaction, queryData);
  };

  IndexedDbQueryCache.prototype.removeQueryData = function (transaction, queryData) {
    var _this = this;

    return this.removeMatchingKeysForTargetId(transaction, queryData.targetId).next(function () {
      return targetsStore(transaction).delete(queryData.targetId);
    }).next(function () {
      return _this.retrieveMetadata(transaction);
    }).next(function (metadata) {
      assert(metadata.targetCount > 0, 'Removing from an empty query cache');
      metadata.targetCount -= 1;
      return _this.saveMetadata(transaction, metadata);
    });
  };
  /**
   * Drops any targets with sequence number less than or equal to the upper bound, excepting those
   * present in `activeTargetIds`. Document associations for the removed targets are also removed.
   * Returns the number of targets removed.
   */


  IndexedDbQueryCache.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {
    var _this = this;

    var count = 0;
    var promises = [];
    return targetsStore(txn).iterate(function (key, value) {
      var queryData = _this.serializer.fromDbTarget(value);

      if (queryData.sequenceNumber <= upperBound && activeTargetIds[queryData.targetId] === undefined) {
        count++;
        promises.push(_this.removeQueryData(txn, queryData));
      }
    }).next(function () {
      return PersistencePromise.waitFor(promises);
    }).next(function () {
      return count;
    });
  };
  /**
   * Call provided function with each `QueryData` that we have cached.
   */


  IndexedDbQueryCache.prototype.forEachTarget = function (txn, f) {
    var _this = this;

    return targetsStore(txn).iterate(function (key, value) {
      var queryData = _this.serializer.fromDbTarget(value);

      f(queryData);
    });
  };

  IndexedDbQueryCache.prototype.retrieveMetadata = function (transaction) {
    return retrieveMetadata(transaction.simpleDbTransaction);
  };

  IndexedDbQueryCache.prototype.saveMetadata = function (transaction, metadata) {
    return globalTargetStore(transaction).put(DbTargetGlobal.key, metadata);
  };

  IndexedDbQueryCache.prototype.saveQueryData = function (transaction, queryData) {
    return targetsStore(transaction).put(this.serializer.toDbTarget(queryData));
  };
  /**
   * In-place updates the provided metadata to account for values in the given
   * QueryData. Saving is done separately. Returns true if there were any
   * changes to the metadata.
   */


  IndexedDbQueryCache.prototype.updateMetadataFromQueryData = function (queryData, metadata) {
    var updated = false;

    if (queryData.targetId > metadata.highestTargetId) {
      metadata.highestTargetId = queryData.targetId;
      updated = true;
    }

    if (queryData.sequenceNumber > metadata.highestListenSequenceNumber) {
      metadata.highestListenSequenceNumber = queryData.sequenceNumber;
      updated = true;
    }

    return updated;
  };

  IndexedDbQueryCache.prototype.getQueryCount = function (transaction) {
    return this.retrieveMetadata(transaction).next(function (metadata) {
      return metadata.targetCount;
    });
  };

  IndexedDbQueryCache.prototype.getQueryData = function (transaction, query) {
    var _this = this; // Iterating by the canonicalId may yield more than one result because
    // canonicalId values are not required to be unique per target. This query
    // depends on the queryTargets index to be efficient.


    var canonicalId = query.canonicalId();
    var range = IDBKeyRange.bound([canonicalId, Number.NEGATIVE_INFINITY], [canonicalId, Number.POSITIVE_INFINITY]);
    var result = null;
    return targetsStore(transaction).iterate({
      range: range,
      index: DbTarget.queryTargetsIndexName
    }, function (key, value, control) {
      var found = _this.serializer.fromDbTarget(value); // After finding a potential match, check that the query is
      // actually equal to the requested query.


      if (query.isEqual(found.query)) {
        result = found;
        control.done();
      }
    }).next(function () {
      return result;
    });
  };

  IndexedDbQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {
    var _this = this; // PORTING NOTE: The reverse index (documentsTargets) is maintained by
    // IndexedDb.


    var promises = [];
    var store = documentTargetStore(txn);
    keys.forEach(function (key) {
      var path = encode(key.path);
      promises.push(store.put(new DbTargetDocument(targetId, path)));
      promises.push(_this.referenceDelegate.addReference(txn, key));
    });
    return PersistencePromise.waitFor(promises);
  };

  IndexedDbQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {
    var _this = this; // PORTING NOTE: The reverse index (documentsTargets) is maintained by
    // IndexedDb.


    var store = documentTargetStore(txn);
    return PersistencePromise.forEach(keys, function (key) {
      var path = encode(key.path);
      return PersistencePromise.waitFor([store.delete([targetId, path]), _this.referenceDelegate.removeReference(txn, key)]);
    });
  };

  IndexedDbQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {
    var store = documentTargetStore(txn);
    var range = IDBKeyRange.bound([targetId], [targetId + 1],
    /*lowerOpen=*/
    false,
    /*upperOpen=*/
    true);
    return store.delete(range);
  };

  IndexedDbQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {
    var range = IDBKeyRange.bound([targetId], [targetId + 1],
    /*lowerOpen=*/
    false,
    /*upperOpen=*/
    true);
    var store = documentTargetStore(txn);
    var result = documentKeySet();
    return store.iterate({
      range: range,
      keysOnly: true
    }, function (key, _, control) {
      var path = decode(key[1]);
      var docKey = new DocumentKey(path);
      result = result.add(docKey);
    }).next(function () {
      return result;
    });
  };

  IndexedDbQueryCache.prototype.containsKey = function (txn, key) {
    var path = encode(key.path);
    var range = IDBKeyRange.bound([path], [immediateSuccessor(path)],
    /*lowerOpen=*/
    false,
    /*upperOpen=*/
    true);
    var count = 0;
    return documentTargetStore(txn).iterate({
      index: DbTargetDocument.documentTargetsIndex,
      keysOnly: true,
      range: range
    }, function (_a, _, control) {
      var targetId = _a[0],
          path = _a[1]; // Having a sentinel row for a document does not count as containing that document;
      // For the query cache, containing the document means the document is part of some
      // target.

      if (targetId !== 0) {
        count++;
        control.done();
      }
    }).next(function () {
      return count > 0;
    });
  };

  IndexedDbQueryCache.prototype.getQueryDataForTarget = function (transaction, targetId) {
    var _this = this;

    return targetsStore(transaction).get(targetId).next(function (found) {
      if (found) {
        return _this.serializer.fromDbTarget(found);
      } else {
        return null;
      }
    });
  };

  return IndexedDbQueryCache;
}();
/**
 * Helper to get a typed SimpleDbStore for the queries object store.
 */


function targetsStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbTarget.store);
}
/**
 * Helper to get a typed SimpleDbStore for the target globals object store.
 */


function globalTargetStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbTargetGlobal.store);
}

function retrieveMetadata(txn) {
  var globalStore = SimpleDb.getStore(txn, DbTargetGlobal.store);
  return globalStore.get(DbTargetGlobal.key).next(function (metadata) {
    assert(metadata !== null, 'Missing metadata row.');
    return metadata;
  });
}

function getHighestListenSequenceNumber(txn) {
  return retrieveMetadata(txn).next(function (targetGlobal) {
    return targetGlobal.highestListenSequenceNumber;
  });
}
/**
 * Helper to get a typed SimpleDbStore for the document target object store.
 */


function documentTargetStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbTargetDocument.store);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A map implementation that uses objects as keys. Objects must implement the
 * Equatable interface and must be immutable. Entries in the map are stored
 * together with the key being produced from the mapKeyFn. This map
 * automatically handles collisions of keys.
 */


var ObjectMap =
/** @class */
function () {
  function ObjectMap(mapKeyFn) {
    this.mapKeyFn = mapKeyFn;
    /**
     * The inner map for a key -> value pair. Due to the possibility of
     * collisions we keep a list of entries that we do a linear search through
     * to find an actual match. Note that collisions should be rare, so we still
     * expect near constant time lookups in practice.
     */

    this.inner = {};
  }
  /** Get a value for this key, or undefined if it does not exist. */


  ObjectMap.prototype.get = function (key) {
    var id = this.mapKeyFn(key);
    var matches = this.inner[id];

    if (matches === undefined) {
      return undefined;
    }

    for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {
      var _a = matches_1[_i],
          otherKey = _a[0],
          value = _a[1];

      if (otherKey.isEqual(key)) {
        return value;
      }
    }

    return undefined;
  };

  ObjectMap.prototype.has = function (key) {
    return this.get(key) !== undefined;
  };
  /** Put this key and value in the map. */


  ObjectMap.prototype.set = function (key, value) {
    var id = this.mapKeyFn(key);
    var matches = this.inner[id];

    if (matches === undefined) {
      this.inner[id] = [[key, value]];
      return;
    }

    for (var i = 0; i < matches.length; i++) {
      if (matches[i][0].isEqual(key)) {
        matches[i] = [key, value];
        return;
      }
    }

    matches.push([key, value]);
  };
  /**
   * Remove this key from the map. Returns a boolean if anything was deleted.
   */


  ObjectMap.prototype.delete = function (key) {
    var id = this.mapKeyFn(key);
    var matches = this.inner[id];

    if (matches === undefined) {
      return false;
    }

    for (var i = 0; i < matches.length; i++) {
      if (matches[i][0].isEqual(key)) {
        if (matches.length === 1) {
          delete this.inner[id];
        } else {
          matches.splice(i, 1);
        }

        return true;
      }
    }

    return false;
  };

  ObjectMap.prototype.forEach = function (fn) {
    forEach(this.inner, function (_, entries) {
      for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
        var _a = entries_1[_i],
            k = _a[0],
            v = _a[1];
        fn(k, v);
      }
    });
  };

  ObjectMap.prototype.isEmpty = function () {
    return isEmpty(this.inner);
  };

  return ObjectMap;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An in-memory buffer of entries to be written to a RemoteDocumentCache.
 * It can be used to batch up a set of changes to be written to the cache, but
 * additionally supports reading entries back with the `getEntry()` method,
 * falling back to the underlying RemoteDocumentCache if no entry is
 * buffered.
 *
 * Entries added to the cache *must* be read first. This is to facilitate
 * calculating the size delta of the pending changes.
 *
 * PORTING NOTE: This class was implemented then removed from other platforms.
 * If byte-counting ends up being needed on the other platforms, consider
 * porting this class as part of that implementation work.
 */


var RemoteDocumentChangeBuffer =
/** @class */
function () {
  function RemoteDocumentChangeBuffer() {
    this.changes = maybeDocumentMap();
    this.documentSizes = new ObjectMap(function (key) {
      return key.toString();
    });
  }
  /** Buffers a `RemoteDocumentCache.addEntry()` call. */


  RemoteDocumentChangeBuffer.prototype.addEntry = function (maybeDocument) {
    var changes = this.assertChanges();
    this.changes = changes.insert(maybeDocument.key, maybeDocument);
  }; // NOTE: removeEntry() is intentionally omitted. If it needs to be added in
  // the future it must take byte counting into account.

  /**
   * Looks up an entry in the cache. The buffered changes will first be checked,
   * and if no buffered change applies, this will forward to
   * `RemoteDocumentCache.getEntry()`.
   *
   * @param transaction The transaction in which to perform any persistence
   *     operations.
   * @param documentKey The key of the entry to look up.
   * @return The cached Document or NoDocument entry, or null if we have nothing
   * cached.
   */


  RemoteDocumentChangeBuffer.prototype.getEntry = function (transaction, documentKey) {
    var _this = this;

    var changes = this.assertChanges();
    var bufferedEntry = changes.get(documentKey);

    if (bufferedEntry) {
      return PersistencePromise.resolve(bufferedEntry);
    } else {
      // Record the size of everything we load from the cache so we can compute a delta later.
      return this.getFromCache(transaction, documentKey).next(function (getResult) {
        if (getResult === null) {
          _this.documentSizes.set(documentKey, 0);

          return null;
        } else {
          _this.documentSizes.set(documentKey, getResult.size);

          return getResult.maybeDocument;
        }
      });
    }
  };
  /**
   * Looks up several entries in the cache, forwarding to
   * `RemoteDocumentCache.getEntry()`.
   *
   * @param transaction The transaction in which to perform any persistence
   *     operations.
   * @param documentKeys The keys of the entries to look up.
   * @return A map of cached `Document`s or `NoDocument`s, indexed by key. If an
   *     entry cannot be found, the corresponding key will be mapped to a null
   *     value.
   */


  RemoteDocumentChangeBuffer.prototype.getEntries = function (transaction, documentKeys) {
    var _this = this; // Record the size of everything we load from the cache so we can compute
    // a delta later.


    return this.getAllFromCache(transaction, documentKeys).next(function (_a) {
      var maybeDocuments = _a.maybeDocuments,
          sizeMap = _a.sizeMap; // Note: `getAllFromCache` returns two maps instead of a single map from
      // keys to `DocumentSizeEntry`s. This is to allow returning the
      // `NullableMaybeDocumentMap` directly, without a conversion.

      sizeMap.forEach(function (documentKey, size) {
        _this.documentSizes.set(documentKey, size);
      });
      return maybeDocuments;
    });
  };
  /**
   * Applies buffered changes to the underlying RemoteDocumentCache, using
   * the provided transaction.
   */


  RemoteDocumentChangeBuffer.prototype.apply = function (transaction) {
    var result = this.applyChanges(transaction); // We should not buffer any more changes.

    this.changes = null;
    return result;
  };
  /** Helper to assert this.changes is not null and return it. */


  RemoteDocumentChangeBuffer.prototype.assertChanges = function () {
    assert(this.changes !== null, 'Changes have already been applied.');
    return this.changes;
  };

  return RemoteDocumentChangeBuffer;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var REMOTE_DOCUMENT_CHANGE_MISSING_ERR_MSG = 'The remote document changelog no longer contains all changes for all ' + 'local query views. It may be necessary to rebuild these views.';

var IndexedDbRemoteDocumentCache =
/** @class */
function () {
  /**
   * @param {LocalSerializer} serializer The document serializer.
   * @param {IndexManager} indexManager The query indexes that need to be maintained.
   * @param keepDocumentChangeLog Whether to keep a document change log in
   * IndexedDb. This change log is required for Multi-Tab synchronization, but
   * not needed in clients that don't share access to their remote document
   * cache.
   */
  function IndexedDbRemoteDocumentCache(serializer, indexManager, keepDocumentChangeLog) {
    this.serializer = serializer;
    this.indexManager = indexManager;
    this.keepDocumentChangeLog = keepDocumentChangeLog;
    /** The last id read by `getNewDocumentChanges()`. */

    this._lastProcessedDocumentChangeId = 0;
  }

  Object.defineProperty(IndexedDbRemoteDocumentCache.prototype, "lastProcessedDocumentChangeId", {
    get: function () {
      return this._lastProcessedDocumentChangeId;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Starts up the remote document cache.
   *
   * Reads the ID of the last  document change from the documentChanges store.
   * Existing changes will not be returned as part of
   * `getNewDocumentChanges()`.
   */
  // PORTING NOTE: This is only used for multi-tab synchronization.

  IndexedDbRemoteDocumentCache.prototype.start = function (transaction) {
    var store = SimpleDb.getStore(transaction, DbRemoteDocumentChanges.store);
    return this.synchronizeLastDocumentChangeId(store);
  };
  /**
   * Adds the supplied entries to the cache. Adds the given size delta to the cached size.
   */


  IndexedDbRemoteDocumentCache.prototype.addEntries = function (transaction, entries, sizeDelta) {
    var promises = [];

    if (entries.length > 0) {
      var documentStore = remoteDocumentsStore(transaction);
      var changedKeys = documentKeySet();

      for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
        var _a = entries_1[_i],
            key = _a.key,
            doc = _a.doc;
        promises.push(documentStore.put(dbKey(key), doc));
        changedKeys = changedKeys.add(key);
        promises.push(this.indexManager.addToCollectionParentIndex(transaction, key.path.popLast()));
      }

      if (this.keepDocumentChangeLog) {
        promises.push(documentChangesStore(transaction).put({
          changes: this.serializer.toDbResourcePaths(changedKeys)
        }));
      }

      promises.push(this.updateSize(transaction, sizeDelta));
    }

    return PersistencePromise.waitFor(promises);
  };
  /**
   * Removes a document from the cache. Note that this method does *not* do any
   * size accounting. It is the responsibility of the caller to count the bytes removed
   * and issue a final updateSize() call after removing documents.
   *
   * @param documentKey The key of the document to remove
   * @return The size of the document that was removed.
   */


  IndexedDbRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {
    // We don't need to keep changelog for these removals since `removeEntry` is
    // only used for garbage collection.
    var store = remoteDocumentsStore(transaction);
    var key = dbKey(documentKey);
    return store.get(key).next(function (document) {
      if (document) {
        return store.delete(key).next(function () {
          return dbDocumentSize(document);
        });
      } else {
        return PersistencePromise.resolve(0);
      }
    });
  };

  IndexedDbRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {
    var _this = this;

    return remoteDocumentsStore(transaction).get(dbKey(documentKey)).next(function (dbRemoteDoc) {
      return dbRemoteDoc ? _this.serializer.fromDbRemoteDocument(dbRemoteDoc) : null;
    });
  };
  /**
   * Looks up an entry in the cache.
   *
   * @param documentKey The key of the entry to look up.
   * @return The cached MaybeDocument entry and its size, or null if we have nothing cached.
   */


  IndexedDbRemoteDocumentCache.prototype.getSizedEntry = function (transaction, documentKey) {
    var _this = this;

    return remoteDocumentsStore(transaction).get(dbKey(documentKey)).next(function (dbRemoteDoc) {
      return dbRemoteDoc ? {
        maybeDocument: _this.serializer.fromDbRemoteDocument(dbRemoteDoc),
        size: dbDocumentSize(dbRemoteDoc)
      } : null;
    });
  };

  IndexedDbRemoteDocumentCache.prototype.getEntries = function (transaction, documentKeys) {
    var _this = this;

    var results = nullableMaybeDocumentMap();
    return this.forEachDbEntry(transaction, documentKeys, function (key, dbRemoteDoc) {
      if (dbRemoteDoc) {
        results = results.insert(key, _this.serializer.fromDbRemoteDocument(dbRemoteDoc));
      } else {
        results = results.insert(key, null);
      }
    }).next(function () {
      return results;
    });
  };
  /**
   * Looks up several entries in the cache.
   *
   * @param documentKeys The set of keys entries to look up.
   * @return A map of MaybeDocuments indexed by key (if a document cannot be
   *     found, the key will be mapped to null) and a map of sizes indexed by
   *     key (zero if the key cannot be found).
   */


  IndexedDbRemoteDocumentCache.prototype.getSizedEntries = function (transaction, documentKeys) {
    var _this = this;

    var results = nullableMaybeDocumentMap();
    var sizeMap = new SortedMap(DocumentKey.comparator);
    return this.forEachDbEntry(transaction, documentKeys, function (key, dbRemoteDoc) {
      if (dbRemoteDoc) {
        results = results.insert(key, _this.serializer.fromDbRemoteDocument(dbRemoteDoc));
        sizeMap = sizeMap.insert(key, dbDocumentSize(dbRemoteDoc));
      } else {
        results = results.insert(key, null);
        sizeMap = sizeMap.insert(key, 0);
      }
    }).next(function () {
      return {
        maybeDocuments: results,
        sizeMap: sizeMap
      };
    });
  };

  IndexedDbRemoteDocumentCache.prototype.forEachDbEntry = function (transaction, documentKeys, callback) {
    if (documentKeys.isEmpty()) {
      return PersistencePromise.resolve();
    }

    var range = IDBKeyRange.bound(documentKeys.first().path.toArray(), documentKeys.last().path.toArray());
    var keyIter = documentKeys.getIterator();
    var nextKey = keyIter.getNext();
    return remoteDocumentsStore(transaction).iterate({
      range: range
    }, function (potentialKeyRaw, dbRemoteDoc, control) {
      var potentialKey = DocumentKey.fromSegments(potentialKeyRaw); // Go through keys not found in cache.

      while (nextKey && DocumentKey.comparator(nextKey, potentialKey) < 0) {
        callback(nextKey, null);
        nextKey = keyIter.getNext();
      }

      if (nextKey && nextKey.isEqual(potentialKey)) {
        // Key found in cache.
        callback(nextKey, dbRemoteDoc);
        nextKey = keyIter.hasNext() ? keyIter.getNext() : null;
      } // Skip to the next key (if there is one).


      if (nextKey) {
        control.skip(nextKey.path.toArray());
      } else {
        control.done();
      }
    }).next(function () {
      // The rest of the keys are not in the cache. One case where `iterate`
      // above won't go through them is when the cache is empty.
      while (nextKey) {
        callback(nextKey, null);
        nextKey = keyIter.hasNext() ? keyIter.getNext() : null;
      }
    });
  };

  IndexedDbRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {
    var _this = this;

    assert(!query.isCollectionGroupQuery(), 'CollectionGroup queries should be handled in LocalDocumentsView');
    var results = documentMap();
    var immediateChildrenPathLength = query.path.length + 1; // Documents are ordered by key, so we can use a prefix scan to narrow down
    // the documents we need to match the query against.

    var startKey = query.path.toArray();
    var range = IDBKeyRange.lowerBound(startKey);
    return remoteDocumentsStore(transaction).iterate({
      range: range
    }, function (key, dbRemoteDoc, control) {
      // The query is actually returning any path that starts with the query
      // path prefix which may include documents in subcollections. For
      // example, a query on 'rooms' will return rooms/abc/messages/xyx but we
      // shouldn't match it. Fix this by discarding rows with document keys
      // more than one segment longer than the query path.
      if (key.length !== immediateChildrenPathLength) {
        return;
      }

      var maybeDoc = _this.serializer.fromDbRemoteDocument(dbRemoteDoc);

      if (!query.path.isPrefixOf(maybeDoc.key.path)) {
        control.done();
      } else if (maybeDoc instanceof Document && query.matches(maybeDoc)) {
        results = results.insert(maybeDoc.key, maybeDoc);
      }
    }).next(function () {
      return results;
    });
  };

  IndexedDbRemoteDocumentCache.prototype.getNewDocumentChanges = function (transaction) {
    var _this = this;

    assert(this.keepDocumentChangeLog, 'Can only call getNewDocumentChanges() when document change log is enabled');
    var changedKeys = documentKeySet();
    var changedDocs = maybeDocumentMap();
    var range = IDBKeyRange.lowerBound(this._lastProcessedDocumentChangeId + 1);
    var firstIteration = true;
    var changesStore = documentChangesStore(transaction);
    return changesStore.iterate({
      range: range
    }, function (_, documentChange) {
      if (firstIteration) {
        firstIteration = false; // If our client was throttled for more than 30 minutes, another
        // client may have garbage collected the remote document changelog.

        if (_this._lastProcessedDocumentChangeId + 1 !== documentChange.id) {
          // Reset the `lastProcessedDocumentChangeId` to allow further
          // invocations to successfully return the changes after this
          // rejection.
          return _this.synchronizeLastDocumentChangeId(changesStore).next(function () {
            return PersistencePromise.reject(new FirestoreError(Code.DATA_LOSS, REMOTE_DOCUMENT_CHANGE_MISSING_ERR_MSG));
          });
        }
      }

      changedKeys = changedKeys.unionWith(_this.serializer.fromDbResourcePaths(documentChange.changes));
      _this._lastProcessedDocumentChangeId = documentChange.id;
    }).next(function () {
      var documentPromises = [];
      changedKeys.forEach(function (key) {
        documentPromises.push(_this.getEntry(transaction, key).next(function (maybeDocument) {
          var doc = maybeDocument || new NoDocument(key, SnapshotVersion.forDeletedDoc());
          changedDocs = changedDocs.insert(key, doc);
        }));
      });
      return PersistencePromise.waitFor(documentPromises);
    }).next(function () {
      return changedDocs;
    });
  };
  /**
   * Removes all changes in the remote document changelog through `changeId`
   * (inclusive).
   */


  IndexedDbRemoteDocumentCache.prototype.removeDocumentChangesThroughChangeId = function (transaction, changeId) {
    var range = IDBKeyRange.upperBound(changeId);
    return documentChangesStore(transaction).delete(range);
  };

  IndexedDbRemoteDocumentCache.prototype.synchronizeLastDocumentChangeId = function (documentChangesStore) {
    var _this = this; // If there are no existing changes, we set `lastProcessedDocumentChangeId`
    // to 0 since IndexedDb's auto-generated keys start at 1.


    this._lastProcessedDocumentChangeId = 0;
    return documentChangesStore.iterate({
      keysOnly: true,
      reverse: true
    }, function (key, value, control) {
      _this._lastProcessedDocumentChangeId = key;
      control.done();
    });
  };

  IndexedDbRemoteDocumentCache.prototype.newChangeBuffer = function () {
    return new IndexedDbRemoteDocumentChangeBuffer(this);
  };

  IndexedDbRemoteDocumentCache.prototype.getSize = function (txn) {
    return this.getMetadata(txn).next(function (metadata) {
      return metadata.byteSize;
    });
  };

  IndexedDbRemoteDocumentCache.prototype.getMetadata = function (txn) {
    return documentGlobalStore(txn).get(DbRemoteDocumentGlobal.key).next(function (metadata) {
      assert(!!metadata, 'Missing document cache metadata');
      return metadata;
    });
  };

  IndexedDbRemoteDocumentCache.prototype.setMetadata = function (txn, metadata) {
    return documentGlobalStore(txn).put(DbRemoteDocumentGlobal.key, metadata);
  };
  /**
   * Adds the given delta to the cached current size. Callers to removeEntry *must* call this
   * afterwards to update the size of the cache.
   *
   * @param sizeDelta
   */


  IndexedDbRemoteDocumentCache.prototype.updateSize = function (txn, sizeDelta) {
    var _this = this;

    return this.getMetadata(txn).next(function (metadata) {
      metadata.byteSize += sizeDelta;
      return _this.setMetadata(txn, metadata);
    });
  };

  return IndexedDbRemoteDocumentCache;
}();

function documentGlobalStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbRemoteDocumentGlobal.store);
}
/**
 * Handles the details of adding and updating documents in the IndexedDbRemoteDocumentCache
 */


var IndexedDbRemoteDocumentChangeBuffer =
/** @class */
function (_super) {
  tslib_1.__extends(IndexedDbRemoteDocumentChangeBuffer, _super);

  function IndexedDbRemoteDocumentChangeBuffer(documentCache) {
    var _this = _super.call(this) || this;

    _this.documentCache = documentCache;
    return _this;
  }

  IndexedDbRemoteDocumentChangeBuffer.prototype.applyChanges = function (transaction) {
    var _this = this;

    var changes = this.assertChanges();
    var delta = 0;
    var toApply = [];
    changes.forEach(function (key, maybeDocument) {
      var doc = _this.documentCache.serializer.toDbRemoteDocument(maybeDocument);

      var previousSize = _this.documentSizes.get(key); // NOTE: if we ever decide we need to support doing writes without
      // reading first, this assert will need to change to do the read automatically.


      assert(previousSize !== undefined, "Attempting to change document " + key.toString() + " without having read it first");
      var size = dbDocumentSize(doc);
      delta += size - previousSize;
      toApply.push({
        key: key,
        doc: doc
      });
    });
    return this.documentCache.addEntries(transaction, toApply, delta);
  };

  IndexedDbRemoteDocumentChangeBuffer.prototype.getFromCache = function (transaction, documentKey) {
    return this.documentCache.getSizedEntry(transaction, documentKey);
  };

  IndexedDbRemoteDocumentChangeBuffer.prototype.getAllFromCache = function (transaction, documentKeys) {
    return this.documentCache.getSizedEntries(transaction, documentKeys);
  };

  return IndexedDbRemoteDocumentChangeBuffer;
}(RemoteDocumentChangeBuffer);

function isDocumentChangeMissingError(err) {
  return err.code === Code.DATA_LOSS && err.message === REMOTE_DOCUMENT_CHANGE_MISSING_ERR_MSG;
}
/**
 * Helper to get a typed SimpleDbStore for the remoteDocuments object store.
 */


function remoteDocumentsStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbRemoteDocument.store);
}
/**
 * Helper to get a typed SimpleDbStore for the remoteDocumentChanges object
 * store.
 */


function documentChangesStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbRemoteDocumentChanges.store);
}

function dbKey(docKey) {
  return docKey.path.toArray();
}
/**
 * Retrusn an approximate size for the given document.
 */


function dbDocumentSize(doc) {
  var value;

  if (doc.document) {
    value = doc.document;
  } else if (doc.unknownDocument) {
    value = doc.unknownDocument;
  } else if (doc.noDocument) {
    value = doc.noDocument;
  } else {
    throw fail('Unknown remote document type');
  }

  return JSON.stringify(value).length;
}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An in-memory implementation of IndexManager.
 */


var MemoryIndexManager =
/** @class */
function () {
  function MemoryIndexManager() {
    this.collectionParentIndex = new MemoryCollectionParentIndex();
  }

  MemoryIndexManager.prototype.addToCollectionParentIndex = function (transaction, collectionPath) {
    this.collectionParentIndex.add(collectionPath);
    return PersistencePromise.resolve();
  };

  MemoryIndexManager.prototype.getCollectionParents = function (transaction, collectionId) {
    return PersistencePromise.resolve(this.collectionParentIndex.getEntries(collectionId));
  };

  return MemoryIndexManager;
}();
/**
 * Internal implementation of the collection-parent index exposed by MemoryIndexManager.
 * Also used for in-memory caching by IndexedDbIndexManager and initial index population
 * in indexeddb_schema.ts
 */


var MemoryCollectionParentIndex =
/** @class */
function () {
  function MemoryCollectionParentIndex() {
    this.index = {};
  } // Returns false if the entry already existed.


  MemoryCollectionParentIndex.prototype.add = function (collectionPath) {
    assert(collectionPath.length % 2 === 1, 'Expected a collection path.');
    var collectionId = collectionPath.lastSegment();
    var parentPath = collectionPath.popLast();
    var existingParents = this.index[collectionId] || new SortedSet(ResourcePath.comparator);
    var added = !existingParents.has(parentPath);
    this.index[collectionId] = existingParents.add(parentPath);
    return added;
  };

  MemoryCollectionParentIndex.prototype.getEntries = function (collectionId) {
    var parentPaths = this.index[collectionId] || new SortedSet(ResourcePath.comparator);
    return parentPaths.toArray();
  };

  return MemoryCollectionParentIndex;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Schema Version for the Web client:
 * 1. Initial version including Mutation Queue, Query Cache, and Remote Document
 *    Cache
 * 2. Used to ensure a targetGlobal object exists and add targetCount to it. No
 *    longer required because migration 3 unconditionally clears it.
 * 3. Dropped and re-created Query Cache to deal with cache corruption related
 *    to limbo resolution. Addresses
 *    https://github.com/firebase/firebase-ios-sdk/issues/1548
 * 4. Multi-Tab Support.
 * 5. Removal of held write acks.
 * 6. Create document global for tracking document cache size.
 * 7. Ensure every cached document has a sentinel row with a sequence number.
 * 8. Add collection-parent index for Collection Group queries.
 */


var SCHEMA_VERSION = 8;
/** Performs database creation and schema upgrades. */

var SchemaConverter =
/** @class */
function () {
  function SchemaConverter(serializer) {
    this.serializer = serializer;
  }
  /**
   * Performs database creation and schema upgrades.
   *
   * Note that in production, this method is only ever used to upgrade the schema
   * to SCHEMA_VERSION. Different values of toVersion are only used for testing
   * and local feature development.
   */


  SchemaConverter.prototype.createOrUpgrade = function (db, txn, fromVersion, toVersion) {
    var _this = this;

    assert(fromVersion < toVersion && fromVersion >= 0 && toVersion <= SCHEMA_VERSION, "Unexpected schema upgrade from v" + fromVersion + " to v{toVersion}.");

    if (fromVersion < 1 && toVersion >= 1) {
      createPrimaryClientStore(db);
      createMutationQueue(db);
      createQueryCache(db);
      createRemoteDocumentCache(db);
    } // Migration 2 to populate the targetGlobal object no longer needed since
    // migration 3 unconditionally clears it.


    var p = PersistencePromise.resolve();

    if (fromVersion < 3 && toVersion >= 3) {
      // Brand new clients don't need to drop and recreate--only clients that
      // potentially have corrupt data.
      if (fromVersion !== 0) {
        dropQueryCache(db);
        createQueryCache(db);
      }

      p = p.next(function () {
        return writeEmptyTargetGlobalEntry(txn);
      });
    }

    if (fromVersion < 4 && toVersion >= 4) {
      if (fromVersion !== 0) {
        // Schema version 3 uses auto-generated keys to generate globally unique
        // mutation batch IDs (this was previously ensured internally by the
        // client). To migrate to the new schema, we have to read all mutations
        // and write them back out. We preserve the existing batch IDs to guarantee
        // consistency with other object stores. Any further mutation batch IDs will
        // be auto-generated.
        p = p.next(function () {
          return upgradeMutationBatchSchemaAndMigrateData(db, txn);
        });
      }

      p = p.next(function () {
        createClientMetadataStore(db);
        createRemoteDocumentChangesStore(db);
      });
    }

    if (fromVersion < 5 && toVersion >= 5) {
      p = p.next(function () {
        return _this.removeAcknowledgedMutations(txn);
      });
    }

    if (fromVersion < 6 && toVersion >= 6) {
      p = p.next(function () {
        createDocumentGlobalStore(db);
        return _this.addDocumentGlobal(txn);
      });
    }

    if (fromVersion < 7 && toVersion >= 7) {
      p = p.next(function () {
        return _this.ensureSequenceNumbers(txn);
      });
    }

    if (fromVersion < 8 && toVersion >= 8) {
      p = p.next(function () {
        return _this.createCollectionParentIndex(db, txn);
      });
    }

    return p;
  };

  SchemaConverter.prototype.addDocumentGlobal = function (txn) {
    var byteCount = 0;
    return txn.store(DbRemoteDocument.store).iterate(function (_, doc) {
      byteCount += dbDocumentSize(doc);
    }).next(function () {
      var metadata = new DbRemoteDocumentGlobal(byteCount);
      return txn.store(DbRemoteDocumentGlobal.store).put(DbRemoteDocumentGlobal.key, metadata);
    });
  };

  SchemaConverter.prototype.removeAcknowledgedMutations = function (txn) {
    var _this = this;

    var queuesStore = txn.store(DbMutationQueue.store);
    var mutationsStore = txn.store(DbMutationBatch.store);
    return queuesStore.loadAll().next(function (queues) {
      return PersistencePromise.forEach(queues, function (queue) {
        var range = IDBKeyRange.bound([queue.userId, BATCHID_UNKNOWN], [queue.userId, queue.lastAcknowledgedBatchId]);
        return mutationsStore.loadAll(DbMutationBatch.userMutationsIndex, range).next(function (dbBatches) {
          return PersistencePromise.forEach(dbBatches, function (dbBatch) {
            assert(dbBatch.userId === queue.userId, "Cannot process batch " + dbBatch.batchId + " from unexpected user");

            var batch = _this.serializer.fromDbMutationBatch(dbBatch);

            return removeMutationBatch(txn, queue.userId, batch).next(function () {});
          });
        });
      });
    });
  };
  /**
   * Ensures that every document in the remote document cache has a corresponding sentinel row
   * with a sequence number. Missing rows are given the most recently used sequence number.
   */


  SchemaConverter.prototype.ensureSequenceNumbers = function (txn) {
    var documentTargetStore = txn.store(DbTargetDocument.store);
    var documentsStore = txn.store(DbRemoteDocument.store);
    return getHighestListenSequenceNumber(txn).next(function (currentSequenceNumber) {
      var writeSentinelKey = function (path) {
        return documentTargetStore.put(new DbTargetDocument(0, encode(path), currentSequenceNumber));
      };

      var promises = [];
      return documentsStore.iterate(function (key, doc) {
        var path = new ResourcePath(key);
        var docSentinelKey = sentinelKey(path);
        promises.push(documentTargetStore.get(docSentinelKey).next(function (maybeSentinel) {
          if (!maybeSentinel) {
            return writeSentinelKey(path);
          } else {
            return PersistencePromise.resolve();
          }
        }));
      }).next(function () {
        return PersistencePromise.waitFor(promises);
      });
    });
  };

  SchemaConverter.prototype.createCollectionParentIndex = function (db, txn) {
    // Create the index.
    db.createObjectStore(DbCollectionParent.store, {
      keyPath: DbCollectionParent.keyPath
    });
    var collectionParentsStore = txn.store(DbCollectionParent.store); // Helper to add an index entry iff we haven't already written it.

    var cache = new MemoryCollectionParentIndex();

    var addEntry = function (collectionPath) {
      if (cache.add(collectionPath)) {
        var collectionId = collectionPath.lastSegment();
        var parentPath = collectionPath.popLast();
        return collectionParentsStore.put({
          collectionId: collectionId,
          parent: encode(parentPath)
        });
      }
    }; // Index existing remote documents.


    return txn.store(DbRemoteDocument.store).iterate({
      keysOnly: true
    }, function (pathSegments, _) {
      var path = new ResourcePath(pathSegments);
      return addEntry(path.popLast());
    }).next(function () {
      // Index existing mutations.
      return txn.store(DbDocumentMutation.store).iterate({
        keysOnly: true
      }, function (_a, _) {
        var userID = _a[0],
            encodedPath = _a[1],
            batchId = _a[2];
        var path = decode(encodedPath);
        return addEntry(path.popLast());
      });
    });
  };

  return SchemaConverter;
}();

function sentinelKey(path) {
  return [0, encode(path)];
}
/**
 * Wrapper class to store timestamps (seconds and nanos) in IndexedDb objects.
 */


var DbTimestamp =
/** @class */
function () {
  function DbTimestamp(seconds, nanoseconds) {
    this.seconds = seconds;
    this.nanoseconds = nanoseconds;
  }

  return DbTimestamp;
}();
/**
 * A singleton object to be stored in the 'owner' store in IndexedDb.
 *
 * A given database can have a single primary tab assigned at a given time. That
 * tab must validate that it is still holding the primary lease before every
 * operation that requires locked access. The primary tab should regularly
 * write an updated timestamp to this lease to prevent other tabs from
 * "stealing" the primary lease
 */


var DbPrimaryClient =
/** @class */
function () {
  function DbPrimaryClient(ownerId,
  /** Whether to allow shared access from multiple tabs. */
  allowTabSynchronization, leaseTimestampMs) {
    this.ownerId = ownerId;
    this.allowTabSynchronization = allowTabSynchronization;
    this.leaseTimestampMs = leaseTimestampMs;
  }
  /**
   * Name of the IndexedDb object store.
   *
   * Note that the name 'owner' is chosen to ensure backwards compatibility with
   * older clients that only supported single locked access to the persistence
   * layer.
   */


  DbPrimaryClient.store = 'owner';
  /**
   * The key string used for the single object that exists in the
   * DbPrimaryClient store.
   */

  DbPrimaryClient.key = 'owner';
  return DbPrimaryClient;
}();

function createPrimaryClientStore(db) {
  db.createObjectStore(DbPrimaryClient.store);
}
/**
 * An object to be stored in the 'mutationQueues' store in IndexedDb.
 *
 * Each user gets a single queue of MutationBatches to apply to the server.
 * DbMutationQueue tracks the metadata about the queue.
 */


var DbMutationQueue =
/** @class */
function () {
  function DbMutationQueue(
  /**
   * The normalized user ID to which this queue belongs.
   */
  userId,
  /**
   * An identifier for the highest numbered batch that has been acknowledged
   * by the server. All MutationBatches in this queue with batchIds less
   * than or equal to this value are considered to have been acknowledged by
   * the server.
   *
   * NOTE: this is deprecated and no longer used by the code.
   */
  lastAcknowledgedBatchId,
  /**
   * A stream token that was previously sent by the server.
   *
   * See StreamingWriteRequest in datastore.proto for more details about
   * usage.
   *
   * After sending this token, earlier tokens may not be used anymore so
   * only a single stream token is retained.
   */
  lastStreamToken) {
    this.userId = userId;
    this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;
    this.lastStreamToken = lastStreamToken;
  }
  /** Name of the IndexedDb object store.  */


  DbMutationQueue.store = 'mutationQueues';
  /** Keys are automatically assigned via the userId property. */

  DbMutationQueue.keyPath = 'userId';
  return DbMutationQueue;
}();
/**
 * An object to be stored in the 'mutations' store in IndexedDb.
 *
 * Represents a batch of user-level mutations intended to be sent to the server
 * in a single write. Each user-level batch gets a separate DbMutationBatch
 * with a new batchId.
 */


var DbMutationBatch =
/** @class */
function () {
  function DbMutationBatch(
  /**
   * The normalized user ID to which this batch belongs.
   */
  userId,
  /**
   * An identifier for this batch, allocated using an auto-generated key.
   */
  batchId,
  /**
   * The local write time of the batch, stored as milliseconds since the
   * epoch.
   */
  localWriteTimeMs,
  /**
   * A list of "mutations" that represent a partial base state from when this
   * write batch was initially created. During local application of the write
   * batch, these baseMutations are applied prior to the real writes in order
   * to override certain document fields from the remote document cache. This
   * is necessary in the case of non-idempotent writes (e.g. `increment()`
   * transforms) to make sure that the local view of the modified documents
   * doesn't flicker if the remote document cache receives the result of the
   * non-idempotent write before the write is removed from the queue.
   *
   * These mutations are never sent to the backend.
   */
  baseMutations,
  /**
   * A list of mutations to apply. All mutations will be applied atomically.
   *
   * Mutations are serialized via JsonProtoSerializer.toMutation().
   */
  mutations) {
    this.userId = userId;
    this.batchId = batchId;
    this.localWriteTimeMs = localWriteTimeMs;
    this.baseMutations = baseMutations;
    this.mutations = mutations;
  }
  /** Name of the IndexedDb object store.  */


  DbMutationBatch.store = 'mutations';
  /** Keys are automatically assigned via the userId, batchId properties. */

  DbMutationBatch.keyPath = 'batchId';
  /** The index name for lookup of mutations by user. */

  DbMutationBatch.userMutationsIndex = 'userMutationsIndex';
  /** The user mutations index is keyed by [userId, batchId] pairs. */

  DbMutationBatch.userMutationsKeyPath = ['userId', 'batchId'];
  return DbMutationBatch;
}();

function createMutationQueue(db) {
  db.createObjectStore(DbMutationQueue.store, {
    keyPath: DbMutationQueue.keyPath
  });
  var mutationBatchesStore = db.createObjectStore(DbMutationBatch.store, {
    keyPath: DbMutationBatch.keyPath,
    autoIncrement: true
  });
  mutationBatchesStore.createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, {
    unique: true
  });
  db.createObjectStore(DbDocumentMutation.store);
}
/**
 * Upgrade function to migrate the 'mutations' store from V1 to V3. Loads
 * and rewrites all data.
 */


function upgradeMutationBatchSchemaAndMigrateData(db, txn) {
  var v1MutationsStore = txn.store(DbMutationBatch.store);
  return v1MutationsStore.loadAll().next(function (existingMutations) {
    db.deleteObjectStore(DbMutationBatch.store);
    var mutationsStore = db.createObjectStore(DbMutationBatch.store, {
      keyPath: DbMutationBatch.keyPath,
      autoIncrement: true
    });
    mutationsStore.createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, {
      unique: true
    });
    var v3MutationsStore = txn.store(DbMutationBatch.store);
    var writeAll = existingMutations.map(function (mutation) {
      return v3MutationsStore.put(mutation);
    });
    return PersistencePromise.waitFor(writeAll);
  });
}
/**
 * An object to be stored in the 'documentMutations' store in IndexedDb.
 *
 * A manually maintained index of all the mutation batches that affect a given
 * document key. The rows in this table are references based on the contents of
 * DbMutationBatch.mutations.
 */


var DbDocumentMutation =
/** @class */
function () {
  function DbDocumentMutation() {}
  /**
   * Creates a [userId] key for use in the DbDocumentMutations index to iterate
   * over all of a user's document mutations.
   */


  DbDocumentMutation.prefixForUser = function (userId) {
    return [userId];
  };
  /**
   * Creates a [userId, encodedPath] key for use in the DbDocumentMutations
   * index to iterate over all at document mutations for a given path or lower.
   */


  DbDocumentMutation.prefixForPath = function (userId, path) {
    return [userId, encode(path)];
  };
  /**
   * Creates a full index key of [userId, encodedPath, batchId] for inserting
   * and deleting into the DbDocumentMutations index.
   */


  DbDocumentMutation.key = function (userId, path, batchId) {
    return [userId, encode(path), batchId];
  };

  DbDocumentMutation.store = 'documentMutations';
  /**
   * Because we store all the useful information for this store in the key,
   * there is no useful information to store as the value. The raw (unencoded)
   * path cannot be stored because IndexedDb doesn't store prototype
   * information.
   */

  DbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();
  return DbDocumentMutation;
}();

function createRemoteDocumentCache(db) {
  db.createObjectStore(DbRemoteDocument.store);
}
/**
 * Represents the known absence of a document at a particular version.
 * Stored in IndexedDb as part of a DbRemoteDocument object.
 */


var DbNoDocument =
/** @class */
function () {
  function DbNoDocument(path, readTime) {
    this.path = path;
    this.readTime = readTime;
  }

  return DbNoDocument;
}();
/**
 * Represents a document that is known to exist but whose data is unknown.
 * Stored in IndexedDb as part of a DbRemoteDocument object.
 */


var DbUnknownDocument =
/** @class */
function () {
  function DbUnknownDocument(path, version) {
    this.path = path;
    this.version = version;
  }

  return DbUnknownDocument;
}();
/**
 * An object to be stored in the 'remoteDocuments' store in IndexedDb.
 * It represents either:
 *
 * - A complete document.
 * - A "no document" representing a document that is known not to exist (at
 * some version).
 * - An "unknown document" representing a document that is known to exist (at
 * some version) but whose contents are unknown.
 *
 * Note: This is the persisted equivalent of a MaybeDocument and could perhaps
 * be made more general if necessary.
 */


var DbRemoteDocument =
/** @class */
function () {
  function DbRemoteDocument(
  /**
   * Set to an instance of DbUnknownDocument if the data for a document is
   * not known, but it is known that a document exists at the specified
   * version (e.g. it had a successful update applied to it)
   */
  unknownDocument,
  /**
   * Set to an instance of a DbNoDocument if it is known that no document
   * exists.
   */
  noDocument,
  /**
   * Set to an instance of a Document if there's a cached version of the
   * document.
   */
  document,
  /**
   * Documents that were written to the remote document store based on
   * a write acknowledgment are marked with `hasCommittedMutations`. These
   * documents are potentially inconsistent with the backend's copy and use
   * the write's commit version as their document version.
   */
  hasCommittedMutations) {
    this.unknownDocument = unknownDocument;
    this.noDocument = noDocument;
    this.document = document;
    this.hasCommittedMutations = hasCommittedMutations;
  }

  DbRemoteDocument.store = 'remoteDocuments';
  return DbRemoteDocument;
}();
/**
 * Contains a single entry that has metadata about the remote document cache.
 */


var DbRemoteDocumentGlobal =
/** @class */
function () {
  /**
   * @param byteSize Approximately the total size in bytes of all the documents in the document
   * cache.
   */
  function DbRemoteDocumentGlobal(byteSize) {
    this.byteSize = byteSize;
  }

  DbRemoteDocumentGlobal.store = 'remoteDocumentGlobal';
  DbRemoteDocumentGlobal.key = 'remoteDocumentGlobalKey';
  return DbRemoteDocumentGlobal;
}();

function createDocumentGlobalStore(db) {
  db.createObjectStore(DbRemoteDocumentGlobal.store);
}
/**
 * An object to be stored in the 'targets' store in IndexedDb.
 *
 * This is based on and should be kept in sync with the proto used in the iOS
 * client.
 *
 * Each query the client listens to against the server is tracked on disk so
 * that the query can be efficiently resumed on restart.
 */


var DbTarget =
/** @class */
function () {
  function DbTarget(
  /**
   * An auto-generated sequential numeric identifier for the query.
   *
   * Queries are stored using their canonicalId as the key, but these
   * canonicalIds can be quite long so we additionally assign a unique
   * queryId which can be used by referenced data structures (e.g.
   * indexes) to minimize the on-disk cost.
   */
  targetId,
  /**
   * The canonical string representing this query. This is not unique.
   */
  canonicalId,
  /**
   * The last readTime received from the Watch Service for this query.
   *
   * This is the same value as TargetChange.read_time in the protos.
   */
  readTime,
  /**
   * An opaque, server-assigned token that allows watching a query to be
   * resumed after disconnecting without retransmitting all the data
   * that matches the query. The resume token essentially identifies a
   * point in time from which the server should resume sending results.
   *
   * This is related to the snapshotVersion in that the resumeToken
   * effectively also encodes that value, but the resumeToken is opaque
   * and sometimes encodes additional information.
   *
   * A consequence of this is that the resumeToken should be used when
   * asking the server to reason about where this client is in the watch
   * stream, but the client should use the snapshotVersion for its own
   * purposes.
   *
   * This is the same value as TargetChange.resume_token in the protos.
   */
  resumeToken,
  /**
   * A sequence number representing the last time this query was
   * listened to, used for garbage collection purposes.
   *
   * Conventionally this would be a timestamp value, but device-local
   * clocks are unreliable and they must be able to create new listens
   * even while disconnected. Instead this should be a monotonically
   * increasing number that's incremented on each listen call.
   *
   * This is different from the queryId since the queryId is an
   * immutable identifier assigned to the Query on first use while
   * lastListenSequenceNumber is updated every time the query is
   * listened to.
   */
  lastListenSequenceNumber,
  /**
   * The query for this target.
   *
   * Because canonical ids are not unique we must store the actual query. We
   * use the proto to have an object we can persist without having to
   * duplicate translation logic to and from a `Query` object.
   */
  query) {
    this.targetId = targetId;
    this.canonicalId = canonicalId;
    this.readTime = readTime;
    this.resumeToken = resumeToken;
    this.lastListenSequenceNumber = lastListenSequenceNumber;
    this.query = query;
  }

  DbTarget.store = 'targets';
  /** Keys are automatically assigned via the targetId property. */

  DbTarget.keyPath = 'targetId';
  /** The name of the queryTargets index. */

  DbTarget.queryTargetsIndexName = 'queryTargetsIndex';
  /**
   * The index of all canonicalIds to the targets that they match. This is not
   * a unique mapping because canonicalId does not promise a unique name for all
   * possible queries, so we append the targetId to make the mapping unique.
   */

  DbTarget.queryTargetsKeyPath = ['canonicalId', 'targetId'];
  return DbTarget;
}();
/**
 * An object representing an association between a target and a document, or a
 * sentinel row marking the last sequence number at which a document was used.
 * Each document cached must have a corresponding sentinel row before lru
 * garbage collection is enabled.
 *
 * The target associations and sentinel rows are co-located so that orphaned
 * documents and their sequence numbers can be identified efficiently via a scan
 * of this store.
 */


var DbTargetDocument =
/** @class */
function () {
  function DbTargetDocument(
  /**
   * The targetId identifying a target or 0 for a sentinel row.
   */
  targetId,
  /**
   * The path to the document, as encoded in the key.
   */
  path,
  /**
   * If this is a sentinel row, this should be the sequence number of the last
   * time the document specified by `path` was used. Otherwise, it should be
   * `undefined`.
   */
  sequenceNumber) {
    this.targetId = targetId;
    this.path = path;
    this.sequenceNumber = sequenceNumber;
    assert(targetId === 0 === (sequenceNumber !== undefined), // tslint:disable-next-line:max-line-length
    'A target-document row must either have targetId == 0 and a defined sequence number, or a non-zero targetId and no sequence number');
  }
  /** Name of the IndexedDb object store.  */


  DbTargetDocument.store = 'targetDocuments';
  /** Keys are automatically assigned via the targetId, path properties. */

  DbTargetDocument.keyPath = ['targetId', 'path'];
  /** The index name for the reverse index. */

  DbTargetDocument.documentTargetsIndex = 'documentTargetsIndex';
  /** We also need to create the reverse index for these properties. */

  DbTargetDocument.documentTargetsKeyPath = ['path', 'targetId'];
  return DbTargetDocument;
}();
/**
 * A record of global state tracked across all Targets, tracked separately
 * to avoid the need for extra indexes.
 *
 * This should be kept in-sync with the proto used in the iOS client.
 */


var DbTargetGlobal =
/** @class */
function () {
  function DbTargetGlobal(
  /**
   * The highest numbered target id across all targets.
   *
   * See DbTarget.targetId.
   */
  highestTargetId,
  /**
   * The highest numbered lastListenSequenceNumber across all targets.
   *
   * See DbTarget.lastListenSequenceNumber.
   */
  highestListenSequenceNumber,
  /**
   * A global snapshot version representing the last consistent snapshot we
   * received from the backend. This is monotonically increasing and any
   * snapshots received from the backend prior to this version (e.g. for
   * targets resumed with a resumeToken) should be suppressed (buffered)
   * until the backend has caught up to this snapshot version again. This
   * prevents our cache from ever going backwards in time.
   */
  lastRemoteSnapshotVersion,
  /**
   * The number of targets persisted.
   */
  targetCount) {
    this.highestTargetId = highestTargetId;
    this.highestListenSequenceNumber = highestListenSequenceNumber;
    this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;
    this.targetCount = targetCount;
  }
  /**
   * The key string used for the single object that exists in the
   * DbTargetGlobal store.
   */


  DbTargetGlobal.key = 'targetGlobalKey';
  DbTargetGlobal.store = 'targetGlobal';
  return DbTargetGlobal;
}();
/**
 * An object representing an association between a Collection id (e.g. 'messages')
 * to a parent path (e.g. '/chats/123') that contains it as a (sub)collection.
 * This is used to efficiently find all collections to query when performing
 * a Collection Group query.
 */


var DbCollectionParent =
/** @class */
function () {
  function DbCollectionParent(
  /**
   * The collectionId (e.g. 'messages')
   */
  collectionId,
  /**
   * The path to the parent (either a document location or an empty path for
   * a root-level collection).
   */
  parent) {
    this.collectionId = collectionId;
    this.parent = parent;
  }
  /** Name of the IndexedDb object store. */


  DbCollectionParent.store = 'collectionParents';
  /** Keys are automatically assigned via the collectionId, parent properties. */

  DbCollectionParent.keyPath = ['collectionId', 'parent'];
  return DbCollectionParent;
}();

function createQueryCache(db) {
  var targetDocumentsStore = db.createObjectStore(DbTargetDocument.store, {
    keyPath: DbTargetDocument.keyPath
  });
  targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, {
    unique: true
  });
  var targetStore = db.createObjectStore(DbTarget.store, {
    keyPath: DbTarget.keyPath
  }); // NOTE: This is unique only because the TargetId is the suffix.

  targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, {
    unique: true
  });
  db.createObjectStore(DbTargetGlobal.store);
}

function dropQueryCache(db) {
  db.deleteObjectStore(DbTargetDocument.store);
  db.deleteObjectStore(DbTarget.store);
  db.deleteObjectStore(DbTargetGlobal.store);
}
/**
 * Creates the target global singleton row.
 *
 * @param {IDBTransaction} txn The version upgrade transaction for indexeddb
 */


function writeEmptyTargetGlobalEntry(txn) {
  var globalStore = txn.store(DbTargetGlobal.store);
  var metadata = new DbTargetGlobal(
  /*highestTargetId=*/
  0,
  /*lastListenSequenceNumber=*/
  0, SnapshotVersion.MIN.toTimestamp(),
  /*targetCount=*/
  0);
  return globalStore.put(DbTargetGlobal.key, metadata);
}
/**
 * An object store to store the keys of changed documents. This is used to
 * facilitate storing document changelogs in the Remote Document Cache.
 *
 * PORTING NOTE: This is used for change propagation during multi-tab syncing
 * and not needed on iOS and Android.
 */


var DbRemoteDocumentChanges =
/** @class */
function () {
  function DbRemoteDocumentChanges(
  /** The keys of the changed documents. */
  changes) {
    this.changes = changes;
  }
  /** Name of the IndexedDb object store.  */


  DbRemoteDocumentChanges.store = 'remoteDocumentChanges';
  /** Keys are auto-generated via the `id` property. */

  DbRemoteDocumentChanges.keyPath = 'id';
  return DbRemoteDocumentChanges;
}();

function createRemoteDocumentChangesStore(db) {
  db.createObjectStore(DbRemoteDocumentChanges.store, {
    keyPath: 'id',
    autoIncrement: true
  });
}
/**
 * A record of the metadata state of each client.
 *
 * PORTING NOTE: This is used to synchronize multi-tab state and does not need
 * to be ported to iOS or Android.
 */


var DbClientMetadata =
/** @class */
function () {
  function DbClientMetadata(
  /** The auto-generated client id assigned at client startup. */
  clientId,
  /** The last time this state was updated. */
  updateTimeMs,
  /** Whether the client's network connection is enabled. */
  networkEnabled,
  /** Whether this client is running in a foreground tab. */
  inForeground,
  /**
   * The last change read from the DbRemoteDocumentChanges store.
   * Can be undefined for backwards compatibility.
   */
  lastProcessedDocumentChangeId) {
    this.clientId = clientId;
    this.updateTimeMs = updateTimeMs;
    this.networkEnabled = networkEnabled;
    this.inForeground = inForeground;
    this.lastProcessedDocumentChangeId = lastProcessedDocumentChangeId;
  }
  /** Name of the IndexedDb object store. */


  DbClientMetadata.store = 'clientMetadata';
  /** Keys are automatically assigned via the clientId properties. */

  DbClientMetadata.keyPath = 'clientId';
  return DbClientMetadata;
}();

function createClientMetadataStore(db) {
  db.createObjectStore(DbClientMetadata.store, {
    keyPath: DbClientMetadata.keyPath
  });
} // Visible for testing


var V1_STORES = [DbMutationQueue.store, DbMutationBatch.store, DbDocumentMutation.store, DbRemoteDocument.store, DbTarget.store, DbPrimaryClient.store, DbTargetGlobal.store, DbTargetDocument.store]; // V2 is no longer usable (see comment at top of file)
// Visible for testing

var V3_STORES = V1_STORES; // Visible for testing

var V4_STORES = V3_STORES.concat([DbClientMetadata.store, DbRemoteDocumentChanges.store]); // V5 does not change the set of stores.

var V6_STORES = V4_STORES.concat([DbRemoteDocumentGlobal.store]); // V7 does not change the set of stores.

var V8_STORES = V6_STORES.concat([DbCollectionParent.store]);
/**
 * The list of all default IndexedDB stores used throughout the SDK. This is
 * used when creating transactions so that access across all stores is done
 * atomically.
 */

var ALL_STORES = V8_STORES;
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A persisted implementation of IndexManager.
 */

var IndexedDbIndexManager =
/** @class */
function () {
  function IndexedDbIndexManager() {
    /**
     * An in-memory copy of the index entries we've already written since the SDK
     * launched. Used to avoid re-writing the same entry repeatedly.
     *
     * This is *NOT* a complete cache of what's in persistence and so can never be used to
     * satisfy reads.
     */
    this.collectionParentsCache = new MemoryCollectionParentIndex();
  }

  IndexedDbIndexManager.prototype.addToCollectionParentIndex = function (transaction, collectionPath) {
    assert(collectionPath.length % 2 === 1, 'Expected a collection path.');

    if (this.collectionParentsCache.add(collectionPath)) {
      assert(collectionPath.length >= 1, 'Invalid collection path.');
      var collectionId = collectionPath.lastSegment();
      var parentPath = collectionPath.popLast();
      return collectionParentsStore(transaction).put({
        collectionId: collectionId,
        parent: encode(parentPath)
      });
    }

    return PersistencePromise.resolve();
  };

  IndexedDbIndexManager.prototype.getCollectionParents = function (transaction, collectionId) {
    var parentPaths = [];
    var range = IDBKeyRange.bound([collectionId, ''], [immediateSuccessor(collectionId), ''],
    /*lowerOpen=*/
    false,
    /*upperOpen=*/
    true);
    return collectionParentsStore(transaction).loadAll(range).next(function (entries) {
      for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
        var entry = entries_1[_i]; // This collectionId guard shouldn't be necessary (and isn't as long
        // as we're running in a real browser), but there's a bug in
        // indexeddbshim that breaks our range in our tests running in node:
        // https://github.com/axemclion/IndexedDBShim/issues/334

        if (entry.collectionId !== collectionId) {
          break;
        }

        parentPaths.push(decode(entry.parent));
      }

      return parentPaths;
    });
  };

  return IndexedDbIndexManager;
}();
/**
 * Helper to get a typed SimpleDbStore for the collectionParents
 * document store.
 */


function collectionParentsStore(txn) {
  return IndexedDbPersistence.getStore(txn, DbCollectionParent.store);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/** Serializer for values stored in the LocalStore. */


var LocalSerializer =
/** @class */
function () {
  function LocalSerializer(remoteSerializer) {
    this.remoteSerializer = remoteSerializer;
  }
  /** Decodes a remote document from storage locally to a Document. */


  LocalSerializer.prototype.fromDbRemoteDocument = function (remoteDoc) {
    if (remoteDoc.document) {
      return this.remoteSerializer.fromDocument(remoteDoc.document, !!remoteDoc.hasCommittedMutations);
    } else if (remoteDoc.noDocument) {
      var key = DocumentKey.fromSegments(remoteDoc.noDocument.path);
      var version = this.fromDbTimestamp(remoteDoc.noDocument.readTime);
      return new NoDocument(key, version, {
        hasCommittedMutations: !!remoteDoc.hasCommittedMutations
      });
    } else if (remoteDoc.unknownDocument) {
      var key = DocumentKey.fromSegments(remoteDoc.unknownDocument.path);
      var version = this.fromDbTimestamp(remoteDoc.unknownDocument.version);
      return new UnknownDocument(key, version);
    } else {
      return fail('Unexpected DbRemoteDocument');
    }
  };
  /** Encodes a document for storage locally. */


  LocalSerializer.prototype.toDbRemoteDocument = function (maybeDoc) {
    if (maybeDoc instanceof Document) {
      var doc = maybeDoc.proto ? maybeDoc.proto : this.remoteSerializer.toDocument(maybeDoc);
      var hasCommittedMutations = maybeDoc.hasCommittedMutations;
      return new DbRemoteDocument(
      /* unknownDocument= */
      null,
      /* noDocument= */
      null, doc, hasCommittedMutations);
    } else if (maybeDoc instanceof NoDocument) {
      var path = maybeDoc.key.path.toArray();
      var readTime = this.toDbTimestamp(maybeDoc.version);
      var hasCommittedMutations = maybeDoc.hasCommittedMutations;
      return new DbRemoteDocument(
      /* unknownDocument= */
      null, new DbNoDocument(path, readTime),
      /* document= */
      null, hasCommittedMutations);
    } else if (maybeDoc instanceof UnknownDocument) {
      var path = maybeDoc.key.path.toArray();
      var readTime = this.toDbTimestamp(maybeDoc.version);
      return new DbRemoteDocument(new DbUnknownDocument(path, readTime),
      /* noDocument= */
      null,
      /* document= */
      null,
      /* hasCommittedMutations= */
      true);
    } else {
      return fail('Unexpected MaybeDocumment');
    }
  };

  LocalSerializer.prototype.toDbTimestamp = function (snapshotVersion) {
    var timestamp = snapshotVersion.toTimestamp();
    return new DbTimestamp(timestamp.seconds, timestamp.nanoseconds);
  };

  LocalSerializer.prototype.fromDbTimestamp = function (dbTimestamp) {
    var timestamp = new Timestamp(dbTimestamp.seconds, dbTimestamp.nanoseconds);
    return SnapshotVersion.fromTimestamp(timestamp);
  };
  /** Encodes a batch of mutations into a DbMutationBatch for local storage. */


  LocalSerializer.prototype.toDbMutationBatch = function (userId, batch) {
    var _this = this;

    var serializedBaseMutations = batch.baseMutations.map(function (m) {
      return _this.remoteSerializer.toMutation(m);
    });
    var serializedMutations = batch.mutations.map(function (m) {
      return _this.remoteSerializer.toMutation(m);
    });
    return new DbMutationBatch(userId, batch.batchId, batch.localWriteTime.toMillis(), serializedBaseMutations, serializedMutations);
  };
  /** Decodes a DbMutationBatch into a MutationBatch */


  LocalSerializer.prototype.fromDbMutationBatch = function (dbBatch) {
    var _this = this;

    var baseMutations = (dbBatch.baseMutations || []).map(function (m) {
      return _this.remoteSerializer.fromMutation(m);
    });
    var mutations = dbBatch.mutations.map(function (m) {
      return _this.remoteSerializer.fromMutation(m);
    });
    var timestamp = Timestamp.fromMillis(dbBatch.localWriteTimeMs);
    return new MutationBatch(dbBatch.batchId, timestamp, baseMutations, mutations);
  };
  /*
   * Encodes a set of document keys into an array of EncodedResourcePaths.
   */


  LocalSerializer.prototype.toDbResourcePaths = function (keys) {
    var encodedKeys = [];
    keys.forEach(function (key) {
      encodedKeys.push(encode(key.path));
    });
    return encodedKeys;
  };
  /** Decodes an array of EncodedResourcePaths into a set of document keys. */


  LocalSerializer.prototype.fromDbResourcePaths = function (encodedPaths) {
    var keys = documentKeySet();

    for (var _i = 0, encodedPaths_1 = encodedPaths; _i < encodedPaths_1.length; _i++) {
      var documentKey = encodedPaths_1[_i];
      keys = keys.add(new DocumentKey(decode(documentKey)));
    }

    return keys;
  };
  /** Decodes a DbTarget into QueryData */


  LocalSerializer.prototype.fromDbTarget = function (dbTarget) {
    var version = this.fromDbTimestamp(dbTarget.readTime);
    var query;

    if (isDocumentQuery(dbTarget.query)) {
      query = this.remoteSerializer.fromDocumentsTarget(dbTarget.query);
    } else {
      query = this.remoteSerializer.fromQueryTarget(dbTarget.query);
    }

    return new QueryData(query, dbTarget.targetId, QueryPurpose.Listen, dbTarget.lastListenSequenceNumber, version, dbTarget.resumeToken);
  };
  /** Encodes QueryData into a DbTarget for storage locally. */


  LocalSerializer.prototype.toDbTarget = function (queryData) {
    assert(QueryPurpose.Listen === queryData.purpose, 'Only queries with purpose ' + QueryPurpose.Listen + ' may be stored, got ' + queryData.purpose);
    var dbTimestamp = this.toDbTimestamp(queryData.snapshotVersion);
    var queryProto;

    if (queryData.query.isDocumentQuery()) {
      queryProto = this.remoteSerializer.toDocumentsTarget(queryData.query);
    } else {
      queryProto = this.remoteSerializer.toQueryTarget(queryData.query);
    }

    var resumeToken;

    if (queryData.resumeToken instanceof Uint8Array) {
      // TODO(b/78771403): Convert tokens to strings during deserialization
      assert(undefined === 'YES', 'Persisting non-string stream tokens is only supported with mock persistence .');
      resumeToken = queryData.resumeToken.toString();
    } else {
      resumeToken = queryData.resumeToken;
    } // lastListenSequenceNumber is always 0 until we do real GC.


    return new DbTarget(queryData.targetId, queryData.query.canonicalId(), dbTimestamp, resumeToken, queryData.sequenceNumber, queryProto);
  };

  return LocalSerializer;
}();
/**
 * A helper function for figuring out what kind of query has been stored.
 */


function isDocumentQuery(dbQuery) {
  return dbQuery.documents !== undefined;
}
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function bufferEntryComparator(_a, _b) {
  var aSequence = _a[0],
      aIndex = _a[1];
  var bSequence = _b[0],
      bIndex = _b[1];
  var seqCmp = primitiveComparator(aSequence, bSequence);

  if (seqCmp === 0) {
    // This order doesn't matter, but we can bias against churn by sorting
    // entries created earlier as less than newer entries.
    return primitiveComparator(aIndex, bIndex);
  } else {
    return seqCmp;
  }
}
/**
 * Used to calculate the nth sequence number. Keeps a rolling buffer of the
 * lowest n values passed to `addElement`, and finally reports the largest of
 * them in `maxValue`.
 */


var RollingSequenceNumberBuffer =
/** @class */
function () {
  function RollingSequenceNumberBuffer(maxElements) {
    this.maxElements = maxElements;
    this.buffer = new SortedSet(bufferEntryComparator);
    this.previousIndex = 0;
  }

  RollingSequenceNumberBuffer.prototype.nextIndex = function () {
    return ++this.previousIndex;
  };

  RollingSequenceNumberBuffer.prototype.addElement = function (sequenceNumber) {
    var entry = [sequenceNumber, this.nextIndex()];

    if (this.buffer.size < this.maxElements) {
      this.buffer = this.buffer.add(entry);
    } else {
      var highestValue = this.buffer.last();

      if (bufferEntryComparator(entry, highestValue) < 0) {
        this.buffer = this.buffer.delete(highestValue).add(entry);
      }
    }
  };

  Object.defineProperty(RollingSequenceNumberBuffer.prototype, "maxValue", {
    get: function () {
      // Guaranteed to be non-empty. If we decide we are not collecting any
      // sequence numbers, nthSequenceNumber below short-circuits. If we have
      // decided that we are collecting n sequence numbers, it's because n is some
      // percentage of the existing sequence numbers. That means we should never
      // be in a situation where we are collecting sequence numbers but don't
      // actually have any.
      return this.buffer.last()[0];
    },
    enumerable: true,
    configurable: true
  });
  return RollingSequenceNumberBuffer;
}();

var GC_DID_NOT_RUN = {
  didRun: false,
  sequenceNumbersCollected: 0,
  targetsRemoved: 0,
  documentsRemoved: 0
};

var LruParams =
/** @class */
function () {
  function LruParams( // When we attempt to collect, we will only do so if the cache size is greater than this
  // threshold. Passing `COLLECTION_DISABLED` here will cause collection to always be skipped.
  cacheSizeCollectionThreshold, // The percentage of sequence numbers that we will attempt to collect
  percentileToCollect, // A cap on the total number of sequence numbers that will be collected. This prevents
  // us from collecting a huge number of sequence numbers if the cache has grown very large.
  maximumSequenceNumbersToCollect) {
    this.cacheSizeCollectionThreshold = cacheSizeCollectionThreshold;
    this.percentileToCollect = percentileToCollect;
    this.maximumSequenceNumbersToCollect = maximumSequenceNumbersToCollect;
  }

  LruParams.withCacheSize = function (cacheSize) {
    return new LruParams(cacheSize, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
  };

  LruParams.COLLECTION_DISABLED = -1;
  LruParams.MINIMUM_CACHE_SIZE_BYTES = 1 * 1024 * 1024;
  LruParams.DEFAULT_CACHE_SIZE_BYTES = 40 * 1024 * 1024;
  LruParams.DEFAULT_COLLECTION_PERCENTILE = 10;
  LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1000;
  LruParams.DEFAULT = new LruParams(LruParams.DEFAULT_CACHE_SIZE_BYTES, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
  LruParams.DISABLED = new LruParams(LruParams.COLLECTION_DISABLED, 0, 0);
  return LruParams;
}();
/** How long we wait to try running LRU GC after SDK initialization. */


var INITIAL_GC_DELAY_MS = 1 * 60 * 1000;
/** Minimum amount of time between GC checks, after the first one. */

var REGULAR_GC_DELAY_MS = 5 * 60 * 1000;
/**
 * This class is responsible for the scheduling of LRU garbage collection. It handles checking
 * whether or not GC is enabled, as well as which delay to use before the next run.
 */

var LruScheduler =
/** @class */
function () {
  function LruScheduler(garbageCollector, asyncQueue, localStore) {
    this.garbageCollector = garbageCollector;
    this.asyncQueue = asyncQueue;
    this.localStore = localStore;
    this.gcTask = null;
  }

  LruScheduler.prototype.start = function () {
    assert(this.gcTask === null, 'Cannot start an already started LruScheduler');

    if (this.garbageCollector.params.cacheSizeCollectionThreshold !== LruParams.COLLECTION_DISABLED) {
      this.scheduleGC();
    }
  };

  LruScheduler.prototype.stop = function () {
    if (this.gcTask) {
      this.gcTask.cancel();
      this.gcTask = null;
    }
  };

  Object.defineProperty(LruScheduler.prototype, "started", {
    get: function () {
      return this.gcTask !== null;
    },
    enumerable: true,
    configurable: true
  });

  LruScheduler.prototype.scheduleGC = function () {
    var _this = this;

    assert(this.gcTask === null, 'Cannot schedule GC while a task is pending');
    var delay = this.hasRun ? REGULAR_GC_DELAY_MS : INITIAL_GC_DELAY_MS;
    debug('LruGarbageCollector', "Garbage collection scheduled in " + delay + "ms");
    this.gcTask = this.asyncQueue.enqueueAfterDelay(TimerId.LruGarbageCollection, delay, function () {
      _this.gcTask = null;
      _this.hasRun = true;
      return _this.localStore.collectGarbage(_this.garbageCollector).then(function () {
        return _this.scheduleGC();
      }).catch(ignoreIfPrimaryLeaseLoss);
    });
  };

  return LruScheduler;
}();
/** Implements the steps for LRU garbage collection. */


var LruGarbageCollector =
/** @class */
function () {
  function LruGarbageCollector(delegate, params) {
    this.delegate = delegate;
    this.params = params;
  }
  /** Given a percentile of target to collect, returns the number of targets to collect. */


  LruGarbageCollector.prototype.calculateTargetCount = function (txn, percentile) {
    return this.delegate.getSequenceNumberCount(txn).next(function (targetCount) {
      return Math.floor(percentile / 100.0 * targetCount);
    });
  };
  /** Returns the nth sequence number, counting in order from the smallest. */


  LruGarbageCollector.prototype.nthSequenceNumber = function (txn, n) {
    var _this = this;

    if (n === 0) {
      return PersistencePromise.resolve(ListenSequence.INVALID);
    }

    var buffer = new RollingSequenceNumberBuffer(n);
    return this.delegate.forEachTarget(txn, function (target) {
      return buffer.addElement(target.sequenceNumber);
    }).next(function () {
      return _this.delegate.forEachOrphanedDocumentSequenceNumber(txn, function (sequenceNumber) {
        return buffer.addElement(sequenceNumber);
      });
    }).next(function () {
      return buffer.maxValue;
    });
  };
  /**
   * Removes targets with a sequence number equal to or less than the given upper bound, and removes
   * document associations with those targets.
   */


  LruGarbageCollector.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {
    return this.delegate.removeTargets(txn, upperBound, activeTargetIds);
  };
  /**
   * Removes documents that have a sequence number equal to or less than the upper bound and are not
   * otherwise pinned.
   */


  LruGarbageCollector.prototype.removeOrphanedDocuments = function (txn, upperBound) {
    return this.delegate.removeOrphanedDocuments(txn, upperBound);
  };

  LruGarbageCollector.prototype.collect = function (txn, activeTargetIds) {
    var _this = this;

    if (this.params.cacheSizeCollectionThreshold === LruParams.COLLECTION_DISABLED) {
      debug('LruGarbageCollector', 'Garbage collection skipped; disabled');
      return PersistencePromise.resolve(GC_DID_NOT_RUN);
    }

    return this.getCacheSize(txn).next(function (cacheSize) {
      if (cacheSize < _this.params.cacheSizeCollectionThreshold) {
        debug('LruGarbageCollector', "Garbage collection skipped; Cache size " + cacheSize + " " + ("is lower than threshold " + _this.params.cacheSizeCollectionThreshold));
        return GC_DID_NOT_RUN;
      } else {
        return _this.runGarbageCollection(txn, activeTargetIds);
      }
    });
  };

  LruGarbageCollector.prototype.getCacheSize = function (txn) {
    return this.delegate.getCacheSize(txn);
  };

  LruGarbageCollector.prototype.runGarbageCollection = function (txn, activeTargetIds) {
    var _this = this;

    var upperBoundSequenceNumber;
    var sequenceNumbersToCollect, targetsRemoved; // Timestamps for various pieces of the process

    var startTs, countedTargetsTs, foundUpperBoundTs, removedTargetsTs, removedDocumentsTs;
    startTs = Date.now();
    return this.calculateTargetCount(txn, this.params.percentileToCollect).next(function (sequenceNumbers) {
      // Cap at the configured max
      if (sequenceNumbers > _this.params.maximumSequenceNumbersToCollect) {
        debug('LruGarbageCollector', 'Capping sequence numbers to collect down ' + ("to the maximum of " + _this.params.maximumSequenceNumbersToCollect + " ") + ("from " + sequenceNumbers));
        sequenceNumbersToCollect = _this.params.maximumSequenceNumbersToCollect;
      } else {
        sequenceNumbersToCollect = sequenceNumbers;
      }

      countedTargetsTs = Date.now();
      return _this.nthSequenceNumber(txn, sequenceNumbersToCollect);
    }).next(function (upperBound) {
      upperBoundSequenceNumber = upperBound;
      foundUpperBoundTs = Date.now();
      return _this.removeTargets(txn, upperBoundSequenceNumber, activeTargetIds);
    }).next(function (numTargetsRemoved) {
      targetsRemoved = numTargetsRemoved;
      removedTargetsTs = Date.now();
      return _this.removeOrphanedDocuments(txn, upperBoundSequenceNumber);
    }).next(function (documentsRemoved) {
      removedDocumentsTs = Date.now();

      if (getLogLevel() <= LogLevel.DEBUG) {
        var desc = 'LRU Garbage Collection\n' + ("\tCounted targets in " + (countedTargetsTs - startTs) + "ms\n") + ("\tDetermined least recently used " + sequenceNumbersToCollect + " in ") + (foundUpperBoundTs - countedTargetsTs + "ms\n") + ("\tRemoved " + targetsRemoved + " targets in ") + (removedTargetsTs - foundUpperBoundTs + "ms\n") + ("\tRemoved " + documentsRemoved + " documents in ") + (removedDocumentsTs - removedTargetsTs + "ms\n") + ("Total Duration: " + (removedDocumentsTs - startTs) + "ms");
        debug('LruGarbageCollector', desc);
      }

      return PersistencePromise.resolve({
        didRun: true,
        sequenceNumbersCollected: sequenceNumbersToCollect,
        targetsRemoved: targetsRemoved,
        documentsRemoved: documentsRemoved
      });
    });
  };

  return LruGarbageCollector;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Opaque interface representing a persistence transaction.
 *
 * When you call Persistence.runTransaction(), it will create a transaction and
 * pass it to your callback. You then pass it to any method that operates
 * on persistence.
 */


var PersistenceTransaction =
/** @class */
function () {
  function PersistenceTransaction() {}

  return PersistenceTransaction;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$2 = 'IndexedDbPersistence';
/**
 * Oldest acceptable age in milliseconds for client metadata before the client
 * is considered inactive and its associated data (such as the remote document
 * cache changelog) is garbage collected.
 */

var MAX_CLIENT_AGE_MS = 30 * 60 * 1000; // 30 minutes

/**
 * Oldest acceptable metadata age for clients that may participate in the
 * primary lease election. Clients that have not updated their client metadata
 * within 5 seconds are not eligible to receive a primary lease.
 */

var MAX_PRIMARY_ELIGIBLE_AGE_MS = 5000;
/**
 * The interval at which clients will update their metadata, including
 * refreshing their primary lease if held or potentially trying to acquire it if
 * not held.
 *
 * Primary clients may opportunistically refresh their metadata earlier
 * if they're already performing an IndexedDB operation.
 */

var CLIENT_METADATA_REFRESH_INTERVAL_MS = 4000;
/** User-facing error when the primary lease is required but not available. */

var PRIMARY_LEASE_LOST_ERROR_MSG = 'The current tab is not in the required state to perform this operation. ' + 'It might be necessary to refresh the browser tab.';
var PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG = 'Another tab has exclusive access to the persistence layer. ' + 'To allow shared access, make sure to invoke ' + '`enablePersistence()` with `experimentalTabSynchronization:true` in all tabs.';
var UNSUPPORTED_PLATFORM_ERROR_MSG = 'This platform is either missing' + ' IndexedDB or is known to have an incomplete implementation. Offline' + ' persistence has been disabled.'; // The format of the LocalStorage key that stores zombied client is:
//     firestore_zombie_<persistence_prefix>_<instance_key>

var ZOMBIED_CLIENTS_KEY_PREFIX = 'firestore_zombie';

var IndexedDbTransaction =
/** @class */
function (_super) {
  tslib_1.__extends(IndexedDbTransaction, _super);

  function IndexedDbTransaction(simpleDbTransaction, currentSequenceNumber) {
    var _this = _super.call(this) || this;

    _this.simpleDbTransaction = simpleDbTransaction;
    _this.currentSequenceNumber = currentSequenceNumber;
    return _this;
  }

  return IndexedDbTransaction;
}(PersistenceTransaction);

var IndexedDbPersistence =
/** @class */
function () {
  // Note that `multiClientParams` must be present to enable multi-client support while multi-tab
  // is still experimental. When multi-client is switched to always on, `multiClientParams` will
  // no longer be optional.
  function IndexedDbPersistence(persistenceKey, clientId, platform, queue, serializer, lruParams, multiClientParams) {
    this.persistenceKey = persistenceKey;
    this.clientId = clientId;
    this.queue = queue;
    this.multiClientParams = multiClientParams;
    this._started = false;
    this.isPrimary = false;
    this.networkEnabled = true;
    this.inForeground = false;
    /** The last time we garbage collected the Remote Document Changelog. */

    this.lastGarbageCollectionTime = Number.NEGATIVE_INFINITY;
    /** A listener to notify on primary state changes. */

    this.primaryStateListener = function (_) {
      return Promise.resolve();
    };

    if (!IndexedDbPersistence.isAvailable()) {
      throw new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);
    }

    this.referenceDelegate = new IndexedDbLruDelegate(this, lruParams);
    this.dbName = persistenceKey + IndexedDbPersistence.MAIN_DATABASE;
    this.serializer = new LocalSerializer(serializer);
    this.document = platform.document;
    this.allowTabSynchronization = multiClientParams !== undefined;
    this.queryCache = new IndexedDbQueryCache(this.referenceDelegate, this.serializer);
    this.indexManager = new IndexedDbIndexManager();
    this.remoteDocumentCache = new IndexedDbRemoteDocumentCache(this.serializer, this.indexManager,
    /*keepDocumentChangeLog=*/
    this.allowTabSynchronization);

    if (platform.window && platform.window.localStorage) {
      this.window = platform.window;
      this.webStorage = this.window.localStorage;
    } else {
      throw new FirestoreError(Code.UNIMPLEMENTED, 'IndexedDB persistence is only available on platforms that support LocalStorage.');
    }
  }

  IndexedDbPersistence.getStore = function (txn, store) {
    if (txn instanceof IndexedDbTransaction) {
      return SimpleDb.getStore(txn.simpleDbTransaction, store);
    } else {
      throw fail('IndexedDbPersistence must use instances of IndexedDbTransaction');
    }
  };

  IndexedDbPersistence.createIndexedDbPersistence = function (persistenceKey, clientId, platform, queue, serializer, lruParams) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var persistence;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            persistence = new IndexedDbPersistence(persistenceKey, clientId, platform, queue, serializer, lruParams);
            return [4
            /*yield*/
            , persistence.start()];

          case 1:
            _a.sent();

            return [2
            /*return*/
            , persistence];
        }
      });
    });
  };

  IndexedDbPersistence.createMultiClientIndexedDbPersistence = function (persistenceKey, clientId, platform, queue, serializer, lruParams, multiClientParams) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var persistence;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            persistence = new IndexedDbPersistence(persistenceKey, clientId, platform, queue, serializer, lruParams, multiClientParams);
            return [4
            /*yield*/
            , persistence.start()];

          case 1:
            _a.sent();

            return [2
            /*return*/
            , persistence];
        }
      });
    });
  };
  /**
   * Attempt to start IndexedDb persistence.
   *
   * @return {Promise<void>} Whether persistence was enabled.
   */


  IndexedDbPersistence.prototype.start = function () {
    var _this = this;

    assert(!this.started, 'IndexedDbPersistence double-started!');
    assert(this.window !== null, "Expected 'window' to be defined");
    return SimpleDb.openOrCreate(this.dbName, SCHEMA_VERSION, new SchemaConverter(this.serializer)).then(function (db) {
      _this.simpleDb = db; // NOTE: This is expected to fail sometimes (in the case of another tab already
      // having the persistence lock), so it's the first thing we should do.

      return _this.updateClientMetadataAndTryBecomePrimary();
    }).then(function () {
      _this.attachVisibilityHandler();

      _this.attachWindowUnloadHook();

      _this.scheduleClientMetadataAndPrimaryLeaseRefreshes();

      return _this.startRemoteDocumentCache();
    }).then(function () {
      return _this.simpleDb.runTransaction('readonly', [DbTargetGlobal.store], function (txn) {
        return getHighestListenSequenceNumber(txn).next(function (highestListenSequenceNumber) {
          var sequenceNumberSyncer = _this.multiClientParams ? _this.multiClientParams.sequenceNumberSyncer : undefined;
          _this.listenSequence = new ListenSequence(highestListenSequenceNumber, sequenceNumberSyncer);
        });
      });
    }).then(function () {
      _this._started = true;
    }).catch(function (reason) {
      _this.simpleDb && _this.simpleDb.close();
      return Promise.reject(reason);
    });
  };

  IndexedDbPersistence.prototype.startRemoteDocumentCache = function () {
    var _this = this;

    return this.simpleDb.runTransaction('readonly', ALL_STORES, function (txn) {
      return _this.remoteDocumentCache.start(txn);
    });
  };

  IndexedDbPersistence.prototype.setPrimaryStateListener = function (primaryStateListener) {
    var _this = this;

    this.primaryStateListener = function (primaryState) {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
          if (this.started) {
            return [2
            /*return*/
            , primaryStateListener(primaryState)];
          }

          return [2
          /*return*/
          ];
        });
      });
    };

    return primaryStateListener(this.isPrimary);
  };

  IndexedDbPersistence.prototype.setNetworkEnabled = function (networkEnabled) {
    var _this = this;

    if (this.networkEnabled !== networkEnabled) {
      this.networkEnabled = networkEnabled; // Schedule a primary lease refresh for immediate execution. The eventual
      // lease update will be propagated via `primaryStateListener`.

      this.queue.enqueueAndForget(function () {
        return tslib_1.__awaiter(_this, void 0, void 0, function () {
          return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                if (!this.started) return [3
                /*break*/
                , 2];
                return [4
                /*yield*/
                , this.updateClientMetadataAndTryBecomePrimary()];

              case 1:
                _a.sent();

                _a.label = 2;

              case 2:
                return [2
                /*return*/
                ];
            }
          });
        });
      });
    }
  };
  /**
   * Updates the client metadata in IndexedDb and attempts to either obtain or
   * extend the primary lease for the local client. Asynchronously notifies the
   * primary state listener if the client either newly obtained or released its
   * primary lease.
   */


  IndexedDbPersistence.prototype.updateClientMetadataAndTryBecomePrimary = function () {
    var _this = this;

    return this.simpleDb.runTransaction('readwrite', ALL_STORES, function (txn) {
      var metadataStore = clientMetadataStore(txn);
      return metadataStore.put(new DbClientMetadata(_this.clientId, Date.now(), _this.networkEnabled, _this.inForeground, _this.remoteDocumentCache.lastProcessedDocumentChangeId)).next(function () {
        if (_this.isPrimary) {
          return _this.verifyPrimaryLease(txn).next(function (success) {
            if (!success) {
              _this.isPrimary = false;

              _this.queue.enqueueAndForget(function () {
                return _this.primaryStateListener(false);
              });
            }
          });
        }
      }).next(function () {
        return _this.canActAsPrimary(txn);
      }).next(function (canActAsPrimary) {
        var wasPrimary = _this.isPrimary;
        _this.isPrimary = canActAsPrimary;

        if (wasPrimary !== _this.isPrimary) {
          _this.queue.enqueueAndForget(function () {
            return _this.primaryStateListener(_this.isPrimary);
          });
        }

        if (wasPrimary && !_this.isPrimary) {
          return _this.releasePrimaryLeaseIfHeld(txn);
        } else if (_this.isPrimary) {
          return _this.acquireOrExtendPrimaryLease(txn);
        }
      });
    });
  };

  IndexedDbPersistence.prototype.verifyPrimaryLease = function (txn) {
    var _this = this;

    var store = primaryClientStore(txn);
    return store.get(DbPrimaryClient.key).next(function (primaryClient) {
      return PersistencePromise.resolve(_this.isLocalClient(primaryClient));
    });
  };

  IndexedDbPersistence.prototype.removeClientMetadata = function (txn) {
    var metadataStore = clientMetadataStore(txn);
    return metadataStore.delete(this.clientId);
  };
  /**
   * If the garbage collection threshold has passed, prunes the
   * RemoteDocumentChanges and the ClientMetadata store based on the last update
   * time of all clients.
   */


  IndexedDbPersistence.prototype.maybeGarbageCollectMultiClientState = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var activeClients_1, inactiveClients_1;

      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!(this.isPrimary && !this.isWithinAge(this.lastGarbageCollectionTime, MAX_CLIENT_AGE_MS))) return [3
            /*break*/
            , 2];
            this.lastGarbageCollectionTime = Date.now();
            inactiveClients_1 = [];
            return [4
            /*yield*/
            , this.runTransaction('maybeGarbageCollectMultiClientState', 'readwrite-primary', function (txn) {
              var metadataStore = IndexedDbPersistence.getStore(txn, DbClientMetadata.store);
              return metadataStore.loadAll().next(function (existingClients) {
                activeClients_1 = _this.filterActiveClients(existingClients, MAX_CLIENT_AGE_MS);
                inactiveClients_1 = existingClients.filter(function (client) {
                  return activeClients_1.indexOf(client) === -1;
                });
              }).next(function () {
                // Delete metadata for clients that are no longer considered active.
                return PersistencePromise.forEach(inactiveClients_1, function (inactiveClient) {
                  return metadataStore.delete(inactiveClient.clientId);
                });
              }).next(function () {
                // Retrieve the minimum change ID from the set of active clients.
                // The primary client doesn't read from the document change log,
                // and hence we exclude it when we determine the minimum
                // `lastProcessedDocumentChangeId`.
                activeClients_1 = activeClients_1.filter(function (client) {
                  return client.clientId !== _this.clientId;
                });

                if (activeClients_1.length > 0) {
                  var processedChangeIds = activeClients_1.map(function (client) {
                    return client.lastProcessedDocumentChangeId || 0;
                  });
                  var oldestChangeId = Math.min.apply(Math, processedChangeIds);
                  return _this.remoteDocumentCache.removeDocumentChangesThroughChangeId(txn, oldestChangeId);
                }
              });
            })];

          case 1:
            _a.sent(); // Delete potential leftover entries that may continue to mark the
            // inactive clients as zombied in LocalStorage.
            // Ideally we'd delete the IndexedDb and LocalStorage zombie entries for
            // the client atomically, but we can't. So we opt to delete the IndexedDb
            // entries first to avoid potentially reviving a zombied client.


            inactiveClients_1.forEach(function (inactiveClient) {
              _this.window.localStorage.removeItem(_this.zombiedClientLocalStorageKey(inactiveClient.clientId));
            });
            _a.label = 2;

          case 2:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Schedules a recurring timer to update the client metadata and to either
   * extend or acquire the primary lease if the client is eligible.
   */


  IndexedDbPersistence.prototype.scheduleClientMetadataAndPrimaryLeaseRefreshes = function () {
    var _this = this;

    this.clientMetadataRefresher = this.queue.enqueueAfterDelay(TimerId.ClientMetadataRefresh, CLIENT_METADATA_REFRESH_INTERVAL_MS, function () {
      return _this.updateClientMetadataAndTryBecomePrimary().then(function () {
        return _this.maybeGarbageCollectMultiClientState();
      }).then(function () {
        return _this.scheduleClientMetadataAndPrimaryLeaseRefreshes();
      });
    });
  };
  /** Checks whether `client` is the local client. */


  IndexedDbPersistence.prototype.isLocalClient = function (client) {
    return client ? client.ownerId === this.clientId : false;
  };
  /**
   * Evaluate the state of all active clients and determine whether the local
   * client is or can act as the holder of the primary lease. Returns whether
   * the client is eligible for the lease, but does not actually acquire it.
   * May return 'false' even if there is no active leaseholder and another
   * (foreground) client should become leaseholder instead.
   */


  IndexedDbPersistence.prototype.canActAsPrimary = function (txn) {
    var _this = this;

    var store = primaryClientStore(txn);
    return store.get(DbPrimaryClient.key).next(function (currentPrimary) {
      var currentLeaseIsValid = currentPrimary !== null && _this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) && !_this.isClientZombied(currentPrimary.ownerId); // A client is eligible for the primary lease if:
      // - its network is enabled and the client's tab is in the foreground.
      // - its network is enabled and no other client's tab is in the
      //   foreground.
      // - every clients network is disabled and the client's tab is in the
      //   foreground.
      // - every clients network is disabled and no other client's tab is in
      //   the foreground.

      if (currentLeaseIsValid) {
        if (_this.isLocalClient(currentPrimary) && _this.networkEnabled) {
          return true;
        }

        if (!_this.isLocalClient(currentPrimary)) {
          if (!currentPrimary.allowTabSynchronization) {
            // Fail the `canActAsPrimary` check if the current leaseholder has
            // not opted into multi-tab synchronization. If this happens at
            // client startup, we reject the Promise returned by
            // `enablePersistence()` and the user can continue to use Firestore
            // with in-memory persistence.
            // If this fails during a lease refresh, we will instead block the
            // AsyncQueue from executing further operations. Note that this is
            // acceptable since mixing & matching different `synchronizeTabs`
            // settings is not supported.
            //
            // TODO(b/114226234): Remove this check when `synchronizeTabs` can
            // no longer be turned off.
            throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);
          }

          return false;
        }
      }

      if (_this.networkEnabled && _this.inForeground) {
        return true;
      }

      return clientMetadataStore(txn).loadAll().next(function (existingClients) {
        // Process all existing clients and determine whether at least one of
        // them is better suited to obtain the primary lease.
        var preferredCandidate = _this.filterActiveClients(existingClients, MAX_PRIMARY_ELIGIBLE_AGE_MS).find(function (otherClient) {
          if (_this.clientId !== otherClient.clientId) {
            var otherClientHasBetterNetworkState = !_this.networkEnabled && otherClient.networkEnabled;
            var otherClientHasBetterVisibility = !_this.inForeground && otherClient.inForeground;
            var otherClientHasSameNetworkState = _this.networkEnabled === otherClient.networkEnabled;

            if (otherClientHasBetterNetworkState || otherClientHasBetterVisibility && otherClientHasSameNetworkState) {
              return true;
            }
          }

          return false;
        });

        return preferredCandidate === undefined;
      });
    }).next(function (canActAsPrimary) {
      if (_this.isPrimary !== canActAsPrimary) {
        debug(LOG_TAG$2, "Client " + (canActAsPrimary ? 'is' : 'is not') + " eligible for a primary lease.");
      }

      return canActAsPrimary;
    });
  };

  IndexedDbPersistence.prototype.shutdown = function (deleteData) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            // The shutdown() operations are idempotent and can be called even when
            // start() aborted (e.g. because it couldn't acquire the persistence lease).
            this._started = false;
            this.markClientZombied();

            if (this.clientMetadataRefresher) {
              this.clientMetadataRefresher.cancel();
            }

            this.detachVisibilityHandler();
            this.detachWindowUnloadHook();
            return [4
            /*yield*/
            , this.simpleDb.runTransaction('readwrite', [DbPrimaryClient.store, DbClientMetadata.store], function (txn) {
              return _this.releasePrimaryLeaseIfHeld(txn).next(function () {
                return _this.removeClientMetadata(txn);
              });
            })];

          case 1:
            _a.sent();

            this.simpleDb.close(); // Remove the entry marking the client as zombied from LocalStorage since
            // we successfully deleted its metadata from IndexedDb.

            this.removeClientZombiedEntry();
            if (!deleteData) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , SimpleDb.delete(this.dbName)];

          case 2:
            _a.sent();

            _a.label = 3;

          case 3:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns clients that are not zombied and have an updateTime within the
   * provided threshold.
   */


  IndexedDbPersistence.prototype.filterActiveClients = function (clients, activityThresholdMs) {
    var _this = this;

    return clients.filter(function (client) {
      return _this.isWithinAge(client.updateTimeMs, activityThresholdMs) && !_this.isClientZombied(client.clientId);
    });
  };

  IndexedDbPersistence.prototype.getActiveClients = function () {
    var _this = this;

    return this.simpleDb.runTransaction('readonly', [DbClientMetadata.store], function (txn) {
      return clientMetadataStore(txn).loadAll().next(function (clients) {
        return _this.filterActiveClients(clients, MAX_CLIENT_AGE_MS).map(function (clientMetadata) {
          return clientMetadata.clientId;
        });
      });
    });
  };

  Object.defineProperty(IndexedDbPersistence.prototype, "started", {
    get: function () {
      return this._started;
    },
    enumerable: true,
    configurable: true
  });

  IndexedDbPersistence.prototype.getMutationQueue = function (user) {
    assert(this.started, 'Cannot initialize MutationQueue before persistence is started.');
    return IndexedDbMutationQueue.forUser(user, this.serializer, this.indexManager, this.referenceDelegate);
  };

  IndexedDbPersistence.prototype.getQueryCache = function () {
    assert(this.started, 'Cannot initialize QueryCache before persistence is started.');
    return this.queryCache;
  };

  IndexedDbPersistence.prototype.getRemoteDocumentCache = function () {
    assert(this.started, 'Cannot initialize RemoteDocumentCache before persistence is started.');
    return this.remoteDocumentCache;
  };

  IndexedDbPersistence.prototype.getIndexManager = function () {
    assert(this.started, 'Cannot initialize IndexManager before persistence is started.');
    return this.indexManager;
  };

  IndexedDbPersistence.prototype.runTransaction = function (action, mode, transactionOperation) {
    var _this = this;

    debug(LOG_TAG$2, 'Starting transaction:', action); // Do all transactions as readwrite against all object stores, since we
    // are the only reader/writer.

    return this.simpleDb.runTransaction(mode === 'readonly' ? 'readonly' : 'readwrite', ALL_STORES, function (simpleDbTxn) {
      if (mode === 'readwrite-primary') {
        // While we merely verify that we have (or can acquire) the lease
        // immediately, we wait to extend the primary lease until after
        // executing transactionOperation(). This ensures that even if the
        // transactionOperation takes a long time, we'll use a recent
        // leaseTimestampMs in the extended (or newly acquired) lease.
        return _this.verifyPrimaryLease(simpleDbTxn).next(function (success) {
          if (!success) {
            error("Failed to obtain primary lease for action '" + action + "'.");
            _this.isPrimary = false;

            _this.queue.enqueueAndForget(function () {
              return _this.primaryStateListener(false);
            });

            throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_LOST_ERROR_MSG);
          }

          return transactionOperation(new IndexedDbTransaction(simpleDbTxn, _this.listenSequence.next()));
        }).next(function (result) {
          return _this.acquireOrExtendPrimaryLease(simpleDbTxn).next(function () {
            return result;
          });
        });
      } else {
        return _this.verifyAllowTabSynchronization(simpleDbTxn).next(function () {
          return transactionOperation(new IndexedDbTransaction(simpleDbTxn, _this.listenSequence.next()));
        });
      }
    });
  };
  /**
   * Verifies that the current tab is the primary leaseholder or alternatively
   * that the leaseholder has opted into multi-tab synchronization.
   */
  // TODO(b/114226234): Remove this check when `synchronizeTabs` can no longer
  // be turned off.


  IndexedDbPersistence.prototype.verifyAllowTabSynchronization = function (txn) {
    var _this = this;

    var store = primaryClientStore(txn);
    return store.get(DbPrimaryClient.key).next(function (currentPrimary) {
      var currentLeaseIsValid = currentPrimary !== null && _this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) && !_this.isClientZombied(currentPrimary.ownerId);

      if (currentLeaseIsValid && !_this.isLocalClient(currentPrimary)) {
        if (!currentPrimary.allowTabSynchronization) {
          throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);
        }
      }
    });
  };
  /**
   * Obtains or extends the new primary lease for the local client. This
   * method does not verify that the client is eligible for this lease.
   */


  IndexedDbPersistence.prototype.acquireOrExtendPrimaryLease = function (txn) {
    var newPrimary = new DbPrimaryClient(this.clientId, this.allowTabSynchronization, Date.now());
    return primaryClientStore(txn).put(DbPrimaryClient.key, newPrimary);
  };

  IndexedDbPersistence.isAvailable = function () {
    return SimpleDb.isAvailable();
  };
  /**
   * Generates a string used as a prefix when storing data in IndexedDB and
   * LocalStorage.
   */


  IndexedDbPersistence.buildStoragePrefix = function (databaseInfo) {
    // Use two different prefix formats:
    //
    //   * firestore / persistenceKey / projectID . databaseID / ...
    //   * firestore / persistenceKey / projectID / ...
    //
    // projectIDs are DNS-compatible names and cannot contain dots
    // so there's no danger of collisions.
    var database = databaseInfo.databaseId.projectId;

    if (!databaseInfo.databaseId.isDefaultDatabase) {
      database += '.' + databaseInfo.databaseId.database;
    }

    return 'firestore/' + databaseInfo.persistenceKey + '/' + database + '/';
  };
  /** Checks the primary lease and removes it if we are the current primary. */


  IndexedDbPersistence.prototype.releasePrimaryLeaseIfHeld = function (txn) {
    var _this = this;

    var store = primaryClientStore(txn);
    return store.get(DbPrimaryClient.key).next(function (primaryClient) {
      if (_this.isLocalClient(primaryClient)) {
        debug(LOG_TAG$2, 'Releasing primary lease.');
        return store.delete(DbPrimaryClient.key);
      } else {
        return PersistencePromise.resolve();
      }
    });
  };
  /** Verifies that `updateTimeMs` is within `maxAgeMs`. */


  IndexedDbPersistence.prototype.isWithinAge = function (updateTimeMs, maxAgeMs) {
    var now = Date.now();
    var minAcceptable = now - maxAgeMs;
    var maxAcceptable = now;

    if (updateTimeMs < minAcceptable) {
      return false;
    } else if (updateTimeMs > maxAcceptable) {
      error("Detected an update time that is in the future: " + updateTimeMs + " > " + maxAcceptable);
      return false;
    }

    return true;
  };

  IndexedDbPersistence.prototype.attachVisibilityHandler = function () {
    var _this = this;

    if (this.document !== null && typeof this.document.addEventListener === 'function') {
      this.documentVisibilityHandler = function () {
        _this.queue.enqueueAndForget(function () {
          _this.inForeground = _this.document.visibilityState === 'visible';
          return _this.updateClientMetadataAndTryBecomePrimary();
        });
      };

      this.document.addEventListener('visibilitychange', this.documentVisibilityHandler);
      this.inForeground = this.document.visibilityState === 'visible';
    }
  };

  IndexedDbPersistence.prototype.detachVisibilityHandler = function () {
    if (this.documentVisibilityHandler) {
      assert(this.document !== null && typeof this.document.addEventListener === 'function', "Expected 'document.addEventListener' to be a function");
      this.document.removeEventListener('visibilitychange', this.documentVisibilityHandler);
      this.documentVisibilityHandler = null;
    }
  };
  /**
   * Attaches a window.unload handler that will synchronously write our
   * clientId to a "zombie client id" location in LocalStorage. This can be used
   * by tabs trying to acquire the primary lease to determine that the lease
   * is no longer valid even if the timestamp is recent. This is particularly
   * important for the refresh case (so the tab correctly re-acquires the
   * primary lease). LocalStorage is used for this rather than IndexedDb because
   * it is a synchronous API and so can be used reliably from  an unload
   * handler.
   */


  IndexedDbPersistence.prototype.attachWindowUnloadHook = function () {
    var _this = this;

    if (typeof this.window.addEventListener === 'function') {
      this.windowUnloadHandler = function () {
        // Note: In theory, this should be scheduled on the AsyncQueue since it
        // accesses internal state. We execute this code directly during shutdown
        // to make sure it gets a chance to run.
        _this.markClientZombied();

        _this.queue.enqueueAndForget(function () {
          // Attempt graceful shutdown (including releasing our primary lease),
          // but there's no guarantee it will complete.
          return _this.shutdown();
        });
      };

      this.window.addEventListener('unload', this.windowUnloadHandler);
    }
  };

  IndexedDbPersistence.prototype.detachWindowUnloadHook = function () {
    if (this.windowUnloadHandler) {
      assert(typeof this.window.removeEventListener === 'function', "Expected 'window.removeEventListener' to be a function");
      this.window.removeEventListener('unload', this.windowUnloadHandler);
      this.windowUnloadHandler = null;
    }
  };
  /**
   * Returns whether a client is "zombied" based on its LocalStorage entry.
   * Clients become zombied when their tab closes without running all of the
   * cleanup logic in `shutdown()`.
   */


  IndexedDbPersistence.prototype.isClientZombied = function (clientId) {
    try {
      var isZombied = this.webStorage.getItem(this.zombiedClientLocalStorageKey(clientId)) !== null;
      debug(LOG_TAG$2, "Client '" + clientId + "' " + (isZombied ? 'is' : 'is not') + " zombied in LocalStorage");
      return isZombied;
    } catch (e) {
      // Gracefully handle if LocalStorage isn't working.
      error(LOG_TAG$2, 'Failed to get zombied client id.', e);
      return false;
    }
  };
  /**
   * Record client as zombied (a client that had its tab closed). Zombied
   * clients are ignored during primary tab selection.
   */


  IndexedDbPersistence.prototype.markClientZombied = function () {
    try {
      this.webStorage.setItem(this.zombiedClientLocalStorageKey(this.clientId), String(Date.now()));
    } catch (e) {
      // Gracefully handle if LocalStorage isn't available / working.
      error('Failed to set zombie client id.', e);
    }
  };
  /** Removes the zombied client entry if it exists. */


  IndexedDbPersistence.prototype.removeClientZombiedEntry = function () {
    try {
      this.webStorage.removeItem(this.zombiedClientLocalStorageKey(this.clientId));
    } catch (e) {// Ignore
    }
  };

  IndexedDbPersistence.prototype.zombiedClientLocalStorageKey = function (clientId) {
    return ZOMBIED_CLIENTS_KEY_PREFIX + "_" + this.persistenceKey + "_" + clientId;
  };
  /**
   * The name of the main (and currently only) IndexedDB database. this name is
   * appended to the prefix provided to the IndexedDbPersistence constructor.
   */


  IndexedDbPersistence.MAIN_DATABASE = 'main';
  return IndexedDbPersistence;
}();

function isPrimaryLeaseLostError(err) {
  return err.code === Code.FAILED_PRECONDITION && err.message === PRIMARY_LEASE_LOST_ERROR_MSG;
}
/**
 * Verifies the error thrown by a LocalStore operation. If a LocalStore
 * operation fails because the primary lease has been taken by another client,
 * we ignore the error (the persistence layer will immediately call
 * `applyPrimaryLease` to propagate the primary state change). All other errors
 * are re-thrown.
 *
 * @param err An error returned by a LocalStore operation.
 * @return A Promise that resolves after we recovered, or the original error.
 */


function ignoreIfPrimaryLeaseLoss(err) {
  return tslib_1.__awaiter(this, void 0, void 0, function () {
    return tslib_1.__generator(this, function (_a) {
      if (isPrimaryLeaseLostError(err)) {
        debug(LOG_TAG$2, 'Unexpectedly lost primary lease');
      } else {
        throw err;
      }

      return [2
      /*return*/
      ];
    });
  });
}
/**
 * Helper to get a typed SimpleDbStore for the primary client object store.
 */


function primaryClientStore(txn) {
  return txn.store(DbPrimaryClient.store);
}
/**
 * Helper to get a typed SimpleDbStore for the client metadata object store.
 */


function clientMetadataStore(txn) {
  return txn.store(DbClientMetadata.store);
}
/** Provides LRU functionality for IndexedDB persistence. */


var IndexedDbLruDelegate =
/** @class */
function () {
  function IndexedDbLruDelegate(db, params) {
    this.db = db;
    this.garbageCollector = new LruGarbageCollector(this, params);
  }

  IndexedDbLruDelegate.prototype.getSequenceNumberCount = function (txn) {
    var docCountPromise = this.orphanedDocmentCount(txn);
    var targetCountPromise = this.db.getQueryCache().getQueryCount(txn);
    return targetCountPromise.next(function (targetCount) {
      return docCountPromise.next(function (docCount) {
        return targetCount + docCount;
      });
    });
  };

  IndexedDbLruDelegate.prototype.orphanedDocmentCount = function (txn) {
    var orphanedCount = 0;
    return this.forEachOrphanedDocumentSequenceNumber(txn, function (_) {
      orphanedCount++;
    }).next(function () {
      return orphanedCount;
    });
  };

  IndexedDbLruDelegate.prototype.forEachTarget = function (txn, f) {
    return this.db.getQueryCache().forEachTarget(txn, f);
  };

  IndexedDbLruDelegate.prototype.forEachOrphanedDocumentSequenceNumber = function (txn, f) {
    return this.forEachOrphanedDocument(txn, function (docKey, sequenceNumber) {
      return f(sequenceNumber);
    });
  };

  IndexedDbLruDelegate.prototype.setInMemoryPins = function (inMemoryPins) {
    this.inMemoryPins = inMemoryPins;
  };

  IndexedDbLruDelegate.prototype.addReference = function (txn, key) {
    return writeSentinelKey(txn, key);
  };

  IndexedDbLruDelegate.prototype.removeReference = function (txn, key) {
    return writeSentinelKey(txn, key);
  };

  IndexedDbLruDelegate.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {
    return this.db.getQueryCache().removeTargets(txn, upperBound, activeTargetIds);
  };

  IndexedDbLruDelegate.prototype.removeMutationReference = function (txn, key) {
    return writeSentinelKey(txn, key);
  };
  /**
   * Returns true if anything would prevent this document from being garbage
   * collected, given that the document in question is not present in any
   * targets and has a sequence number less than or equal to the upper bound for
   * the collection run.
   */


  IndexedDbLruDelegate.prototype.isPinned = function (txn, docKey) {
    if (this.inMemoryPins.containsKey(docKey)) {
      return PersistencePromise.resolve(true);
    } else {
      return mutationQueuesContainKey(txn, docKey);
    }
  };

  IndexedDbLruDelegate.prototype.removeOrphanedDocuments = function (txn, upperBound) {
    var _this = this;

    var count = 0;
    var bytesRemoved = 0;
    var promises = [];
    var iteration = this.forEachOrphanedDocument(txn, function (docKey, sequenceNumber) {
      if (sequenceNumber <= upperBound) {
        var p = _this.isPinned(txn, docKey).next(function (isPinned) {
          if (!isPinned) {
            count++;
            return _this.removeOrphanedDocument(txn, docKey).next(function (documentBytes) {
              bytesRemoved += documentBytes;
            });
          }
        });

        promises.push(p);
      }
    }); // Wait for iteration first to make sure we have a chance to add all of the
    // removal promises to the array.

    return iteration.next(function () {
      return PersistencePromise.waitFor(promises);
    }).next(function () {
      return _this.db.getRemoteDocumentCache().updateSize(txn, -bytesRemoved);
    }).next(function () {
      return count;
    });
  };
  /**
   * Clears a document from the cache. The document is assumed to be orphaned, so target-document
   * associations are not queried. We remove it from the remote document cache, as well as remove
   * its sentinel row.
   */


  IndexedDbLruDelegate.prototype.removeOrphanedDocument = function (txn, docKey) {
    var totalBytesRemoved = 0;
    var documentCache = this.db.getRemoteDocumentCache();
    return PersistencePromise.waitFor([documentTargetStore(txn).delete(sentinelKey$1(docKey)), documentCache.removeEntry(txn, docKey).next(function (bytesRemoved) {
      totalBytesRemoved += bytesRemoved;
    })]).next(function () {
      return totalBytesRemoved;
    });
  };

  IndexedDbLruDelegate.prototype.removeTarget = function (txn, queryData) {
    var updated = queryData.copy({
      sequenceNumber: txn.currentSequenceNumber
    });
    return this.db.getQueryCache().updateQueryData(txn, updated);
  };

  IndexedDbLruDelegate.prototype.updateLimboDocument = function (txn, key) {
    return writeSentinelKey(txn, key);
  };
  /**
   * Call provided function for each document in the cache that is 'orphaned'. Orphaned
   * means not a part of any target, so the only entry in the target-document index for
   * that document will be the sentinel row (targetId 0), which will also have the sequence
   * number for the last time the document was accessed.
   */


  IndexedDbLruDelegate.prototype.forEachOrphanedDocument = function (txn, f) {
    var store = documentTargetStore(txn);
    var nextToReport = ListenSequence.INVALID;
    var nextPath;
    return store.iterate({
      index: DbTargetDocument.documentTargetsIndex
    }, function (_a, _b) {
      var targetId = _a[0],
          docKey = _a[1];
      var path = _b.path,
          sequenceNumber = _b.sequenceNumber;

      if (targetId === 0) {
        // if nextToReport is valid, report it, this is a new key so the
        // last one must not be a member of any targets.
        if (nextToReport !== ListenSequence.INVALID) {
          f(new DocumentKey(decode(nextPath)), nextToReport);
        } // set nextToReport to be this sequence number. It's the next one we
        // might report, if we don't find any targets for this document.
        // Note that the sequence number must be defined when the targetId
        // is 0.


        nextToReport = sequenceNumber;
        nextPath = path;
      } else {
        // set nextToReport to be invalid, we know we don't need to report
        // this one since we found a target for it.
        nextToReport = ListenSequence.INVALID;
      }
    }).next(function () {
      // Since we report sequence numbers after getting to the next key, we
      // need to check if the last key we iterated over was an orphaned
      // document and report it.
      if (nextToReport !== ListenSequence.INVALID) {
        f(new DocumentKey(decode(nextPath)), nextToReport);
      }
    });
  };

  IndexedDbLruDelegate.prototype.getCacheSize = function (txn) {
    return this.db.getRemoteDocumentCache().getSize(txn);
  };

  return IndexedDbLruDelegate;
}();

function sentinelKey$1(key) {
  return [0, encode(key.path)];
}
/**
 * @return A value suitable for writing a sentinel row in the target-document
 * store.
 */


function sentinelRow(key, sequenceNumber) {
  return new DbTargetDocument(0, encode(key.path), sequenceNumber);
}

function writeSentinelKey(txn, key) {
  return documentTargetStore(txn).put(sentinelRow(key, txn.currentSequenceNumber));
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A readonly view of the local state of all documents we're tracking (i.e. we
 * have a cached version in remoteDocumentCache or local mutations for the
 * document). The view is computed by applying the mutations in the
 * MutationQueue to the RemoteDocumentCache.
 */


var LocalDocumentsView =
/** @class */
function () {
  function LocalDocumentsView(remoteDocumentCache, mutationQueue, indexManager) {
    this.remoteDocumentCache = remoteDocumentCache;
    this.mutationQueue = mutationQueue;
    this.indexManager = indexManager;
  }
  /**
   * Get the local view of the document identified by `key`.
   *
   * @return Local view of the document or null if we don't have any cached
   * state for it.
   */


  LocalDocumentsView.prototype.getDocument = function (transaction, key) {
    var _this = this;

    return this.mutationQueue.getAllMutationBatchesAffectingDocumentKey(transaction, key).next(function (batches) {
      return _this.getDocumentInternal(transaction, key, batches);
    });
  };
  /** Internal version of `getDocument` that allows reusing batches. */


  LocalDocumentsView.prototype.getDocumentInternal = function (transaction, key, inBatches) {
    return this.remoteDocumentCache.getEntry(transaction, key).next(function (doc) {
      for (var _i = 0, inBatches_1 = inBatches; _i < inBatches_1.length; _i++) {
        var batch = inBatches_1[_i];
        doc = batch.applyToLocalView(key, doc);
      }

      return doc;
    });
  }; // Returns the view of the given `docs` as they would appear after applying
  // all mutations in the given `batches`.


  LocalDocumentsView.prototype.applyLocalMutationsToDocuments = function (transaction, docs, batches) {
    var results = nullableMaybeDocumentMap();
    docs.forEach(function (key, localView) {
      for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {
        var batch = batches_1[_i];
        localView = batch.applyToLocalView(key, localView);
      }

      results = results.insert(key, localView);
    });
    return results;
  };
  /**
   * Gets the local view of the documents identified by `keys`.
   *
   * If we don't have cached state for a document in `keys`, a NoDocument will
   * be stored for that key in the resulting set.
   */


  LocalDocumentsView.prototype.getDocuments = function (transaction, keys) {
    var _this = this;

    return this.remoteDocumentCache.getEntries(transaction, keys).next(function (docs) {
      return _this.getLocalViewOfDocuments(transaction, docs);
    });
  };
  /**
   * Similar to `getDocuments`, but creates the local view from the given
   * `baseDocs` without retrieving documents from the local store.
   */


  LocalDocumentsView.prototype.getLocalViewOfDocuments = function (transaction, baseDocs) {
    var _this = this;

    return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(transaction, baseDocs).next(function (batches) {
      var docs = _this.applyLocalMutationsToDocuments(transaction, baseDocs, batches);

      var results = maybeDocumentMap();
      docs.forEach(function (key, maybeDoc) {
        // TODO(http://b/32275378): Don't conflate missing / deleted.
        if (!maybeDoc) {
          maybeDoc = new NoDocument(key, SnapshotVersion.forDeletedDoc());
        }

        results = results.insert(key, maybeDoc);
      });
      return results;
    });
  };
  /** Performs a query against the local view of all documents. */


  LocalDocumentsView.prototype.getDocumentsMatchingQuery = function (transaction, query) {
    if (query.isDocumentQuery()) {
      return this.getDocumentsMatchingDocumentQuery(transaction, query.path);
    } else if (query.isCollectionGroupQuery()) {
      return this.getDocumentsMatchingCollectionGroupQuery(transaction, query);
    } else {
      return this.getDocumentsMatchingCollectionQuery(transaction, query);
    }
  };

  LocalDocumentsView.prototype.getDocumentsMatchingDocumentQuery = function (transaction, docPath) {
    // Just do a simple document lookup.
    return this.getDocument(transaction, new DocumentKey(docPath)).next(function (maybeDoc) {
      var result = documentMap();

      if (maybeDoc instanceof Document) {
        result = result.insert(maybeDoc.key, maybeDoc);
      }

      return result;
    });
  };

  LocalDocumentsView.prototype.getDocumentsMatchingCollectionGroupQuery = function (transaction, query) {
    var _this = this;

    assert(query.path.isEmpty(), 'Currently we only support collection group queries at the root.');
    var collectionId = query.collectionGroup;
    var results = documentMap();
    return this.indexManager.getCollectionParents(transaction, collectionId).next(function (parents) {
      // Perform a collection query against each parent that contains the
      // collectionId and aggregate the results.
      return PersistencePromise.forEach(parents, function (parent) {
        var collectionQuery = query.asCollectionQueryAtPath(parent.child(collectionId));
        return _this.getDocumentsMatchingCollectionQuery(transaction, collectionQuery).next(function (r) {
          r.forEach(function (key, doc) {
            results = results.insert(key, doc);
          });
        });
      }).next(function () {
        return results;
      });
    });
  };

  LocalDocumentsView.prototype.getDocumentsMatchingCollectionQuery = function (transaction, query) {
    var _this = this; // Query the remote documents and overlay mutations.


    var results;
    return this.remoteDocumentCache.getDocumentsMatchingQuery(transaction, query).next(function (queryResults) {
      results = queryResults;
      return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query);
    }).next(function (matchingMutationBatches) {
      for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {
        var batch = matchingMutationBatches_1[_i];

        for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {
          var mutation = _b[_a];
          var key = mutation.key; // Only process documents belonging to the collection.

          if (!query.path.isImmediateParentOf(key.path)) {
            continue;
          }

          var baseDoc = results.get(key);
          var mutatedDoc = mutation.applyToLocalView(baseDoc, baseDoc, batch.localWriteTime);

          if (mutatedDoc instanceof Document) {
            results = results.insert(key, mutatedDoc);
          } else {
            results = results.remove(key);
          }
        }
      }
    }).next(function () {
      // Finally, filter out any documents that don't actually match
      // the query.
      results.forEach(function (key, doc) {
        if (!query.matches(doc)) {
          results = results.remove(key);
        }
      });
      return results;
    });
  };

  return LocalDocumentsView;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A collection of references to a document from some kind of numbered entity
 * (either a target ID or batch ID). As references are added to or removed from
 * the set corresponding events are emitted to a registered garbage collector.
 *
 * Each reference is represented by a DocumentReference object. Each of them
 * contains enough information to uniquely identify the reference. They are all
 * stored primarily in a set sorted by key. A document is considered garbage if
 * there's no references in that set (this can be efficiently checked thanks to
 * sorting by key).
 *
 * ReferenceSet also keeps a secondary set that contains references sorted by
 * IDs. This one is used to efficiently implement removal of all references by
 * some target ID.
 */


var ReferenceSet =
/** @class */
function () {
  function ReferenceSet() {
    // A set of outstanding references to a document sorted by key.
    this.refsByKey = new SortedSet(DocReference.compareByKey); // A set of outstanding references to a document sorted by target id.

    this.refsByTarget = new SortedSet(DocReference.compareByTargetId);
  }
  /** Returns true if the reference set contains no references. */


  ReferenceSet.prototype.isEmpty = function () {
    return this.refsByKey.isEmpty();
  };
  /** Adds a reference to the given document key for the given ID. */


  ReferenceSet.prototype.addReference = function (key, id) {
    var ref = new DocReference(key, id);
    this.refsByKey = this.refsByKey.add(ref);
    this.refsByTarget = this.refsByTarget.add(ref);
  };
  /** Add references to the given document keys for the given ID. */


  ReferenceSet.prototype.addReferences = function (keys, id) {
    var _this = this;

    keys.forEach(function (key) {
      return _this.addReference(key, id);
    });
  };
  /**
   * Removes a reference to the given document key for the given
   * ID.
   */


  ReferenceSet.prototype.removeReference = function (key, id) {
    this.removeRef(new DocReference(key, id));
  };

  ReferenceSet.prototype.removeReferences = function (keys, id) {
    var _this = this;

    keys.forEach(function (key) {
      return _this.removeReference(key, id);
    });
  };
  /**
   * Clears all references with a given ID. Calls removeRef() for each key
   * removed.
   */


  ReferenceSet.prototype.removeReferencesForId = function (id) {
    var _this = this;

    var emptyKey = DocumentKey.EMPTY;
    var startRef = new DocReference(emptyKey, id);
    var endRef = new DocReference(emptyKey, id + 1);
    var keys = [];
    this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {
      _this.removeRef(ref);

      keys.push(ref.key);
    });
    return keys;
  };

  ReferenceSet.prototype.removeAllReferences = function () {
    var _this = this;

    this.refsByKey.forEach(function (ref) {
      return _this.removeRef(ref);
    });
  };

  ReferenceSet.prototype.removeRef = function (ref) {
    this.refsByKey = this.refsByKey.delete(ref);
    this.refsByTarget = this.refsByTarget.delete(ref);
  };

  ReferenceSet.prototype.referencesForId = function (id) {
    var emptyKey = DocumentKey.EMPTY;
    var startRef = new DocReference(emptyKey, id);
    var endRef = new DocReference(emptyKey, id + 1);
    var keys = documentKeySet();
    this.refsByTarget.forEachInRange([startRef, endRef], function (ref) {
      keys = keys.add(ref.key);
    });
    return keys;
  };

  ReferenceSet.prototype.containsKey = function (key) {
    var ref = new DocReference(key, 0);
    var firstRef = this.refsByKey.firstAfterOrEqual(ref);
    return firstRef !== null && key.isEqual(firstRef.key);
  };

  return ReferenceSet;
}();

var DocReference =
/** @class */
function () {
  function DocReference(key, targetOrBatchId) {
    this.key = key;
    this.targetOrBatchId = targetOrBatchId;
  }
  /** Compare by key then by ID */


  DocReference.compareByKey = function (left, right) {
    return DocumentKey.comparator(left.key, right.key) || primitiveComparator(left.targetOrBatchId, right.targetOrBatchId);
  };
  /** Compare by ID then by key */


  DocReference.compareByTargetId = function (left, right) {
    return primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) || DocumentKey.comparator(left.key, right.key);
  };

  return DocReference;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$3 = 'LocalStore';
/**
 * Local storage in the Firestore client. Coordinates persistence components
 * like the mutation queue and remote document cache to present a
 * latency-compensated view of stored data.
 *
 * The LocalStore is responsible for accepting mutations from the Sync Engine.
 * Writes from the client are put into a queue as provisional Mutations until
 * they are processed by the RemoteStore and confirmed as having been written
 * to the server.
 *
 * The local store provides the local version of documents that have been
 * modified locally. It maintains the constraint:
 *
 *   LocalDocument = RemoteDocument + Active(LocalMutations)
 *
 * (Active mutations are those that are enqueued and have not been previously
 * acknowledged or rejected).
 *
 * The RemoteDocument ("ground truth") state is provided via the
 * applyChangeBatch method. It will be some version of a server-provided
 * document OR will be a server-provided document PLUS acknowledged mutations:
 *
 *   RemoteDocument' = RemoteDocument + Acknowledged(LocalMutations)
 *
 * Note that this "dirty" version of a RemoteDocument will not be identical to a
 * server base version, since it has LocalMutations added to it pending getting
 * an authoritative copy from the server.
 *
 * Since LocalMutations can be rejected by the server, we have to be able to
 * revert a LocalMutation that has already been applied to the LocalDocument
 * (typically done by replaying all remaining LocalMutations to the
 * RemoteDocument to re-apply).
 *
 * The LocalStore is responsible for the garbage collection of the documents it
 * contains. For now, it every doc referenced by a view, the mutation queue, or
 * the RemoteStore.
 *
 * It also maintains the persistence of mapping queries to resume tokens and
 * target ids. It needs to know this data about queries to properly know what
 * docs it would be allowed to garbage collect.
 *
 * The LocalStore must be able to efficiently execute queries against its local
 * cache of the documents, to provide the initial set of results before any
 * remote changes have been received.
 *
 * Note: In TypeScript, most methods return Promises since the implementation
 * may rely on fetching data from IndexedDB which is async.
 * These Promises will only be rejected on an I/O error or other internal
 * (unexpected) failure (e.g. failed assert) and always represent an
 * unrecoverable error (should be caught / reported by the async_queue).
 */

var LocalStore =
/** @class */
function () {
  function LocalStore(
  /** Manages our in-memory or durable persistence. */
  persistence, initialUser) {
    this.persistence = persistence;
    /**
     * The set of document references maintained by any local views.
     */

    this.localViewReferences = new ReferenceSet();
    /** Maps a targetID to data about its query. */

    this.queryDataByTarget = {};
    assert(persistence.started, 'LocalStore was passed an unstarted persistence implementation');
    this.persistence.referenceDelegate.setInMemoryPins(this.localViewReferences);
    this.mutationQueue = persistence.getMutationQueue(initialUser);
    this.remoteDocuments = persistence.getRemoteDocumentCache();
    this.queryCache = persistence.getQueryCache();
    this.localDocuments = new LocalDocumentsView(this.remoteDocuments, this.mutationQueue, this.persistence.getIndexManager());
  }
  /**
   * Tells the LocalStore that the currently authenticated user has changed.
   *
   * In response the local store switches the mutation queue to the new user and
   * returns any resulting document changes.
   */
  // PORTING NOTE: Android and iOS only return the documents affected by the
  // change.


  LocalStore.prototype.handleUserChange = function (user) {
    var _this = this;

    return this.persistence.runTransaction('Handle user change', 'readonly', function (txn) {
      // Swap out the mutation queue, grabbing the pending mutation batches
      // before and after.
      var oldBatches;
      return _this.mutationQueue.getAllMutationBatches(txn).next(function (promisedOldBatches) {
        oldBatches = promisedOldBatches;
        _this.mutationQueue = _this.persistence.getMutationQueue(user); // Recreate our LocalDocumentsView using the new
        // MutationQueue.

        _this.localDocuments = new LocalDocumentsView(_this.remoteDocuments, _this.mutationQueue, _this.persistence.getIndexManager());
        return _this.mutationQueue.getAllMutationBatches(txn);
      }).next(function (newBatches) {
        var removedBatchIds = [];
        var addedBatchIds = []; // Union the old/new changed keys.

        var changedKeys = documentKeySet();

        for (var _i = 0, oldBatches_1 = oldBatches; _i < oldBatches_1.length; _i++) {
          var batch = oldBatches_1[_i];
          removedBatchIds.push(batch.batchId);

          for (var _a = 0, _b = batch.mutations; _a < _b.length; _a++) {
            var mutation = _b[_a];
            changedKeys = changedKeys.add(mutation.key);
          }
        }

        for (var _c = 0, newBatches_1 = newBatches; _c < newBatches_1.length; _c++) {
          var batch = newBatches_1[_c];
          addedBatchIds.push(batch.batchId);

          for (var _d = 0, _e = batch.mutations; _d < _e.length; _d++) {
            var mutation = _e[_d];
            changedKeys = changedKeys.add(mutation.key);
          }
        } // Return the set of all (potentially) changed documents and the list
        // of mutation batch IDs that were affected by change.


        return _this.localDocuments.getDocuments(txn, changedKeys).next(function (affectedDocuments) {
          return {
            affectedDocuments: affectedDocuments,
            removedBatchIds: removedBatchIds,
            addedBatchIds: addedBatchIds
          };
        });
      });
    });
  };
  /* Accept locally generated Mutations and commit them to storage. */


  LocalStore.prototype.localWrite = function (mutations) {
    var _this = this;

    var localWriteTime = Timestamp.now();
    var keys = mutations.reduce(function (keys, m) {
      return keys.add(m.key);
    }, documentKeySet());
    return this.persistence.runTransaction('Locally write mutations', 'readwrite', function (txn) {
      // Load and apply all existing mutations. This lets us compute the
      // current base state for all non-idempotent transforms before applying
      // any additional user-provided writes.
      return _this.localDocuments.getDocuments(txn, keys).next(function (existingDocs) {
        // For non-idempotent mutations (such as `FieldValue.increment()`),
        // we record the base state in a separate patch mutation. This is
        // later used to guarantee consistent values and prevents flicker
        // even if the backend sends us an update that already includes our
        // transform.
        var baseMutations = [];

        for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {
          var mutation = mutations_1[_i];
          var maybeDoc = existingDocs.get(mutation.key);

          if (!mutation.isIdempotent) {
            // Theoretically, we should only include non-idempotent fields
            // in this field mask as this mask is used to populate the base
            // state for all DocumentTransforms.  By  including all fields,
            // we incorrectly prevent rebasing of idempotent transforms
            // (such as `arrayUnion()`) when any non-idempotent transforms
            // are present.
            var fieldMask = mutation.fieldMask;

            if (fieldMask) {
              var baseValues = maybeDoc instanceof Document ? fieldMask.applyTo(maybeDoc.data) : ObjectValue.EMPTY; // NOTE: The base state should only be applied if there's some
              // existing document to override, so use a Precondition of
              // exists=true

              baseMutations.push(new PatchMutation(mutation.key, baseValues, fieldMask, Precondition.exists(true)));
            }
          }
        }

        return _this.mutationQueue.addMutationBatch(txn, localWriteTime, baseMutations, mutations).next(function (batch) {
          var changes = batch.applyToLocalDocumentSet(existingDocs);
          return {
            batchId: batch.batchId,
            changes: changes
          };
        });
      });
    });
  };
  /** Returns the local view of the documents affected by a mutation batch. */
  // PORTING NOTE: Multi-tab only.


  LocalStore.prototype.lookupMutationDocuments = function (batchId) {
    var _this = this;

    return this.persistence.runTransaction('Lookup mutation documents', 'readonly', function (txn) {
      return _this.mutationQueue.lookupMutationKeys(txn, batchId).next(function (keys) {
        if (keys) {
          return _this.localDocuments.getDocuments(txn, keys);
        } else {
          return PersistencePromise.resolve(null);
        }
      });
    });
  };
  /**
   * Acknowledge the given batch.
   *
   * On the happy path when a batch is acknowledged, the local store will
   *
   *  + remove the batch from the mutation queue;
   *  + apply the changes to the remote document cache;
   *  + recalculate the latency compensated view implied by those changes (there
   *    may be mutations in the queue that affect the documents but haven't been
   *    acknowledged yet); and
   *  + give the changed documents back the sync engine
   *
   * @returns The resulting (modified) documents.
   */


  LocalStore.prototype.acknowledgeBatch = function (batchResult) {
    var _this = this;

    return this.persistence.runTransaction('Acknowledge batch', 'readwrite-primary', function (txn) {
      var affected = batchResult.batch.keys();

      var documentBuffer = _this.remoteDocuments.newChangeBuffer();

      return _this.mutationQueue.acknowledgeBatch(txn, batchResult.batch, batchResult.streamToken).next(function () {
        return _this.applyWriteToRemoteDocuments(txn, batchResult, documentBuffer);
      }).next(function () {
        return documentBuffer.apply(txn);
      }).next(function () {
        return _this.mutationQueue.performConsistencyCheck(txn);
      }).next(function () {
        return _this.localDocuments.getDocuments(txn, affected);
      });
    });
  };
  /**
   * Remove mutations from the MutationQueue for the specified batch;
   * LocalDocuments will be recalculated.
   *
   * @returns The resulting modified documents.
   */


  LocalStore.prototype.rejectBatch = function (batchId) {
    var _this = this;

    return this.persistence.runTransaction('Reject batch', 'readwrite-primary', function (txn) {
      var affectedKeys;
      return _this.mutationQueue.lookupMutationBatch(txn, batchId).next(function (batch) {
        assert(batch !== null, 'Attempt to reject nonexistent batch!');
        affectedKeys = batch.keys();
        return _this.mutationQueue.removeMutationBatch(txn, batch);
      }).next(function () {
        return _this.mutationQueue.performConsistencyCheck(txn);
      }).next(function () {
        return _this.localDocuments.getDocuments(txn, affectedKeys);
      });
    });
  };
  /** Returns the last recorded stream token for the current user. */


  LocalStore.prototype.getLastStreamToken = function () {
    var _this = this;

    return this.persistence.runTransaction('Get last stream token', 'readonly', function (txn) {
      return _this.mutationQueue.getLastStreamToken(txn);
    });
  };
  /**
   * Sets the stream token for the current user without acknowledging any
   * mutation batch. This is usually only useful after a stream handshake or in
   * response to an error that requires clearing the stream token.
   */


  LocalStore.prototype.setLastStreamToken = function (streamToken) {
    var _this = this;

    return this.persistence.runTransaction('Set last stream token', 'readwrite-primary', function (txn) {
      return _this.mutationQueue.setLastStreamToken(txn, streamToken);
    });
  };
  /**
   * Returns the last consistent snapshot processed (used by the RemoteStore to
   * determine whether to buffer incoming snapshots from the backend).
   */


  LocalStore.prototype.getLastRemoteSnapshotVersion = function () {
    var _this = this;

    return this.persistence.runTransaction('Get last remote snapshot version', 'readonly', function (txn) {
      return _this.queryCache.getLastRemoteSnapshotVersion(txn);
    });
  };
  /**
   * Update the "ground-state" (remote) documents. We assume that the remote
   * event reflects any write batches that have been acknowledged or rejected
   * (i.e. we do not re-apply local mutations to updates from this event).
   *
   * LocalDocuments are re-calculated if there are remaining mutations in the
   * queue.
   */


  LocalStore.prototype.applyRemoteEvent = function (remoteEvent) {
    var _this = this;

    var documentBuffer = this.remoteDocuments.newChangeBuffer();
    return this.persistence.runTransaction('Apply remote event', 'readwrite-primary', function (txn) {
      var promises = [];
      var authoritativeUpdates = documentKeySet();
      forEachNumber(remoteEvent.targetChanges, function (targetId, change) {
        // Do not ref/unref unassigned targetIds - it may lead to leaks.
        var queryData = _this.queryDataByTarget[targetId];
        if (!queryData) return; // When a global snapshot contains updates (either add or modify) we
        // can completely trust these updates as authoritative and blindly
        // apply them to our cache (as a defensive measure to promote
        // self-healing in the unfortunate case that our cache is ever somehow
        // corrupted / out-of-sync).
        //
        // If the document is only updated while removing it from a target
        // then watch isn't obligated to send the absolute latest version: it
        // can send the first version that caused the document not to match.

        change.addedDocuments.forEach(function (key) {
          authoritativeUpdates = authoritativeUpdates.add(key);
        });
        change.modifiedDocuments.forEach(function (key) {
          authoritativeUpdates = authoritativeUpdates.add(key);
        });
        promises.push(_this.queryCache.removeMatchingKeys(txn, change.removedDocuments, targetId).next(function () {
          return _this.queryCache.addMatchingKeys(txn, change.addedDocuments, targetId);
        })); // Update the resume token if the change includes one. Don't clear
        // any preexisting value.

        var resumeToken = change.resumeToken;

        if (resumeToken.length > 0) {
          var oldQueryData = queryData;
          queryData = queryData.copy({
            resumeToken: resumeToken,
            snapshotVersion: remoteEvent.snapshotVersion
          });
          _this.queryDataByTarget[targetId] = queryData;

          if (LocalStore.shouldPersistQueryData(oldQueryData, queryData, change)) {
            promises.push(_this.queryCache.updateQueryData(txn, queryData));
          }
        }
      });
      var changedDocs = maybeDocumentMap();
      var updatedKeys = documentKeySet();
      remoteEvent.documentUpdates.forEach(function (key, doc) {
        updatedKeys = updatedKeys.add(key);
      }); // Each loop iteration only affects its "own" doc, so it's safe to get all the remote
      // documents in advance in a single call.

      promises.push(documentBuffer.getEntries(txn, updatedKeys).next(function (existingDocs) {
        remoteEvent.documentUpdates.forEach(function (key, doc) {
          var existingDoc = existingDocs.get(key); // If a document update isn't authoritative, make sure we don't
          // apply an old document version to the remote cache. We make an
          // exception for SnapshotVersion.MIN which can happen for
          // manufactured events (e.g. in the case of a limbo document
          // resolution failing).

          if (existingDoc == null || doc.version.isEqual(SnapshotVersion.MIN) || authoritativeUpdates.has(doc.key) && !existingDoc.hasPendingWrites || doc.version.compareTo(existingDoc.version) >= 0) {
            documentBuffer.addEntry(doc);
            changedDocs = changedDocs.insert(key, doc);
          } else {
            debug(LOG_TAG$3, 'Ignoring outdated watch update for ', key, '. Current version:', existingDoc.version, ' Watch version:', doc.version);
          }

          if (remoteEvent.resolvedLimboDocuments.has(key)) {
            promises.push(_this.persistence.referenceDelegate.updateLimboDocument(txn, key));
          }
        });
      })); // HACK: The only reason we allow a null snapshot version is so that we
      // can synthesize remote events when we get permission denied errors while
      // trying to resolve the state of a locally cached document that is in
      // limbo.

      var remoteVersion = remoteEvent.snapshotVersion;

      if (!remoteVersion.isEqual(SnapshotVersion.MIN)) {
        var updateRemoteVersion = _this.queryCache.getLastRemoteSnapshotVersion(txn).next(function (lastRemoteVersion) {
          assert(remoteVersion.compareTo(lastRemoteVersion) >= 0, 'Watch stream reverted to previous snapshot?? ' + remoteVersion + ' < ' + lastRemoteVersion);
          return _this.queryCache.setTargetsMetadata(txn, txn.currentSequenceNumber, remoteVersion);
        });

        promises.push(updateRemoteVersion);
      }

      return PersistencePromise.waitFor(promises).next(function () {
        return documentBuffer.apply(txn);
      }).next(function () {
        return _this.localDocuments.getLocalViewOfDocuments(txn, changedDocs);
      });
    });
  };
  /**
   * Returns true if the newQueryData should be persisted during an update of
   * an active target. QueryData should always be persisted when a target is
   * being released and should not call this function.
   *
   * While the target is active, QueryData updates can be omitted when nothing
   * about the target has changed except metadata like the resume token or
   * snapshot version. Occasionally it's worth the extra write to prevent these
   * values from getting too stale after a crash, but this doesn't have to be
   * too frequent.
   */


  LocalStore.shouldPersistQueryData = function (oldQueryData, newQueryData, change) {
    // Avoid clearing any existing value
    if (newQueryData.resumeToken.length === 0) return false; // Any resume token is interesting if there isn't one already.

    if (oldQueryData.resumeToken.length === 0) return true; // Don't allow resume token changes to be buffered indefinitely. This
    // allows us to be reasonably up-to-date after a crash and avoids needing
    // to loop over all active queries on shutdown. Especially in the browser
    // we may not get time to do anything interesting while the current tab is
    // closing.

    var timeDelta = newQueryData.snapshotVersion.toMicroseconds() - oldQueryData.snapshotVersion.toMicroseconds();
    if (timeDelta >= this.RESUME_TOKEN_MAX_AGE_MICROS) return true; // Otherwise if the only thing that has changed about a target is its resume
    // token it's not worth persisting. Note that the RemoteStore keeps an
    // in-memory view of the currently active targets which includes the current
    // resume token, so stream failure or user changes will still use an
    // up-to-date resume token regardless of what we do here.

    var changes = change.addedDocuments.size + change.modifiedDocuments.size + change.removedDocuments.size;
    return changes > 0;
  };
  /**
   * Notify local store of the changed views to locally pin documents.
   */


  LocalStore.prototype.notifyLocalViewChanges = function (viewChanges) {
    var _this = this;

    return this.persistence.runTransaction('notifyLocalViewChanges', 'readwrite', function (txn) {
      return PersistencePromise.forEach(viewChanges, function (viewChange) {
        _this.localViewReferences.addReferences(viewChange.addedKeys, viewChange.targetId);

        _this.localViewReferences.removeReferences(viewChange.removedKeys, viewChange.targetId);

        return PersistencePromise.forEach(viewChange.removedKeys, function (key) {
          return _this.persistence.referenceDelegate.removeReference(txn, key);
        });
      });
    });
  };
  /**
   * Gets the mutation batch after the passed in batchId in the mutation queue
   * or null if empty.
   * @param afterBatchId If provided, the batch to search after.
   * @returns The next mutation or null if there wasn't one.
   */


  LocalStore.prototype.nextMutationBatch = function (afterBatchId) {
    var _this = this;

    return this.persistence.runTransaction('Get next mutation batch', 'readonly', function (txn) {
      if (afterBatchId === undefined) {
        afterBatchId = BATCHID_UNKNOWN;
      }

      return _this.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);
    });
  };
  /**
   * Read the current value of a Document with a given key or null if not
   * found - used for testing.
   */


  LocalStore.prototype.readDocument = function (key) {
    var _this = this;

    return this.persistence.runTransaction('read document', 'readonly', function (txn) {
      return _this.localDocuments.getDocument(txn, key);
    });
  };
  /**
   * Assigns the given query an internal ID so that its results can be pinned so
   * they don't get GC'd. A query must be allocated in the local store before
   * the store can be used to manage its view.
   */


  LocalStore.prototype.allocateQuery = function (query) {
    var _this = this;

    return this.persistence.runTransaction('Allocate query', 'readwrite', function (txn) {
      var queryData;
      return _this.queryCache.getQueryData(txn, query).next(function (cached) {
        if (cached) {
          // This query has been listened to previously, so reuse the
          // previous targetID.
          // TODO(mcg): freshen last accessed date?
          queryData = cached;
          return PersistencePromise.resolve();
        } else {
          return _this.queryCache.allocateTargetId(txn).next(function (targetId) {
            queryData = new QueryData(query, targetId, QueryPurpose.Listen, txn.currentSequenceNumber);
            return _this.queryCache.addQueryData(txn, queryData);
          });
        }
      }).next(function () {
        assert(!_this.queryDataByTarget[queryData.targetId], 'Tried to allocate an already allocated query: ' + query);
        _this.queryDataByTarget[queryData.targetId] = queryData;
        return queryData;
      });
    });
  };
  /**
   * Unpin all the documents associated with the given query. If
   * `keepPersistedQueryData` is set to false and Eager GC enabled, the method
   * directly removes the associated query data from the query cache.
   */
  // PORTING NOTE: `keepPersistedQueryData` is multi-tab only.


  LocalStore.prototype.releaseQuery = function (query, keepPersistedQueryData) {
    var _this = this;

    var mode = keepPersistedQueryData ? 'readwrite' : 'readwrite-primary';
    return this.persistence.runTransaction('Release query', mode, function (txn) {
      return _this.queryCache.getQueryData(txn, query).next(function (queryData) {
        assert(queryData != null, 'Tried to release nonexistent query: ' + query);
        var targetId = queryData.targetId;
        var cachedQueryData = _this.queryDataByTarget[targetId]; // References for documents sent via Watch are automatically removed when we delete a
        // query's target data from the reference delegate. Since this does not remove references
        // for locally mutated documents, we have to remove the target associations for these
        // documents manually.

        var removed = _this.localViewReferences.removeReferencesForId(targetId);

        delete _this.queryDataByTarget[targetId];

        if (!keepPersistedQueryData) {
          return PersistencePromise.forEach(removed, function (key) {
            return _this.persistence.referenceDelegate.removeReference(txn, key);
          }).next(function () {
            return _this.persistence.referenceDelegate.removeTarget(txn, cachedQueryData);
          });
        } else {
          return PersistencePromise.resolve();
        }
      });
    });
  };
  /**
   * Runs the specified query against all the documents in the local store and
   * returns the results.
   */


  LocalStore.prototype.executeQuery = function (query) {
    var _this = this;

    return this.persistence.runTransaction('Execute query', 'readonly', function (txn) {
      return _this.localDocuments.getDocumentsMatchingQuery(txn, query);
    });
  };
  /**
   * Returns the keys of the documents that are associated with the given
   * target id in the remote table.
   */


  LocalStore.prototype.remoteDocumentKeys = function (targetId) {
    var _this = this;

    return this.persistence.runTransaction('Remote document keys', 'readonly', function (txn) {
      return _this.queryCache.getMatchingKeysForTargetId(txn, targetId);
    });
  }; // PORTING NOTE: Multi-tab only.


  LocalStore.prototype.getActiveClients = function () {
    return this.persistence.getActiveClients();
  }; // PORTING NOTE: Multi-tab only.


  LocalStore.prototype.removeCachedMutationBatchMetadata = function (batchId) {
    this.mutationQueue.removeCachedMutationKeys(batchId);
  }; // PORTING NOTE: Multi-tab only.


  LocalStore.prototype.setNetworkEnabled = function (networkEnabled) {
    this.persistence.setNetworkEnabled(networkEnabled);
  };

  LocalStore.prototype.applyWriteToRemoteDocuments = function (txn, batchResult, documentBuffer) {
    var _this = this;

    var batch = batchResult.batch;
    var docKeys = batch.keys();
    var promiseChain = PersistencePromise.resolve();
    docKeys.forEach(function (docKey) {
      promiseChain = promiseChain.next(function () {
        return documentBuffer.getEntry(txn, docKey);
      }).next(function (remoteDoc) {
        var doc = remoteDoc;
        var ackVersion = batchResult.docVersions.get(docKey);
        assert(ackVersion !== null, 'ackVersions should contain every doc in the write.');

        if (!doc || doc.version.compareTo(ackVersion) < 0) {
          doc = batch.applyToRemoteDocument(docKey, doc, batchResult);

          if (!doc) {
            assert(!remoteDoc, 'Mutation batch ' + batch + ' applied to document ' + remoteDoc + ' resulted in null');
          } else {
            documentBuffer.addEntry(doc);
          }
        }
      });
    });
    return promiseChain.next(function () {
      return _this.mutationQueue.removeMutationBatch(txn, batch);
    });
  };

  LocalStore.prototype.collectGarbage = function (garbageCollector) {
    var _this = this;

    return this.persistence.runTransaction('Collect garbage', 'readwrite-primary', function (txn) {
      return garbageCollector.collect(txn, _this.queryDataByTarget);
    });
  }; // PORTING NOTE: Multi-tab only.


  LocalStore.prototype.getQueryForTarget = function (targetId) {
    var _this = this;

    if (this.queryDataByTarget[targetId]) {
      return Promise.resolve(this.queryDataByTarget[targetId].query);
    } else {
      return this.persistence.runTransaction('Get query data', 'readonly', function (txn) {
        return _this.queryCache.getQueryDataForTarget(txn, targetId).next(function (queryData) {
          return queryData ? queryData.query : null;
        });
      });
    }
  }; // PORTING NOTE: Multi-tab only.


  LocalStore.prototype.getNewDocumentChanges = function () {
    var _this = this;

    return this.persistence.runTransaction('Get new document changes', 'readonly', function (txn) {
      return _this.remoteDocuments.getNewDocumentChanges(txn);
    });
  };
  /**
   * The maximum time to leave a resume token buffered without writing it out.
   * This value is arbitrary: it's long enough to avoid several writes
   * (possibly indefinitely if updates come more frequently than this) but
   * short enough that restarting after crashing will still have a pretty
   * recent resume token.
   */


  LocalStore.RESUME_TOKEN_MAX_AGE_MICROS = 5 * 60 * 1e6;
  return LocalStore;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var MemoryMutationQueue =
/** @class */
function () {
  function MemoryMutationQueue(indexManager, referenceDelegate) {
    this.indexManager = indexManager;
    this.referenceDelegate = referenceDelegate;
    /**
     * The set of all mutations that have been sent but not yet been applied to
     * the backend.
     */

    this.mutationQueue = [];
    /** Next value to use when assigning sequential IDs to each mutation batch. */

    this.nextBatchId = 1;
    /** The last received stream token from the server, used to acknowledge which
     * responses the client has processed. Stream tokens are opaque checkpoint
     * markers whose only real value is their inclusion in the next request.
     */

    this.lastStreamToken = emptyByteString();
    /** An ordered mapping between documents and the mutations batch IDs. */

    this.batchesByDocumentKey = new SortedSet(DocReference.compareByKey);
  }

  MemoryMutationQueue.prototype.checkEmpty = function (transaction) {
    return PersistencePromise.resolve(this.mutationQueue.length === 0);
  };

  MemoryMutationQueue.prototype.acknowledgeBatch = function (transaction, batch, streamToken) {
    var batchId = batch.batchId;
    var batchIndex = this.indexOfExistingBatchId(batchId, 'acknowledged');
    assert(batchIndex === 0, 'Can only acknowledge the first batch in the mutation queue'); // Verify that the batch in the queue is the one to be acknowledged.

    var check = this.mutationQueue[batchIndex];
    assert(batchId === check.batchId, 'Queue ordering failure: expected batch ' + batchId + ', got batch ' + check.batchId);
    this.lastStreamToken = streamToken;
    return PersistencePromise.resolve();
  };

  MemoryMutationQueue.prototype.getLastStreamToken = function (transaction) {
    return PersistencePromise.resolve(this.lastStreamToken);
  };

  MemoryMutationQueue.prototype.setLastStreamToken = function (transaction, streamToken) {
    this.lastStreamToken = streamToken;
    return PersistencePromise.resolve();
  };

  MemoryMutationQueue.prototype.addMutationBatch = function (transaction, localWriteTime, baseMutations, mutations) {
    assert(mutations.length !== 0, 'Mutation batches should not be empty');
    var batchId = this.nextBatchId;
    this.nextBatchId++;

    if (this.mutationQueue.length > 0) {
      var prior = this.mutationQueue[this.mutationQueue.length - 1];
      assert(prior.batchId < batchId, 'Mutation batchIDs must be monotonically increasing order');
    }

    var batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);
    this.mutationQueue.push(batch); // Track references by document key and index collection parents.

    for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {
      var mutation = mutations_1[_i];
      this.batchesByDocumentKey = this.batchesByDocumentKey.add(new DocReference(mutation.key, batchId));
      this.indexManager.addToCollectionParentIndex(transaction, mutation.key.path.popLast());
    }

    return PersistencePromise.resolve(batch);
  };

  MemoryMutationQueue.prototype.lookupMutationBatch = function (transaction, batchId) {
    return PersistencePromise.resolve(this.findMutationBatch(batchId));
  };

  MemoryMutationQueue.prototype.lookupMutationKeys = function (transaction, batchId) {
    var mutationBatch = this.findMutationBatch(batchId);
    assert(mutationBatch != null, 'Failed to find local mutation batch.');
    return PersistencePromise.resolve(mutationBatch.keys());
  };

  MemoryMutationQueue.prototype.getNextMutationBatchAfterBatchId = function (transaction, batchId) {
    var nextBatchId = batchId + 1; // The requested batchId may still be out of range so normalize it to the
    // start of the queue.

    var rawIndex = this.indexOfBatchId(nextBatchId);
    var index = rawIndex < 0 ? 0 : rawIndex;
    return PersistencePromise.resolve(this.mutationQueue.length > index ? this.mutationQueue[index] : null);
  };

  MemoryMutationQueue.prototype.getAllMutationBatches = function (transaction) {
    return PersistencePromise.resolve(this.mutationQueue.slice());
  };

  MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKey = function (transaction, documentKey) {
    var _this = this;

    var start = new DocReference(documentKey, 0);
    var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);
    var result = [];
    this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {
      assert(documentKey.isEqual(ref.key), "Should only iterate over a single key's batches");

      var batch = _this.findMutationBatch(ref.targetOrBatchId);

      assert(batch !== null, 'Batches in the index must exist in the main table');
      result.push(batch);
    });
    return PersistencePromise.resolve(result);
  };

  MemoryMutationQueue.prototype.getAllMutationBatchesAffectingDocumentKeys = function (transaction, documentKeys) {
    var _this = this;

    var uniqueBatchIDs = new SortedSet(primitiveComparator);
    documentKeys.forEach(function (documentKey) {
      var start = new DocReference(documentKey, 0);
      var end = new DocReference(documentKey, Number.POSITIVE_INFINITY);

      _this.batchesByDocumentKey.forEachInRange([start, end], function (ref) {
        assert(documentKey.isEqual(ref.key), "For each key, should only iterate over a single key's batches");
        uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);
      });
    });
    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));
  };

  MemoryMutationQueue.prototype.getAllMutationBatchesAffectingQuery = function (transaction, query) {
    assert(!query.isCollectionGroupQuery(), 'CollectionGroup queries should be handled in LocalDocumentsView'); // Use the query path as a prefix for testing if a document matches the
    // query.

    var prefix = query.path;
    var immediateChildrenPathLength = prefix.length + 1; // Construct a document reference for actually scanning the index. Unlike
    // the prefix the document key in this reference must have an even number of
    // segments. The empty segment can be used a suffix of the query path
    // because it precedes all other segments in an ordered traversal.

    var startPath = prefix;

    if (!DocumentKey.isDocumentKey(startPath)) {
      startPath = startPath.child('');
    }

    var start = new DocReference(new DocumentKey(startPath), 0); // Find unique batchIDs referenced by all documents potentially matching the
    // query.

    var uniqueBatchIDs = new SortedSet(primitiveComparator);
    this.batchesByDocumentKey.forEachWhile(function (ref) {
      var rowKeyPath = ref.key.path;

      if (!prefix.isPrefixOf(rowKeyPath)) {
        return false;
      } else {
        // Rows with document keys more than one segment longer than the query
        // path can't be matches. For example, a query on 'rooms' can't match
        // the document /rooms/abc/messages/xyx.
        // TODO(mcg): we'll need a different scanner when we implement
        // ancestor queries.
        if (rowKeyPath.length === immediateChildrenPathLength) {
          uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);
        }

        return true;
      }
    }, start);
    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));
  };

  MemoryMutationQueue.prototype.findMutationBatches = function (batchIDs) {
    var _this = this; // Construct an array of matching batches, sorted by batchID to ensure that
    // multiple mutations affecting the same document key are applied in order.


    var result = [];
    batchIDs.forEach(function (batchId) {
      var batch = _this.findMutationBatch(batchId);

      if (batch !== null) {
        result.push(batch);
      }
    });
    return result;
  };

  MemoryMutationQueue.prototype.removeMutationBatch = function (transaction, batch) {
    var _this = this; // Find the position of the first batch for removal. This need not be the
    // first entry in the queue.


    var batchIndex = this.indexOfExistingBatchId(batch.batchId, 'removed');
    assert(batchIndex === 0, 'Can only remove the first entry of the mutation queue');
    this.mutationQueue.shift();
    var references = this.batchesByDocumentKey;
    return PersistencePromise.forEach(batch.mutations, function (mutation) {
      var ref = new DocReference(mutation.key, batch.batchId);
      references = references.delete(ref);
      return _this.referenceDelegate.removeMutationReference(transaction, mutation.key);
    }).next(function () {
      _this.batchesByDocumentKey = references;
    });
  };

  MemoryMutationQueue.prototype.removeCachedMutationKeys = function (batchId) {// No-op since the memory mutation queue does not maintain a separate cache.
  };

  MemoryMutationQueue.prototype.containsKey = function (txn, key) {
    var ref = new DocReference(key, 0);
    var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);
    return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));
  };

  MemoryMutationQueue.prototype.performConsistencyCheck = function (txn) {
    if (this.mutationQueue.length === 0) {
      assert(this.batchesByDocumentKey.isEmpty(), 'Document leak -- detected dangling mutation references when queue is empty.');
    }

    return PersistencePromise.resolve();
  };
  /**
   * Finds the index of the given batchId in the mutation queue and asserts that
   * the resulting index is within the bounds of the queue.
   *
   * @param batchId The batchId to search for
   * @param action A description of what the caller is doing, phrased in passive
   * form (e.g. "acknowledged" in a routine that acknowledges batches).
   */


  MemoryMutationQueue.prototype.indexOfExistingBatchId = function (batchId, action) {
    var index = this.indexOfBatchId(batchId);
    assert(index >= 0 && index < this.mutationQueue.length, 'Batches must exist to be ' + action);
    return index;
  };
  /**
   * Finds the index of the given batchId in the mutation queue. This operation
   * is O(1).
   *
   * @return The computed index of the batch with the given batchId, based on
   * the state of the queue. Note this index can be negative if the requested
   * batchId has already been remvoed from the queue or past the end of the
   * queue if the batchId is larger than the last added batch.
   */


  MemoryMutationQueue.prototype.indexOfBatchId = function (batchId) {
    if (this.mutationQueue.length === 0) {
      // As an index this is past the end of the queue
      return 0;
    } // Examine the front of the queue to figure out the difference between the
    // batchId and indexes in the array. Note that since the queue is ordered
    // by batchId, if the first batch has a larger batchId then the requested
    // batchId doesn't exist in the queue.


    var firstBatchId = this.mutationQueue[0].batchId;
    return batchId - firstBatchId;
  };
  /**
   * A version of lookupMutationBatch that doesn't return a promise, this makes
   * other functions that uses this code easier to read and more efficent.
   */


  MemoryMutationQueue.prototype.findMutationBatch = function (batchId) {
    var index = this.indexOfBatchId(batchId);

    if (index < 0 || index >= this.mutationQueue.length) {
      return null;
    }

    var batch = this.mutationQueue[index];
    assert(batch.batchId === batchId, 'If found batch must match');
    return batch;
  };

  return MemoryMutationQueue;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var MemoryQueryCache =
/** @class */
function () {
  function MemoryQueryCache(persistence) {
    this.persistence = persistence;
    /**
     * Maps a query to the data about that query
     */

    this.queries = new ObjectMap(function (q) {
      return q.canonicalId();
    });
    /** The last received snapshot version. */

    this.lastRemoteSnapshotVersion = SnapshotVersion.MIN;
    /** The highest numbered target ID encountered. */

    this.highestTargetId = 0;
    /** The highest sequence number encountered. */

    this.highestSequenceNumber = 0;
    /**
     * A ordered bidirectional mapping between documents and the remote target
     * IDs.
     */

    this.references = new ReferenceSet();
    this.targetCount = 0;
    this.targetIdGenerator = TargetIdGenerator.forQueryCache();
  }

  MemoryQueryCache.prototype.getTargetCount = function (txn) {
    return PersistencePromise.resolve(this.targetCount);
  };

  MemoryQueryCache.prototype.forEachTarget = function (txn, f) {
    this.queries.forEach(function (_, queryData) {
      return f(queryData);
    });
    return PersistencePromise.resolve();
  };

  MemoryQueryCache.prototype.getLastRemoteSnapshotVersion = function (transaction) {
    return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);
  };

  MemoryQueryCache.prototype.getHighestSequenceNumber = function (transaction) {
    return PersistencePromise.resolve(this.highestSequenceNumber);
  };

  MemoryQueryCache.prototype.allocateTargetId = function (transaction) {
    var nextTargetId = this.targetIdGenerator.after(this.highestTargetId);
    this.highestTargetId = nextTargetId;
    return PersistencePromise.resolve(nextTargetId);
  };

  MemoryQueryCache.prototype.setTargetsMetadata = function (transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {
    if (lastRemoteSnapshotVersion) {
      this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;
    }

    if (highestListenSequenceNumber > this.highestSequenceNumber) {
      this.highestSequenceNumber = highestListenSequenceNumber;
    }

    return PersistencePromise.resolve();
  };

  MemoryQueryCache.prototype.saveQueryData = function (queryData) {
    this.queries.set(queryData.query, queryData);
    var targetId = queryData.targetId;

    if (targetId > this.highestTargetId) {
      this.highestTargetId = targetId;
    }

    if (queryData.sequenceNumber > this.highestSequenceNumber) {
      this.highestSequenceNumber = queryData.sequenceNumber;
    }
  };

  MemoryQueryCache.prototype.addQueryData = function (transaction, queryData) {
    assert(!this.queries.has(queryData.query), 'Adding a query that already exists');
    this.saveQueryData(queryData);
    this.targetCount += 1;
    return PersistencePromise.resolve();
  };

  MemoryQueryCache.prototype.updateQueryData = function (transaction, queryData) {
    assert(this.queries.has(queryData.query), 'Updating a non-existent query');
    this.saveQueryData(queryData);
    return PersistencePromise.resolve();
  };

  MemoryQueryCache.prototype.removeQueryData = function (transaction, queryData) {
    assert(this.targetCount > 0, 'Removing a target from an empty cache');
    assert(this.queries.has(queryData.query), 'Removing a non-existent target from the cache');
    this.queries.delete(queryData.query);
    this.references.removeReferencesForId(queryData.targetId);
    this.targetCount -= 1;
    return PersistencePromise.resolve();
  };

  MemoryQueryCache.prototype.removeTargets = function (transaction, upperBound, activeTargetIds) {
    var _this = this;

    var count = 0;
    var removals = [];
    this.queries.forEach(function (key, queryData) {
      if (queryData.sequenceNumber <= upperBound && !activeTargetIds[queryData.targetId]) {
        _this.queries.delete(key);

        removals.push(_this.removeMatchingKeysForTargetId(transaction, queryData.targetId));
        count++;
      }
    });
    return PersistencePromise.waitFor(removals).next(function () {
      return count;
    });
  };

  MemoryQueryCache.prototype.getQueryCount = function (transaction) {
    return PersistencePromise.resolve(this.targetCount);
  };

  MemoryQueryCache.prototype.getQueryData = function (transaction, query) {
    var queryData = this.queries.get(query) || null;
    return PersistencePromise.resolve(queryData);
  };

  MemoryQueryCache.prototype.getQueryDataForTarget = function (transaction, targetId) {
    // This method is only needed for multi-tab and we can't implement it
    // efficiently without additional data structures.
    return fail('Not yet implemented.');
  };

  MemoryQueryCache.prototype.addMatchingKeys = function (txn, keys, targetId) {
    this.references.addReferences(keys, targetId);
    var referenceDelegate = this.persistence.referenceDelegate;
    var promises = [];

    if (referenceDelegate) {
      keys.forEach(function (key) {
        promises.push(referenceDelegate.addReference(txn, key));
      });
    }

    return PersistencePromise.waitFor(promises);
  };

  MemoryQueryCache.prototype.removeMatchingKeys = function (txn, keys, targetId) {
    this.references.removeReferences(keys, targetId);
    var referenceDelegate = this.persistence.referenceDelegate;
    var promises = [];

    if (referenceDelegate) {
      keys.forEach(function (key) {
        promises.push(referenceDelegate.removeReference(txn, key));
      });
    }

    return PersistencePromise.waitFor(promises);
  };

  MemoryQueryCache.prototype.removeMatchingKeysForTargetId = function (txn, targetId) {
    this.references.removeReferencesForId(targetId);
    return PersistencePromise.resolve();
  };

  MemoryQueryCache.prototype.getMatchingKeysForTargetId = function (txn, targetId) {
    var matchingKeys = this.references.referencesForId(targetId);
    return PersistencePromise.resolve(matchingKeys);
  };

  MemoryQueryCache.prototype.containsKey = function (txn, key) {
    return PersistencePromise.resolve(this.references.containsKey(key));
  };

  return MemoryQueryCache;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function documentSizeMap() {
  return new SortedMap(DocumentKey.comparator);
}

var MemoryRemoteDocumentCache =
/** @class */
function () {
  /**
   * @param sizer Used to assess the size of a document. For eager GC, this is expected to just
   * return 0 to avoid unnecessarily doing the work of calculating the size.
   */
  function MemoryRemoteDocumentCache(indexManager, sizer) {
    this.indexManager = indexManager;
    this.sizer = sizer;
    this.docs = documentSizeMap();
    this.newDocumentChanges = documentKeySet();
    this.size = 0;
  }
  /**
   * Adds the supplied entries to the cache. Adds the given size delta to the cached size.
   */


  MemoryRemoteDocumentCache.prototype.addEntries = function (transaction, entries, sizeDelta) {
    var promises = [];

    for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
      var entry = entries_1[_i];
      var key = entry.maybeDocument.key;
      this.docs = this.docs.insert(key, entry);
      this.newDocumentChanges = this.newDocumentChanges.add(key);
      promises.push(this.indexManager.addToCollectionParentIndex(transaction, key.path.popLast()));
    }

    this.size += sizeDelta;
    return PersistencePromise.waitFor(promises);
  };
  /**
   * Removes the specified entry from the cache and updates the size as appropriate.
   */


  MemoryRemoteDocumentCache.prototype.removeEntry = function (transaction, documentKey) {
    var entry = this.docs.get(documentKey);

    if (entry) {
      this.docs = this.docs.remove(documentKey);
      this.size -= entry.size;
      return PersistencePromise.resolve(entry.size);
    } else {
      return PersistencePromise.resolve(0);
    }
  };

  MemoryRemoteDocumentCache.prototype.getEntry = function (transaction, documentKey) {
    var entry = this.docs.get(documentKey);
    return PersistencePromise.resolve(entry ? entry.maybeDocument : null);
  };
  /**
   * Looks up an entry in the cache.
   *
   * @param documentKey The key of the entry to look up.
   * @return The cached MaybeDocument entry and its size, or null if we have nothing cached.
   */


  MemoryRemoteDocumentCache.prototype.getSizedEntry = function (transaction, documentKey) {
    return PersistencePromise.resolve(this.docs.get(documentKey));
  };

  MemoryRemoteDocumentCache.prototype.getEntries = function (transaction, documentKeys) {
    var _this = this;

    var results = nullableMaybeDocumentMap();
    documentKeys.forEach(function (documentKey) {
      var entry = _this.docs.get(documentKey);

      results = results.insert(documentKey, entry ? entry.maybeDocument : null);
    });
    return PersistencePromise.resolve(results);
  };
  /**
   * Looks up several entries in the cache.
   *
   * @param documentKeys The set of keys entries to look up.
   * @return A map of MaybeDocuments indexed by key (if a document cannot be
   *     found, the key will be mapped to null) and a map of sizes indexed by
   *     key (zero if the key cannot be found).
   */


  MemoryRemoteDocumentCache.prototype.getSizedEntries = function (transaction, documentKeys) {
    var _this = this;

    var results = nullableMaybeDocumentMap();
    var sizeMap = new SortedMap(DocumentKey.comparator);
    documentKeys.forEach(function (documentKey) {
      var entry = _this.docs.get(documentKey);

      results = results.insert(documentKey, entry ? entry.maybeDocument : null);
      sizeMap = sizeMap.insert(documentKey, entry ? entry.size : 0);
    });
    return PersistencePromise.resolve({
      maybeDocuments: results,
      sizeMap: sizeMap
    });
  };

  MemoryRemoteDocumentCache.prototype.getDocumentsMatchingQuery = function (transaction, query) {
    assert(!query.isCollectionGroupQuery(), 'CollectionGroup queries should be handled in LocalDocumentsView');
    var results = documentMap(); // Documents are ordered by key, so we can use a prefix scan to narrow down
    // the documents we need to match the query against.

    var prefix = new DocumentKey(query.path.child(''));
    var iterator = this.docs.getIteratorFrom(prefix);

    while (iterator.hasNext()) {
      var _a = iterator.getNext(),
          key = _a.key,
          maybeDocument = _a.value.maybeDocument;

      if (!query.path.isPrefixOf(key.path)) {
        break;
      }

      if (maybeDocument instanceof Document && query.matches(maybeDocument)) {
        results = results.insert(maybeDocument.key, maybeDocument);
      }
    }

    return PersistencePromise.resolve(results);
  };

  MemoryRemoteDocumentCache.prototype.forEachDocumentKey = function (transaction, f) {
    return PersistencePromise.forEach(this.docs, function (key) {
      return f(key);
    });
  };

  MemoryRemoteDocumentCache.prototype.getNewDocumentChanges = function (transaction) {
    var _this = this;

    var changedDocs = maybeDocumentMap();
    this.newDocumentChanges.forEach(function (key) {
      var entry = _this.docs.get(key);

      var changedDoc = entry ? entry.maybeDocument : new NoDocument(key, SnapshotVersion.forDeletedDoc());
      changedDocs = changedDocs.insert(key, changedDoc);
    });
    this.newDocumentChanges = documentKeySet();
    return PersistencePromise.resolve(changedDocs);
  };

  MemoryRemoteDocumentCache.prototype.newChangeBuffer = function () {
    return new MemoryRemoteDocumentChangeBuffer(this.sizer, this);
  };

  MemoryRemoteDocumentCache.prototype.getSize = function (txn) {
    return PersistencePromise.resolve(this.size);
  };

  return MemoryRemoteDocumentCache;
}();
/**
 * Handles the details of adding and updating documents in the MemoryRemoteDocumentCache.
 */


var MemoryRemoteDocumentChangeBuffer =
/** @class */
function (_super) {
  tslib_1.__extends(MemoryRemoteDocumentChangeBuffer, _super);

  function MemoryRemoteDocumentChangeBuffer(sizer, documentCache) {
    var _this = _super.call(this) || this;

    _this.sizer = sizer;
    _this.documentCache = documentCache;
    return _this;
  }

  MemoryRemoteDocumentChangeBuffer.prototype.applyChanges = function (transaction) {
    var _this = this;

    var changes = this.assertChanges();
    var delta = 0;
    var docs = [];
    changes.forEach(function (key, maybeDocument) {
      var previousSize = _this.documentSizes.get(key);

      assert(previousSize !== undefined, "Attempting to change document " + key.toString() + " without having read it first");

      var size = _this.sizer(maybeDocument);

      delta += size - previousSize;
      docs.push({
        maybeDocument: maybeDocument,
        size: size
      });
    });
    return this.documentCache.addEntries(transaction, docs, delta);
  };

  MemoryRemoteDocumentChangeBuffer.prototype.getFromCache = function (transaction, documentKey) {
    return this.documentCache.getSizedEntry(transaction, documentKey);
  };

  MemoryRemoteDocumentChangeBuffer.prototype.getAllFromCache = function (transaction, documentKeys) {
    return this.documentCache.getSizedEntries(transaction, documentKeys);
  };

  return MemoryRemoteDocumentChangeBuffer;
}(RemoteDocumentChangeBuffer);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$4 = 'MemoryPersistence';
/**
 * A memory-backed instance of Persistence. Data is stored only in RAM and
 * not persisted across sessions.
 */

var MemoryPersistence =
/** @class */
function () {
  /**
   * The constructor accepts a factory for creating a reference delegate. This
   * allows both the delegate and this instance to have strong references to
   * each other without having nullable fields that would then need to be
   * checked or asserted on every access.
   */
  function MemoryPersistence(clientId, referenceDelegateFactory) {
    var _this = this;

    this.clientId = clientId;
    this.mutationQueues = {};
    this.listenSequence = new ListenSequence(0);
    this._started = false;
    this._started = true;
    this.referenceDelegate = referenceDelegateFactory(this);
    this.queryCache = new MemoryQueryCache(this);

    var sizer = function (doc) {
      return _this.referenceDelegate.documentSize(doc);
    };

    this.indexManager = new MemoryIndexManager();
    this.remoteDocumentCache = new MemoryRemoteDocumentCache(this.indexManager, sizer);
  }

  MemoryPersistence.createLruPersistence = function (clientId, serializer, params) {
    var factory = function (p) {
      return new MemoryLruDelegate(p, new LocalSerializer(serializer), params);
    };

    return new MemoryPersistence(clientId, factory);
  };

  MemoryPersistence.createEagerPersistence = function (clientId) {
    var factory = function (p) {
      return new MemoryEagerDelegate(p);
    };

    return new MemoryPersistence(clientId, factory);
  };

  MemoryPersistence.prototype.shutdown = function (deleteData) {
    // No durable state to ensure is closed on shutdown.
    this._started = false;
    return Promise.resolve();
  };

  Object.defineProperty(MemoryPersistence.prototype, "started", {
    get: function () {
      return this._started;
    },
    enumerable: true,
    configurable: true
  });

  MemoryPersistence.prototype.getActiveClients = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        return [2
        /*return*/
        , [this.clientId]];
      });
    });
  };

  MemoryPersistence.prototype.setPrimaryStateListener = function (primaryStateListener) {
    // All clients using memory persistence act as primary.
    return primaryStateListener(true);
  };

  MemoryPersistence.prototype.setNetworkEnabled = function (networkEnabled) {// No op.
  };

  MemoryPersistence.prototype.getIndexManager = function () {
    return this.indexManager;
  };

  MemoryPersistence.prototype.getMutationQueue = function (user) {
    var queue = this.mutationQueues[user.toKey()];

    if (!queue) {
      queue = new MemoryMutationQueue(this.indexManager, this.referenceDelegate);
      this.mutationQueues[user.toKey()] = queue;
    }

    return queue;
  };

  MemoryPersistence.prototype.getQueryCache = function () {
    return this.queryCache;
  };

  MemoryPersistence.prototype.getRemoteDocumentCache = function () {
    return this.remoteDocumentCache;
  };

  MemoryPersistence.prototype.runTransaction = function (action, mode, transactionOperation) {
    var _this = this;

    debug(LOG_TAG$4, 'Starting transaction:', action);
    var txn = new MemoryTransaction(this.listenSequence.next());
    this.referenceDelegate.onTransactionStarted();
    return transactionOperation(txn).next(function (result) {
      return _this.referenceDelegate.onTransactionCommitted(txn).next(function () {
        return result;
      });
    }).toPromise();
  };

  MemoryPersistence.prototype.mutationQueuesContainKey = function (transaction, key) {
    return PersistencePromise.or(values(this.mutationQueues).map(function (queue) {
      return function () {
        return queue.containsKey(transaction, key);
      };
    }));
  };

  return MemoryPersistence;
}();
/**
 * Memory persistence is not actually transactional, but future implementations
 * may have transaction-scoped state.
 */


var MemoryTransaction =
/** @class */
function () {
  function MemoryTransaction(currentSequenceNumber) {
    this.currentSequenceNumber = currentSequenceNumber;
  }

  return MemoryTransaction;
}();

var MemoryEagerDelegate =
/** @class */
function () {
  function MemoryEagerDelegate(persistence) {
    this.persistence = persistence;
  }

  MemoryEagerDelegate.prototype.setInMemoryPins = function (inMemoryPins) {
    this.inMemoryPins = inMemoryPins;
  };

  MemoryEagerDelegate.prototype.addReference = function (txn, key) {
    this.orphanedDocuments.delete(key);
    return PersistencePromise.resolve();
  };

  MemoryEagerDelegate.prototype.removeReference = function (txn, key) {
    this.orphanedDocuments.add(key);
    return PersistencePromise.resolve();
  };

  MemoryEagerDelegate.prototype.removeMutationReference = function (txn, key) {
    this.orphanedDocuments.add(key);
    return PersistencePromise.resolve();
  };

  MemoryEagerDelegate.prototype.removeTarget = function (txn, queryData) {
    var _this = this;

    var cache = this.persistence.getQueryCache();
    return cache.getMatchingKeysForTargetId(txn, queryData.targetId).next(function (keys) {
      keys.forEach(function (key) {
        return _this.orphanedDocuments.add(key);
      });
    }).next(function () {
      return cache.removeQueryData(txn, queryData);
    });
  };

  MemoryEagerDelegate.prototype.onTransactionStarted = function () {
    this.orphanedDocuments = new Set();
  };

  MemoryEagerDelegate.prototype.onTransactionCommitted = function (txn) {
    var _this = this;

    var cache = this.persistence.getRemoteDocumentCache();
    return PersistencePromise.forEach(this.orphanedDocuments, function (key) {
      return _this.isReferenced(txn, key).next(function (isReferenced) {
        if (!isReferenced) {
          // Since this is the eager delegate and memory persistence,
          // we don't care about the size of documents. We don't track
          // the size of the cache for eager GC.
          return cache.removeEntry(txn, key).next(function () {});
        }

        return PersistencePromise.resolve();
      });
    });
  };

  MemoryEagerDelegate.prototype.updateLimboDocument = function (txn, key) {
    var _this = this;

    return this.isReferenced(txn, key).next(function (isReferenced) {
      if (isReferenced) {
        _this.orphanedDocuments.delete(key);
      } else {
        _this.orphanedDocuments.add(key);
      }
    });
  };

  MemoryEagerDelegate.prototype.documentSize = function (doc) {
    // For eager GC, we don't care about the document size, there are no size thresholds.
    return 0;
  };

  MemoryEagerDelegate.prototype.isReferenced = function (txn, key) {
    var _this = this;

    return PersistencePromise.or([function () {
      return _this.persistence.getQueryCache().containsKey(txn, key);
    }, function () {
      return _this.persistence.mutationQueuesContainKey(txn, key);
    }, function () {
      return PersistencePromise.resolve(_this.inMemoryPins.containsKey(key));
    }]);
  };

  return MemoryEagerDelegate;
}();

var MemoryLruDelegate =
/** @class */
function () {
  function MemoryLruDelegate(persistence, serializer, lruParams) {
    this.persistence = persistence;
    this.serializer = serializer;
    this.orphanedSequenceNumbers = new ObjectMap(function (k) {
      return encode(k.path);
    });
    this.garbageCollector = new LruGarbageCollector(this, lruParams);
  } // No-ops, present so memory persistence doesn't have to care which delegate
  // it has.


  MemoryLruDelegate.prototype.onTransactionStarted = function () {};

  MemoryLruDelegate.prototype.onTransactionCommitted = function (txn) {
    return PersistencePromise.resolve();
  };

  MemoryLruDelegate.prototype.forEachTarget = function (txn, f) {
    return this.persistence.getQueryCache().forEachTarget(txn, f);
  };

  MemoryLruDelegate.prototype.getSequenceNumberCount = function (txn) {
    var docCountPromise = this.orphanedDocumentCount(txn);
    var targetCountPromise = this.persistence.getQueryCache().getTargetCount(txn);
    return targetCountPromise.next(function (targetCount) {
      return docCountPromise.next(function (docCount) {
        return targetCount + docCount;
      });
    });
  };

  MemoryLruDelegate.prototype.orphanedDocumentCount = function (txn) {
    var orphanedCount = 0;
    return this.forEachOrphanedDocumentSequenceNumber(txn, function (_) {
      orphanedCount++;
    }).next(function () {
      return orphanedCount;
    });
  };

  MemoryLruDelegate.prototype.forEachOrphanedDocumentSequenceNumber = function (txn, f) {
    var _this = this;

    return PersistencePromise.forEach(this.orphanedSequenceNumbers, function (key, sequenceNumber) {
      // Pass in the exact sequence number as the upper bound so we know it won't be pinned by
      // being too recent.
      return _this.isPinned(txn, key, sequenceNumber).next(function (isPinned) {
        if (!isPinned) {
          return f(sequenceNumber);
        } else {
          return PersistencePromise.resolve();
        }
      });
    });
  };

  MemoryLruDelegate.prototype.setInMemoryPins = function (inMemoryPins) {
    this.inMemoryPins = inMemoryPins;
  };

  MemoryLruDelegate.prototype.removeTargets = function (txn, upperBound, activeTargetIds) {
    return this.persistence.getQueryCache().removeTargets(txn, upperBound, activeTargetIds);
  };

  MemoryLruDelegate.prototype.removeOrphanedDocuments = function (txn, upperBound) {
    var _this = this;

    var count = 0;
    var cache = this.persistence.getRemoteDocumentCache();
    var p = cache.forEachDocumentKey(txn, function (key) {
      return _this.isPinned(txn, key, upperBound).next(function (isPinned) {
        if (isPinned) {
          return PersistencePromise.resolve();
        } else {
          count++; // The memory remote document cache does its own byte
          // accounting on removal. This is ok because updating the size
          // for memory persistence does not incur IO.

          return cache.removeEntry(txn, key).next();
        }
      });
    });
    return p.next(function () {
      return count;
    });
  };

  MemoryLruDelegate.prototype.removeMutationReference = function (txn, key) {
    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);
    return PersistencePromise.resolve();
  };

  MemoryLruDelegate.prototype.removeTarget = function (txn, queryData) {
    var updated = queryData.copy({
      sequenceNumber: txn.currentSequenceNumber
    });
    return this.persistence.getQueryCache().updateQueryData(txn, updated);
  };

  MemoryLruDelegate.prototype.addReference = function (txn, key) {
    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);
    return PersistencePromise.resolve();
  };

  MemoryLruDelegate.prototype.removeReference = function (txn, key) {
    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);
    return PersistencePromise.resolve();
  };

  MemoryLruDelegate.prototype.updateLimboDocument = function (txn, key) {
    this.orphanedSequenceNumbers.set(key, txn.currentSequenceNumber);
    return PersistencePromise.resolve();
  };

  MemoryLruDelegate.prototype.documentSize = function (maybeDoc) {
    var remoteDocument = this.serializer.toDbRemoteDocument(maybeDoc);
    var value;

    if (remoteDocument.document) {
      value = remoteDocument.document;
    } else if (remoteDocument.unknownDocument) {
      value = remoteDocument.unknownDocument;
    } else if (remoteDocument.noDocument) {
      value = remoteDocument.noDocument;
    } else {
      throw fail('Unknown remote document type');
    }

    return JSON.stringify(value).length;
  };

  MemoryLruDelegate.prototype.isPinned = function (txn, key, upperBound) {
    var _this = this;

    return PersistencePromise.or([function () {
      return _this.persistence.mutationQueuesContainKey(txn, key);
    }, function () {
      return PersistencePromise.resolve(_this.inMemoryPins.containsKey(key));
    }, function () {
      return _this.persistence.getQueryCache().containsKey(txn, key);
    }, function () {
      var orphanedAt = _this.orphanedSequenceNumbers.get(key);

      return PersistencePromise.resolve(orphanedAt !== undefined && orphanedAt > upperBound);
    }]);
  };

  MemoryLruDelegate.prototype.getCacheSize = function (txn) {
    return this.persistence.getRemoteDocumentCache().getSize(txn);
  };

  return MemoryLruDelegate;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$5 = 'ExponentialBackoff';
/**
 * A helper for running delayed tasks following an exponential backoff curve
 * between attempts.
 *
 * Each delay is made up of a "base" delay which follows the exponential
 * backoff curve, and a +/- 50% "jitter" that is calculated and added to the
 * base delay. This prevents clients from accidentally synchronizing their
 * delays causing spikes of load to the backend.
 */

var ExponentialBackoff =
/** @class */
function () {
  function ExponentialBackoff(
  /**
   * The AsyncQueue to run backoff operations on.
   */
  queue,
  /**
   * The ID to use when scheduling backoff operations on the AsyncQueue.
   */
  timerId,
  /**
   * The initial delay (used as the base delay on the first retry attempt).
   * Note that jitter will still be applied, so the actual delay could be as
   * little as 0.5*initialDelayMs.
   */
  initialDelayMs,
  /**
   * The multiplier to use to determine the extended base delay after each
   * attempt.
   */
  backoffFactor,
  /**
   * The maximum base delay after which no further backoff is performed.
   * Note that jitter will still be applied, so the actual delay could be as
   * much as 1.5*maxDelayMs.
   */
  maxDelayMs) {
    this.queue = queue;
    this.timerId = timerId;
    this.initialDelayMs = initialDelayMs;
    this.backoffFactor = backoffFactor;
    this.maxDelayMs = maxDelayMs;
    this.timerPromise = null;
    /** The last backoff attempt, as epoch milliseconds. */

    this.lastAttemptTime = Date.now();
    this.reset();
  }
  /**
   * Resets the backoff delay.
   *
   * The very next backoffAndWait() will have no delay. If it is called again
   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and
   * subsequent ones will increase according to the backoffFactor.
   */


  ExponentialBackoff.prototype.reset = function () {
    this.currentBaseMs = 0;
  };
  /**
   * Resets the backoff delay to the maximum delay (e.g. for use after a
   * RESOURCE_EXHAUSTED error).
   */


  ExponentialBackoff.prototype.resetToMax = function () {
    this.currentBaseMs = this.maxDelayMs;
  };
  /**
   * Returns a promise that resolves after currentDelayMs, and increases the
   * delay for any subsequent attempts. If there was a pending backoff operation
   * already, it will be canceled.
   */


  ExponentialBackoff.prototype.backoffAndRun = function (op) {
    var _this = this; // Cancel any pending backoff operation.


    this.cancel(); // First schedule using the current base (which may be 0 and should be
    // honored as such).

    var desiredDelayWithJitterMs = Math.floor(this.currentBaseMs + this.jitterDelayMs()); // Guard against lastAttemptTime being in the future due to a clock change.

    var delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime); // Guard against the backoff delay already being past.

    var remainingDelayMs = Math.max(0, desiredDelayWithJitterMs - delaySoFarMs);

    if (this.currentBaseMs > 0) {
      debug(LOG_TAG$5, "Backing off for " + remainingDelayMs + " ms " + ("(base delay: " + this.currentBaseMs + " ms, ") + ("delay with jitter: " + desiredDelayWithJitterMs + " ms, ") + ("last attempt: " + delaySoFarMs + " ms ago)"));
    }

    this.timerPromise = this.queue.enqueueAfterDelay(this.timerId, remainingDelayMs, function () {
      _this.lastAttemptTime = Date.now();
      return op();
    }); // Apply backoff factor to determine next delay and ensure it is within
    // bounds.

    this.currentBaseMs *= this.backoffFactor;

    if (this.currentBaseMs < this.initialDelayMs) {
      this.currentBaseMs = this.initialDelayMs;
    }

    if (this.currentBaseMs > this.maxDelayMs) {
      this.currentBaseMs = this.maxDelayMs;
    }
  };

  ExponentialBackoff.prototype.cancel = function () {
    if (this.timerPromise !== null) {
      this.timerPromise.cancel();
      this.timerPromise = null;
    }
  };
  /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */


  ExponentialBackoff.prototype.jitterDelayMs = function () {
    return (Math.random() - 0.5) * this.currentBaseMs;
  };

  return ExponentialBackoff;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$6 = 'PersistentStream';
/**
 * PersistentStream can be in one of 5 states (each described in detail below)
 * based on the following state transition diagram:
 *
 *          start() called             auth & connection succeeded
 * INITIAL ----------------> STARTING -----------------------------> OPEN
 *                             ^  |                                   |
 *                             |  |                    error occurred |
 *                             |  \-----------------------------v-----/
 *                             |                                |
 *                    backoff  |                                |
 *                    elapsed  |              start() called    |
 *                             \--- BACKOFF <---------------- ERROR
 *
 * [any state] --------------------------> INITIAL
 *               stop() called or
 *               idle timer expired
 */

var PersistentStreamState;

(function (PersistentStreamState) {
  /**
   * The streaming RPC is not yet running and there's no error condition.
   * Calling start() will start the stream immediately without backoff.
   * While in this state isStarted() will return false.
   */
  PersistentStreamState[PersistentStreamState["Initial"] = 0] = "Initial";
  /**
   * The stream is starting, either waiting for an auth token or for the stream
   * to successfully open. While in this state, isStarted() will return true but
   * isOpen() will return false.
   */

  PersistentStreamState[PersistentStreamState["Starting"] = 1] = "Starting";
  /**
   * The streaming RPC is up and running. Requests and responses can flow
   * freely. Both isStarted() and isOpen() will return true.
   */

  PersistentStreamState[PersistentStreamState["Open"] = 2] = "Open";
  /**
   * The stream encountered an error. The next start attempt will back off.
   * While in this state isStarted() will return false.
   */

  PersistentStreamState[PersistentStreamState["Error"] = 3] = "Error";
  /**
   * An in-between state after an error where the stream is waiting before
   * re-starting. After waiting is complete, the stream will try to open.
   * While in this state isStarted() will return true but isOpen() will return
   * false.
   */

  PersistentStreamState[PersistentStreamState["Backoff"] = 4] = "Backoff";
})(PersistentStreamState || (PersistentStreamState = {}));
/**
 * Initial backoff time in milliseconds after an error.
 * Set to 1s according to https://cloud.google.com/apis/design/errors.
 */


var BACKOFF_INITIAL_DELAY_MS = 1000;
/** Maximum backoff time in milliseconds */

var BACKOFF_MAX_DELAY_MS = 60 * 1000;
var BACKOFF_FACTOR = 1.5;
/** The time a stream stays open after it is marked idle. */

var IDLE_TIMEOUT_MS = 60 * 1000;
/**
 * A PersistentStream is an abstract base class that represents a streaming RPC
 * to the Firestore backend. It's built on top of the connections own support
 * for streaming RPCs, and adds several critical features for our clients:
 *
 *   - Exponential backoff on failure
 *   - Authentication via CredentialsProvider
 *   - Dispatching all callbacks into the shared worker queue
 *   - Closing idle streams after 60 seconds of inactivity
 *
 * Subclasses of PersistentStream implement serialization of models to and
 * from the JSON representation of the protocol buffers for a specific
 * streaming RPC.
 *
 * ## Starting and Stopping
 *
 * Streaming RPCs are stateful and need to be start()ed before messages can
 * be sent and received. The PersistentStream will call the onOpen() function
 * of the listener once the stream is ready to accept requests.
 *
 * Should a start() fail, PersistentStream will call the registered onClose()
 * listener with a FirestoreError indicating what went wrong.
 *
 * A PersistentStream can be started and stopped repeatedly.
 *
 * Generic types:
 *  SendType: The type of the outgoing message of the underlying
 *    connection stream
 *  ReceiveType: The type of the incoming message of the underlying
 *    connection stream
 *  ListenerType: The type of the listener that will be used for callbacks
 */

var PersistentStream =
/** @class */
function () {
  function PersistentStream(queue, connectionTimerId, idleTimerId, connection, credentialsProvider, listener) {
    this.queue = queue;
    this.idleTimerId = idleTimerId;
    this.connection = connection;
    this.credentialsProvider = credentialsProvider;
    this.listener = listener;
    this.state = PersistentStreamState.Initial;
    /**
     * A close count that's incremented every time the stream is closed; used by
     * getCloseGuardedDispatcher() to invalidate callbacks that happen after
     * close.
     */

    this.closeCount = 0;
    this.idleTimer = null;
    this.stream = null;
    this.backoff = new ExponentialBackoff(queue, connectionTimerId, BACKOFF_INITIAL_DELAY_MS, BACKOFF_FACTOR, BACKOFF_MAX_DELAY_MS);
  }
  /**
   * Returns true if start() has been called and no error has occurred. True
   * indicates the stream is open or in the process of opening (which
   * encompasses respecting backoff, getting auth tokens, and starting the
   * actual RPC). Use isOpen() to determine if the stream is open and ready for
   * outbound requests.
   */


  PersistentStream.prototype.isStarted = function () {
    return this.state === PersistentStreamState.Starting || this.state === PersistentStreamState.Open || this.state === PersistentStreamState.Backoff;
  };
  /**
   * Returns true if the underlying RPC is open (the onOpen() listener has been
   * called) and the stream is ready for outbound requests.
   */


  PersistentStream.prototype.isOpen = function () {
    return this.state === PersistentStreamState.Open;
  };
  /**
   * Starts the RPC. Only allowed if isStarted() returns false. The stream is
   * not immediately ready for use: onOpen() will be invoked when the RPC is
   * ready for outbound requests, at which point isOpen() will return true.
   *
   * When start returns, isStarted() will return true.
   */


  PersistentStream.prototype.start = function () {
    if (this.state === PersistentStreamState.Error) {
      this.performBackoff();
      return;
    }

    assert(this.state === PersistentStreamState.Initial, 'Already started');
    this.auth();
  };
  /**
   * Stops the RPC. This call is idempotent and allowed regardless of the
   * current isStarted() state.
   *
   * When stop returns, isStarted() and isOpen() will both return false.
   */


  PersistentStream.prototype.stop = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.isStarted()) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.close(PersistentStreamState.Initial)];

          case 1:
            _a.sent();

            _a.label = 2;

          case 2:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * After an error the stream will usually back off on the next attempt to
   * start it. If the error warrants an immediate restart of the stream, the
   * sender can use this to indicate that the receiver should not back off.
   *
   * Each error will call the onClose() listener. That function can decide to
   * inhibit backoff if required.
   */


  PersistentStream.prototype.inhibitBackoff = function () {
    assert(!this.isStarted(), 'Can only inhibit backoff in a stopped state');
    this.state = PersistentStreamState.Initial;
    this.backoff.reset();
  };
  /**
   * Marks this stream as idle. If no further actions are performed on the
   * stream for one minute, the stream will automatically close itself and
   * notify the stream's onClose() handler with Status.OK. The stream will then
   * be in a !isStarted() state, requiring the caller to start the stream again
   * before further use.
   *
   * Only streams that are in state 'Open' can be marked idle, as all other
   * states imply pending network operations.
   */


  PersistentStream.prototype.markIdle = function () {
    var _this = this; // Starts the idle time if we are in state 'Open' and are not yet already
    // running a timer (in which case the previous idle timeout still applies).


    if (this.isOpen() && this.idleTimer === null) {
      this.idleTimer = this.queue.enqueueAfterDelay(this.idleTimerId, IDLE_TIMEOUT_MS, function () {
        return _this.handleIdleCloseTimer();
      });
    }
  };
  /** Sends a message to the underlying stream. */


  PersistentStream.prototype.sendRequest = function (msg) {
    this.cancelIdleCheck();
    this.stream.send(msg);
  };
  /** Called by the idle timer when the stream should close due to inactivity. */


  PersistentStream.prototype.handleIdleCloseTimer = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        if (this.isOpen()) {
          // When timing out an idle stream there's no reason to force the stream into backoff when
          // it restarts so set the stream state to Initial instead of Error.
          return [2
          /*return*/
          , this.close(PersistentStreamState.Initial)];
        }

        return [2
        /*return*/
        ];
      });
    });
  };
  /** Marks the stream as active again. */


  PersistentStream.prototype.cancelIdleCheck = function () {
    if (this.idleTimer) {
      this.idleTimer.cancel();
      this.idleTimer = null;
    }
  };
  /**
   * Closes the stream and cleans up as necessary:
   *
   * * closes the underlying GRPC stream;
   * * calls the onClose handler with the given 'error';
   * * sets internal stream state to 'finalState';
   * * adjusts the backoff timer based on the error
   *
   * A new stream can be opened by calling start().
   *
   * @param finalState the intended state of the stream after closing.
   * @param error the error the connection was closed with.
   */


  PersistentStream.prototype.close = function (finalState, error$1) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            assert(this.isStarted(), 'Only started streams should be closed.');
            assert(finalState === PersistentStreamState.Error || isNullOrUndefined(error$1), "Can't provide an error when not in an error state."); // Cancel any outstanding timers (they're guaranteed not to execute).

            this.cancelIdleCheck();
            this.backoff.cancel(); // Invalidates any stream-related callbacks (e.g. from auth or the
            // underlying stream), guaranteeing they won't execute.

            this.closeCount++;

            if (finalState !== PersistentStreamState.Error) {
              // If this is an intentional close ensure we don't delay our next connection attempt.
              this.backoff.reset();
            } else if (error$1 && error$1.code === Code.RESOURCE_EXHAUSTED) {
              // Log the error. (Probably either 'quota exceeded' or 'max queue length reached'.)
              error(error$1.toString());
              error('Using maximum backoff delay to prevent overloading the backend.');
              this.backoff.resetToMax();
            } else if (error$1 && error$1.code === Code.UNAUTHENTICATED) {
              // "unauthenticated" error means the token was rejected. Try force refreshing it in case it
              // just expired.
              this.credentialsProvider.invalidateToken();
            } // Clean up the underlying stream because we are no longer interested in events.


            if (this.stream !== null) {
              this.tearDown();
              this.stream.close();
              this.stream = null;
            } // This state must be assigned before calling onClose() to allow the callback to
            // inhibit backoff or otherwise manipulate the state in its non-started state.


            this.state = finalState; // Notify the listener that the stream closed.

            return [4
            /*yield*/
            , this.listener.onClose(error$1)];

          case 1:
            // Notify the listener that the stream closed.
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Can be overridden to perform additional cleanup before the stream is closed.
   * Calling super.tearDown() is not required.
   */


  PersistentStream.prototype.tearDown = function () {};

  PersistentStream.prototype.auth = function () {
    var _this = this;

    assert(this.state === PersistentStreamState.Initial, 'Must be in initial state to auth');
    this.state = PersistentStreamState.Starting;
    var dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount); // TODO(mikelehen): Just use dispatchIfNotClosed, but see TODO below.

    var closeCount = this.closeCount;
    this.credentialsProvider.getToken().then(function (token) {
      // Stream can be stopped while waiting for authentication.
      // TODO(mikelehen): We really should just use dispatchIfNotClosed
      // and let this dispatch onto the queue, but that opened a spec test can
      // of worms that I don't want to deal with in this PR.
      if (_this.closeCount === closeCount) {
        // Normally we'd have to schedule the callback on the AsyncQueue.
        // However, the following calls are safe to be called outside the
        // AsyncQueue since they don't chain asynchronous calls
        _this.startStream(token);
      }
    }, function (error) {
      dispatchIfNotClosed(function () {
        var rpcError = new FirestoreError(Code.UNKNOWN, 'Fetching auth token failed: ' + error.message);
        return _this.handleStreamClose(rpcError);
      });
    });
  };

  PersistentStream.prototype.startStream = function (token) {
    var _this = this;

    assert(this.state === PersistentStreamState.Starting, 'Trying to start stream in a non-starting state');
    var dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);
    this.stream = this.startRpc(token);
    this.stream.onOpen(function () {
      dispatchIfNotClosed(function () {
        assert(_this.state === PersistentStreamState.Starting, 'Expected stream to be in state Starting, but was ' + _this.state);
        _this.state = PersistentStreamState.Open;
        return _this.listener.onOpen();
      });
    });
    this.stream.onClose(function (error) {
      dispatchIfNotClosed(function () {
        return _this.handleStreamClose(error);
      });
    });
    this.stream.onMessage(function (msg) {
      dispatchIfNotClosed(function () {
        return _this.onMessage(msg);
      });
    });
  };

  PersistentStream.prototype.performBackoff = function () {
    var _this = this;

    assert(this.state === PersistentStreamState.Error, 'Should only perform backoff when in Error state');
    this.state = PersistentStreamState.Backoff;
    this.backoff.backoffAndRun(function () {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
          assert(this.state === PersistentStreamState.Backoff, 'Backoff elapsed but state is now: ' + this.state);
          this.state = PersistentStreamState.Initial;
          this.start();
          assert(this.isStarted(), 'PersistentStream should have started');
          return [2
          /*return*/
          ];
        });
      });
    });
  }; // Visible for tests


  PersistentStream.prototype.handleStreamClose = function (error) {
    assert(this.isStarted(), "Can't handle server close on non-started stream");
    debug(LOG_TAG$6, "close with error: " + error);
    this.stream = null; // In theory the stream could close cleanly, however, in our current model
    // we never expect this to happen because if we stop a stream ourselves,
    // this callback will never be called. To prevent cases where we retry
    // without a backoff accidentally, we set the stream to error in all cases.

    return this.close(PersistentStreamState.Error, error);
  };
  /**
   * Returns a "dispatcher" function that dispatches operations onto the
   * AsyncQueue but only runs them if closeCount remains unchanged. This allows
   * us to turn auth / stream callbacks into no-ops if the stream is closed /
   * re-opened, etc.
   */


  PersistentStream.prototype.getCloseGuardedDispatcher = function (startCloseCount) {
    var _this = this;

    return function (fn) {
      _this.queue.enqueueAndForget(function () {
        if (_this.closeCount === startCloseCount) {
          return fn();
        } else {
          debug(LOG_TAG$6, 'stream callback skipped by getCloseGuardedDispatcher.');
          return Promise.resolve();
        }
      });
    };
  };

  return PersistentStream;
}();
/**
 * A PersistentStream that implements the Listen RPC.
 *
 * Once the Listen stream has called the onOpen() listener, any number of
 * listen() and unlisten() calls can be made to control what changes will be
 * sent from the server for ListenResponses.
 */


var PersistentListenStream =
/** @class */
function (_super) {
  tslib_1.__extends(PersistentListenStream, _super);

  function PersistentListenStream(queue, connection, credentials, serializer, listener) {
    var _this = _super.call(this, queue, TimerId.ListenStreamConnectionBackoff, TimerId.ListenStreamIdle, connection, credentials, listener) || this;

    _this.serializer = serializer;
    return _this;
  }

  PersistentListenStream.prototype.startRpc = function (token) {
    return this.connection.openStream('Listen', token);
  };

  PersistentListenStream.prototype.onMessage = function (watchChangeProto) {
    // A successful response means the stream is healthy
    this.backoff.reset();
    var watchChange = this.serializer.fromWatchChange(watchChangeProto);
    var snapshot = this.serializer.versionFromListenResponse(watchChangeProto);
    return this.listener.onWatchChange(watchChange, snapshot);
  };
  /**
   * Registers interest in the results of the given query. If the query
   * includes a resumeToken it will be included in the request. Results that
   * affect the query will be streamed back as WatchChange messages that
   * reference the targetId.
   */


  PersistentListenStream.prototype.watch = function (queryData) {
    var request = {};
    request.database = this.serializer.encodedDatabaseId;
    request.addTarget = this.serializer.toTarget(queryData);
    var labels = this.serializer.toListenRequestLabels(queryData);

    if (labels) {
      request.labels = labels;
    }

    this.sendRequest(request);
  };
  /**
   * Unregisters interest in the results of the query associated with the
   * given targetId.
   */


  PersistentListenStream.prototype.unwatch = function (targetId) {
    var request = {};
    request.database = this.serializer.encodedDatabaseId;
    request.removeTarget = targetId;
    this.sendRequest(request);
  };

  return PersistentListenStream;
}(PersistentStream);
/**
 * A Stream that implements the Write RPC.
 *
 * The Write RPC requires the caller to maintain special streamToken
 * state in between calls, to help the server understand which responses the
 * client has processed by the time the next request is made. Every response
 * will contain a streamToken; this value must be passed to the next
 * request.
 *
 * After calling start() on this stream, the next request must be a handshake,
 * containing whatever streamToken is on hand. Once a response to this
 * request is received, all pending mutations may be submitted. When
 * submitting multiple batches of mutations at the same time, it's
 * okay to use the same streamToken for the calls to writeMutations.
 *
 * TODO(b/33271235): Use proto types
 */


var PersistentWriteStream =
/** @class */
function (_super) {
  tslib_1.__extends(PersistentWriteStream, _super);

  function PersistentWriteStream(queue, connection, credentials, serializer, listener) {
    var _this = _super.call(this, queue, TimerId.WriteStreamConnectionBackoff, TimerId.WriteStreamIdle, connection, credentials, listener) || this;

    _this.serializer = serializer;
    _this.handshakeComplete_ = false;
    return _this;
  }

  Object.defineProperty(PersistentWriteStream.prototype, "handshakeComplete", {
    /**
     * Tracks whether or not a handshake has been successfully exchanged and
     * the stream is ready to accept mutations.
     */
    get: function () {
      return this.handshakeComplete_;
    },
    enumerable: true,
    configurable: true
  }); // Override of PersistentStream.start

  PersistentWriteStream.prototype.start = function () {
    this.handshakeComplete_ = false;

    _super.prototype.start.call(this);
  };

  PersistentWriteStream.prototype.tearDown = function () {
    if (this.handshakeComplete_) {
      this.writeMutations([]);
    }
  };

  PersistentWriteStream.prototype.startRpc = function (token) {
    return this.connection.openStream('Write', token);
  };

  PersistentWriteStream.prototype.onMessage = function (responseProto) {
    // Always capture the last stream token.
    assert(!!responseProto.streamToken, 'Got a write response without a stream token');
    this.lastStreamToken = responseProto.streamToken;

    if (!this.handshakeComplete_) {
      // The first response is always the handshake response
      assert(!responseProto.writeResults || responseProto.writeResults.length === 0, 'Got mutation results for handshake');
      this.handshakeComplete_ = true;
      return this.listener.onHandshakeComplete();
    } else {
      // A successful first write response means the stream is healthy,
      // Note, that we could consider a successful handshake healthy, however,
      // the write itself might be causing an error we want to back off from.
      this.backoff.reset();
      var results = this.serializer.fromWriteResults(responseProto.writeResults, responseProto.commitTime);
      var commitVersion = this.serializer.fromVersion(responseProto.commitTime);
      return this.listener.onMutationResult(commitVersion, results);
    }
  };
  /**
   * Sends an initial streamToken to the server, performing the handshake
   * required to make the StreamingWrite RPC work. Subsequent
   * calls should wait until onHandshakeComplete was called.
   */


  PersistentWriteStream.prototype.writeHandshake = function () {
    assert(this.isOpen(), 'Writing handshake requires an opened stream');
    assert(!this.handshakeComplete_, 'Handshake already completed'); // TODO(dimond): Support stream resumption. We intentionally do not set the
    // stream token on the handshake, ignoring any stream token we might have.

    var request = {};
    request.database = this.serializer.encodedDatabaseId;
    this.sendRequest(request);
  };
  /** Sends a group of mutations to the Firestore backend to apply. */


  PersistentWriteStream.prototype.writeMutations = function (mutations) {
    var _this = this;

    assert(this.isOpen(), 'Writing mutations requires an opened stream');
    assert(this.handshakeComplete_, 'Handshake must be complete before writing mutations');
    assert(this.lastStreamToken.length > 0, 'Trying to write mutation without a token');
    var request = {
      // Protos are typed with string, but we support UInt8Array on Node
      // tslint:disable-next-line:no-any
      streamToken: this.lastStreamToken,
      writes: mutations.map(function (mutation) {
        return _this.serializer.toMutation(mutation);
      })
    };
    this.sendRequest(request);
  };

  return PersistentWriteStream;
}(PersistentStream);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Datastore is a wrapper around the external Google Cloud Datastore grpc API,
 * which provides an interface that is more convenient for the rest of the
 * client SDK architecture to consume.
 */


var Datastore =
/** @class */
function () {
  function Datastore(queue, connection, credentials, serializer) {
    this.queue = queue;
    this.connection = connection;
    this.credentials = credentials;
    this.serializer = serializer;
  }

  Datastore.prototype.newPersistentWriteStream = function (listener) {
    return new PersistentWriteStream(this.queue, this.connection, this.credentials, this.serializer, listener);
  };

  Datastore.prototype.newPersistentWatchStream = function (listener) {
    return new PersistentListenStream(this.queue, this.connection, this.credentials, this.serializer, listener);
  };

  Datastore.prototype.commit = function (mutations) {
    var _this = this;

    var params = {
      database: this.serializer.encodedDatabaseId,
      writes: mutations.map(function (m) {
        return _this.serializer.toMutation(m);
      })
    };
    return this.invokeRPC('Commit', params).then(function (response) {
      return _this.serializer.fromWriteResults(response.writeResults, response.commitTime);
    });
  };

  Datastore.prototype.lookup = function (keys) {
    var _this = this;

    var params = {
      database: this.serializer.encodedDatabaseId,
      documents: keys.map(function (k) {
        return _this.serializer.toName(k);
      })
    };
    return this.invokeStreamingRPC('BatchGetDocuments', params).then(function (response) {
      var docs = maybeDocumentMap();
      response.forEach(function (proto) {
        var doc = _this.serializer.fromMaybeDocument(proto);

        docs = docs.insert(doc.key, doc);
      });
      var result = [];
      keys.forEach(function (key) {
        var doc = docs.get(key);
        assert(!!doc, 'Missing entity in write response for ' + key);
        result.push(doc);
      });
      return result;
    });
  };
  /** Gets an auth token and invokes the provided RPC. */


  Datastore.prototype.invokeRPC = function (rpcName, request) {
    var _this = this;

    return this.credentials.getToken().then(function (token) {
      return _this.connection.invokeRPC(rpcName, request, token);
    }).catch(function (error) {
      if (error.code === Code.UNAUTHENTICATED) {
        _this.credentials.invalidateToken();
      }

      throw error;
    });
  };
  /** Gets an auth token and invokes the provided RPC with streamed results. */


  Datastore.prototype.invokeStreamingRPC = function (rpcName, request) {
    var _this = this;

    return this.credentials.getToken().then(function (token) {
      return _this.connection.invokeStreamingRPC(rpcName, request, token);
    }).catch(function (error) {
      if (error.code === Code.UNAUTHENTICATED) {
        _this.credentials.invalidateToken();
      }

      throw error;
    });
  };

  return Datastore;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Internal transaction object responsible for accumulating the mutations to
 * perform and the base versions for any documents read.
 */


var Transaction =
/** @class */
function () {
  function Transaction(datastore) {
    this.datastore = datastore; // The version of each document that was read during this transaction.

    this.readVersions = documentVersionMap();
    this.mutations = [];
    this.committed = false;
  }

  Transaction.prototype.recordVersion = function (doc) {
    var docVersion;

    if (doc instanceof Document) {
      docVersion = doc.version;
    } else if (doc instanceof NoDocument) {
      // For deleted docs, we must use baseVersion 0 when we overwrite them.
      docVersion = SnapshotVersion.forDeletedDoc();
    } else {
      throw fail('Document in a transaction was a ' + doc.constructor.name);
    }

    var existingVersion = this.readVersions.get(doc.key);

    if (existingVersion !== null) {
      if (!docVersion.isEqual(existingVersion)) {
        // This transaction will fail no matter what.
        throw new FirestoreError(Code.ABORTED, 'Document version changed between two reads.');
      }
    } else {
      this.readVersions = this.readVersions.insert(doc.key, docVersion);
    }
  };

  Transaction.prototype.lookup = function (keys) {
    var _this = this;

    if (this.committed) {
      return Promise.reject('Transaction has already completed.');
    }

    if (this.mutations.length > 0) {
      return Promise.reject('Transactions lookups are invalid after writes.');
    }

    return this.datastore.lookup(keys).then(function (docs) {
      docs.forEach(function (doc) {
        if (doc instanceof NoDocument || doc instanceof Document) {
          _this.recordVersion(doc);
        } else {
          fail('Document in a transaction was a ' + doc.constructor.name);
        }
      });
      return docs;
    });
  };

  Transaction.prototype.write = function (mutations) {
    if (this.committed) {
      throw new FirestoreError(Code.FAILED_PRECONDITION, 'Transaction has already completed.');
    }

    this.mutations = this.mutations.concat(mutations);
  };
  /**
   * Returns the version of this document when it was read in this transaction,
   * as a precondition, or no precondition if it was not read.
   */


  Transaction.prototype.precondition = function (key) {
    var version = this.readVersions.get(key);

    if (version) {
      return Precondition.updateTime(version);
    } else {
      return Precondition.NONE;
    }
  };
  /**
   * Returns the precondition for a document if the operation is an update.
   */


  Transaction.prototype.preconditionForUpdate = function (key) {
    var version = this.readVersions.get(key);

    if (version && version.isEqual(SnapshotVersion.forDeletedDoc())) {
      // The document doesn't exist, so fail the transaction.
      throw new FirestoreError(Code.FAILED_PRECONDITION, "Can't update a document that doesn't exist.");
    } else if (version) {
      // Document exists, base precondition on document update time.
      return Precondition.updateTime(version);
    } else {
      // Document was not read, so we just use the preconditions for a blind
      // update.
      return Precondition.exists(true);
    }
  };

  Transaction.prototype.set = function (key, data) {
    this.write(data.toMutations(key, this.precondition(key)));
  };

  Transaction.prototype.update = function (key, data) {
    this.write(data.toMutations(key, this.preconditionForUpdate(key)));
  };

  Transaction.prototype.delete = function (key) {
    this.write([new DeleteMutation(key, this.precondition(key))]); // Since the delete will be applied before all following writes, we need to
    // ensure that the precondition for the next write will be exists: false.

    this.readVersions = this.readVersions.insert(key, SnapshotVersion.forDeletedDoc());
  };

  Transaction.prototype.commit = function () {
    var _this = this;

    var unwritten = this.readVersions; // For each mutation, note that the doc was written.

    this.mutations.forEach(function (mutation) {
      unwritten = unwritten.remove(mutation.key);
    });

    if (!unwritten.isEmpty()) {
      return Promise.reject(Error('Every document read in a transaction must also be written.'));
    }

    return this.datastore.commit(this.mutations).then(function () {
      _this.committed = true;
    });
  };

  return Transaction;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Describes the online state of the Firestore client. Note that this does not
 * indicate whether or not the remote store is trying to connect or not. This is
 * primarily used by the View / EventManager code to change their behavior while
 * offline (e.g. get() calls shouldn't wait for data from the server and
 * snapshot events should set metadata.isFromCache=true).
 */


var OnlineState;

(function (OnlineState) {
  /**
   * The Firestore client is in an unknown online state. This means the client
   * is either not actively trying to establish a connection or it is currently
   * trying to establish a connection, but it has not succeeded or failed yet.
   * Higher-level components should not operate in offline mode.
   */
  OnlineState[OnlineState["Unknown"] = 0] = "Unknown";
  /**
   * The client is connected and the connections are healthy. This state is
   * reached after a successful connection and there has been at least one
   * successful message received from the backends.
   */

  OnlineState[OnlineState["Online"] = 1] = "Online";
  /**
   * The client is either trying to establish a connection but failing, or it
   * has been explicitly marked offline via a call to disableNetwork().
   * Higher-level components should operate in offline mode.
   */

  OnlineState[OnlineState["Offline"] = 2] = "Offline";
})(OnlineState || (OnlineState = {}));
/** The source of an online state event. */


var OnlineStateSource;

(function (OnlineStateSource) {
  OnlineStateSource[OnlineStateSource["RemoteStore"] = 0] = "RemoteStore";
  OnlineStateSource[OnlineStateSource["SharedClientState"] = 1] = "SharedClientState";
})(OnlineStateSource || (OnlineStateSource = {}));
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$7 = 'OnlineStateTracker'; // To deal with transient failures, we allow multiple stream attempts before
// giving up and transitioning from OnlineState.Unknown to Offline.
// TODO(mikelehen): This used to be set to 2 as a mitigation for b/66228394.
// @jdimond thinks that bug is sufficiently fixed so that we can set this back
// to 1. If that works okay, we could potentially remove this logic entirely.

var MAX_WATCH_STREAM_FAILURES = 1; // To deal with stream attempts that don't succeed or fail in a timely manner,
// we have a timeout for OnlineState to reach Online or Offline.
// If the timeout is reached, we transition to Offline rather than waiting
// indefinitely.

var ONLINE_STATE_TIMEOUT_MS = 10 * 1000;
/**
 * A component used by the RemoteStore to track the OnlineState (that is,
 * whether or not the client as a whole should be considered to be online or
 * offline), implementing the appropriate heuristics.
 *
 * In particular, when the client is trying to connect to the backend, we
 * allow up to MAX_WATCH_STREAM_FAILURES within ONLINE_STATE_TIMEOUT_MS for
 * a connection to succeed. If we have too many failures or the timeout elapses,
 * then we set the OnlineState to Offline, and the client will behave as if
 * it is offline (get()s will return cached data, etc.).
 */

var OnlineStateTracker =
/** @class */
function () {
  function OnlineStateTracker(asyncQueue, onlineStateHandler) {
    this.asyncQueue = asyncQueue;
    this.onlineStateHandler = onlineStateHandler;
    /** The current OnlineState. */

    this.state = OnlineState.Unknown;
    /**
     * A count of consecutive failures to open the stream. If it reaches the
     * maximum defined by MAX_WATCH_STREAM_FAILURES, we'll set the OnlineState to
     * Offline.
     */

    this.watchStreamFailures = 0;
    /**
     * A timer that elapses after ONLINE_STATE_TIMEOUT_MS, at which point we
     * transition from OnlineState.Unknown to OnlineState.Offline without waiting
     * for the stream to actually fail (MAX_WATCH_STREAM_FAILURES times).
     */

    this.onlineStateTimer = null;
    /**
     * Whether the client should log a warning message if it fails to connect to
     * the backend (initially true, cleared after a successful stream, or if we've
     * logged the message already).
     */

    this.shouldWarnClientIsOffline = true;
  }
  /**
   * Called by RemoteStore when a watch stream is started (including on each
   * backoff attempt).
   *
   * If this is the first attempt, it sets the OnlineState to Unknown and starts
   * the onlineStateTimer.
   */


  OnlineStateTracker.prototype.handleWatchStreamStart = function () {
    var _this = this;

    if (this.watchStreamFailures === 0) {
      this.setAndBroadcast(OnlineState.Unknown);
      assert(this.onlineStateTimer === null, "onlineStateTimer shouldn't be started yet");
      this.onlineStateTimer = this.asyncQueue.enqueueAfterDelay(TimerId.OnlineStateTimeout, ONLINE_STATE_TIMEOUT_MS, function () {
        _this.onlineStateTimer = null;
        assert(_this.state === OnlineState.Unknown, 'Timer should be canceled if we transitioned to a different state.');

        _this.logClientOfflineWarningIfNecessary("Backend didn't respond within " + ONLINE_STATE_TIMEOUT_MS / 1000 + " " + "seconds.");

        _this.setAndBroadcast(OnlineState.Offline); // NOTE: handleWatchStreamFailure() will continue to increment
        // watchStreamFailures even though we are already marked Offline,
        // but this is non-harmful.


        return Promise.resolve();
      });
    }
  };
  /**
   * Updates our OnlineState as appropriate after the watch stream reports a
   * failure. The first failure moves us to the 'Unknown' state. We then may
   * allow multiple failures (based on MAX_WATCH_STREAM_FAILURES) before we
   * actually transition to the 'Offline' state.
   */


  OnlineStateTracker.prototype.handleWatchStreamFailure = function (error) {
    if (this.state === OnlineState.Online) {
      this.setAndBroadcast(OnlineState.Unknown); // To get to OnlineState.Online, set() must have been called which would
      // have reset our heuristics.

      assert(this.watchStreamFailures === 0, 'watchStreamFailures must be 0');
      assert(this.onlineStateTimer === null, 'onlineStateTimer must be null');
    } else {
      this.watchStreamFailures++;

      if (this.watchStreamFailures >= MAX_WATCH_STREAM_FAILURES) {
        this.clearOnlineStateTimer();
        this.logClientOfflineWarningIfNecessary("Connection failed " + MAX_WATCH_STREAM_FAILURES + " " + ("times. Most recent error: " + error.toString()));
        this.setAndBroadcast(OnlineState.Offline);
      }
    }
  };
  /**
   * Explicitly sets the OnlineState to the specified state.
   *
   * Note that this resets our timers / failure counters, etc. used by our
   * Offline heuristics, so must not be used in place of
   * handleWatchStreamStart() and handleWatchStreamFailure().
   */


  OnlineStateTracker.prototype.set = function (newState) {
    this.clearOnlineStateTimer();
    this.watchStreamFailures = 0;

    if (newState === OnlineState.Online) {
      // We've connected to watch at least once. Don't warn the developer
      // about being offline going forward.
      this.shouldWarnClientIsOffline = false;
    }

    this.setAndBroadcast(newState);
  };

  OnlineStateTracker.prototype.setAndBroadcast = function (newState) {
    if (newState !== this.state) {
      this.state = newState;
      this.onlineStateHandler(newState);
    }
  };

  OnlineStateTracker.prototype.logClientOfflineWarningIfNecessary = function (details) {
    var message = "Could not reach Cloud Firestore backend. " + details + "\n" + "This typically indicates that your device does not have a healthy " + "Internet connection at the moment. The client will operate in offline " + "mode until it is able to successfully connect to the backend.";

    if (this.shouldWarnClientIsOffline) {
      error(message);
      this.shouldWarnClientIsOffline = false;
    } else {
      debug(LOG_TAG$7, message);
    }
  };

  OnlineStateTracker.prototype.clearOnlineStateTimer = function () {
    if (this.onlineStateTimer !== null) {
      this.onlineStateTimer.cancel();
      this.onlineStateTimer = null;
    }
  };

  return OnlineStateTracker;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$8 = 'RemoteStore'; // TODO(b/35853402): Negotiate this with the stream.

var MAX_PENDING_WRITES = 10;
/**
 * RemoteStore - An interface to remotely stored data, basically providing a
 * wrapper around the Datastore that is more reliable for the rest of the
 * system.
 *
 * RemoteStore is responsible for maintaining the connection to the server.
 * - maintaining a list of active listens.
 * - reconnecting when the connection is dropped.
 * - resuming all the active listens on reconnect.
 *
 * RemoteStore handles all incoming events from the Datastore.
 * - listening to the watch stream and repackaging the events as RemoteEvents
 * - notifying SyncEngine of any changes to the active listens.
 *
 * RemoteStore takes writes from other components and handles them reliably.
 * - pulling pending mutations from LocalStore and sending them to Datastore.
 * - retrying mutations that failed because of network problems.
 * - acking mutations to the SyncEngine once they are accepted or rejected.
 */

var RemoteStore =
/** @class */
function () {
  function RemoteStore(
  /**
   * The local store, used to fill the write pipeline with outbound mutations.
   */
  localStore,
  /** The client-side proxy for interacting with the backend. */
  datastore, asyncQueue, onlineStateHandler) {
    this.localStore = localStore;
    this.datastore = datastore;
    /**
     * A list of up to MAX_PENDING_WRITES writes that we have fetched from the
     * LocalStore via fillWritePipeline() and have or will send to the write
     * stream.
     *
     * Whenever writePipeline.length > 0 the RemoteStore will attempt to start or
     * restart the write stream. When the stream is established the writes in the
     * pipeline will be sent in order.
     *
     * Writes remain in writePipeline until they are acknowledged by the backend
     * and thus will automatically be re-sent if the stream is interrupted /
     * restarted before they're acknowledged.
     *
     * Write responses from the backend are linked to their originating request
     * purely based on order, and so we can just shift() writes from the front of
     * the writePipeline as we receive responses.
     */

    this.writePipeline = [];
    /**
     * A mapping of watched targets that the client cares about tracking and the
     * user has explicitly called a 'listen' for this target.
     *
     * These targets may or may not have been sent to or acknowledged by the
     * server. On re-establishing the listen stream, these targets should be sent
     * to the server. The targets removed with unlistens are removed eagerly
     * without waiting for confirmation from the listen stream.
     */

    this.listenTargets = {};
    this.watchChangeAggregator = null;
    /**
     * Set to true by enableNetwork() and false by disableNetwork() and indicates
     * the user-preferred network state.
     */

    this.networkEnabled = false;
    this.isPrimary = false;
    this.onlineStateTracker = new OnlineStateTracker(asyncQueue, onlineStateHandler); // Create streams (but note they're not started yet).

    this.watchStream = this.datastore.newPersistentWatchStream({
      onOpen: this.onWatchStreamOpen.bind(this),
      onClose: this.onWatchStreamClose.bind(this),
      onWatchChange: this.onWatchStreamChange.bind(this)
    });
    this.writeStream = this.datastore.newPersistentWriteStream({
      onOpen: this.onWriteStreamOpen.bind(this),
      onClose: this.onWriteStreamClose.bind(this),
      onHandshakeComplete: this.onWriteHandshakeComplete.bind(this),
      onMutationResult: this.onMutationResult.bind(this)
    });
  }
  /**
   * Starts up the remote store, creating streams, restoring state from
   * LocalStore, etc.
   */


  RemoteStore.prototype.start = function () {
    return this.enableNetwork();
  };
  /** Re-enables the network. Idempotent. */


  RemoteStore.prototype.enableNetwork = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _a;

      return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            this.networkEnabled = true;
            if (!this.canUseNetwork()) return [3
            /*break*/
            , 3];
            _a = this.writeStream;
            return [4
            /*yield*/
            , this.localStore.getLastStreamToken()];

          case 1:
            _a.lastStreamToken = _b.sent();

            if (this.shouldStartWatchStream()) {
              this.startWatchStream();
            } else {
              this.onlineStateTracker.set(OnlineState.Unknown);
            } // This will start the write stream if necessary.


            return [4
            /*yield*/
            , this.fillWritePipeline()];

          case 2:
            // This will start the write stream if necessary.
            _b.sent();

            _b.label = 3;

          case 3:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Temporarily disables the network. The network can be re-enabled using
   * enableNetwork().
   */


  RemoteStore.prototype.disableNetwork = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.networkEnabled = false;
            return [4
            /*yield*/
            , this.disableNetworkInternal()];

          case 1:
            _a.sent(); // Set the OnlineState to Offline so get()s return from cache, etc.


            this.onlineStateTracker.set(OnlineState.Offline);
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  RemoteStore.prototype.disableNetworkInternal = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            return [4
            /*yield*/
            , this.writeStream.stop()];

          case 1:
            _a.sent();

            return [4
            /*yield*/
            , this.watchStream.stop()];

          case 2:
            _a.sent();

            if (this.writePipeline.length > 0) {
              debug(LOG_TAG$8, "Stopping write stream with " + this.writePipeline.length + " pending writes");
              this.writePipeline = [];
            }

            this.cleanUpWatchStreamState();
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  RemoteStore.prototype.shutdown = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            debug(LOG_TAG$8, 'RemoteStore shutting down.');
            this.networkEnabled = false;
            return [4
            /*yield*/
            , this.disableNetworkInternal()];

          case 1:
            _a.sent(); // Set the OnlineState to Unknown (rather than Offline) to avoid potentially
            // triggering spurious listener events with cached data, etc.


            this.onlineStateTracker.set(OnlineState.Unknown);
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /** Starts new listen for the given query. Uses resume token if provided */


  RemoteStore.prototype.listen = function (queryData) {
    assert(!contains(this.listenTargets, queryData.targetId), 'listen called with duplicate targetId!'); // Mark this as something the client is currently listening for.

    this.listenTargets[queryData.targetId] = queryData;

    if (this.shouldStartWatchStream()) {
      // The listen will be sent in onWatchStreamOpen
      this.startWatchStream();
    } else if (this.watchStream.isOpen()) {
      this.sendWatchRequest(queryData);
    }
  };
  /** Removes the listen from server */


  RemoteStore.prototype.unlisten = function (targetId) {
    assert(contains(this.listenTargets, targetId), 'unlisten called without assigned target ID!');
    delete this.listenTargets[targetId];

    if (this.watchStream.isOpen()) {
      this.sendUnwatchRequest(targetId);
    }

    if (isEmpty(this.listenTargets)) {
      if (this.watchStream.isOpen()) {
        this.watchStream.markIdle();
      } else if (this.canUseNetwork()) {
        // Revert to OnlineState.Unknown if the watch stream is not open and we
        // have no listeners, since without any listens to send we cannot
        // confirm if the stream is healthy and upgrade to OnlineState.Online.
        this.onlineStateTracker.set(OnlineState.Unknown);
      }
    }
  };
  /** {@link TargetMetadataProvider.getQueryDataForTarget} */


  RemoteStore.prototype.getQueryDataForTarget = function (targetId) {
    return this.listenTargets[targetId] || null;
  };
  /** {@link TargetMetadataProvider.getRemoteKeysForTarget} */


  RemoteStore.prototype.getRemoteKeysForTarget = function (targetId) {
    return this.syncEngine.getRemoteKeysForTarget(targetId);
  };
  /**
   * We need to increment the the expected number of pending responses we're due
   * from watch so we wait for the ack to process any messages from this target.
   */


  RemoteStore.prototype.sendWatchRequest = function (queryData) {
    this.watchChangeAggregator.recordPendingTargetRequest(queryData.targetId);
    this.watchStream.watch(queryData);
  };
  /**
   * We need to increment the expected number of pending responses we're due
   * from watch so we wait for the removal on the server before we process any
   * messages from this target.
   */


  RemoteStore.prototype.sendUnwatchRequest = function (targetId) {
    this.watchChangeAggregator.recordPendingTargetRequest(targetId);
    this.watchStream.unwatch(targetId);
  };

  RemoteStore.prototype.startWatchStream = function () {
    assert(this.shouldStartWatchStream(), 'startWatchStream() called when shouldStartWatchStream() is false.');
    this.watchChangeAggregator = new WatchChangeAggregator(this);
    this.watchStream.start();
    this.onlineStateTracker.handleWatchStreamStart();
  };
  /**
   * Returns whether the watch stream should be started because it's necessary
   * and has not yet been started.
   */


  RemoteStore.prototype.shouldStartWatchStream = function () {
    return this.canUseNetwork() && !this.watchStream.isStarted() && !isEmpty(this.listenTargets);
  };

  RemoteStore.prototype.canUseNetwork = function () {
    return this.isPrimary && this.networkEnabled;
  };

  RemoteStore.prototype.cleanUpWatchStreamState = function () {
    this.watchChangeAggregator = null;
  };

  RemoteStore.prototype.onWatchStreamOpen = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        forEachNumber(this.listenTargets, function (targetId, queryData) {
          _this.sendWatchRequest(queryData);
        });
        return [2
        /*return*/
        ];
      });
    });
  };

  RemoteStore.prototype.onWatchStreamClose = function (error) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        if (error === undefined) {
          // Graceful stop (due to stop() or idle timeout). Make sure that's
          // desirable.
          assert(!this.shouldStartWatchStream(), 'Watch stream was stopped gracefully while still needed.');
        }

        this.cleanUpWatchStreamState(); // If we still need the watch stream, retry the connection.

        if (this.shouldStartWatchStream()) {
          this.onlineStateTracker.handleWatchStreamFailure(error);
          this.startWatchStream();
        } else {
          // No need to restart watch stream because there are no active targets.
          // The online state is set to unknown because there is no active attempt
          // at establishing a connection
          this.onlineStateTracker.set(OnlineState.Unknown);
        }

        return [2
        /*return*/
        ];
      });
    });
  };

  RemoteStore.prototype.onWatchStreamChange = function (watchChange, snapshotVersion) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var lastRemoteSnapshotVersion;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            // Mark the client as online since we got a message from the server
            this.onlineStateTracker.set(OnlineState.Online);

            if (watchChange instanceof WatchTargetChange && watchChange.state === WatchTargetChangeState.Removed && watchChange.cause) {
              // There was an error on a target, don't wait for a consistent snapshot
              // to raise events
              return [2
              /*return*/
              , this.handleTargetError(watchChange)];
            }

            if (watchChange instanceof DocumentWatchChange) {
              this.watchChangeAggregator.handleDocumentChange(watchChange);
            } else if (watchChange instanceof ExistenceFilterChange) {
              this.watchChangeAggregator.handleExistenceFilter(watchChange);
            } else {
              assert(watchChange instanceof WatchTargetChange, 'Expected watchChange to be an instance of WatchTargetChange');
              this.watchChangeAggregator.handleTargetChange(watchChange);
            }

            if (!!snapshotVersion.isEqual(SnapshotVersion.MIN)) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , this.localStore.getLastRemoteSnapshotVersion()];

          case 1:
            lastRemoteSnapshotVersion = _a.sent();
            if (!(snapshotVersion.compareTo(lastRemoteSnapshotVersion) >= 0)) return [3
            /*break*/
            , 3]; // We have received a target change with a global snapshot if the snapshot
            // version is not equal to SnapshotVersion.MIN.

            return [4
            /*yield*/
            , this.raiseWatchSnapshot(snapshotVersion)];

          case 2:
            // We have received a target change with a global snapshot if the snapshot
            // version is not equal to SnapshotVersion.MIN.
            _a.sent();

            _a.label = 3;

          case 3:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Takes a batch of changes from the Datastore, repackages them as a
   * RemoteEvent, and passes that on to the listener, which is typically the
   * SyncEngine.
   */


  RemoteStore.prototype.raiseWatchSnapshot = function (snapshotVersion) {
    var _this = this;

    assert(!snapshotVersion.isEqual(SnapshotVersion.MIN), "Can't raise event for unknown SnapshotVersion");
    var remoteEvent = this.watchChangeAggregator.createRemoteEvent(snapshotVersion); // Update in-memory resume tokens. LocalStore will update the
    // persistent view of these when applying the completed RemoteEvent.

    forEachNumber(remoteEvent.targetChanges, function (targetId, change) {
      if (change.resumeToken.length > 0) {
        var queryData = _this.listenTargets[targetId]; // A watched target might have been removed already.

        if (queryData) {
          _this.listenTargets[targetId] = queryData.copy({
            resumeToken: change.resumeToken,
            snapshotVersion: snapshotVersion
          });
        }
      }
    }); // Re-establish listens for the targets that have been invalidated by
    // existence filter mismatches.

    remoteEvent.targetMismatches.forEach(function (targetId) {
      var queryData = _this.listenTargets[targetId];

      if (!queryData) {
        // A watched target might have been removed already.
        return;
      } // Clear the resume token for the query, since we're in a known mismatch
      // state.


      _this.listenTargets[targetId] = queryData.copy({
        resumeToken: emptyByteString()
      }); // Cause a hard reset by unwatching and rewatching immediately, but
      // deliberately don't send a resume token so that we get a full update.

      _this.sendUnwatchRequest(targetId); // Mark the query we send as being on behalf of an existence filter
      // mismatch, but don't actually retain that in listenTargets. This ensures
      // that we flag the first re-listen this way without impacting future
      // listens of this target (that might happen e.g. on reconnect).


      var requestQueryData = new QueryData(queryData.query, targetId, QueryPurpose.ExistenceFilterMismatch, queryData.sequenceNumber);

      _this.sendWatchRequest(requestQueryData);
    }); // Finally raise remote event

    return this.syncEngine.applyRemoteEvent(remoteEvent);
  };
  /** Handles an error on a target */


  RemoteStore.prototype.handleTargetError = function (watchChange) {
    var _this = this;

    assert(!!watchChange.cause, 'Handling target error without a cause');
    var error = watchChange.cause;
    var promiseChain = Promise.resolve();
    watchChange.targetIds.forEach(function (targetId) {
      promiseChain = promiseChain.then(function () {
        return tslib_1.__awaiter(_this, void 0, void 0, function () {
          return tslib_1.__generator(this, function (_a) {
            // A watched target might have been removed already.
            if (contains(this.listenTargets, targetId)) {
              delete this.listenTargets[targetId];
              this.watchChangeAggregator.removeTarget(targetId);
              return [2
              /*return*/
              , this.syncEngine.rejectListen(targetId, error)];
            }

            return [2
            /*return*/
            ];
          });
        });
      });
    });
    return promiseChain;
  };
  /**
   * Attempts to fill our write pipeline with writes from the LocalStore.
   *
   * Called internally to bootstrap or refill the write pipeline and by
   * SyncEngine whenever there are new mutations to process.
   *
   * Starts the write stream if necessary.
   */


  RemoteStore.prototype.fillWritePipeline = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var lastBatchIdRetrieved, batch;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.canAddToWritePipeline()) return [3
            /*break*/
            , 4];
            lastBatchIdRetrieved = this.writePipeline.length > 0 ? this.writePipeline[this.writePipeline.length - 1].batchId : BATCHID_UNKNOWN;
            return [4
            /*yield*/
            , this.localStore.nextMutationBatch(lastBatchIdRetrieved)];

          case 1:
            batch = _a.sent();
            if (!(batch === null)) return [3
            /*break*/
            , 2];

            if (this.writePipeline.length === 0) {
              this.writeStream.markIdle();
            }

            return [3
            /*break*/
            , 4];

          case 2:
            this.addToWritePipeline(batch);
            return [4
            /*yield*/
            , this.fillWritePipeline()];

          case 3:
            _a.sent();

            _a.label = 4;

          case 4:
            if (this.shouldStartWriteStream()) {
              this.startWriteStream();
            }

            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Returns true if we can add to the write pipeline (i.e. the network is
   * enabled and the write pipeline is not full).
   */


  RemoteStore.prototype.canAddToWritePipeline = function () {
    return this.canUseNetwork() && this.writePipeline.length < MAX_PENDING_WRITES;
  }; // For testing


  RemoteStore.prototype.outstandingWrites = function () {
    return this.writePipeline.length;
  };
  /**
   * Queues additional writes to be sent to the write stream, sending them
   * immediately if the write stream is established.
   */


  RemoteStore.prototype.addToWritePipeline = function (batch) {
    assert(this.canAddToWritePipeline(), 'addToWritePipeline called when pipeline is full');
    this.writePipeline.push(batch);

    if (this.writeStream.isOpen() && this.writeStream.handshakeComplete) {
      this.writeStream.writeMutations(batch.mutations);
    }
  };

  RemoteStore.prototype.shouldStartWriteStream = function () {
    return this.canUseNetwork() && !this.writeStream.isStarted() && this.writePipeline.length > 0;
  };

  RemoteStore.prototype.startWriteStream = function () {
    assert(this.shouldStartWriteStream(), 'startWriteStream() called when shouldStartWriteStream() is false.');
    this.writeStream.start();
  };

  RemoteStore.prototype.onWriteStreamOpen = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        this.writeStream.writeHandshake();
        return [2
        /*return*/
        ];
      });
    });
  };

  RemoteStore.prototype.onWriteHandshakeComplete = function () {
    var _this = this; // Record the stream token.


    return this.localStore.setLastStreamToken(this.writeStream.lastStreamToken).then(function () {
      // Send the write pipeline now that the stream is established.
      for (var _i = 0, _a = _this.writePipeline; _i < _a.length; _i++) {
        var batch = _a[_i];

        _this.writeStream.writeMutations(batch.mutations);
      }
    }).catch(ignoreIfPrimaryLeaseLoss);
  };

  RemoteStore.prototype.onMutationResult = function (commitVersion, results) {
    var _this = this; // This is a response to a write containing mutations and should be
    // correlated to the first write in our write pipeline.


    assert(this.writePipeline.length > 0, 'Got result for empty write pipeline');
    var batch = this.writePipeline.shift();
    var success = MutationBatchResult.from(batch, commitVersion, results, this.writeStream.lastStreamToken);
    return this.syncEngine.applySuccessfulWrite(success).then(function () {
      // It's possible that with the completion of this mutation another
      // slot has freed up.
      return _this.fillWritePipeline();
    });
  };

  RemoteStore.prototype.onWriteStreamClose = function (error) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var errorHandling;

      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        if (error === undefined) {
          // Graceful stop (due to stop() or idle timeout). Make sure that's
          // desirable.
          assert(!this.shouldStartWriteStream(), 'Write stream was stopped gracefully while still needed.');
        } // If the write stream closed due to an error, invoke the error callbacks if
        // there are pending writes.


        if (error && this.writePipeline.length > 0) {
          errorHandling = void 0;

          if (this.writeStream.handshakeComplete) {
            // This error affects the actual write.
            errorHandling = this.handleWriteError(error);
          } else {
            // If there was an error before the handshake has finished, it's
            // possible that the server is unable to process the stream token
            // we're sending. (Perhaps it's too old?)
            errorHandling = this.handleHandshakeError(error);
          }

          return [2
          /*return*/
          , errorHandling.then(function () {
            // The write stream might have been started by refilling the write
            // pipeline for failed writes
            if (_this.shouldStartWriteStream()) {
              _this.startWriteStream();
            }
          })];
        }

        return [2
        /*return*/
        ];
      });
    });
  };

  RemoteStore.prototype.handleHandshakeError = function (error) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        // Reset the token if it's a permanent error, signaling the write stream is
        // no longer valid. Note that the handshake does not count as a write: see
        // comments on isPermanentWriteError for details.
        if (isPermanentError(error.code)) {
          debug(LOG_TAG$8, 'RemoteStore error before completed handshake; resetting stream token: ', this.writeStream.lastStreamToken);
          this.writeStream.lastStreamToken = emptyByteString();
          return [2
          /*return*/
          , this.localStore.setLastStreamToken(emptyByteString()).catch(ignoreIfPrimaryLeaseLoss)];
        }

        return [2
        /*return*/
        ];
      });
    });
  };

  RemoteStore.prototype.handleWriteError = function (error) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var batch;

      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        // Only handle permanent errors here. If it's transient, just let the retry
        // logic kick in.
        if (isPermanentWriteError(error.code)) {
          batch = this.writePipeline.shift(); // In this case it's also unlikely that the server itself is melting
          // down -- this was just a bad request so inhibit backoff on the next
          // restart.

          this.writeStream.inhibitBackoff();
          return [2
          /*return*/
          , this.syncEngine.rejectFailedWrite(batch.batchId, error).then(function () {
            // It's possible that with the completion of this mutation
            // another slot has freed up.
            return _this.fillWritePipeline();
          })];
        }

        return [2
        /*return*/
        ];
      });
    });
  };

  RemoteStore.prototype.createTransaction = function () {
    return new Transaction(this.datastore);
  };

  RemoteStore.prototype.handleCredentialChange = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!this.canUseNetwork()) return [3
            /*break*/
            , 3]; // Tear down and re-create our network streams. This will ensure we get a fresh auth token
            // for the new user and re-fill the write pipeline with new mutations from the LocalStore
            // (since mutations are per-user).

            debug(LOG_TAG$8, 'RemoteStore restarting streams for new credential');
            this.networkEnabled = false;
            return [4
            /*yield*/
            , this.disableNetworkInternal()];

          case 1:
            _a.sent();

            this.onlineStateTracker.set(OnlineState.Unknown);
            return [4
            /*yield*/
            , this.enableNetwork()];

          case 2:
            _a.sent();

            _a.label = 3;

          case 3:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Toggles the network state when the client gains or loses its primary lease.
   */


  RemoteStore.prototype.applyPrimaryState = function (isPrimary) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.isPrimary = isPrimary;
            if (!(isPrimary && this.networkEnabled)) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.enableNetwork()];

          case 1:
            _a.sent();

            return [3
            /*break*/
            , 4];

          case 2:
            if (!!isPrimary) return [3
            /*break*/
            , 4];
            return [4
            /*yield*/
            , this.disableNetworkInternal()];

          case 3:
            _a.sent();

            this.onlineStateTracker.set(OnlineState.Unknown);
            _a.label = 4;

          case 4:
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  return RemoteStore;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Holds the listeners and the last received ViewSnapshot for a query being
 * tracked by EventManager.
 */


var QueryListenersInfo =
/** @class */
function () {
  function QueryListenersInfo() {
    this.listeners = [];
  }

  return QueryListenersInfo;
}();
/**
 * EventManager is responsible for mapping queries to query event emitters.
 * It handles "fan-out". -- Identical queries will re-use the same watch on the
 * backend.
 */


var EventManager =
/** @class */
function () {
  function EventManager(syncEngine) {
    this.syncEngine = syncEngine;
    this.queries = new ObjectMap(function (q) {
      return q.canonicalId();
    });
    this.onlineState = OnlineState.Unknown;
    this.syncEngine.subscribe(this);
  }

  EventManager.prototype.listen = function (listener) {
    var query = listener.query;
    var firstListen = false;
    var queryInfo = this.queries.get(query);

    if (!queryInfo) {
      firstListen = true;
      queryInfo = new QueryListenersInfo();
      this.queries.set(query, queryInfo);
    }

    queryInfo.listeners.push(listener);
    listener.applyOnlineStateChange(this.onlineState);
    if (queryInfo.viewSnap) listener.onViewSnapshot(queryInfo.viewSnap);

    if (firstListen) {
      return this.syncEngine.listen(query).then(function (targetId) {
        queryInfo.targetId = targetId;
        return targetId;
      });
    } else {
      return Promise.resolve(queryInfo.targetId);
    }
  };

  EventManager.prototype.unlisten = function (listener) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var query, lastListen, queryInfo, i;
      return tslib_1.__generator(this, function (_a) {
        query = listener.query;
        lastListen = false;
        queryInfo = this.queries.get(query);

        if (queryInfo) {
          i = queryInfo.listeners.indexOf(listener);

          if (i >= 0) {
            queryInfo.listeners.splice(i, 1);
            lastListen = queryInfo.listeners.length === 0;
          }
        }

        if (lastListen) {
          this.queries.delete(query);
          return [2
          /*return*/
          , this.syncEngine.unlisten(query)];
        }

        return [2
        /*return*/
        ];
      });
    });
  };

  EventManager.prototype.onWatchChange = function (viewSnaps) {
    for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {
      var viewSnap = viewSnaps_1[_i];
      var query = viewSnap.query;
      var queryInfo = this.queries.get(query);

      if (queryInfo) {
        for (var _a = 0, _b = queryInfo.listeners; _a < _b.length; _a++) {
          var listener = _b[_a];
          listener.onViewSnapshot(viewSnap);
        }

        queryInfo.viewSnap = viewSnap;
      }
    }
  };

  EventManager.prototype.onWatchError = function (query, error) {
    var queryInfo = this.queries.get(query);

    if (queryInfo) {
      for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {
        var listener = _a[_i];
        listener.onError(error);
      }
    } // Remove all listeners. NOTE: We don't need to call syncEngine.unlisten()
    // after an error.


    this.queries.delete(query);
  };

  EventManager.prototype.onOnlineStateChange = function (onlineState) {
    this.onlineState = onlineState;
    this.queries.forEach(function (_, queryInfo) {
      for (var _i = 0, _a = queryInfo.listeners; _i < _a.length; _i++) {
        var listener = _a[_i];
        listener.applyOnlineStateChange(onlineState);
      }
    });
  };

  return EventManager;
}();
/**
 * QueryListener takes a series of internal view snapshots and determines
 * when to raise the event.
 *
 * It uses an Observer to dispatch events.
 */


var QueryListener =
/** @class */
function () {
  function QueryListener(query, queryObserver, options) {
    this.query = query;
    this.queryObserver = queryObserver;
    /**
     * Initial snapshots (e.g. from cache) may not be propagated to the wrapped
     * observer. This flag is set to true once we've actually raised an event.
     */

    this.raisedInitialEvent = false;
    this.onlineState = OnlineState.Unknown;
    this.options = options || {};
  }

  QueryListener.prototype.onViewSnapshot = function (snap) {
    assert(snap.docChanges.length > 0 || snap.syncStateChanged, 'We got a new snapshot with no changes?');

    if (!this.options.includeMetadataChanges) {
      // Remove the metadata only changes.
      var docChanges = [];

      for (var _i = 0, _a = snap.docChanges; _i < _a.length; _i++) {
        var docChange = _a[_i];

        if (docChange.type !== ChangeType.Metadata) {
          docChanges.push(docChange);
        }
      }

      snap = new ViewSnapshot(snap.query, snap.docs, snap.oldDocs, docChanges, snap.mutatedKeys, snap.fromCache, snap.syncStateChanged,
      /* excludesMetadataChanges= */
      true);
    }

    if (!this.raisedInitialEvent) {
      if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {
        this.raiseInitialEvent(snap);
      }
    } else if (this.shouldRaiseEvent(snap)) {
      this.queryObserver.next(snap);
    }

    this.snap = snap;
  };

  QueryListener.prototype.onError = function (error) {
    this.queryObserver.error(error);
  };

  QueryListener.prototype.applyOnlineStateChange = function (onlineState) {
    this.onlineState = onlineState;

    if (this.snap && !this.raisedInitialEvent && this.shouldRaiseInitialEvent(this.snap, onlineState)) {
      this.raiseInitialEvent(this.snap);
    }
  };

  QueryListener.prototype.shouldRaiseInitialEvent = function (snap, onlineState) {
    assert(!this.raisedInitialEvent, 'Determining whether to raise first event but already had first event'); // Always raise the first event when we're synced

    if (!snap.fromCache) {
      return true;
    } // NOTE: We consider OnlineState.Unknown as online (it should become Offline
    // or Online if we wait long enough).


    var maybeOnline = onlineState !== OnlineState.Offline; // Don't raise the event if we're online, aren't synced yet (checked
    // above) and are waiting for a sync.

    if (this.options.waitForSyncWhenOnline && maybeOnline) {
      assert(snap.fromCache, 'Waiting for sync, but snapshot is not from cache');
      return false;
    } // Raise data from cache if we have any documents or we are offline


    return !snap.docs.isEmpty() || onlineState === OnlineState.Offline;
  };

  QueryListener.prototype.shouldRaiseEvent = function (snap) {
    // We don't need to handle includeDocumentMetadataChanges here because
    // the Metadata only changes have already been stripped out if needed.
    // At this point the only changes we will see are the ones we should
    // propagate.
    if (snap.docChanges.length > 0) {
      return true;
    }

    var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;

    if (snap.syncStateChanged || hasPendingWritesChanged) {
      return this.options.includeMetadataChanges === true;
    } // Generally we should have hit one of the cases above, but it's possible
    // to get here if there were only metadata docChanges and they got
    // stripped out.


    return false;
  };

  QueryListener.prototype.raiseInitialEvent = function (snap) {
    assert(!this.raisedInitialEvent, 'Trying to raise initial events for second time');
    snap = ViewSnapshot.fromInitialDocuments(snap.query, snap.docs, snap.mutatedKeys, snap.fromCache);
    this.raisedInitialEvent = true;
    this.queryObserver.next(snap);
  };

  return QueryListener;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * A set of changes to what documents are currently in view and out of view for
 * a given query. These changes are sent to the LocalStore by the View (via
 * the SyncEngine) and are used to pin / unpin documents as appropriate.
 */


var LocalViewChanges =
/** @class */
function () {
  function LocalViewChanges(targetId, addedKeys, removedKeys) {
    this.targetId = targetId;
    this.addedKeys = addedKeys;
    this.removedKeys = removedKeys;
  }

  LocalViewChanges.fromSnapshot = function (targetId, viewSnapshot) {
    var addedKeys = documentKeySet();
    var removedKeys = documentKeySet();

    for (var _i = 0, _a = viewSnapshot.docChanges; _i < _a.length; _i++) {
      var docChange = _a[_i];

      switch (docChange.type) {
        case ChangeType.Added:
          addedKeys = addedKeys.add(docChange.doc.key);
          break;

        case ChangeType.Removed:
          removedKeys = removedKeys.add(docChange.doc.key);
          break;

        default: // do nothing

      }
    }

    return new LocalViewChanges(targetId, addedKeys, removedKeys);
  };

  return LocalViewChanges;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var AddedLimboDocument =
/** @class */
function () {
  function AddedLimboDocument(key) {
    this.key = key;
  }

  return AddedLimboDocument;
}();

var RemovedLimboDocument =
/** @class */
function () {
  function RemovedLimboDocument(key) {
    this.key = key;
  }

  return RemovedLimboDocument;
}();
/**
 * View is responsible for computing the final merged truth of what docs are in
 * a query. It gets notified of local and remote changes to docs, and applies
 * the query filters and limits to determine the most correct possible results.
 */


var View =
/** @class */
function () {
  function View(query,
  /** Documents included in the remote target */
  _syncedDocuments) {
    this.query = query;
    this._syncedDocuments = _syncedDocuments;
    this.syncState = null;
    /**
     * A flag whether the view is current with the backend. A view is considered
     * current after it has seen the current flag from the backend and did not
     * lose consistency within the watch stream (e.g. because of an existence
     * filter mismatch).
     */

    this.current = false;
    /** Documents in the view but not in the remote target */

    this.limboDocuments = documentKeySet();
    /** Document Keys that have local changes */

    this.mutatedKeys = documentKeySet();
    this.documentSet = new DocumentSet(query.docComparator.bind(query));
  }

  Object.defineProperty(View.prototype, "syncedDocuments", {
    /**
     * The set of remote documents that the server has told us belongs to the target associated with
     * this view.
     */
    get: function () {
      return this._syncedDocuments;
    },
    enumerable: true,
    configurable: true
  });
  /**
   * Iterates over a set of doc changes, applies the query limit, and computes
   * what the new results should be, what the changes were, and whether we may
   * need to go back to the local cache for more results. Does not make any
   * changes to the view.
   * @param docChanges The doc changes to apply to this view.
   * @param previousChanges If this is being called with a refill, then start
   *        with this set of docs and changes instead of the current view.
   * @return a new set of docs, changes, and refill flag.
   */

  View.prototype.computeDocChanges = function (docChanges, previousChanges) {
    var _this = this;

    var changeSet = previousChanges ? previousChanges.changeSet : new DocumentChangeSet();
    var oldDocumentSet = previousChanges ? previousChanges.documentSet : this.documentSet;
    var newMutatedKeys = previousChanges ? previousChanges.mutatedKeys : this.mutatedKeys;
    var newDocumentSet = oldDocumentSet;
    var needsRefill = false; // Track the last doc in a (full) limit. This is necessary, because some
    // update (a delete, or an update moving a doc past the old limit) might
    // mean there is some other document in the local cache that either should
    // come (1) between the old last limit doc and the new last document, in the
    // case of updates, or (2) after the new last document, in the case of
    // deletes. So we keep this doc at the old limit to compare the updates to.
    //
    // Note that this should never get used in a refill (when previousChanges is
    // set), because there will only be adds -- no deletes or updates.

    var lastDocInLimit = this.query.hasLimit() && oldDocumentSet.size === this.query.limit ? oldDocumentSet.last() : null;
    docChanges.inorderTraversal(function (key, newMaybeDoc) {
      var oldDoc = oldDocumentSet.get(key);
      var newDoc = newMaybeDoc instanceof Document ? newMaybeDoc : null;

      if (newDoc) {
        assert(key.isEqual(newDoc.key), 'Mismatching keys found in document changes: ' + key + ' != ' + newDoc.key);
        newDoc = _this.query.matches(newDoc) ? newDoc : null;
      }

      var oldDocHadPendingMutations = oldDoc ? _this.mutatedKeys.has(oldDoc.key) : false;
      var newDocHasPendingMutations = newDoc ? newDoc.hasLocalMutations || // We only consider committed mutations for documents that were
      // mutated during the lifetime of the view.
      _this.mutatedKeys.has(newDoc.key) && newDoc.hasCommittedMutations : false;
      var changeApplied = false; // Calculate change

      if (oldDoc && newDoc) {
        var docsEqual = oldDoc.data.isEqual(newDoc.data);

        if (!docsEqual) {
          if (!_this.shouldWaitForSyncedDocument(oldDoc, newDoc)) {
            changeSet.track({
              type: ChangeType.Modified,
              doc: newDoc
            });
            changeApplied = true;

            if (lastDocInLimit && _this.query.docComparator(newDoc, lastDocInLimit) > 0) {
              // This doc moved from inside the limit to after the limit.
              // That means there may be some doc in the local cache that's
              // actually less than this one.
              needsRefill = true;
            }
          }
        } else if (oldDocHadPendingMutations !== newDocHasPendingMutations) {
          changeSet.track({
            type: ChangeType.Metadata,
            doc: newDoc
          });
          changeApplied = true;
        }
      } else if (!oldDoc && newDoc) {
        changeSet.track({
          type: ChangeType.Added,
          doc: newDoc
        });
        changeApplied = true;
      } else if (oldDoc && !newDoc) {
        changeSet.track({
          type: ChangeType.Removed,
          doc: oldDoc
        });
        changeApplied = true;

        if (lastDocInLimit) {
          // A doc was removed from a full limit query. We'll need to
          // requery from the local cache to see if we know about some other
          // doc that should be in the results.
          needsRefill = true;
        }
      }

      if (changeApplied) {
        if (newDoc) {
          newDocumentSet = newDocumentSet.add(newDoc);

          if (newDocHasPendingMutations) {
            newMutatedKeys = newMutatedKeys.add(key);
          } else {
            newMutatedKeys = newMutatedKeys.delete(key);
          }
        } else {
          newDocumentSet = newDocumentSet.delete(key);
          newMutatedKeys = newMutatedKeys.delete(key);
        }
      }
    });

    if (this.query.hasLimit()) {
      while (newDocumentSet.size > this.query.limit) {
        var oldDoc = newDocumentSet.last();
        newDocumentSet = newDocumentSet.delete(oldDoc.key);
        newMutatedKeys = newMutatedKeys.delete(oldDoc.key);
        changeSet.track({
          type: ChangeType.Removed,
          doc: oldDoc
        });
      }
    }

    assert(!needsRefill || !previousChanges, 'View was refilled using docs that themselves needed refilling.');
    return {
      documentSet: newDocumentSet,
      changeSet: changeSet,
      needsRefill: needsRefill,
      mutatedKeys: newMutatedKeys
    };
  };

  View.prototype.shouldWaitForSyncedDocument = function (oldDoc, newDoc) {
    // We suppress the initial change event for documents that were modified as
    // part of a write acknowledgment (e.g. when the value of a server transform
    // is applied) as Watch will send us the same document again.
    // By suppressing the event, we only raise two user visible events (one with
    // `hasPendingWrites` and the final state of the document) instead of three
    // (one with `hasPendingWrites`, the modified document with
    // `hasPendingWrites` and the final state of the document).
    return oldDoc.hasLocalMutations && newDoc.hasCommittedMutations && !newDoc.hasLocalMutations;
  };
  /**
   * Updates the view with the given ViewDocumentChanges and optionally updates
   * limbo docs and sync state from the provided target change.
   * @param docChanges The set of changes to make to the view's docs.
   * @param updateLimboDocuments Whether to update limbo documents based on this
   *        change.
   * @param targetChange A target change to apply for computing limbo docs and
   *        sync state.
   * @return A new ViewChange with the given docs, changes, and sync state.
   */
  // PORTING NOTE: The iOS/Android clients always compute limbo document changes.


  View.prototype.applyChanges = function (docChanges, updateLimboDocuments, targetChange) {
    var _this = this;

    assert(!docChanges.needsRefill, 'Cannot apply changes that need a refill');
    var oldDocs = this.documentSet;
    this.documentSet = docChanges.documentSet;
    this.mutatedKeys = docChanges.mutatedKeys; // Sort changes based on type and query comparator

    var changes = docChanges.changeSet.getChanges();
    changes.sort(function (c1, c2) {
      return compareChangeType(c1.type, c2.type) || _this.query.docComparator(c1.doc, c2.doc);
    });
    this.applyTargetChange(targetChange);
    var limboChanges = updateLimboDocuments ? this.updateLimboDocuments() : [];
    var synced = this.limboDocuments.size === 0 && this.current;
    var newSyncState = synced ? SyncState.Synced : SyncState.Local;
    var syncStateChanged = newSyncState !== this.syncState;
    this.syncState = newSyncState;

    if (changes.length === 0 && !syncStateChanged) {
      // no changes
      return {
        limboChanges: limboChanges
      };
    } else {
      var snap = new ViewSnapshot(this.query, docChanges.documentSet, oldDocs, changes, docChanges.mutatedKeys, newSyncState === SyncState.Local, syncStateChanged,
      /* excludesMetadataChanges= */
      false);
      return {
        snapshot: snap,
        limboChanges: limboChanges
      };
    }
  };
  /**
   * Applies an OnlineState change to the view, potentially generating a
   * ViewChange if the view's syncState changes as a result.
   */


  View.prototype.applyOnlineStateChange = function (onlineState) {
    if (this.current && onlineState === OnlineState.Offline) {
      // If we're offline, set `current` to false and then call applyChanges()
      // to refresh our syncState and generate a ViewChange as appropriate. We
      // are guaranteed to get a new TargetChange that sets `current` back to
      // true once the client is back online.
      this.current = false;
      return this.applyChanges({
        documentSet: this.documentSet,
        changeSet: new DocumentChangeSet(),
        mutatedKeys: this.mutatedKeys,
        needsRefill: false
      },
      /* updateLimboDocuments= */
      false);
    } else {
      // No effect, just return a no-op ViewChange.
      return {
        limboChanges: []
      };
    }
  };
  /**
   * Returns whether the doc for the given key should be in limbo.
   */


  View.prototype.shouldBeInLimbo = function (key) {
    // If the remote end says it's part of this query, it's not in limbo.
    if (this._syncedDocuments.has(key)) {
      return false;
    } // The local store doesn't think it's a result, so it shouldn't be in limbo.


    if (!this.documentSet.has(key)) {
      return false;
    } // If there are local changes to the doc, they might explain why the server
    // doesn't know that it's part of the query. So don't put it in limbo.
    // TODO(klimt): Ideally, we would only consider changes that might actually
    // affect this specific query.


    if (this.documentSet.get(key).hasLocalMutations) {
      return false;
    } // Everything else is in limbo.


    return true;
  };
  /**
   * Updates syncedDocuments, current, and limbo docs based on the given change.
   * Returns the list of changes to which docs are in limbo.
   */


  View.prototype.applyTargetChange = function (targetChange) {
    var _this = this;

    if (targetChange) {
      targetChange.addedDocuments.forEach(function (key) {
        return _this._syncedDocuments = _this._syncedDocuments.add(key);
      });
      targetChange.modifiedDocuments.forEach(function (key) {
        return assert(_this._syncedDocuments.has(key), "Modified document " + key + " not found in view.");
      });
      targetChange.removedDocuments.forEach(function (key) {
        return _this._syncedDocuments = _this._syncedDocuments.delete(key);
      });
      this.current = targetChange.current;
    }
  };

  View.prototype.updateLimboDocuments = function () {
    var _this = this; // We can only determine limbo documents when we're in-sync with the server.


    if (!this.current) {
      return [];
    } // TODO(klimt): Do this incrementally so that it's not quadratic when
    // updating many documents.


    var oldLimboDocuments = this.limboDocuments;
    this.limboDocuments = documentKeySet();
    this.documentSet.forEach(function (doc) {
      if (_this.shouldBeInLimbo(doc.key)) {
        _this.limboDocuments = _this.limboDocuments.add(doc.key);
      }
    }); // Diff the new limbo docs with the old limbo docs.

    var changes = [];
    oldLimboDocuments.forEach(function (key) {
      if (!_this.limboDocuments.has(key)) {
        changes.push(new RemovedLimboDocument(key));
      }
    });
    this.limboDocuments.forEach(function (key) {
      if (!oldLimboDocuments.has(key)) {
        changes.push(new AddedLimboDocument(key));
      }
    });
    return changes;
  };
  /**
   * Update the in-memory state of the current view with the state read from
   * persistence.
   *
   * We update the query view whenever a client's primary status changes:
   * - When a client transitions from primary to secondary, it can miss
   *   LocalStorage updates and its query views may temporarily not be
   *   synchronized with the state on disk.
   * - For secondary to primary transitions, the client needs to update the list
   *   of `syncedDocuments` since secondary clients update their query views
   *   based purely on synthesized RemoteEvents.
   *
   * @param localDocs - The documents that match the query according to the
   * LocalStore.
   * @param remoteKeys - The keys of the documents that match the query
   * according to the backend.
   *
   * @return The ViewChange that resulted from this synchronization.
   */
  // PORTING NOTE: Multi-tab only.


  View.prototype.synchronizeWithPersistedState = function (localDocs, remoteKeys) {
    this._syncedDocuments = remoteKeys;
    this.limboDocuments = documentKeySet();
    var docChanges = this.computeDocChanges(localDocs);
    return this.applyChanges(docChanges,
    /*updateLimboDocuments=*/
    true);
  };
  /**
   * Returns a view snapshot as if this query was just listened to. Contains
   * a document add for every existing document and the `fromCache` and
   * `hasPendingWrites` status of the already established view.
   */
  // PORTING NOTE: Multi-tab only.


  View.prototype.computeInitialSnapshot = function () {
    return ViewSnapshot.fromInitialDocuments(this.query, this.documentSet, this.mutatedKeys, this.syncState === SyncState.Local);
  };

  return View;
}();

function compareChangeType(c1, c2) {
  var order = function (change) {
    switch (change) {
      case ChangeType.Added:
        return 1;

      case ChangeType.Modified:
        return 2;

      case ChangeType.Metadata:
        // A metadata change is converted to a modified change at the public
        // api layer.  Since we sort by document key and then change type,
        // metadata and modified changes must be sorted equivalently.
        return 2;

      case ChangeType.Removed:
        return 0;

      default:
        return fail('Unknown ChangeType: ' + change);
    }
  };

  return order(c1) - order(c2);
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$9 = 'SyncEngine';
/**
 * QueryView contains all of the data that SyncEngine needs to keep track of for
 * a particular query.
 */

var QueryView =
/** @class */
function () {
  function QueryView(
  /**
   * The query itself.
   */
  query,
  /**
   * The target number created by the client that is used in the watch
   * stream to identify this query.
   */
  targetId,
  /**
   * The view is responsible for computing the final merged truth of what
   * docs are in the query. It gets notified of local and remote changes,
   * and applies the query filters and limits to determine the most correct
   * possible results.
   */
  view) {
    this.query = query;
    this.targetId = targetId;
    this.view = view;
  }

  return QueryView;
}();
/** Tracks a limbo resolution. */


var LimboResolution =
/** @class */
function () {
  function LimboResolution(key) {
    this.key = key;
  }

  return LimboResolution;
}();
/**
 * SyncEngine is the central controller in the client SDK architecture. It is
 * the glue code between the EventManager, LocalStore, and RemoteStore. Some of
 * SyncEngine's responsibilities include:
 * 1. Coordinating client requests and remote events between the EventManager
 *    and the local and remote data stores.
 * 2. Managing a View object for each query, providing the unified view between
 *    the local and remote data stores.
 * 3. Notifying the RemoteStore when the LocalStore has new mutations in its
 *    queue that need sending to the backend.
 *
 * The SyncEngine’s methods should only ever be called by methods running in the
 * global async queue.
 */


var SyncEngine =
/** @class */
function () {
  function SyncEngine(localStore, remoteStore, // PORTING NOTE: Manages state synchronization in multi-tab environments.
  sharedClientState, currentUser) {
    this.localStore = localStore;
    this.remoteStore = remoteStore;
    this.sharedClientState = sharedClientState;
    this.currentUser = currentUser;
    this.syncEngineListener = null;
    this.queryViewsByQuery = new ObjectMap(function (q) {
      return q.canonicalId();
    });
    this.queryViewsByTarget = {};
    this.limboTargetsByKey = new SortedMap(DocumentKey.comparator);
    this.limboResolutionsByTarget = {};
    this.limboDocumentRefs = new ReferenceSet();
    /** Stores user completion handlers, indexed by User and BatchId. */

    this.mutationUserCallbacks = {};
    this.limboTargetIdGenerator = TargetIdGenerator.forSyncEngine(); // The primary state is set to `true` or `false` immediately after Firestore
    // startup. In the interim, a client should only be considered primary if
    // `isPrimary` is true.

    this.isPrimary = undefined;
    this.onlineState = OnlineState.Unknown;
  }

  Object.defineProperty(SyncEngine.prototype, "isPrimaryClient", {
    // Only used for testing.
    get: function () {
      return this.isPrimary === true;
    },
    enumerable: true,
    configurable: true
  });
  /** Subscribes to SyncEngine notifications. Has to be called exactly once. */

  SyncEngine.prototype.subscribe = function (syncEngineListener) {
    assert(syncEngineListener !== null, 'SyncEngine listener cannot be null');
    assert(this.syncEngineListener === null, 'SyncEngine already has a subscriber.');
    this.syncEngineListener = syncEngineListener;
  };
  /**
   * Initiates the new listen, resolves promise when listen enqueued to the
   * server. All the subsequent view snapshots or errors are sent to the
   * subscribed handlers. Returns the targetId of the query.
   */


  SyncEngine.prototype.listen = function (query) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var targetId, viewSnapshot, queryView, queryData, status_1;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.assertSubscribed('listen()');
            queryView = this.queryViewsByQuery.get(query);
            if (!queryView) return [3
            /*break*/
            , 1]; // PORTING NOTE: With Multi-Tab Web, it is possible that a query view
            // already exists when EventManager calls us for the first time. This
            // happens when the primary tab is already listening to this query on
            // behalf of another tab and the user of the primary also starts listening
            // to the query. EventManager will not have an assigned target ID in this
            // case and calls `listen` to obtain this ID.

            targetId = queryView.targetId;
            this.sharedClientState.addLocalQueryTarget(targetId);
            viewSnapshot = queryView.view.computeInitialSnapshot();
            return [3
            /*break*/
            , 4];

          case 1:
            return [4
            /*yield*/
            , this.localStore.allocateQuery(query)];

          case 2:
            queryData = _a.sent();
            status_1 = this.sharedClientState.addLocalQueryTarget(queryData.targetId);
            targetId = queryData.targetId;
            return [4
            /*yield*/
            , this.initializeViewAndComputeSnapshot(queryData, status_1 === 'current')];

          case 3:
            viewSnapshot = _a.sent();

            if (this.isPrimary) {
              this.remoteStore.listen(queryData);
            }

            _a.label = 4;

          case 4:
            this.syncEngineListener.onWatchChange([viewSnapshot]);
            return [2
            /*return*/
            , targetId];
        }
      });
    });
  };
  /**
   * Registers a view for a previously unknown query and computes its initial
   * snapshot.
   */


  SyncEngine.prototype.initializeViewAndComputeSnapshot = function (queryData, current) {
    var _this = this;

    var query = queryData.query;
    return this.localStore.executeQuery(query).then(function (docs) {
      return _this.localStore.remoteDocumentKeys(queryData.targetId).then(function (remoteKeys) {
        var view = new View(query, remoteKeys);
        var viewDocChanges = view.computeDocChanges(docs); // tslint:disable-next-line:max-line-length Prettier formats this exceed 100 characters.

        var synthesizedTargetChange = TargetChange.createSynthesizedTargetChangeForCurrentChange(queryData.targetId, current && _this.onlineState !== OnlineState.Offline);
        var viewChange = view.applyChanges(viewDocChanges,
        /* updateLimboDocuments= */
        _this.isPrimary === true, synthesizedTargetChange);
        assert(viewChange.limboChanges.length === 0, 'View returned limbo docs before target ack from the server.');
        assert(!!viewChange.snapshot, 'applyChanges for new view should always return a snapshot');
        var data = new QueryView(query, queryData.targetId, view);

        _this.queryViewsByQuery.set(query, data);

        _this.queryViewsByTarget[queryData.targetId] = data;
        return viewChange.snapshot;
      });
    });
  };
  /**
   * Reconcile the list of synced documents in an existing view with those
   * from persistence.
   */
  // PORTING NOTE: Multi-tab only.


  SyncEngine.prototype.synchronizeViewAndComputeSnapshot = function (queryView) {
    var _this = this;

    return this.localStore.executeQuery(queryView.query).then(function (docs) {
      return _this.localStore.remoteDocumentKeys(queryView.targetId).then(function (remoteKeys) {
        return tslib_1.__awaiter(_this, void 0, void 0, function () {
          var viewSnapshot;
          return tslib_1.__generator(this, function (_a) {
            viewSnapshot = queryView.view.synchronizeWithPersistedState(docs, remoteKeys);

            if (this.isPrimary) {
              this.updateTrackedLimbos(queryView.targetId, viewSnapshot.limboChanges);
            }

            return [2
            /*return*/
            , viewSnapshot];
          });
        });
      });
    });
  };
  /** Stops listening to the query. */


  SyncEngine.prototype.unlisten = function (query) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var queryView, targetRemainsActive;

      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.assertSubscribed('unlisten()');
            queryView = this.queryViewsByQuery.get(query);
            assert(!!queryView, 'Trying to unlisten on query not found:' + query);
            if (!this.isPrimary) return [3
            /*break*/
            , 3]; // We need to remove the local query target first to allow us to verify
            // whether any other client is still interested in this target.

            this.sharedClientState.removeLocalQueryTarget(queryView.targetId);
            targetRemainsActive = this.sharedClientState.isActiveQueryTarget(queryView.targetId);
            if (!!targetRemainsActive) return [3
            /*break*/
            , 2];
            return [4
            /*yield*/
            , this.localStore.releaseQuery(query,
            /*keepPersistedQueryData=*/
            false).then(function () {
              _this.sharedClientState.clearQueryState(queryView.targetId);

              _this.remoteStore.unlisten(queryView.targetId);

              _this.removeAndCleanupQuery(queryView);
            }).catch(ignoreIfPrimaryLeaseLoss)];

          case 1:
            _a.sent();

            _a.label = 2;

          case 2:
            return [3
            /*break*/
            , 5];

          case 3:
            this.removeAndCleanupQuery(queryView);
            return [4
            /*yield*/
            , this.localStore.releaseQuery(query,
            /*keepPersistedQueryData=*/
            true)];

          case 4:
            _a.sent();

            _a.label = 5;

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  };
  /**
   * Initiates the write of local mutation batch which involves adding the
   * writes to the mutation queue, notifying the remote store about new
   * mutations and raising events for any changes this write caused.
   *
   * The promise returned by this call is resolved when the above steps
   * have completed, *not* when the write was acked by the backend. The
   * userCallback is resolved once the write was acked/rejected by the
   * backend (or failed locally for any other reason).
   */


  SyncEngine.prototype.write = function (batch, userCallback) {
    var _this = this;

    this.assertSubscribed('write()');
    return this.localStore.localWrite(batch).then(function (result) {
      _this.sharedClientState.addPendingMutation(result.batchId);

      _this.addMutationCallback(result.batchId, userCallback);

      return _this.emitNewSnapsAndNotifyLocalStore(result.changes);
    }).then(function () {
      return _this.remoteStore.fillWritePipeline();
    });
  }; // TODO(klimt): Wrap the given error in a standard Firestore error object.


  SyncEngine.prototype.wrapUpdateFunctionError = function (error) {
    return error;
  };
  /**
   * Takes an updateFunction in which a set of reads and writes can be performed
   * atomically. In the updateFunction, the client can read and write values
   * using the supplied transaction object. After the updateFunction, all
   * changes will be committed. If some other client has changed any of the data
   * referenced, then the updateFunction will be called again. If the
   * updateFunction still fails after the given number of retries, then the
   * transaction will be rejection.
   *
   * The transaction object passed to the updateFunction contains methods for
   * accessing documents and collections. Unlike other datastore access, data
   * accessed with the transaction will not reflect local changes that have not
   * been committed. For this reason, it is required that all reads are
   * performed before any writes. Transactions must be performed while online.
   *
   * The promise returned is resolved when the transaction is fully committed.
   */


  SyncEngine.prototype.runTransaction = function (updateFunction, retries) {
    var _this = this;

    if (retries === void 0) {
      retries = 5;
    }

    assert(retries >= 0, 'Got negative number of retries for transaction.');
    var transaction = this.remoteStore.createTransaction();

    var wrappedUpdateFunction = function () {
      try {
        var userPromise = updateFunction(transaction);

        if (isNullOrUndefined(userPromise) || !userPromise.catch || !userPromise.then) {
          return Promise.reject(Error('Transaction callback must return a Promise'));
        }

        return userPromise.catch(function (e) {
          return Promise.reject(_this.wrapUpdateFunctionError(e));
        });
      } catch (e) {
        return Promise.reject(_this.wrapUpdateFunctionError(e));
      }
    };

    return wrappedUpdateFunction().then(function (result) {
      return transaction.commit().then(function () {
        return result;
      }).catch(function (error) {
        if (retries === 0) {
          return Promise.reject(error);
        } // TODO(klimt): Put in a retry delay?


        return _this.runTransaction(updateFunction, retries - 1);
      });
    });
  };

  SyncEngine.prototype.applyRemoteEvent = function (remoteEvent) {
    var _this = this;

    this.assertSubscribed('applyRemoteEvent()');
    return this.localStore.applyRemoteEvent(remoteEvent).then(function (changes) {
      // Update `receivedDocument` as appropriate for any limbo targets.
      forEach(remoteEvent.targetChanges, function (targetId, targetChange) {
        var limboResolution = _this.limboResolutionsByTarget[targetId];

        if (limboResolution) {
          // Since this is a limbo resolution lookup, it's for a single document
          // and it could be added, modified, or removed, but not a combination.
          assert(targetChange.addedDocuments.size + targetChange.modifiedDocuments.size + targetChange.removedDocuments.size <= 1, 'Limbo resolution for single document contains multiple changes.');

          if (targetChange.addedDocuments.size > 0) {
            limboResolution.receivedDocument = true;
          } else if (targetChange.modifiedDocuments.size > 0) {
            assert(limboResolution.receivedDocument, 'Received change for limbo target document without add.');
          } else if (targetChange.removedDocuments.size > 0) {
            assert(limboResolution.receivedDocument, 'Received remove for limbo target document without add.');
            limboResolution.receivedDocument = false;
          }
        }
      });
      return _this.emitNewSnapsAndNotifyLocalStore(changes, remoteEvent);
    }).catch(ignoreIfPrimaryLeaseLoss);
  };
  /**
   * Applies an OnlineState change to the sync engine and notifies any views of
   * the change.
   */


  SyncEngine.prototype.applyOnlineStateChange = function (onlineState, source) {
    // If we are the secondary client, we explicitly ignore the remote store's
    // online state (the local client may go offline, even though the primary
    // tab remains online) and only apply the primary tab's online state from
    // SharedClientState.
    if (this.isPrimary && source === OnlineStateSource.RemoteStore || !this.isPrimary && source === OnlineStateSource.SharedClientState) {
      var newViewSnapshots_1 = [];
      this.queryViewsByQuery.forEach(function (query, queryView) {
        var viewChange = queryView.view.applyOnlineStateChange(onlineState);
        assert(viewChange.limboChanges.length === 0, 'OnlineState should not affect limbo documents.');

        if (viewChange.snapshot) {
          newViewSnapshots_1.push(viewChange.snapshot);
        }
      });
      this.syncEngineListener.onOnlineStateChange(onlineState);
      this.syncEngineListener.onWatchChange(newViewSnapshots_1);
      this.onlineState = onlineState;

      if (this.isPrimary) {
        this.sharedClientState.setOnlineState(onlineState);
      }
    }
  };

  SyncEngine.prototype.rejectListen = function (targetId, err) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var limboResolution, limboKey, documentUpdates, resolvedLimboDocuments, event_1, queryView_1;

      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.assertSubscribed('rejectListens()'); // PORTING NOTE: Multi-tab only.

            this.sharedClientState.updateQueryState(targetId, 'rejected', err);
            limboResolution = this.limboResolutionsByTarget[targetId];
            limboKey = limboResolution && limboResolution.key;
            if (!limboKey) return [3
            /*break*/
            , 1]; // Since this query failed, we won't want to manually unlisten to it.
            // So go ahead and remove it from bookkeeping.

            this.limboTargetsByKey = this.limboTargetsByKey.remove(limboKey);
            delete this.limboResolutionsByTarget[targetId];
            documentUpdates = new SortedMap(DocumentKey.comparator);
            documentUpdates = documentUpdates.insert(limboKey, new NoDocument(limboKey, SnapshotVersion.forDeletedDoc()));
            resolvedLimboDocuments = documentKeySet().add(limboKey);
            event_1 = new RemoteEvent(SnapshotVersion.MIN,
            /* targetChanges= */
            {},
            /* targetMismatches= */
            new SortedSet(primitiveComparator), documentUpdates, resolvedLimboDocuments);
            return [2
            /*return*/
            , this.applyRemoteEvent(event_1)];

          case 1:
            queryView_1 = this.queryViewsByTarget[targetId];
            assert(!!queryView_1, 'Unknown targetId: ' + targetId);
            return [4
            /*yield*/
            , this.localStore.releaseQuery(queryView_1.query,
            /* keepPersistedQueryData */
            false).then(function () {
              return _this.removeAndCleanupQuery(queryView_1);
            }).catch(ignoreIfPrimaryLeaseLoss)];

          case 2:
            _a.sent();

            this.syncEngineListener.onWatchError(queryView_1.query, err);
            _a.label = 3;

          case 3:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // PORTING NOTE: Multi-tab only


  SyncEngine.prototype.applyBatchState = function (batchId, batchState, error) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var documents;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            this.assertSubscribed('applyBatchState()');
            return [4
            /*yield*/
            , this.localStore.lookupMutationDocuments(batchId)];

          case 1:
            documents = _a.sent();

            if (documents === null) {
              // A throttled tab may not have seen the mutation before it was completed
              // and removed from the mutation queue, in which case we won't have cached
              // the affected documents. In this case we can safely ignore the update
              // since that means we didn't apply the mutation locally at all (if we
              // had, we would have cached the affected documents), and so we will just
              // see any resulting document changes via normal remote document updates
              // as applicable.
              debug(LOG_TAG$9, 'Cannot apply mutation batch with id: ' + batchId);
              return [2
              /*return*/
              ];
            }

            if (!(batchState === 'pending')) return [3
            /*break*/
            , 3]; // If we are the primary client, we need to send this write to the
            // backend. Secondary clients will ignore these writes since their remote
            // connection is disabled.

            return [4
            /*yield*/
            , this.remoteStore.fillWritePipeline()];

          case 2:
            // If we are the primary client, we need to send this write to the
            // backend. Secondary clients will ignore these writes since their remote
            // connection is disabled.
            _a.sent();

            return [3
            /*break*/
            , 4];

          case 3:
            if (batchState === 'acknowledged' || batchState === 'rejected') {
              // NOTE: Both these methods are no-ops for batches that originated from
              // other clients.
              this.processUserCallback(batchId, error ? error : null);
              this.localStore.removeCachedMutationBatchMetadata(batchId);
            } else {
              fail("Unknown batchState: " + batchState);
            }

            _a.label = 4;

          case 4:
            return [4
            /*yield*/
            , this.emitNewSnapsAndNotifyLocalStore(documents)];

          case 5:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  SyncEngine.prototype.applySuccessfulWrite = function (mutationBatchResult) {
    var _this = this;

    this.assertSubscribed('applySuccessfulWrite()');
    var batchId = mutationBatchResult.batch.batchId; // The local store may or may not be able to apply the write result and
    // raise events immediately (depending on whether the watcher is caught
    // up), so we raise user callbacks first so that they consistently happen
    // before listen events.

    this.processUserCallback(batchId,
    /*error=*/
    null);
    return this.localStore.acknowledgeBatch(mutationBatchResult).then(function (changes) {
      _this.sharedClientState.updateMutationState(batchId, 'acknowledged');

      return _this.emitNewSnapsAndNotifyLocalStore(changes);
    }).catch(ignoreIfPrimaryLeaseLoss);
  };

  SyncEngine.prototype.rejectFailedWrite = function (batchId, error) {
    var _this = this;

    this.assertSubscribed('rejectFailedWrite()'); // The local store may or may not be able to apply the write result and
    // raise events immediately (depending on whether the watcher is caught up),
    // so we raise user callbacks first so that they consistently happen before
    // listen events.

    this.processUserCallback(batchId, error);
    return this.localStore.rejectBatch(batchId).then(function (changes) {
      _this.sharedClientState.updateMutationState(batchId, 'rejected', error);

      return _this.emitNewSnapsAndNotifyLocalStore(changes);
    }).catch(ignoreIfPrimaryLeaseLoss);
  };

  SyncEngine.prototype.addMutationCallback = function (batchId, callback) {
    var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()];

    if (!newCallbacks) {
      newCallbacks = new SortedMap(primitiveComparator);
    }

    newCallbacks = newCallbacks.insert(batchId, callback);
    this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;
  };
  /**
   * Resolves or rejects the user callback for the given batch and then discards
   * it.
   */


  SyncEngine.prototype.processUserCallback = function (batchId, error) {
    var newCallbacks = this.mutationUserCallbacks[this.currentUser.toKey()]; // NOTE: Mutations restored from persistence won't have callbacks, so it's
    // okay for there to be no callback for this ID.

    if (newCallbacks) {
      var callback = newCallbacks.get(batchId);

      if (callback) {
        assert(batchId === newCallbacks.minKey(), 'Mutation callbacks processed out-of-order?');

        if (error) {
          callback.reject(error);
        } else {
          callback.resolve();
        }

        newCallbacks = newCallbacks.remove(batchId);
      }

      this.mutationUserCallbacks[this.currentUser.toKey()] = newCallbacks;
    }
  };

  SyncEngine.prototype.removeAndCleanupQuery = function (queryView) {
    var _this = this;

    this.sharedClientState.removeLocalQueryTarget(queryView.targetId);
    this.queryViewsByQuery.delete(queryView.query);
    delete this.queryViewsByTarget[queryView.targetId];

    if (this.isPrimary) {
      var limboKeys = this.limboDocumentRefs.referencesForId(queryView.targetId);
      this.limboDocumentRefs.removeReferencesForId(queryView.targetId);
      limboKeys.forEach(function (limboKey) {
        var isReferenced = _this.limboDocumentRefs.containsKey(limboKey);

        if (!isReferenced) {
          // We removed the last reference for this key
          _this.removeLimboTarget(limboKey);
        }
      });
    }
  };

  SyncEngine.prototype.removeLimboTarget = function (key) {
    // It's possible that the target already got removed because the query failed. In that case,
    // the key won't exist in `limboTargetsByKey`. Only do the cleanup if we still have the target.
    var limboTargetId = this.limboTargetsByKey.get(key);

    if (limboTargetId === null) {
      // This target already got removed, because the query failed.
      return;
    }

    this.remoteStore.unlisten(limboTargetId);
    this.limboTargetsByKey = this.limboTargetsByKey.remove(key);
    delete this.limboResolutionsByTarget[limboTargetId];
  };

  SyncEngine.prototype.updateTrackedLimbos = function (targetId, limboChanges) {
    for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {
      var limboChange = limboChanges_1[_i];

      if (limboChange instanceof AddedLimboDocument) {
        this.limboDocumentRefs.addReference(limboChange.key, targetId);
        this.trackLimboChange(limboChange);
      } else if (limboChange instanceof RemovedLimboDocument) {
        debug(LOG_TAG$9, 'Document no longer in limbo: ' + limboChange.key);
        this.limboDocumentRefs.removeReference(limboChange.key, targetId);
        var isReferenced = this.limboDocumentRefs.containsKey(limboChange.key);

        if (!isReferenced) {
          // We removed the last reference for this key
          this.removeLimboTarget(limboChange.key);
        }
      } else {
        fail('Unknown limbo change: ' + JSON.stringify(limboChange));
      }
    }
  };

  SyncEngine.prototype.trackLimboChange = function (limboChange) {
    var key = limboChange.key;

    if (!this.limboTargetsByKey.get(key)) {
      debug(LOG_TAG$9, 'New document in limbo: ' + key);
      var limboTargetId = this.limboTargetIdGenerator.next();
      var query = Query.atPath(key.path);
      this.limboResolutionsByTarget[limboTargetId] = new LimboResolution(key);
      this.remoteStore.listen(new QueryData(query, limboTargetId, QueryPurpose.LimboResolution, ListenSequence.INVALID));
      this.limboTargetsByKey = this.limboTargetsByKey.insert(key, limboTargetId);
    }
  }; // Visible for testing


  SyncEngine.prototype.currentLimboDocs = function () {
    return this.limboTargetsByKey;
  };

  SyncEngine.prototype.emitNewSnapsAndNotifyLocalStore = function (changes, remoteEvent) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var newSnaps, docChangesInAllViews, queriesProcessed;

      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            newSnaps = [];
            docChangesInAllViews = [];
            queriesProcessed = [];
            this.queryViewsByQuery.forEach(function (_, queryView) {
              queriesProcessed.push(Promise.resolve().then(function () {
                var viewDocChanges = queryView.view.computeDocChanges(changes);

                if (!viewDocChanges.needsRefill) {
                  return viewDocChanges;
                } // The query has a limit and some docs were removed, so we need
                // to re-run the query against the local store to make sure we
                // didn't lose any good docs that had been past the limit.


                return _this.localStore.executeQuery(queryView.query).then(function (docs) {
                  return queryView.view.computeDocChanges(docs, viewDocChanges);
                });
              }).then(function (viewDocChanges) {
                var targetChange = remoteEvent && remoteEvent.targetChanges[queryView.targetId];
                var viewChange = queryView.view.applyChanges(viewDocChanges,
                /* updateLimboDocuments= */
                _this.isPrimary === true, targetChange);

                _this.updateTrackedLimbos(queryView.targetId, viewChange.limboChanges);

                if (viewChange.snapshot) {
                  if (_this.isPrimary) {
                    _this.sharedClientState.updateQueryState(queryView.targetId, viewChange.snapshot.fromCache ? 'not-current' : 'current');
                  }

                  newSnaps.push(viewChange.snapshot);
                  var docChanges = LocalViewChanges.fromSnapshot(queryView.targetId, viewChange.snapshot);
                  docChangesInAllViews.push(docChanges);
                }
              }));
            });
            return [4
            /*yield*/
            , Promise.all(queriesProcessed)];

          case 1:
            _a.sent();

            this.syncEngineListener.onWatchChange(newSnaps);
            return [4
            /*yield*/
            , this.localStore.notifyLocalViewChanges(docChangesInAllViews)];

          case 2:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  };

  SyncEngine.prototype.assertSubscribed = function (fnName) {
    assert(this.syncEngineListener !== null, 'Trying to call ' + fnName + ' before calling subscribe().');
  };

  SyncEngine.prototype.handleCredentialChange = function (user) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var userChanged, result;
      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            userChanged = !this.currentUser.isEqual(user);
            this.currentUser = user;
            if (!userChanged) return [3
            /*break*/
            , 3];
            return [4
            /*yield*/
            , this.localStore.handleUserChange(user)];

          case 1:
            result = _a.sent(); // TODO(b/114226417): Consider calling this only in the primary tab.

            this.sharedClientState.handleUserChange(user, result.removedBatchIds, result.addedBatchIds);
            return [4
            /*yield*/
            , this.emitNewSnapsAndNotifyLocalStore(result.affectedDocuments)];

          case 2:
            _a.sent();

            _a.label = 3;

          case 3:
            return [4
            /*yield*/
            , this.remoteStore.handleCredentialChange()];

          case 4:
            _a.sent();

            return [2
            /*return*/
            ];
        }
      });
    });
  }; // PORTING NOTE: Multi-tab only


  SyncEngine.prototype.applyPrimaryState = function (isPrimary) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var activeTargets, activeQueries, _i, activeQueries_1, queryData, activeTargets_1, p_1;

      var _this = this;

      return tslib_1.__generator(this, function (_a) {
        switch (_a.label) {
          case 0:
            if (!(isPrimary === true && this.isPrimary !== true)) return [3
            /*break*/
            , 3];
            this.isPrimary = true;
            return [4
            /*yield*/
            , this.remoteStore.applyPrimaryState(true)];

          case 1:
            _a.sent();

            activeTargets = this.sharedClientState.getAllActiveQueryTargets();
            return [4
            /*yield*/
            , this.synchronizeQueryViewsAndRaiseSnapshots(activeTargets.toArray())];

          case 2:
            activeQueries = _a.sent();

            for (_i = 0, activeQueries_1 = activeQueries; _i < activeQueries_1.length; _i++) {
              queryData = activeQueries_1[_i];
              this.remoteStore.listen(queryData);
            }

            return [3
            /*break*/
            , 7];

          case 3:
            if (!(isPrimary === false && this.isPrimary !== false)) return [3
            /*break*/
            , 7];
            this.isPrimary = false;
            activeTargets_1 = [];
            p_1 = Promise.resolve();
            forEachNumber(this.queryViewsByTarget, function (targetId, queryView) {
              if (_this.sharedClientState.isLocalQueryTarget(targetId)) {
                activeTargets_1.push(targetId);
              } else {
                p_1 = p_1.then(function () {
                  return _this.unlisten(queryView.query);
                });
              }

              _this.remoteStore.unlisten(queryView.targetId);
            });
            return [4
            /*yield*/
            , p_1];

          case 4:
            _a.sent();

            return [4
            /*yield*/
            , this.synchronizeQueryViewsAndRaiseSnapshots(activeTargets_1)];

          case 5:
            _a.sent();

            this.resetLimboDocuments();
            return [4
            /*yield*/
            , this.remoteStore.applyPrimaryState(false)];

          case 6:
            _a.sent();

            _a.label = 7;

          case 7:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // PORTING NOTE: Multi-tab only.


  SyncEngine.prototype.resetLimboDocuments = function () {
    var _this = this;

    forEachNumber(this.limboResolutionsByTarget, function (targetId) {
      _this.remoteStore.unlisten(targetId);
    });
    this.limboDocumentRefs.removeAllReferences();
    this.limboResolutionsByTarget = [];
    this.limboTargetsByKey = new SortedMap(DocumentKey.comparator);
  };
  /**
   * Reconcile the query views of the provided query targets with the state from
   * persistence. Raises snapshots for any changes that affect the local
   * client and returns the updated state of all target's query data.
   */
  // PORTING NOTE: Multi-tab only.


  SyncEngine.prototype.synchronizeQueryViewsAndRaiseSnapshots = function (targets) {
    var _this = this;

    var p = Promise.resolve();
    var activeQueries = [];
    var newViewSnapshots = [];

    var _loop_1 = function (targetId) {
      p = p.then(function () {
        return tslib_1.__awaiter(_this, void 0, void 0, function () {
          var queryData, queryView, viewChange, query;
          return tslib_1.__generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                queryView = this.queryViewsByTarget[targetId];
                if (!queryView) return [3
                /*break*/
                , 4]; // For queries that have a local View, we need to update their state
                // in LocalStore (as the resume token and the snapshot version
                // might have changed) and reconcile their views with the persisted
                // state (the list of syncedDocuments may have gotten out of sync).

                return [4
                /*yield*/
                , this.localStore.releaseQuery(queryView.query,
                /*keepPersistedQueryData=*/
                true)];

              case 1:
                // For queries that have a local View, we need to update their state
                // in LocalStore (as the resume token and the snapshot version
                // might have changed) and reconcile their views with the persisted
                // state (the list of syncedDocuments may have gotten out of sync).
                _a.sent();

                return [4
                /*yield*/
                , this.localStore.allocateQuery(queryView.query)];

              case 2:
                queryData = _a.sent();
                return [4
                /*yield*/
                , this.synchronizeViewAndComputeSnapshot(queryView)];

              case 3:
                viewChange = _a.sent();

                if (viewChange.snapshot) {
                  newViewSnapshots.push(viewChange.snapshot);
                }

                return [3
                /*break*/
                , 8];

              case 4:
                assert(this.isPrimary === true, 'A secondary tab should never have an active query without an active view.');
                return [4
                /*yield*/
                , this.localStore.getQueryForTarget(targetId)];

              case 5:
                query = _a.sent();
                assert(!!query, "Query data for target " + targetId + " not found");
                return [4
                /*yield*/
                , this.localStore.allocateQuery(query)];

              case 6:
                queryData = _a.sent();
                return [4
                /*yield*/
                , this.initializeViewAndComputeSnapshot(queryData,
                /*current=*/
                false)];

              case 7:
                _a.sent();

                _a.label = 8;

              case 8:
                activeQueries.push(queryData);
                return [2
                /*return*/
                ];
            }
          });
        });
      });
    };

    for (var _i = 0, targets_1 = targets; _i < targets_1.length; _i++) {
      var targetId = targets_1[_i];

      _loop_1(targetId);
    }

    return p.then(function () {
      _this.syncEngineListener.onWatchChange(newViewSnapshots);

      return activeQueries;
    });
  }; // PORTING NOTE: Multi-tab only


  SyncEngine.prototype.getActiveClients = function () {
    return this.localStore.getActiveClients();
  }; // PORTING NOTE: Multi-tab only


  SyncEngine.prototype.applyTargetState = function (targetId, state, error) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _a, queryView;

      var _this = this;

      return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (this.isPrimary) {
              // If we receive a target state notification via WebStorage, we are
              // either already secondary or another tab has taken the primary lease.
              debug(LOG_TAG$9, 'Ignoring unexpected query state notification.');
              return [2
              /*return*/
              ];
            }

            if (!this.queryViewsByTarget[targetId]) return [3
            /*break*/
            , 5];
            _a = state;

            switch (_a) {
              case 'current':
                return [3
                /*break*/
                , 1];

              case 'not-current':
                return [3
                /*break*/
                , 1];

              case 'rejected':
                return [3
                /*break*/
                , 2];
            }

            return [3
            /*break*/
            , 4];

          case 1:
            {
              return [2
              /*return*/
              , this.localStore.getNewDocumentChanges().then(function (changes) {
                return tslib_1.__awaiter(_this, void 0, void 0, function () {
                  var synthesizedRemoteEvent;
                  return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        synthesizedRemoteEvent = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(targetId, state === 'current');
                        return [4
                        /*yield*/
                        , this.emitNewSnapsAndNotifyLocalStore(changes, synthesizedRemoteEvent)];

                      case 1:
                        _a.sent();

                        return [2
                        /*return*/
                        ];
                    }
                  });
                });
              }, function (err) {
                return tslib_1.__awaiter(_this, void 0, void 0, function () {
                  var activeTargets_2;
                  return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        if (!isDocumentChangeMissingError(err)) return [3
                        /*break*/
                        , 2];
                        activeTargets_2 = [];
                        forEachNumber(this.queryViewsByTarget, function (target) {
                          return activeTargets_2.push(target);
                        });
                        return [4
                        /*yield*/
                        , this.synchronizeQueryViewsAndRaiseSnapshots(activeTargets_2)];

                      case 1:
                        _a.sent();

                        return [3
                        /*break*/
                        , 3];

                      case 2:
                        throw err;

                      case 3:
                        return [2
                        /*return*/
                        ];
                    }
                  });
                });
              })];
            }
            _b.label = 2;

          case 2:
            queryView = this.queryViewsByTarget[targetId];
            this.removeAndCleanupQuery(queryView);
            return [4
            /*yield*/
            , this.localStore.releaseQuery(queryView.query,
            /*keepPersistedQueryData=*/
            true)];

          case 3:
            _b.sent();

            this.syncEngineListener.onWatchError(queryView.query, error);
            return [3
            /*break*/
            , 5];

          case 4:
            fail('Unexpected target state: ' + state);
            _b.label = 5;

          case 5:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // PORTING NOTE: Multi-tab only


  SyncEngine.prototype.applyActiveTargetsChange = function (added, removed) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var _i, added_1, targetId, query, queryData, _loop_2, this_1, _a, removed_1, targetId;

      var _this = this;

      return tslib_1.__generator(this, function (_b) {
        switch (_b.label) {
          case 0:
            if (!this.isPrimary) {
              return [2
              /*return*/
              ];
            }

            _i = 0, added_1 = added;
            _b.label = 1;

          case 1:
            if (!(_i < added_1.length)) return [3
            /*break*/
            , 6];
            targetId = added_1[_i];
            assert(!this.queryViewsByTarget[targetId], 'Trying to add an already active target');
            return [4
            /*yield*/
            , this.localStore.getQueryForTarget(targetId)];

          case 2:
            query = _b.sent();
            assert(!!query, "Query data for active target " + targetId + " not found");
            return [4
            /*yield*/
            , this.localStore.allocateQuery(query)];

          case 3:
            queryData = _b.sent();
            return [4
            /*yield*/
            , this.initializeViewAndComputeSnapshot(queryData,
            /*current=*/
            false)];

          case 4:
            _b.sent();

            this.remoteStore.listen(queryData);
            _b.label = 5;

          case 5:
            _i++;
            return [3
            /*break*/
            , 1];

          case 6:
            _loop_2 = function (targetId) {
              var queryView;
              return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                  case 0:
                    queryView = this_1.queryViewsByTarget[targetId];
                    if (!queryView) return [3
                    /*break*/
                    , 2];
                    return [4
                    /*yield*/
                    , this_1.localStore.releaseQuery(queryView.query,
                    /*keepPersistedQueryData=*/
                    false).then(function () {
                      _this.remoteStore.unlisten(targetId);

                      _this.removeAndCleanupQuery(queryView);
                    }).catch(ignoreIfPrimaryLeaseLoss)];

                  case 1:
                    _a.sent();

                    _a.label = 2;

                  case 2:
                    return [2
                    /*return*/
                    ];
                }
              });
            };

            this_1 = this;
            _a = 0, removed_1 = removed;
            _b.label = 7;

          case 7:
            if (!(_a < removed_1.length)) return [3
            /*break*/
            , 10];
            targetId = removed_1[_a];
            return [5
            /*yield**/
            , _loop_2(targetId)];

          case 8:
            _b.sent();

            _b.label = 9;

          case 9:
            _a++;
            return [3
            /*break*/
            , 7];

          case 10:
            return [2
            /*return*/
            ];
        }
      });
    });
  }; // PORTING NOTE: Multi-tab only. In other clients, LocalStore is unaware of
  // the online state.


  SyncEngine.prototype.enableNetwork = function () {
    this.localStore.setNetworkEnabled(true);
    return this.remoteStore.enableNetwork();
  }; // PORTING NOTE: Multi-tab only. In other clients, LocalStore is unaware of
  // the online state.


  SyncEngine.prototype.disableNetwork = function () {
    this.localStore.setNetworkEnabled(false);
    return this.remoteStore.disableNetwork();
  };

  SyncEngine.prototype.getRemoteKeysForTarget = function (targetId) {
    var limboResolution = this.limboResolutionsByTarget[targetId];

    if (limboResolution && limboResolution.receivedDocument) {
      return documentKeySet().add(limboResolution.key);
    } else {
      return this.queryViewsByTarget[targetId] ? this.queryViewsByTarget[targetId].view.syncedDocuments : documentKeySet();
    }
  };

  return SyncEngine;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Simple wrapper around a nullable UID. Mostly exists to make code more
 * readable.
 */


var User =
/** @class */
function () {
  function User(uid) {
    this.uid = uid;
  }

  User.prototype.isAuthenticated = function () {
    return this.uid != null;
  };
  /**
   * Returns a key representing this user, suitable for inclusion in a
   * dictionary.
   */


  User.prototype.toKey = function () {
    if (this.isAuthenticated()) {
      return 'uid:' + this.uid;
    } else {
      return 'anonymous-user';
    }
  };

  User.prototype.isEqual = function (otherUser) {
    return otherUser.uid === this.uid;
  };
  /** A user with a null UID. */


  User.UNAUTHENTICATED = new User(null); // TODO(mikelehen): Look into getting a proper uid-equivalent for
  // non-FirebaseAuth providers.

  User.GOOGLE_CREDENTIALS = new User('google-credentials-uid');
  User.FIRST_PARTY = new User('first-party-uid');
  return User;
}();
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$a = 'SharedClientState'; // The format of the LocalStorage key that stores the client state is:
//     firestore_clients_<persistence_prefix>_<instance_key>

var CLIENT_STATE_KEY_PREFIX = 'firestore_clients'; // The format of the WebStorage key that stores the mutation state is:
//     firestore_mutations_<persistence_prefix>_<batch_id>
//     (for unauthenticated users)
// or: firestore_mutations_<persistence_prefix>_<batch_id>_<user_uid>
//
// 'user_uid' is last to avoid needing to escape '_' characters that it might
// contain.

var MUTATION_BATCH_KEY_PREFIX = 'firestore_mutations'; // The format of the WebStorage key that stores a query target's metadata is:
//     firestore_targets_<persistence_prefix>_<target_id>

var QUERY_TARGET_KEY_PREFIX = 'firestore_targets'; // The WebStorage prefix that stores the primary tab's online state. The
// format of the key is:
//     firestore_online_state_<persistence_prefix>

var ONLINE_STATE_KEY_PREFIX = 'firestore_online_state'; // The WebStorage key prefix for the key that stores the last sequence number allocated. The key
// looks like 'firestore_sequence_number_<persistence_prefix>'.

var SEQUENCE_NUMBER_KEY_PREFIX = 'firestore_sequence_number';
/**
 * Holds the state of a mutation batch, including its user ID, batch ID and
 * whether the batch is 'pending', 'acknowledged' or 'rejected'.
 */
// Visible for testing

var MutationMetadata =
/** @class */
function () {
  function MutationMetadata(user, batchId, state, error) {
    this.user = user;
    this.batchId = batchId;
    this.state = state;
    this.error = error;
    assert(error !== undefined === (state === 'rejected'), "MutationMetadata must contain an error iff state is 'rejected'");
  }
  /**
   * Parses a MutationMetadata from its JSON representation in WebStorage.
   * Logs a warning and returns null if the format of the data is not valid.
   */


  MutationMetadata.fromWebStorageEntry = function (user, batchId, value) {
    var mutationBatch = JSON.parse(value);
    var validData = typeof mutationBatch === 'object' && ['pending', 'acknowledged', 'rejected'].indexOf(mutationBatch.state) !== -1 && (mutationBatch.error === undefined || typeof mutationBatch.error === 'object');
    var firestoreError = undefined;

    if (validData && mutationBatch.error) {
      validData = typeof mutationBatch.error.message === 'string' && typeof mutationBatch.error.code === 'string';

      if (validData) {
        firestoreError = new FirestoreError(mutationBatch.error.code, mutationBatch.error.message);
      }
    }

    if (validData) {
      return new MutationMetadata(user, batchId, mutationBatch.state, firestoreError);
    } else {
      error(LOG_TAG$a, "Failed to parse mutation state for ID '" + batchId + "': " + value);
      return null;
    }
  };

  MutationMetadata.prototype.toWebStorageJSON = function () {
    var batchMetadata = {
      state: this.state,
      updateTimeMs: Date.now() // Modify the existing value to trigger update.

    };

    if (this.error) {
      batchMetadata.error = {
        code: this.error.code,
        message: this.error.message
      };
    }

    return JSON.stringify(batchMetadata);
  };

  return MutationMetadata;
}();
/**
 * Holds the state of a query target, including its target ID and whether the
 * target is 'not-current', 'current' or 'rejected'.
 */
// Visible for testing


var QueryTargetMetadata =
/** @class */
function () {
  function QueryTargetMetadata(targetId, state, error) {
    this.targetId = targetId;
    this.state = state;
    this.error = error;
    assert(error !== undefined === (state === 'rejected'), "QueryTargetMetadata must contain an error iff state is 'rejected'");
  }
  /**
   * Parses a QueryTargetMetadata from its JSON representation in WebStorage.
   * Logs a warning and returns null if the format of the data is not valid.
   */


  QueryTargetMetadata.fromWebStorageEntry = function (targetId, value) {
    var targetState = JSON.parse(value);
    var validData = typeof targetState === 'object' && ['not-current', 'current', 'rejected'].indexOf(targetState.state) !== -1 && (targetState.error === undefined || typeof targetState.error === 'object');
    var firestoreError = undefined;

    if (validData && targetState.error) {
      validData = typeof targetState.error.message === 'string' && typeof targetState.error.code === 'string';

      if (validData) {
        firestoreError = new FirestoreError(targetState.error.code, targetState.error.message);
      }
    }

    if (validData) {
      return new QueryTargetMetadata(targetId, targetState.state, firestoreError);
    } else {
      error(LOG_TAG$a, "Failed to parse target state for ID '" + targetId + "': " + value);
      return null;
    }
  };

  QueryTargetMetadata.prototype.toWebStorageJSON = function () {
    var targetState = {
      state: this.state,
      updateTimeMs: Date.now() // Modify the existing value to trigger update.

    };

    if (this.error) {
      targetState.error = {
        code: this.error.code,
        message: this.error.message
      };
    }

    return JSON.stringify(targetState);
  };

  return QueryTargetMetadata;
}();
/**
 * This class represents the immutable ClientState for a client read from
 * WebStorage, containing the list of active query targets.
 */


var RemoteClientState =
/** @class */
function () {
  function RemoteClientState(clientId, activeTargetIds) {
    this.clientId = clientId;
    this.activeTargetIds = activeTargetIds;
  }
  /**
   * Parses a RemoteClientState from the JSON representation in WebStorage.
   * Logs a warning and returns null if the format of the data is not valid.
   */


  RemoteClientState.fromWebStorageEntry = function (clientId, value) {
    var clientState = JSON.parse(value);
    var validData = typeof clientState === 'object' && clientState.activeTargetIds instanceof Array;
    var activeTargetIdsSet = targetIdSet();

    for (var i = 0; validData && i < clientState.activeTargetIds.length; ++i) {
      validData = isSafeInteger(clientState.activeTargetIds[i]);
      activeTargetIdsSet = activeTargetIdsSet.add(clientState.activeTargetIds[i]);
    }

    if (validData) {
      return new RemoteClientState(clientId, activeTargetIdsSet);
    } else {
      error(LOG_TAG$a, "Failed to parse client data for instance '" + clientId + "': " + value);
      return null;
    }
  };

  return RemoteClientState;
}();
/**
 * This class represents the online state for all clients participating in
 * multi-tab. The online state is only written to by the primary client, and
 * used in secondary clients to update their query views.
 */


var SharedOnlineState =
/** @class */
function () {
  function SharedOnlineState(clientId, onlineState) {
    this.clientId = clientId;
    this.onlineState = onlineState;
  }
  /**
   * Parses a SharedOnlineState from its JSON representation in WebStorage.
   * Logs a warning and returns null if the format of the data is not valid.
   */


  SharedOnlineState.fromWebStorageEntry = function (value) {
    var onlineState = JSON.parse(value);
    var validData = typeof onlineState === 'object' && OnlineState[onlineState.onlineState] !== undefined && typeof onlineState.clientId === 'string';

    if (validData) {
      return new SharedOnlineState(onlineState.clientId, OnlineState[onlineState.onlineState]);
    } else {
      error(LOG_TAG$a, "Failed to parse online state: " + value);
      return null;
    }
  };

  return SharedOnlineState;
}();
/**
 * Metadata state of the local client. Unlike `RemoteClientState`, this class is
 * mutable and keeps track of all pending mutations, which allows us to
 * update the range of pending mutation batch IDs as new mutations are added or
 * removed.
 *
 * The data in `LocalClientState` is not read from WebStorage and instead
 * updated via its instance methods. The updated state can be serialized via
 * `toWebStorageJSON()`.
 */
// Visible for testing.


var LocalClientState =
/** @class */
function () {
  function LocalClientState() {
    this.activeTargetIds = targetIdSet();
  }

  LocalClientState.prototype.addQueryTarget = function (targetId) {
    assert(!this.activeTargetIds.has(targetId), "Target with ID '" + targetId + "' already active.");
    this.activeTargetIds = this.activeTargetIds.add(targetId);
  };

  LocalClientState.prototype.removeQueryTarget = function (targetId) {
    this.activeTargetIds = this.activeTargetIds.delete(targetId);
  };
  /**
   * Converts this entry into a JSON-encoded format we can use for WebStorage.
   * Does not encode `clientId` as it is part of the key in WebStorage.
   */


  LocalClientState.prototype.toWebStorageJSON = function () {
    var data = {
      activeTargetIds: this.activeTargetIds.toArray(),
      updateTimeMs: Date.now() // Modify the existing value to trigger update.

    };
    return JSON.stringify(data);
  };

  return LocalClientState;
}();
/**
 * `WebStorageSharedClientState` uses WebStorage (window.localStorage) as the
 * backing store for the SharedClientState. It keeps track of all active
 * clients and supports modifications of the local client's data.
 */


var WebStorageSharedClientState =
/** @class */
function () {
  function WebStorageSharedClientState(queue, platform, persistenceKey, localClientId, initialUser) {
    this.queue = queue;
    this.platform = platform;
    this.persistenceKey = persistenceKey;
    this.localClientId = localClientId;
    this.syncEngine = null;
    this.onlineStateHandler = null;
    this.sequenceNumberHandler = null;
    this.activeClients = {};
    this.storageListener = this.handleWebStorageEvent.bind(this);
    this.started = false;
    /**
     * Captures WebStorage events that occur before `start()` is called. These
     * events are replayed once `WebStorageSharedClientState` is started.
     */

    this.earlyEvents = [];

    if (!WebStorageSharedClientState.isAvailable(this.platform)) {
      throw new FirestoreError(Code.UNIMPLEMENTED, 'LocalStorage is not available on this platform.');
    } // Escape the special characters mentioned here:
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions


    var escapedPersistenceKey = persistenceKey.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    this.storage = this.platform.window.localStorage;
    this.currentUser = initialUser;
    this.localClientStorageKey = this.toWebStorageClientStateKey(this.localClientId);
    this.sequenceNumberKey = SEQUENCE_NUMBER_KEY_PREFIX + "_" + persistenceKey;
    this.activeClients[this.localClientId] = new LocalClientState();
    this.clientStateKeyRe = new RegExp("^" + CLIENT_STATE_KEY_PREFIX + "_" + escapedPersistenceKey + "_([^_]*)$");
    this.mutationBatchKeyRe = new RegExp("^" + MUTATION_BATCH_KEY_PREFIX + "_" + escapedPersistenceKey + "_(\\d+)(?:_(.*))?$");
    this.queryTargetKeyRe = new RegExp("^" + QUERY_TARGET_KEY_PREFIX + "_" + escapedPersistenceKey + "_(\\d+)$");
    this.onlineStateKey = ONLINE_STATE_KEY_PREFIX + "_" + persistenceKey; // Rather than adding the storage observer during start(), we add the
    // storage observer during initialization. This ensures that we collect
    // events before other components populate their initial state (during their
    // respective start() calls). Otherwise, we might for example miss a
    // mutation that is added after LocalStore's start() processed the existing
    // mutations but before we observe WebStorage events.

    this.platform.window.addEventListener('storage', this.storageListener);
  }
  /** Returns 'true' if WebStorage is available in the current environment. */


  WebStorageSharedClientState.isAvailable = function (platform) {
    return !!(platform.window && platform.window.localStorage != null);
  };

  WebStorageSharedClientState.prototype.start = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      var existingClients, _i, existingClients_1, clientId, storageItem, clientState, onlineStateJSON, onlineState, _a, _b, event_1;

      var _this = this;

      return tslib_1.__generator(this, function (_c) {
        switch (_c.label) {
          case 0:
            assert(!this.started, 'WebStorageSharedClientState already started');
            assert(this.syncEngine !== null, 'syncEngine property must be set before calling start()');
            assert(this.onlineStateHandler !== null, 'onlineStateHandler property must be set before calling start()');
            return [4
            /*yield*/
            , this.syncEngine.getActiveClients()];

          case 1:
            existingClients = _c.sent();

            for (_i = 0, existingClients_1 = existingClients; _i < existingClients_1.length; _i++) {
              clientId = existingClients_1[_i];

              if (clientId === this.localClientId) {
                continue;
              }

              storageItem = this.getItem(this.toWebStorageClientStateKey(clientId));

              if (storageItem) {
                clientState = RemoteClientState.fromWebStorageEntry(clientId, storageItem);

                if (clientState) {
                  this.activeClients[clientState.clientId] = clientState;
                }
              }
            }

            this.persistClientState();
            onlineStateJSON = this.storage.getItem(this.onlineStateKey);

            if (onlineStateJSON) {
              onlineState = this.fromWebStorageOnlineState(onlineStateJSON);

              if (onlineState) {
                this.handleOnlineStateEvent(onlineState);
              }
            }

            for (_a = 0, _b = this.earlyEvents; _a < _b.length; _a++) {
              event_1 = _b[_a];
              this.handleWebStorageEvent(event_1);
            }

            this.earlyEvents = []; // Register a window unload hook to remove the client metadata entry from
            // WebStorage even if `shutdown()` was not called.

            this.platform.window.addEventListener('unload', function () {
              return _this.shutdown();
            });
            this.started = true;
            return [2
            /*return*/
            ];
        }
      });
    });
  };

  WebStorageSharedClientState.prototype.writeSequenceNumber = function (sequenceNumber) {
    this.setItem(this.sequenceNumberKey, JSON.stringify(sequenceNumber));
  };

  WebStorageSharedClientState.prototype.getAllActiveQueryTargets = function () {
    var activeTargets = targetIdSet();
    forEach(this.activeClients, function (key, value) {
      activeTargets = activeTargets.unionWith(value.activeTargetIds);
    });
    return activeTargets;
  };

  WebStorageSharedClientState.prototype.isActiveQueryTarget = function (targetId) {
    // This is not using `obj.forEach` since `forEach` doesn't support early
    // return.
    for (var clientId in this.activeClients) {
      if (this.activeClients.hasOwnProperty(clientId)) {
        if (this.activeClients[clientId].activeTargetIds.has(targetId)) {
          return true;
        }
      }
    }

    return false;
  };

  WebStorageSharedClientState.prototype.addPendingMutation = function (batchId) {
    this.persistMutationState(batchId, 'pending');
  };

  WebStorageSharedClientState.prototype.updateMutationState = function (batchId, state, error) {
    this.persistMutationState(batchId, state, error); // Once a final mutation result is observed by other clients, they no longer
    // access the mutation's metadata entry. Since WebStorage replays events
    // in order, it is safe to delete the entry right after updating it.

    this.removeMutationState(batchId);
  };

  WebStorageSharedClientState.prototype.addLocalQueryTarget = function (targetId) {
    var queryState = 'not-current'; // Lookup an existing query state if the target ID was already registered
    // by another tab

    if (this.isActiveQueryTarget(targetId)) {
      var storageItem = this.storage.getItem(this.toWebStorageQueryTargetMetadataKey(targetId));

      if (storageItem) {
        var metadata = QueryTargetMetadata.fromWebStorageEntry(targetId, storageItem);

        if (metadata) {
          queryState = metadata.state;
        }
      }
    }

    this.localClientState.addQueryTarget(targetId);
    this.persistClientState();
    return queryState;
  };

  WebStorageSharedClientState.prototype.removeLocalQueryTarget = function (targetId) {
    this.localClientState.removeQueryTarget(targetId);
    this.persistClientState();
  };

  WebStorageSharedClientState.prototype.isLocalQueryTarget = function (targetId) {
    return this.localClientState.activeTargetIds.has(targetId);
  };

  WebStorageSharedClientState.prototype.clearQueryState = function (targetId) {
    this.removeItem(this.toWebStorageQueryTargetMetadataKey(targetId));
  };

  WebStorageSharedClientState.prototype.updateQueryState = function (targetId, state, error) {
    this.persistQueryTargetState(targetId, state, error);
  };

  WebStorageSharedClientState.prototype.handleUserChange = function (user, removedBatchIds, addedBatchIds) {
    var _this = this;

    removedBatchIds.forEach(function (batchId) {
      _this.removeMutationState(batchId);
    });
    this.currentUser = user;
    addedBatchIds.forEach(function (batchId) {
      _this.addPendingMutation(batchId);
    });
  };

  WebStorageSharedClientState.prototype.setOnlineState = function (onlineState) {
    this.persistOnlineState(onlineState);
  };

  WebStorageSharedClientState.prototype.shutdown = function () {
    if (this.started) {
      this.platform.window.removeEventListener('storage', this.storageListener);
      this.removeItem(this.localClientStorageKey);
      this.started = false;
    }
  };

  WebStorageSharedClientState.prototype.getItem = function (key) {
    var value = this.storage.getItem(key);
    debug(LOG_TAG$a, 'READ', key, value);
    return value;
  };

  WebStorageSharedClientState.prototype.setItem = function (key, value) {
    debug(LOG_TAG$a, 'SET', key, value);
    this.storage.setItem(key, value);
  };

  WebStorageSharedClientState.prototype.removeItem = function (key) {
    debug(LOG_TAG$a, 'REMOVE', key);
    this.storage.removeItem(key);
  };

  WebStorageSharedClientState.prototype.handleWebStorageEvent = function (event) {
    var _this = this;

    if (event.storageArea === this.storage) {
      debug(LOG_TAG$a, 'EVENT', event.key, event.newValue);

      if (event.key === this.localClientStorageKey) {
        error('Received WebStorage notification for local change. Another client might have ' + 'garbage-collected our state');
        return;
      }

      this.queue.enqueueAndForget(function () {
        return tslib_1.__awaiter(_this, void 0, void 0, function () {
          var clientState, clientId, mutationMetadata, queryTargetMetadata, onlineState, sequenceNumber;
          return tslib_1.__generator(this, function (_a) {
            if (!this.started) {
              this.earlyEvents.push(event);
              return [2
              /*return*/
              ];
            }

            if (event.key === null) {
              return [2
              /*return*/
              ];
            }

            if (this.clientStateKeyRe.test(event.key)) {
              if (event.newValue != null) {
                clientState = this.fromWebStorageClientState(event.key, event.newValue);

                if (clientState) {
                  return [2
                  /*return*/
                  , this.handleClientStateEvent(clientState.clientId, clientState)];
                }
              } else {
                clientId = this.fromWebStorageClientStateKey(event.key);
                return [2
                /*return*/
                , this.handleClientStateEvent(clientId, null)];
              }
            } else if (this.mutationBatchKeyRe.test(event.key)) {
              if (event.newValue !== null) {
                mutationMetadata = this.fromWebStorageMutationMetadata(event.key, event.newValue);

                if (mutationMetadata) {
                  return [2
                  /*return*/
                  , this.handleMutationBatchEvent(mutationMetadata)];
                }
              }
            } else if (this.queryTargetKeyRe.test(event.key)) {
              if (event.newValue !== null) {
                queryTargetMetadata = this.fromWebStorageQueryTargetMetadata(event.key, event.newValue);

                if (queryTargetMetadata) {
                  return [2
                  /*return*/
                  , this.handleQueryTargetEvent(queryTargetMetadata)];
                }
              }
            } else if (event.key === this.onlineStateKey) {
              if (event.newValue !== null) {
                onlineState = this.fromWebStorageOnlineState(event.newValue);

                if (onlineState) {
                  return [2
                  /*return*/
                  , this.handleOnlineStateEvent(onlineState)];
                }
              }
            } else if (event.key === this.sequenceNumberKey) {
              assert(!!this.sequenceNumberHandler, 'Missing sequenceNumberHandler');
              sequenceNumber = fromWebStorageSequenceNumber(event.newValue);

              if (sequenceNumber !== ListenSequence.INVALID) {
                this.sequenceNumberHandler(sequenceNumber);
              }
            }

            return [2
            /*return*/
            ];
          });
        });
      });
    }
  };

  Object.defineProperty(WebStorageSharedClientState.prototype, "localClientState", {
    get: function () {
      return this.activeClients[this.localClientId];
    },
    enumerable: true,
    configurable: true
  });

  WebStorageSharedClientState.prototype.persistClientState = function () {
    this.setItem(this.localClientStorageKey, this.localClientState.toWebStorageJSON());
  };

  WebStorageSharedClientState.prototype.persistMutationState = function (batchId, state, error) {
    var mutationState = new MutationMetadata(this.currentUser, batchId, state, error);
    var mutationKey = this.toWebStorageMutationBatchKey(batchId);
    this.setItem(mutationKey, mutationState.toWebStorageJSON());
  };

  WebStorageSharedClientState.prototype.removeMutationState = function (batchId) {
    var mutationKey = this.toWebStorageMutationBatchKey(batchId);
    this.removeItem(mutationKey);
  };

  WebStorageSharedClientState.prototype.persistOnlineState = function (onlineState) {
    var entry = {
      clientId: this.localClientId,
      onlineState: OnlineState[onlineState]
    };
    this.storage.setItem(this.onlineStateKey, JSON.stringify(entry));
  };

  WebStorageSharedClientState.prototype.persistQueryTargetState = function (targetId, state, error) {
    var targetKey = this.toWebStorageQueryTargetMetadataKey(targetId);
    var targetMetadata = new QueryTargetMetadata(targetId, state, error);
    this.setItem(targetKey, targetMetadata.toWebStorageJSON());
  };
  /** Assembles the key for a client state in WebStorage */


  WebStorageSharedClientState.prototype.toWebStorageClientStateKey = function (clientId) {
    assert(clientId.indexOf('_') === -1, "Client key cannot contain '_', but was '" + clientId + "'");
    return CLIENT_STATE_KEY_PREFIX + "_" + this.persistenceKey + "_" + clientId;
  };
  /** Assembles the key for a query state in WebStorage */


  WebStorageSharedClientState.prototype.toWebStorageQueryTargetMetadataKey = function (targetId) {
    return QUERY_TARGET_KEY_PREFIX + "_" + this.persistenceKey + "_" + targetId;
  };
  /** Assembles the key for a mutation batch in WebStorage */


  WebStorageSharedClientState.prototype.toWebStorageMutationBatchKey = function (batchId) {
    var mutationKey = MUTATION_BATCH_KEY_PREFIX + "_" + this.persistenceKey + "_" + batchId;

    if (this.currentUser.isAuthenticated()) {
      mutationKey += "_" + this.currentUser.uid;
    }

    return mutationKey;
  };
  /**
   * Parses a client state key in WebStorage. Returns null if the key does not
   * match the expected key format.
   */


  WebStorageSharedClientState.prototype.fromWebStorageClientStateKey = function (key) {
    var match = this.clientStateKeyRe.exec(key);
    return match ? match[1] : null;
  };
  /**
   * Parses a client state in WebStorage. Returns 'null' if the value could not
   * be parsed.
   */


  WebStorageSharedClientState.prototype.fromWebStorageClientState = function (key, value) {
    var clientId = this.fromWebStorageClientStateKey(key);
    assert(clientId !== null, "Cannot parse client state key '" + key + "'");
    return RemoteClientState.fromWebStorageEntry(clientId, value);
  };
  /**
   * Parses a mutation batch state in WebStorage. Returns 'null' if the value
   * could not be parsed.
   */


  WebStorageSharedClientState.prototype.fromWebStorageMutationMetadata = function (key, value) {
    var match = this.mutationBatchKeyRe.exec(key);
    assert(match !== null, "Cannot parse mutation batch key '" + key + "'");
    var batchId = Number(match[1]);
    var userId = match[2] !== undefined ? match[2] : null;
    return MutationMetadata.fromWebStorageEntry(new User(userId), batchId, value);
  };
  /**
   * Parses a query target state from WebStorage. Returns 'null' if the value
   * could not be parsed.
   */


  WebStorageSharedClientState.prototype.fromWebStorageQueryTargetMetadata = function (key, value) {
    var match = this.queryTargetKeyRe.exec(key);
    assert(match !== null, "Cannot parse query target key '" + key + "'");
    var targetId = Number(match[1]);
    return QueryTargetMetadata.fromWebStorageEntry(targetId, value);
  };
  /**
   * Parses an online state from WebStorage. Returns 'null' if the value
   * could not be parsed.
   */


  WebStorageSharedClientState.prototype.fromWebStorageOnlineState = function (value) {
    return SharedOnlineState.fromWebStorageEntry(value);
  };

  WebStorageSharedClientState.prototype.handleMutationBatchEvent = function (mutationBatch) {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        if (mutationBatch.user.uid !== this.currentUser.uid) {
          debug(LOG_TAG$a, "Ignoring mutation for non-active user " + mutationBatch.user.uid);
          return [2
          /*return*/
          ];
        }

        return [2
        /*return*/
        , this.syncEngine.applyBatchState(mutationBatch.batchId, mutationBatch.state, mutationBatch.error)];
      });
    });
  };

  WebStorageSharedClientState.prototype.handleQueryTargetEvent = function (targetMetadata) {
    return this.syncEngine.applyTargetState(targetMetadata.targetId, targetMetadata.state, targetMetadata.error);
  };

  WebStorageSharedClientState.prototype.handleClientStateEvent = function (clientId, clientState) {
    var _this = this;

    var existingTargets = this.getAllActiveQueryTargets();

    if (clientState) {
      this.activeClients[clientId] = clientState;
    } else {
      delete this.activeClients[clientId];
    }

    var newTargets = this.getAllActiveQueryTargets();
    var addedTargets = [];
    var removedTargets = [];
    newTargets.forEach(function (targetId) {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
          if (!existingTargets.has(targetId)) {
            addedTargets.push(targetId);
          }

          return [2
          /*return*/
          ];
        });
      });
    });
    existingTargets.forEach(function (targetId) {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
          if (!newTargets.has(targetId)) {
            removedTargets.push(targetId);
          }

          return [2
          /*return*/
          ];
        });
      });
    });
    return this.syncEngine.applyActiveTargetsChange(addedTargets, removedTargets);
  };

  WebStorageSharedClientState.prototype.handleOnlineStateEvent = function (onlineState) {
    // We check whether the client that wrote this online state is still active
    // by comparing its client ID to the list of clients kept active in
    // IndexedDb. If a client does not update their IndexedDb client state
    // within 5 seconds, it is considered inactive and we don't emit an online
    // state event.
    if (this.activeClients[onlineState.clientId]) {
      this.onlineStateHandler(onlineState.onlineState);
    }
  };

  return WebStorageSharedClientState;
}();

function fromWebStorageSequenceNumber(seqString) {
  var sequenceNumber = ListenSequence.INVALID;

  if (seqString != null) {
    try {
      var parsed = JSON.parse(seqString);
      assert(typeof parsed === 'number', 'Found non-numeric sequence number');
      sequenceNumber = parsed;
    } catch (e) {
      error(LOG_TAG$a, 'Failed to read sequence number from WebStorage', e);
    }
  }

  return sequenceNumber;
}
/**
 * `MemorySharedClientState` is a simple implementation of SharedClientState for
 * clients using memory persistence. The state in this class remains fully
 * isolated and no synchronization is performed.
 */


var MemorySharedClientState =
/** @class */
function () {
  function MemorySharedClientState() {
    this.localState = new LocalClientState();
    this.queryState = {};
    this.syncEngine = null;
    this.onlineStateHandler = null;
    this.sequenceNumberHandler = null;
  }

  MemorySharedClientState.prototype.addPendingMutation = function (batchId) {// No op.
  };

  MemorySharedClientState.prototype.updateMutationState = function (batchId, state, error) {// No op.
  };

  MemorySharedClientState.prototype.addLocalQueryTarget = function (targetId) {
    this.localState.addQueryTarget(targetId);
    return this.queryState[targetId] || 'not-current';
  };

  MemorySharedClientState.prototype.updateQueryState = function (targetId, state, error) {
    this.queryState[targetId] = state;
  };

  MemorySharedClientState.prototype.removeLocalQueryTarget = function (targetId) {
    this.localState.removeQueryTarget(targetId);
  };

  MemorySharedClientState.prototype.isLocalQueryTarget = function (targetId) {
    return this.localState.activeTargetIds.has(targetId);
  };

  MemorySharedClientState.prototype.clearQueryState = function (targetId) {
    delete this.queryState[targetId];
  };

  MemorySharedClientState.prototype.getAllActiveQueryTargets = function () {
    return this.localState.activeTargetIds;
  };

  MemorySharedClientState.prototype.isActiveQueryTarget = function (targetId) {
    return this.localState.activeTargetIds.has(targetId);
  };

  MemorySharedClientState.prototype.start = function () {
    this.localState = new LocalClientState();
    return Promise.resolve();
  };

  MemorySharedClientState.prototype.handleUserChange = function (user, removedBatchIds, addedBatchIds) {// No op.
  };

  MemorySharedClientState.prototype.setOnlineState = function (onlineState) {// No op.
  };

  MemorySharedClientState.prototype.shutdown = function () {};

  MemorySharedClientState.prototype.writeSequenceNumber = function (sequenceNumber) {};

  return MemorySharedClientState;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var LOG_TAG$b = 'FirestoreClient';
/** The DOMException code for an aborted operation. */

var DOM_EXCEPTION_ABORTED = 20;
/** The DOMException code for quota exceeded. */

var DOM_EXCEPTION_QUOTA_EXCEEDED = 22;

var IndexedDbPersistenceSettings =
/** @class */
function () {
  function IndexedDbPersistenceSettings(cacheSizeBytes, experimentalTabSynchronization) {
    this.cacheSizeBytes = cacheSizeBytes;
    this.experimentalTabSynchronization = experimentalTabSynchronization;
  }

  IndexedDbPersistenceSettings.prototype.lruParams = function () {
    return LruParams.withCacheSize(this.cacheSizeBytes);
  };

  return IndexedDbPersistenceSettings;
}();

var MemoryPersistenceSettings =
/** @class */
function () {
  function MemoryPersistenceSettings() {}

  return MemoryPersistenceSettings;
}();
/**
 * FirestoreClient is a top-level class that constructs and owns all of the
 * pieces of the client SDK architecture. It is responsible for creating the
 * async queue that is shared by all of the other components in the system.
 */


var FirestoreClient =
/** @class */
function () {
  function FirestoreClient(platform, databaseInfo, credentials,
  /**
   * Asynchronous queue responsible for all of our internal processing. When
   * we get incoming work from the user (via public API) or the network
   * (incoming GRPC messages), we should always schedule onto this queue.
   * This ensures all of our work is properly serialized (e.g. we don't
   * start processing a new operation while the previous one is waiting for
   * an async I/O to complete).
   */
  asyncQueue) {
    this.platform = platform;
    this.databaseInfo = databaseInfo;
    this.credentials = credentials;
    this.asyncQueue = asyncQueue;
    this.clientId = AutoId.newId();
  }
  /**
   * Starts up the FirestoreClient, returning only whether or not enabling
   * persistence succeeded.
   *
   * The intent here is to "do the right thing" as far as users are concerned.
   * Namely, in cases where offline persistence is requested and possible,
   * enable it, but otherwise fall back to persistence disabled. For the most
   * part we expect this to succeed one way or the other so we don't expect our
   * users to actually wait on the firestore.enablePersistence Promise since
   * they generally won't care.
   *
   * Of course some users actually do care about whether or not persistence
   * was successfully enabled, so the Promise returned from this method
   * indicates this outcome.
   *
   * This presents a problem though: even before enablePersistence resolves or
   * rejects, users may have made calls to e.g. firestore.collection() which
   * means that the FirestoreClient in there will be available and will be
   * enqueuing actions on the async queue.
   *
   * Meanwhile any failure of an operation on the async queue causes it to
   * panic and reject any further work, on the premise that unhandled errors
   * are fatal.
   *
   * Consequently the fallback is handled internally here in start, and if the
   * fallback succeeds we signal success to the async queue even though the
   * start() itself signals failure.
   *
   * @param persistenceSettings Settings object to configure offline
   *     persistence.
   * @returns A deferred result indicating the user-visible result of enabling
   *     offline persistence. This method will reject this if IndexedDB fails to
   *     start for any reason. If usePersistence is false this is
   *     unconditionally resolved.
   */


  FirestoreClient.prototype.start = function (persistenceSettings) {
    var _this = this; // We defer our initialization until we get the current user from
    // setChangeListener(). We block the async queue until we got the initial
    // user and the initialization is completed. This will prevent any scheduled
    // work from happening before initialization is completed.
    //
    // If initializationDone resolved then the FirestoreClient is in a usable
    // state.


    var initializationDone = new Deferred(); // If usePersistence is true, certain classes of errors while starting are
    // recoverable but only by falling back to persistence disabled.
    //
    // If there's an error in the first case but not in recovery we cannot
    // reject the promise blocking the async queue because this will cause the
    // async queue to panic.

    var persistenceResult = new Deferred();
    var initialized = false;
    this.credentials.setChangeListener(function (user) {
      if (!initialized) {
        initialized = true;

        _this.initializePersistence(persistenceSettings, persistenceResult, user).then(function (maybeLruGc) {
          return _this.initializeRest(user, maybeLruGc);
        }).then(initializationDone.resolve, initializationDone.reject);
      } else {
        _this.asyncQueue.enqueueAndForget(function () {
          return _this.handleCredentialChange(user);
        });
      }
    }); // Block the async queue until initialization is done

    this.asyncQueue.enqueueAndForget(function () {
      return initializationDone.promise;
    }); // Return only the result of enabling persistence. Note that this does not
    // need to await the completion of initializationDone because the result of
    // this method should not reflect any other kind of failure to start.

    return persistenceResult.promise;
  };
  /** Enables the network connection and requeues all pending operations. */


  FirestoreClient.prototype.enableNetwork = function () {
    var _this = this;

    return this.asyncQueue.enqueue(function () {
      return _this.syncEngine.enableNetwork();
    });
  };
  /**
   * Initializes persistent storage, attempting to use IndexedDB if
   * usePersistence is true or memory-only if false.
   *
   * If IndexedDB fails because it's already open in another tab or because the
   * platform can't possibly support our implementation then this method rejects
   * the persistenceResult and falls back on memory-only persistence.
   *
   * @param persistenceSettings Settings object to configure offline persistence
   * @param persistenceResult A deferred result indicating the user-visible
   *     result of enabling offline persistence. This method will reject this if
   *     IndexedDB fails to start for any reason. If usePersistence is false
   *     this is unconditionally resolved.
   * @returns a Promise indicating whether or not initialization should
   *     continue, i.e. that one of the persistence implementations actually
   *     succeeded.
   */


  FirestoreClient.prototype.initializePersistence = function (persistenceSettings, persistenceResult, user) {
    var _this = this;

    if (persistenceSettings instanceof IndexedDbPersistenceSettings) {
      return this.startIndexedDbPersistence(user, persistenceSettings).then(function (maybeLruGc) {
        persistenceResult.resolve();
        return maybeLruGc;
      }).catch(function (error) {
        // Regardless of whether or not the retry succeeds, from an user
        // perspective, offline persistence has failed.
        persistenceResult.reject(error); // An unknown failure on the first stage shuts everything down.

        if (!_this.canFallback(error)) {
          throw error;
        }

        console.warn('Error enabling offline storage. Falling back to' + ' storage disabled: ' + error);
        return _this.startMemoryPersistence();
      });
    } else {
      // When usePersistence == false, enabling offline persistence is defined
      // to unconditionally succeed. This allows start() to have the same
      // signature for both cases, despite the fact that the returned promise
      // is only used in the enablePersistence call.
      persistenceResult.resolve();
      return this.startMemoryPersistence();
    }
  };
  /**
   * Decides whether the provided error allows us to gracefully disable
   * persistence (as opposed to crashing the client).
   */


  FirestoreClient.prototype.canFallback = function (error) {
    if (error instanceof FirestoreError) {
      return error.code === Code.FAILED_PRECONDITION || error.code === Code.UNIMPLEMENTED;
    } else if (typeof DOMException !== 'undefined' && error instanceof DOMException) {
      // We fall back to memory persistence if we cannot write the primary
      // lease. This can happen can during a schema migration, or if we run out
      // of quota when we try to write the primary lease.
      // For both the `QuotaExceededError` and the  `AbortError`, it is safe to
      // fall back to memory persistence since all modifications to IndexedDb
      // failed to commit.
      return error.code === DOM_EXCEPTION_QUOTA_EXCEEDED || error.code === DOM_EXCEPTION_ABORTED;
    }

    return true;
  };
  /**
   * Starts IndexedDB-based persistence.
   *
   * @returns A promise indicating success or failure.
   */


  FirestoreClient.prototype.startIndexedDbPersistence = function (user, settings) {
    var _this = this; // TODO(http://b/33384523): For now we just disable garbage collection
    // when persistence is enabled.


    var storagePrefix = IndexedDbPersistence.buildStoragePrefix(this.databaseInfo); // Opt to use proto3 JSON in case the platform doesn't support Uint8Array.

    var serializer = new JsonProtoSerializer(this.databaseInfo.databaseId, {
      useProto3Json: true
    });
    return Promise.resolve().then(function () {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var persistence, lruParams;
        return tslib_1.__generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              if (settings.experimentalTabSynchronization && !WebStorageSharedClientState.isAvailable(this.platform)) {
                throw new FirestoreError(Code.UNIMPLEMENTED, 'IndexedDB persistence is only available on platforms that support LocalStorage.');
              }

              lruParams = settings.lruParams();
              if (!settings.experimentalTabSynchronization) return [3
              /*break*/
              , 2];
              this.sharedClientState = new WebStorageSharedClientState(this.asyncQueue, this.platform, storagePrefix, this.clientId, user);
              return [4
              /*yield*/
              , IndexedDbPersistence.createMultiClientIndexedDbPersistence(storagePrefix, this.clientId, this.platform, this.asyncQueue, serializer, lruParams, {
                sequenceNumberSyncer: this.sharedClientState
              })];

            case 1:
              persistence = _a.sent();
              return [3
              /*break*/
              , 4];

            case 2:
              this.sharedClientState = new MemorySharedClientState();
              return [4
              /*yield*/
              , IndexedDbPersistence.createIndexedDbPersistence(storagePrefix, this.clientId, this.platform, this.asyncQueue, serializer, lruParams)];

            case 3:
              persistence = _a.sent();
              _a.label = 4;

            case 4:
              this.persistence = persistence;
              return [2
              /*return*/
              , persistence.referenceDelegate.garbageCollector];
          }
        });
      });
    });
  };
  /**
   * Starts Memory-backed persistence. In practice this cannot fail.
   *
   * @returns A promise that will successfully resolve.
   */


  FirestoreClient.prototype.startMemoryPersistence = function () {
    this.persistence = MemoryPersistence.createEagerPersistence(this.clientId);
    this.sharedClientState = new MemorySharedClientState();
    return Promise.resolve(null);
  };
  /**
   * Initializes the rest of the FirestoreClient, assuming the initial user
   * has been obtained from the credential provider and some persistence
   * implementation is available in this.persistence.
   */


  FirestoreClient.prototype.initializeRest = function (user, maybeLruGc) {
    var _this = this;

    debug(LOG_TAG$b, 'Initializing. user=', user.uid);
    return this.platform.loadConnection(this.databaseInfo).then(function (connection) {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        var serializer, datastore, remoteStoreOnlineStateChangedHandler, sharedClientStateOnlineStateChangedHandler;

        var _this = this;

        return tslib_1.__generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              this.localStore = new LocalStore(this.persistence, user);

              if (maybeLruGc) {
                // We're running LRU Garbage collection. Set up the scheduler.
                this.lruScheduler = new LruScheduler(maybeLruGc, this.asyncQueue, this.localStore);
              }

              serializer = this.platform.newSerializer(this.databaseInfo.databaseId);
              datastore = new Datastore(this.asyncQueue, connection, this.credentials, serializer);

              remoteStoreOnlineStateChangedHandler = function (onlineState) {
                return _this.syncEngine.applyOnlineStateChange(onlineState, OnlineStateSource.RemoteStore);
              };

              sharedClientStateOnlineStateChangedHandler = function (onlineState) {
                return _this.syncEngine.applyOnlineStateChange(onlineState, OnlineStateSource.SharedClientState);
              };

              this.remoteStore = new RemoteStore(this.localStore, datastore, this.asyncQueue, remoteStoreOnlineStateChangedHandler);
              this.syncEngine = new SyncEngine(this.localStore, this.remoteStore, this.sharedClientState, user);
              this.sharedClientState.onlineStateHandler = sharedClientStateOnlineStateChangedHandler; // Set up wiring between sync engine and other components

              this.remoteStore.syncEngine = this.syncEngine;
              this.sharedClientState.syncEngine = this.syncEngine;
              this.eventMgr = new EventManager(this.syncEngine); // PORTING NOTE: LocalStore doesn't need an explicit start() on the Web.

              return [4
              /*yield*/
              , this.sharedClientState.start()];

            case 1:
              // PORTING NOTE: LocalStore doesn't need an explicit start() on the Web.
              _a.sent();

              return [4
              /*yield*/
              , this.remoteStore.start()];

            case 2:
              _a.sent(); // NOTE: This will immediately call the listener, so we make sure to
              // set it after localStore / remoteStore are started.


              return [4
              /*yield*/
              , this.persistence.setPrimaryStateListener(function (isPrimary) {
                return tslib_1.__awaiter(_this, void 0, void 0, function () {
                  return tslib_1.__generator(this, function (_a) {
                    switch (_a.label) {
                      case 0:
                        return [4
                        /*yield*/
                        , this.syncEngine.applyPrimaryState(isPrimary)];

                      case 1:
                        _a.sent();

                        if (this.lruScheduler) {
                          if (isPrimary && !this.lruScheduler.started) {
                            this.lruScheduler.start();
                          } else if (!isPrimary) {
                            this.lruScheduler.stop();
                          }
                        }

                        return [2
                        /*return*/
                        ];
                    }
                  });
                });
              })];

            case 3:
              // NOTE: This will immediately call the listener, so we make sure to
              // set it after localStore / remoteStore are started.
              _a.sent();

              return [2
              /*return*/
              ];
          }
        });
      });
    });
  };

  FirestoreClient.prototype.handleCredentialChange = function (user) {
    this.asyncQueue.verifyOperationInProgress();
    debug(LOG_TAG$b, 'Credential Changed. Current user: ' + user.uid);
    return this.syncEngine.handleCredentialChange(user);
  };
  /** Disables the network connection. Pending operations will not complete. */


  FirestoreClient.prototype.disableNetwork = function () {
    var _this = this;

    return this.asyncQueue.enqueue(function () {
      return _this.syncEngine.disableNetwork();
    });
  };

  FirestoreClient.prototype.shutdown = function (options) {
    var _this = this;

    return this.asyncQueue.enqueue(function () {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
          switch (_a.label) {
            case 0:
              // PORTING NOTE: LocalStore does not need an explicit shutdown on web.
              if (this.lruScheduler) {
                this.lruScheduler.stop();
              }

              return [4
              /*yield*/
              , this.remoteStore.shutdown()];

            case 1:
              _a.sent();

              return [4
              /*yield*/
              , this.sharedClientState.shutdown()];

            case 2:
              _a.sent();

              return [4
              /*yield*/
              , this.persistence.shutdown(options && options.purgePersistenceWithDataLoss)];

            case 3:
              _a.sent(); // `removeChangeListener` must be called after shutting down the
              // RemoteStore as it will prevent the RemoteStore from retrieving
              // auth tokens.


              this.credentials.removeChangeListener();
              return [2
              /*return*/
              ];
          }
        });
      });
    });
  };

  FirestoreClient.prototype.listen = function (query, observer, options) {
    var _this = this;

    var listener = new QueryListener(query, observer, options);
    this.asyncQueue.enqueueAndForget(function () {
      return _this.eventMgr.listen(listener);
    });
    return listener;
  };

  FirestoreClient.prototype.unlisten = function (listener) {
    var _this = this;

    this.asyncQueue.enqueueAndForget(function () {
      return _this.eventMgr.unlisten(listener);
    });
  };

  FirestoreClient.prototype.getDocumentFromLocalCache = function (docKey) {
    var _this = this;

    return this.asyncQueue.enqueue(function () {
      return _this.localStore.readDocument(docKey);
    }).then(function (maybeDoc) {
      if (maybeDoc instanceof Document) {
        return maybeDoc;
      } else if (maybeDoc instanceof NoDocument) {
        return null;
      } else {
        throw new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from cache. (However, this document may ' + "exist on the server. Run again without setting 'source' in " + 'the GetOptions to attempt to retrieve the document from the ' + 'server.)');
      }
    });
  };

  FirestoreClient.prototype.getDocumentsFromLocalCache = function (query) {
    var _this = this;

    return this.asyncQueue.enqueue(function () {
      return _this.localStore.executeQuery(query);
    }).then(function (docs) {
      var remoteKeys = documentKeySet();
      var view = new View(query, remoteKeys);
      var viewDocChanges = view.computeDocChanges(docs);
      return view.applyChanges(viewDocChanges,
      /* updateLimboDocuments= */
      false).snapshot;
    });
  };

  FirestoreClient.prototype.write = function (mutations) {
    var _this = this;

    var deferred = new Deferred();
    this.asyncQueue.enqueueAndForget(function () {
      return _this.syncEngine.write(mutations, deferred);
    });
    return deferred.promise;
  };

  FirestoreClient.prototype.databaseId = function () {
    return this.databaseInfo.databaseId;
  };

  FirestoreClient.prototype.transaction = function (updateFunction) {
    var _this = this; // We have to wait for the async queue to be sure syncEngine is initialized.


    return this.asyncQueue.enqueue(function () {
      return tslib_1.__awaiter(_this, void 0, void 0, function () {
        return tslib_1.__generator(this, function (_a) {
          return [2
          /*return*/
          ];
        });
      });
    }).then(function () {
      return _this.syncEngine.runTransaction(updateFunction);
    });
  };

  return FirestoreClient;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * A wrapper implementation of Observer<T> that will dispatch events
 * asynchronously. To allow immediate silencing, a mute call is added which
 * causes events scheduled to no longer be raised.
 */


var AsyncObserver =
/** @class */
function () {
  function AsyncObserver(observer) {
    this.observer = observer;
    /**
     * When set to true, will not raise future events. Necessary to deal with
     * async detachment of listener.
     */

    this.muted = false;
  }

  AsyncObserver.prototype.next = function (value) {
    this.scheduleEvent(this.observer.next, value);
  };

  AsyncObserver.prototype.error = function (error) {
    this.scheduleEvent(this.observer.error, error);
  };

  AsyncObserver.prototype.mute = function () {
    this.muted = true;
  };

  AsyncObserver.prototype.scheduleEvent = function (eventHandler, event) {
    var _this = this;

    if (!this.muted) {
      setTimeout(function () {
        if (!_this.muted) {
          eventHandler(event);
        }
      }, 0);
    }
  };

  return AsyncObserver;
}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The objects that are a part of this API are exposed to third-parties as
// compiled javascript so we want to flag our private members with a leading
// underscore to discourage their use.
// tslint:disable:strip-private-property-underscore

/**
 * A FieldPath refers to a field in a document. The path may consist of a single
 * field name (referring to a top-level field in the document), or a list of
 * field names (referring to a nested field in the document).
 */


var FieldPath$1 =
/** @class */
function () {
  /**
   * Creates a FieldPath from the provided field names. If more than one field
   * name is provided, the path will point to a nested field in a document.
   *
   * @param fieldNames A list of field names.
   */
  function FieldPath$1() {
    var fieldNames = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      fieldNames[_i] = arguments[_i];
    }

    validateNamedArrayAtLeastNumberOfElements('FieldPath', fieldNames, 'fieldNames', 1);

    for (var i = 0; i < fieldNames.length; ++i) {
      validateArgType('FieldPath', 'string', i, fieldNames[i]);

      if (fieldNames[i].length === 0) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). " + 'Field names must not be empty.');
      }
    }

    this._internalPath = new FieldPath(fieldNames);
  }

  FieldPath$1.documentId = function () {
    return FieldPath$1._DOCUMENT_ID;
  };

  FieldPath$1.prototype.isEqual = function (other) {
    if (!(other instanceof FieldPath$1)) {
      throw invalidClassError('isEqual', 'FieldPath', 1, other);
    }

    return this._internalPath.isEqual(other._internalPath);
  };
  /**
   * Internal Note: The backend doesn't technically support querying by
   * document ID. Instead it queries by the entire document name (full path
   * included), but in the cases we currently support documentId(), the net
   * effect is the same.
   */


  FieldPath$1._DOCUMENT_ID = new FieldPath$1(FieldPath.keyField().canonicalString());
  return FieldPath$1;
}();
/**
 * Matches any characters in a field path string that are reserved.
 */


var RESERVED = new RegExp('[~\\*/\\[\\]]');
/**
 * Parses a field path string into a FieldPath, treating dots as separators.
 */

function fromDotSeparatedString(path) {
  var found = path.search(RESERVED);

  if (found >= 0) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field path (" + path + "). Paths must not contain " + "'~', '*', '/', '[', or ']'");
  }

  try {
    return new (FieldPath$1.bind.apply(FieldPath$1, [void 0].concat(path.split('.'))))();
  } catch (e) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field path (" + path + "). Paths must not be empty, " + "begin with '.', end with '.', or contain '..'");
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


var OAuthToken =
/** @class */
function () {
  function OAuthToken(value, user) {
    this.user = user;
    this.type = 'OAuth';
    this.authHeaders = {
      Authorization: "Bearer " + value
    };
  }

  return OAuthToken;
}();
/** A CredentialsProvider that always yields an empty token. */


var EmptyCredentialsProvider =
/** @class */
function () {
  function EmptyCredentialsProvider() {
    /**
     * Stores the listener registered with setChangeListener()
     * This isn't actually necessary since the UID never changes, but we use this
     * to verify the listen contract is adhered to in tests.
     */
    this.changeListener = null;
  }

  EmptyCredentialsProvider.prototype.getToken = function () {
    return Promise.resolve(null);
  };

  EmptyCredentialsProvider.prototype.invalidateToken = function () {};

  EmptyCredentialsProvider.prototype.setChangeListener = function (changeListener) {
    assert(!this.changeListener, 'Can only call setChangeListener() once.');
    this.changeListener = changeListener; // Fire with initial user.

    changeListener(User.UNAUTHENTICATED);
  };

  EmptyCredentialsProvider.prototype.removeChangeListener = function () {
    assert(this.changeListener !== null, 'removeChangeListener() when no listener registered');
    this.changeListener = null;
  };

  return EmptyCredentialsProvider;
}();

var FirebaseCredentialsProvider =
/** @class */
function () {
  function FirebaseCredentialsProvider(app) {
    var _this = this;

    this.app = app;
    /**
     * The auth token listener registered with FirebaseApp, retained here so we
     * can unregister it.
     */

    this.tokenListener = null;
    /**
     * Counter used to detect if the token changed while a getToken request was
     * outstanding.
     */

    this.tokenCounter = 0;
    /** The listener registered with setChangeListener(). */

    this.changeListener = null;
    this.forceRefresh = false;

    this.tokenListener = function () {
      _this.tokenCounter++;
      _this.currentUser = _this.getUser();

      if (_this.changeListener) {
        _this.changeListener(_this.currentUser);
      }
    };

    this.tokenCounter = 0; // Will fire at least once where we set this.currentUser

    this.app.INTERNAL.addAuthTokenListener(this.tokenListener);
  }

  FirebaseCredentialsProvider.prototype.getToken = function () {
    var _this = this;

    assert(this.tokenListener != null, 'getToken cannot be called after listener removed.'); // Take note of the current value of the tokenCounter so that this method
    // can fail (with an ABORTED error) if there is a token change while the
    // request is outstanding.

    var initialTokenCounter = this.tokenCounter;
    var forceRefresh = this.forceRefresh;
    this.forceRefresh = false;
    return this.app.INTERNAL.getToken(forceRefresh).then(function (tokenData) {
      // Cancel the request since the token changed while the request was
      // outstanding so the response is potentially for a previous user (which
      // user, we can't be sure).
      if (_this.tokenCounter !== initialTokenCounter) {
        throw new FirestoreError(Code.ABORTED, 'getToken aborted due to token change.');
      } else {
        if (tokenData) {
          assert(typeof tokenData.accessToken === 'string', 'Invalid tokenData returned from getToken():' + tokenData);
          return new OAuthToken(tokenData.accessToken, _this.currentUser);
        } else {
          return null;
        }
      }
    });
  };

  FirebaseCredentialsProvider.prototype.invalidateToken = function () {
    this.forceRefresh = true;
  };

  FirebaseCredentialsProvider.prototype.setChangeListener = function (changeListener) {
    assert(!this.changeListener, 'Can only call setChangeListener() once.');
    this.changeListener = changeListener; // Fire the initial event, but only if we received the initial user

    if (this.currentUser) {
      changeListener(this.currentUser);
    }
  };

  FirebaseCredentialsProvider.prototype.removeChangeListener = function () {
    assert(this.tokenListener != null, 'removeChangeListener() called twice');
    assert(this.changeListener !== null, 'removeChangeListener() called when no listener registered');
    this.app.INTERNAL.removeAuthTokenListener(this.tokenListener);
    this.tokenListener = null;
    this.changeListener = null;
  };

  FirebaseCredentialsProvider.prototype.getUser = function () {
    var currentUid = this.app.INTERNAL.getUid();
    assert(currentUid === null || typeof currentUid === 'string', 'Received invalid UID: ' + currentUid);
    return new User(currentUid);
  };

  return FirebaseCredentialsProvider;
}();
/*
 * FirstPartyToken provides a fresh token each time its value
 * is requested, because if the token is too old, requests will be rejected.
 * Technically this may no longer be necessary since the SDK should gracefully
 * recover from unauthenticated errors (see b/33147818 for context), but it's
 * safer to keep the implementation as-is.
 */


var FirstPartyToken =
/** @class */
function () {
  function FirstPartyToken(gapi, sessionIndex) {
    this.gapi = gapi;
    this.sessionIndex = sessionIndex;
    this.type = 'FirstParty';
    this.user = User.FIRST_PARTY;
  }

  Object.defineProperty(FirstPartyToken.prototype, "authHeaders", {
    get: function () {
      var headers = {
        'X-Goog-AuthUser': this.sessionIndex
      };
      var authHeader = this.gapi.auth.getAuthHeaderValueForFirstParty([]);

      if (authHeader) {
        headers['Authorization'] = authHeader;
      }

      return headers;
    },
    enumerable: true,
    configurable: true
  });
  return FirstPartyToken;
}();
/*
 * Provides user credentials required for the Firestore JavaScript SDK
 * to authenticate the user, using technique that is only available
 * to applications hosted by Google.
 */


var FirstPartyCredentialsProvider =
/** @class */
function () {
  function FirstPartyCredentialsProvider(gapi, sessionIndex) {
    this.gapi = gapi;
    this.sessionIndex = sessionIndex;
  }

  FirstPartyCredentialsProvider.prototype.getToken = function () {
    return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex));
  };

  FirstPartyCredentialsProvider.prototype.setChangeListener = function (changeListener) {
    // Fire with initial uid.
    changeListener(User.FIRST_PARTY);
  };

  FirstPartyCredentialsProvider.prototype.removeChangeListener = function () {};

  FirstPartyCredentialsProvider.prototype.invalidateToken = function () {};

  return FirstPartyCredentialsProvider;
}();
/**
 * Builds a CredentialsProvider depending on the type of
 * the credentials passed in.
 */


function makeCredentialsProvider(credentials) {
  if (!credentials) {
    return new EmptyCredentialsProvider();
  }

  switch (credentials.type) {
    case 'gapi':
      var client = credentials.client; // Make sure this is a Gapi client.

      assert(!!(typeof client === 'object' && client !== null && client['auth'] && client['auth']['getAuthHeaderValueForFirstParty']), 'unexpected gapi interface');
      return new FirstPartyCredentialsProvider(client, credentials.sessionIndex || '0');

    case 'provider':
      return credentials.client;

    default:
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'makeCredentialsProvider failed due to invalid credential type');
  }
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function isPartialObserver(obj) {
  return implementsAnyMethods(obj, ['next', 'error', 'complete']);
}
/**
 * Returns true if obj is an object and contains at least one of the specified
 * methods.
 */


function implementsAnyMethods(obj, methods) {
  if (typeof obj !== 'object' || obj === null) {
    return false;
  }

  var object = obj;

  for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
    var method = methods_1[_i];

    if (method in object && typeof object[method] === 'function') {
      return true;
    }
  }

  return false;
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * An opaque base class for FieldValue sentinel objects in our public API,
 * with public static methods for creating said sentinel objects.
 */
// tslint:disable-next-line:class-as-namespace  We use this as a base class.


var FieldValueImpl =
/** @class */
function () {
  function FieldValueImpl(_methodName) {
    this._methodName = _methodName;
  }

  FieldValueImpl.delete = function () {
    validateNoArgs('FieldValue.delete', arguments);
    return DeleteFieldValueImpl.instance;
  };

  FieldValueImpl.serverTimestamp = function () {
    validateNoArgs('FieldValue.serverTimestamp', arguments);
    return ServerTimestampFieldValueImpl.instance;
  };

  FieldValueImpl.arrayUnion = function () {
    var elements = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      elements[_i] = arguments[_i];
    }

    validateAtLeastNumberOfArgs('FieldValue.arrayUnion', arguments, 1); // NOTE: We don't actually parse the data until it's used in set() or
    // update() since we need access to the Firestore instance.

    return new ArrayUnionFieldValueImpl(elements);
  };

  FieldValueImpl.arrayRemove = function () {
    var elements = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      elements[_i] = arguments[_i];
    }

    validateAtLeastNumberOfArgs('FieldValue.arrayRemove', arguments, 1); // NOTE: We don't actually parse the data until it's used in set() or
    // update() since we need access to the Firestore instance.

    return new ArrayRemoveFieldValueImpl(elements);
  };

  FieldValueImpl.increment = function (n) {
    validateArgType('FieldValue.increment', 'number', 1, n);
    validateExactNumberOfArgs('FieldValue.increment', arguments, 1);
    return new NumericIncrementFieldValueImpl(n);
  };

  FieldValueImpl.prototype.isEqual = function (other) {
    return this === other;
  };

  return FieldValueImpl;
}();

var DeleteFieldValueImpl =
/** @class */
function (_super) {
  tslib_1.__extends(DeleteFieldValueImpl, _super);

  function DeleteFieldValueImpl() {
    return _super.call(this, 'FieldValue.delete') || this;
  }
  /** Singleton instance. */


  DeleteFieldValueImpl.instance = new DeleteFieldValueImpl();
  return DeleteFieldValueImpl;
}(FieldValueImpl);

var ServerTimestampFieldValueImpl =
/** @class */
function (_super) {
  tslib_1.__extends(ServerTimestampFieldValueImpl, _super);

  function ServerTimestampFieldValueImpl() {
    return _super.call(this, 'FieldValue.serverTimestamp') || this;
  }
  /** Singleton instance. */


  ServerTimestampFieldValueImpl.instance = new ServerTimestampFieldValueImpl();
  return ServerTimestampFieldValueImpl;
}(FieldValueImpl);

var ArrayUnionFieldValueImpl =
/** @class */
function (_super) {
  tslib_1.__extends(ArrayUnionFieldValueImpl, _super);

  function ArrayUnionFieldValueImpl(_elements) {
    var _this = _super.call(this, 'FieldValue.arrayUnion') || this;

    _this._elements = _elements;
    return _this;
  }

  return ArrayUnionFieldValueImpl;
}(FieldValueImpl);

var ArrayRemoveFieldValueImpl =
/** @class */
function (_super) {
  tslib_1.__extends(ArrayRemoveFieldValueImpl, _super);

  function ArrayRemoveFieldValueImpl(_elements) {
    var _this = _super.call(this, 'FieldValue.arrayRemove') || this;

    _this._elements = _elements;
    return _this;
  }

  return ArrayRemoveFieldValueImpl;
}(FieldValueImpl);

var NumericIncrementFieldValueImpl =
/** @class */
function (_super) {
  tslib_1.__extends(NumericIncrementFieldValueImpl, _super);

  function NumericIncrementFieldValueImpl(_operand) {
    var _this = _super.call(this, 'FieldValue.increment') || this;

    _this._operand = _operand;
    return _this;
  }

  return NumericIncrementFieldValueImpl;
}(FieldValueImpl); // Public instance that disallows construction at runtime. This constructor is
// used when exporting FieldValueImpl on firebase.firestore.FieldValue and will
// be called FieldValue publicly. Internally we still use FieldValueImpl which
// has a type-checked private constructor. Note that FieldValueImpl and
// PublicFieldValue can be used interchangeably in instanceof checks.
// For our internal TypeScript code PublicFieldValue doesn't exist as a type,
// and so we need to use FieldValueImpl as type and export it too.
// tslint:disable-next-line:variable-name  We treat this as a class name.


var PublicFieldValue = makeConstructorPrivate(FieldValueImpl, 'Use FieldValue.<field>() instead.');
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var RESERVED_FIELD_REGEX = /^__.*__$/;
/** The result of parsing document data (e.g. for a setData call). */

var ParsedSetData =
/** @class */
function () {
  function ParsedSetData(data, fieldMask, fieldTransforms) {
    this.data = data;
    this.fieldMask = fieldMask;
    this.fieldTransforms = fieldTransforms;
  }

  ParsedSetData.prototype.toMutations = function (key, precondition) {
    var mutations = [];

    if (this.fieldMask !== null) {
      mutations.push(new PatchMutation(key, this.data, this.fieldMask, precondition));
    } else {
      mutations.push(new SetMutation(key, this.data, precondition));
    }

    if (this.fieldTransforms.length > 0) {
      mutations.push(new TransformMutation(key, this.fieldTransforms));
    }

    return mutations;
  };

  return ParsedSetData;
}();
/** The result of parsing "update" data (i.e. for an updateData call). */


var ParsedUpdateData =
/** @class */
function () {
  function ParsedUpdateData(data, fieldMask, fieldTransforms) {
    this.data = data;
    this.fieldMask = fieldMask;
    this.fieldTransforms = fieldTransforms;
  }

  ParsedUpdateData.prototype.toMutations = function (key, precondition) {
    var mutations = [new PatchMutation(key, this.data, this.fieldMask, precondition)];

    if (this.fieldTransforms.length > 0) {
      mutations.push(new TransformMutation(key, this.fieldTransforms));
    }

    return mutations;
  };

  return ParsedUpdateData;
}();
/*
 * Represents what type of API method provided the data being parsed; useful
 * for determining which error conditions apply during parsing and providing
 * better error messages.
 */


var UserDataSource;

(function (UserDataSource) {
  UserDataSource[UserDataSource["Set"] = 0] = "Set";
  UserDataSource[UserDataSource["Update"] = 1] = "Update";
  UserDataSource[UserDataSource["MergeSet"] = 2] = "MergeSet";
  /**
   * Indicates the source is a where clause, cursor bound, arrayUnion()
   * element, etc. Of note, isWrite(source) will return false.
   */

  UserDataSource[UserDataSource["Argument"] = 3] = "Argument";
})(UserDataSource || (UserDataSource = {}));

function isWrite(dataSource) {
  switch (dataSource) {
    case UserDataSource.Set: // fall through

    case UserDataSource.MergeSet: // fall through

    case UserDataSource.Update:
      return true;

    case UserDataSource.Argument:
      return false;

    default:
      throw fail("Unexpected case for UserDataSource: " + dataSource);
  }
}
/** A "context" object passed around while parsing user data. */


var ParseContext =
/** @class */
function () {
  /**
   * Initializes a ParseContext with the given source and path.
   *
   * @param dataSource Indicates what kind of API method this data came from.
   * @param methodName The name of the method the user called to create this
   *     ParseContext.
   * @param path A path within the object being parsed. This could be an empty
   *     path (in which case the context represents the root of the data being
   *     parsed), or a nonempty path (indicating the context represents a nested
   *     location within the data).
   * @param arrayElement Whether or not this context corresponds to an element
   *     of an array.
   * @param fieldTransforms A mutable list of field transforms encountered while
   *     parsing the data.
   * @param fieldMask A mutable list of field paths encountered while parsing
   *     the data.
   *
   * TODO(b/34871131): We don't support array paths right now, so path can be
   * null to indicate the context represents any location within an array (in
   * which case certain features will not work and errors will be somewhat
   * compromised).
   */
  function ParseContext(dataSource, methodName, path, arrayElement, fieldTransforms, fieldMask) {
    this.dataSource = dataSource;
    this.methodName = methodName;
    this.path = path;
    this.arrayElement = arrayElement; // Minor hack: If fieldTransforms is undefined, we assume this is an
    // external call and we need to validate the entire path.

    if (fieldTransforms === undefined) {
      this.validatePath();
    }

    this.arrayElement = arrayElement !== undefined ? arrayElement : false;
    this.fieldTransforms = fieldTransforms || [];
    this.fieldMask = fieldMask || [];
  }

  ParseContext.prototype.childContextForField = function (field) {
    var childPath = this.path == null ? null : this.path.child(field);
    var context = new ParseContext(this.dataSource, this.methodName, childPath,
    /*arrayElement=*/
    false, this.fieldTransforms, this.fieldMask);
    context.validatePathSegment(field);
    return context;
  };

  ParseContext.prototype.childContextForFieldPath = function (field) {
    var childPath = this.path == null ? null : this.path.child(field);
    var context = new ParseContext(this.dataSource, this.methodName, childPath,
    /*arrayElement=*/
    false, this.fieldTransforms, this.fieldMask);
    context.validatePath();
    return context;
  };

  ParseContext.prototype.childContextForArray = function (index) {
    // TODO(b/34871131): We don't support array paths right now; so make path
    // null.
    return new ParseContext(this.dataSource, this.methodName,
    /*path=*/
    null,
    /*arrayElement=*/
    true, this.fieldTransforms, this.fieldMask);
  };

  ParseContext.prototype.createError = function (reason) {
    var fieldDescription = this.path === null || this.path.isEmpty() ? '' : " (found in field " + this.path.toString() + ")";
    return new FirestoreError(Code.INVALID_ARGUMENT, "Function " + this.methodName + "() called with invalid data. " + reason + fieldDescription);
  };
  /** Returns 'true' if 'fieldPath' was traversed when creating this context. */


  ParseContext.prototype.contains = function (fieldPath) {
    return this.fieldMask.find(function (field) {
      return fieldPath.isPrefixOf(field);
    }) !== undefined || this.fieldTransforms.find(function (transform) {
      return fieldPath.isPrefixOf(transform.field);
    }) !== undefined;
  };

  ParseContext.prototype.validatePath = function () {
    // TODO(b/34871131): Remove null check once we have proper paths for fields
    // within arrays.
    if (this.path === null) {
      return;
    }

    for (var i = 0; i < this.path.length; i++) {
      this.validatePathSegment(this.path.get(i));
    }
  };

  ParseContext.prototype.validatePathSegment = function (segment) {
    if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {
      throw this.createError('Document fields cannot begin and end with __');
    }
  };

  return ParseContext;
}();
/**
 * A placeholder object for DocumentReferences in this file, in order to
 * avoid a circular dependency. See the comments for `DataPreConverter` for
 * the full context.
 */


var DocumentKeyReference =
/** @class */
function () {
  function DocumentKeyReference(databaseId, key) {
    this.databaseId = databaseId;
    this.key = key;
  }

  return DocumentKeyReference;
}();
/**
 * Helper for parsing raw user input (provided via the API) into internal model
 * classes.
 */


var UserDataConverter =
/** @class */
function () {
  function UserDataConverter(preConverter) {
    this.preConverter = preConverter;
  }
  /** Parse document data from a non-merge set() call. */


  UserDataConverter.prototype.parseSetData = function (methodName, input) {
    var context = new ParseContext(UserDataSource.Set, methodName, FieldPath.EMPTY_PATH);
    validatePlainObject('Data must be an object, but it was:', context, input);
    var updateData = this.parseData(input, context);
    return new ParsedSetData(updateData,
    /* fieldMask= */
    null, context.fieldTransforms);
  };
  /** Parse document data from a set() call with '{merge:true}'. */


  UserDataConverter.prototype.parseMergeData = function (methodName, input, fieldPaths) {
    var context = new ParseContext(UserDataSource.MergeSet, methodName, FieldPath.EMPTY_PATH);
    validatePlainObject('Data must be an object, but it was:', context, input);
    var updateData = this.parseData(input, context);
    var fieldMask;
    var fieldTransforms;

    if (!fieldPaths) {
      fieldMask = FieldMask.fromArray(context.fieldMask);
      fieldTransforms = context.fieldTransforms;
    } else {
      var validatedFieldPaths = new SortedSet(FieldPath.comparator);

      for (var _i = 0, fieldPaths_1 = fieldPaths; _i < fieldPaths_1.length; _i++) {
        var stringOrFieldPath = fieldPaths_1[_i];
        var fieldPath = void 0;

        if (stringOrFieldPath instanceof FieldPath$1) {
          fieldPath = stringOrFieldPath._internalPath;
        } else if (typeof stringOrFieldPath === 'string') {
          fieldPath = fieldPathFromDotSeparatedString(methodName, stringOrFieldPath);
        } else {
          throw fail('Expected stringOrFieldPath to be a string or a FieldPath');
        }

        if (!context.contains(fieldPath)) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Field '" + fieldPath + "' is specified in your field mask but missing from your input data.");
        }

        validatedFieldPaths = validatedFieldPaths.add(fieldPath);
      }

      fieldMask = FieldMask.fromSet(validatedFieldPaths);
      fieldTransforms = context.fieldTransforms.filter(function (transform) {
        return fieldMask.covers(transform.field);
      });
    }

    return new ParsedSetData(updateData, fieldMask, fieldTransforms);
  };
  /** Parse update data from an update() call. */


  UserDataConverter.prototype.parseUpdateData = function (methodName, input) {
    var _this = this;

    var context = new ParseContext(UserDataSource.Update, methodName, FieldPath.EMPTY_PATH);
    validatePlainObject('Data must be an object, but it was:', context, input);
    var fieldMaskPaths = new SortedSet(FieldPath.comparator);
    var updateData = ObjectValue.EMPTY;
    forEach(input, function (key, value) {
      var path = fieldPathFromDotSeparatedString(methodName, key);
      var childContext = context.childContextForFieldPath(path);
      value = _this.runPreConverter(value, childContext);

      if (value instanceof DeleteFieldValueImpl) {
        // Add it to the field mask, but don't add anything to updateData.
        fieldMaskPaths = fieldMaskPaths.add(path);
      } else {
        var parsedValue = _this.parseData(value, childContext);

        if (parsedValue != null) {
          fieldMaskPaths = fieldMaskPaths.add(path);
          updateData = updateData.set(path, parsedValue);
        }
      }
    });
    var mask = FieldMask.fromSet(fieldMaskPaths);
    return new ParsedUpdateData(updateData, mask, context.fieldTransforms);
  };
  /** Parse update data from a list of field/value arguments. */


  UserDataConverter.prototype.parseUpdateVarargs = function (methodName, field, value, moreFieldsAndValues) {
    var context = new ParseContext(UserDataSource.Update, methodName, FieldPath.EMPTY_PATH);
    var keys = [fieldPathFromArgument(methodName, field)];
    var values = [value];

    if (moreFieldsAndValues.length % 2 !== 0) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + methodName + "() needs to be called with an even number " + 'of arguments that alternate between field names and values.');
    }

    for (var i = 0; i < moreFieldsAndValues.length; i += 2) {
      keys.push(fieldPathFromArgument(methodName, moreFieldsAndValues[i]));
      values.push(moreFieldsAndValues[i + 1]);
    }

    var fieldMaskPaths = new SortedSet(FieldPath.comparator);
    var updateData = ObjectValue.EMPTY;

    for (var i = 0; i < keys.length; ++i) {
      var path = keys[i];
      var childContext = context.childContextForFieldPath(path);
      var value_1 = this.runPreConverter(values[i], childContext);

      if (value_1 instanceof DeleteFieldValueImpl) {
        // Add it to the field mask, but don't add anything to updateData.
        fieldMaskPaths = fieldMaskPaths.add(path);
      } else {
        var parsedValue = this.parseData(value_1, childContext);

        if (parsedValue != null) {
          fieldMaskPaths = fieldMaskPaths.add(path);
          updateData = updateData.set(path, parsedValue);
        }
      }
    }

    var mask = FieldMask.fromSet(fieldMaskPaths);
    return new ParsedUpdateData(updateData, mask, context.fieldTransforms);
  };
  /**
   * Parse a "query value" (e.g. value in a where filter or a value in a cursor
   * bound).
   */


  UserDataConverter.prototype.parseQueryValue = function (methodName, input) {
    var context = new ParseContext(UserDataSource.Argument, methodName, FieldPath.EMPTY_PATH);
    var parsed = this.parseData(input, context);
    assert(parsed != null, 'Parsed data should not be null.');
    assert(context.fieldTransforms.length === 0, 'Field transforms should have been disallowed.');
    return parsed;
  };
  /** Sends data through this.preConverter, handling any thrown errors. */


  UserDataConverter.prototype.runPreConverter = function (input, context) {
    try {
      return this.preConverter(input);
    } catch (e) {
      var message = errorMessage(e);
      throw context.createError(message);
    }
  };
  /**
   * Internal helper for parsing user data.
   *
   * @param input Data to be parsed.
   * @param context A context object representing the current path being parsed,
   * the source of the data being parsed, etc.
   * @return The parsed value, or null if the value was a FieldValue sentinel
   * that should not be included in the resulting parsed data.
   */


  UserDataConverter.prototype.parseData = function (input, context) {
    input = this.runPreConverter(input, context);

    if (looksLikeJsonObject(input)) {
      validatePlainObject('Unsupported field value:', context, input);
      return this.parseObject(input, context);
    } else if (input instanceof FieldValueImpl) {
      // FieldValues usually parse into transforms (except FieldValue.delete())
      // in which case we do not want to include this field in our parsed data
      // (as doing so will overwrite the field directly prior to the transform
      // trying to transform it). So we don't add this location to
      // context.fieldMask and we return null as our parsing result.
      this.parseSentinelFieldValue(input, context);
      return null;
    } else {
      // If context.path is null we are inside an array and we don't support
      // field mask paths more granular than the top-level array.
      if (context.path) {
        context.fieldMask.push(context.path);
      }

      if (input instanceof Array) {
        // TODO(b/34871131): Include the path containing the array in the error
        // message.
        if (context.arrayElement) {
          throw context.createError('Nested arrays are not supported');
        }

        return this.parseArray(input, context);
      } else {
        return this.parseScalarValue(input, context);
      }
    }
  };

  UserDataConverter.prototype.parseObject = function (obj, context) {
    var _this = this;

    var result = new SortedMap(primitiveComparator);

    if (isEmpty(obj)) {
      // If we encounter an empty object, we explicitly add it to the update
      // mask to ensure that the server creates a map entry.
      if (context.path && context.path.length > 0) {
        context.fieldMask.push(context.path);
      }
    } else {
      forEach(obj, function (key, val) {
        var parsedValue = _this.parseData(val, context.childContextForField(key));

        if (parsedValue != null) {
          result = result.insert(key, parsedValue);
        }
      });
    }

    return new ObjectValue(result);
  };

  UserDataConverter.prototype.parseArray = function (array, context) {
    var result = [];
    var entryIndex = 0;

    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
      var entry = array_1[_i];
      var parsedEntry = this.parseData(entry, context.childContextForArray(entryIndex));

      if (parsedEntry == null) {
        // Just include nulls in the array for fields being replaced with a
        // sentinel.
        parsedEntry = NullValue.INSTANCE;
      }

      result.push(parsedEntry);
      entryIndex++;
    }

    return new ArrayValue(result);
  };
  /**
   * "Parses" the provided FieldValueImpl, adding any necessary transforms to
   * context.fieldTransforms.
   */


  UserDataConverter.prototype.parseSentinelFieldValue = function (value, context) {
    // Sentinels are only supported with writes, and not within arrays.
    if (!isWrite(context.dataSource)) {
      throw context.createError(value._methodName + "() can only be used with update() and set()");
    }

    if (context.path === null) {
      throw context.createError(value._methodName + "() is not currently supported inside arrays");
    }

    if (value instanceof DeleteFieldValueImpl) {
      if (context.dataSource === UserDataSource.MergeSet) {
        // No transform to add for a delete, but we need to add it to our
        // fieldMask so it gets deleted.
        context.fieldMask.push(context.path);
      } else if (context.dataSource === UserDataSource.Update) {
        assert(context.path.length > 0, 'FieldValue.delete() at the top level should have already' + ' been handled.');
        throw context.createError('FieldValue.delete() can only appear at the top level ' + 'of your update data');
      } else {
        // We shouldn't encounter delete sentinels for queries or non-merge set() calls.
        throw context.createError('FieldValue.delete() cannot be used with set() unless you pass ' + '{merge:true}');
      }
    } else if (value instanceof ServerTimestampFieldValueImpl) {
      context.fieldTransforms.push(new FieldTransform(context.path, ServerTimestampTransform.instance));
    } else if (value instanceof ArrayUnionFieldValueImpl) {
      var parsedElements = this.parseArrayTransformElements(value._methodName, value._elements);
      var arrayUnion = new ArrayUnionTransformOperation(parsedElements);
      context.fieldTransforms.push(new FieldTransform(context.path, arrayUnion));
    } else if (value instanceof ArrayRemoveFieldValueImpl) {
      var parsedElements = this.parseArrayTransformElements(value._methodName, value._elements);
      var arrayRemove = new ArrayRemoveTransformOperation(parsedElements);
      context.fieldTransforms.push(new FieldTransform(context.path, arrayRemove));
    } else if (value instanceof NumericIncrementFieldValueImpl) {
      var operand = this.parseQueryValue('FieldValue.increment', value._operand);
      var numericIncrement = new NumericIncrementTransformOperation(operand);
      context.fieldTransforms.push(new FieldTransform(context.path, numericIncrement));
    } else {
      fail('Unknown FieldValue type: ' + value);
    }
  };
  /**
   * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)
   *
   * @return The parsed value
   */


  UserDataConverter.prototype.parseScalarValue = function (value, context) {
    if (value === null) {
      return NullValue.INSTANCE;
    } else if (typeof value === 'number') {
      if (isSafeInteger(value)) {
        return new IntegerValue(value);
      } else {
        return new DoubleValue(value);
      }
    } else if (typeof value === 'boolean') {
      return BooleanValue.of(value);
    } else if (typeof value === 'string') {
      return new StringValue(value);
    } else if (value instanceof Date) {
      return new TimestampValue(Timestamp.fromDate(value));
    } else if (value instanceof Timestamp) {
      // Firestore backend truncates precision down to microseconds. To ensure
      // offline mode works the same with regards to truncation, perform the
      // truncation immediately without waiting for the backend to do that.
      return new TimestampValue(new Timestamp(value.seconds, Math.floor(value.nanoseconds / 1000) * 1000));
    } else if (value instanceof GeoPoint) {
      return new GeoPointValue(value);
    } else if (value instanceof Blob) {
      return new BlobValue(value);
    } else if (value instanceof DocumentKeyReference) {
      return new RefValue(value.databaseId, value.key);
    } else {
      throw context.createError("Unsupported field value: " + valueDescription(value));
    }
  };

  UserDataConverter.prototype.parseArrayTransformElements = function (methodName, elements) {
    var _this = this;

    return elements.map(function (element, i) {
      // Although array transforms are used with writes, the actual elements
      // being unioned or removed are not considered writes since they cannot
      // contain any FieldValue sentinels, etc.
      var context = new ParseContext(UserDataSource.Argument, methodName, FieldPath.EMPTY_PATH);
      return _this.parseData(element, context.childContextForArray(i));
    });
  };

  return UserDataConverter;
}();
/**
 * Checks whether an object looks like a JSON object that should be converted
 * into a struct. Normal class/prototype instances are considered to look like
 * JSON objects since they should be converted to a struct value. Arrays, Dates,
 * GeoPoints, etc. are not considered to look like JSON objects since they map
 * to specific FieldValue types other than ObjectValue.
 */


function looksLikeJsonObject(input) {
  return typeof input === 'object' && input !== null && !(input instanceof Array) && !(input instanceof Date) && !(input instanceof Timestamp) && !(input instanceof GeoPoint) && !(input instanceof Blob) && !(input instanceof DocumentKeyReference) && !(input instanceof FieldValueImpl);
}

function validatePlainObject(message, context, input) {
  if (!looksLikeJsonObject(input) || !isPlainObject(input)) {
    var description = valueDescription(input);

    if (description === 'an object') {
      // Massage the error if it was an object.
      throw context.createError(message + ' a custom object');
    } else {
      throw context.createError(message + ' ' + description);
    }
  }
}
/**
 * Helper that calls fromDotSeparatedString() but wraps any error thrown.
 */


function fieldPathFromArgument(methodName, path) {
  if (path instanceof FieldPath$1) {
    return path._internalPath;
  } else if (typeof path === 'string') {
    return fieldPathFromDotSeparatedString(methodName, path);
  } else {
    var message = 'Field path arguments must be of type string or FieldPath.';
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + methodName + "() called with invalid data. " + message);
  }
}
/**
 * Wraps fromDotSeparatedString with an error message about the method that
 * was thrown.
 * @param methodName The publicly visible method name
 * @param path The dot-separated string form of a field path which will be split
 * on dots.
 */


function fieldPathFromDotSeparatedString(methodName, path) {
  try {
    return fromDotSeparatedString(path)._internalPath;
  } catch (e) {
    var message = errorMessage(e);
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + methodName + "() called with invalid data. " + message);
  }
}
/**
 * Extracts the message from a caught exception, which should be an Error object
 * though JS doesn't guarantee that.
 */


function errorMessage(error) {
  return error instanceof Error ? error.message : error.toString();
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// The objects that are a part of this API are exposed to third-parties as
// compiled javascript so we want to flag our private members with a leading
// underscore to discourage their use.
// tslint:disable:strip-private-property-underscore
// settings() defaults:


var DEFAULT_HOST = 'firestore.googleapis.com';
var DEFAULT_SSL = true;
var DEFAULT_TIMESTAMPS_IN_SNAPSHOTS = true;
/**
 * Constant used to indicate the LRU garbage collection should be disabled.
 * Set this value as the `cacheSizeBytes` on the settings passed to the
 * `Firestore` instance.
 */

var CACHE_SIZE_UNLIMITED = LruParams.COLLECTION_DISABLED; // enablePersistence() defaults:

var DEFAULT_SYNCHRONIZE_TABS = false;
/**
 * A concrete type describing all the values that can be applied via a
 * user-supplied firestore.Settings object. This is a separate type so that
 * defaults can be supplied and the value can be checked for equality.
 */

var FirestoreSettings =
/** @class */
function () {
  function FirestoreSettings(settings) {
    if (settings.host === undefined) {
      if (settings.ssl !== undefined) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
      }

      this.host = DEFAULT_HOST;
      this.ssl = DEFAULT_SSL;
    } else {
      validateNamedType('settings', 'non-empty string', 'host', settings.host);
      this.host = settings.host;
      validateNamedOptionalType('settings', 'boolean', 'ssl', settings.ssl);
      this.ssl = defaulted(settings.ssl, DEFAULT_SSL);
    }

    validateOptionNames('settings', settings, ['host', 'ssl', 'credentials', 'timestampsInSnapshots', 'cacheSizeBytes']);
    validateNamedOptionalType('settings', 'object', 'credentials', settings.credentials);
    this.credentials = settings.credentials;
    validateNamedOptionalType('settings', 'boolean', 'timestampsInSnapshots', settings.timestampsInSnapshots); // Nobody should set timestampsInSnapshots anymore, but the error depends on
    // whether they set it to true or false...

    if (settings.timestampsInSnapshots === true) {
      error("\n  The timestampsInSnapshots setting now defaults to true and you no\n  longer need to explicitly set it. In a future release, the setting\n  will be removed entirely and so it is recommended that you remove it\n  from your firestore.settings() call now.");
    } else if (settings.timestampsInSnapshots === false) {
      error("\n  The timestampsInSnapshots setting will soon be removed. YOU MUST UPDATE\n  YOUR CODE.\n\n  To hide this warning, stop using the timestampsInSnapshots setting in your\n  firestore.settings({ ... }) call.\n\n  Once you remove the setting, Timestamps stored in Cloud Firestore will be\n  read back as Firebase Timestamp objects instead of as system Date objects.\n  So you will also need to update code expecting a Date to instead expect a\n  Timestamp. For example:\n\n  // Old:\n  const date = snapshot.get('created_at');\n  // New:\n  const timestamp = snapshot.get('created_at'); const date =\n  timestamp.toDate();\n\n  Please audit all existing usages of Date when you enable the new\n  behavior.");
    }

    this.timestampsInSnapshots = defaulted(settings.timestampsInSnapshots, DEFAULT_TIMESTAMPS_IN_SNAPSHOTS);
    validateNamedOptionalType('settings', 'number', 'cacheSizeBytes', settings.cacheSizeBytes);

    if (settings.cacheSizeBytes === undefined) {
      this.cacheSizeBytes = LruParams.DEFAULT_CACHE_SIZE_BYTES;
    } else {
      if (settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED && settings.cacheSizeBytes < LruParams.MINIMUM_CACHE_SIZE_BYTES) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "cacheSizeBytes must be at least " + LruParams.MINIMUM_CACHE_SIZE_BYTES);
      } else {
        this.cacheSizeBytes = settings.cacheSizeBytes;
      }
    }
  }

  FirestoreSettings.prototype.isEqual = function (other) {
    return this.host === other.host && this.ssl === other.ssl && this.timestampsInSnapshots === other.timestampsInSnapshots && this.credentials === other.credentials && this.cacheSizeBytes === other.cacheSizeBytes;
  };

  return FirestoreSettings;
}();

var FirestoreConfig =
/** @class */
function () {
  function FirestoreConfig() {}

  return FirestoreConfig;
}();
/**
 * The root reference to the database.
 */


var Firestore =
/** @class */
function () {
  function Firestore(databaseIdOrApp) {
    var _this = this; // Public for use in tests.
    // TODO(mikelehen): Use modularized initialization instead.


    this._queue = new AsyncQueue();
    this.INTERNAL = {
      delete: function (options) {
        return tslib_1.__awaiter(_this, void 0, void 0, function () {
          return tslib_1.__generator(this, function (_a) {
            if (this._firestoreClient) {
              return [2
              /*return*/
              , this._firestoreClient.shutdown(options)];
            }

            return [2
            /*return*/
            ];
          });
        });
      }
    };
    var config = new FirestoreConfig();

    if (typeof databaseIdOrApp.options === 'object') {
      // This is very likely a Firebase app object
      // TODO(b/34177605): Can we somehow use instanceof?
      var app = databaseIdOrApp;
      config.firebaseApp = app;
      config.databaseId = Firestore.databaseIdFromApp(app);
      config.persistenceKey = config.firebaseApp.name;
      config.credentials = new FirebaseCredentialsProvider(app);
    } else {
      var external_1 = databaseIdOrApp;

      if (!external_1.projectId) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide projectId');
      }

      config.databaseId = new DatabaseId(external_1.projectId, external_1.database); // Use a default persistenceKey that lines up with FirebaseApp.

      config.persistenceKey = '[DEFAULT]';
      config.credentials = new EmptyCredentialsProvider();
    }

    config.settings = new FirestoreSettings({});
    this._config = config;
    this._databaseId = config.databaseId;
  }

  Firestore.prototype.settings = function (settingsLiteral) {
    validateExactNumberOfArgs('Firestore.settings', arguments, 1);
    validateArgType('Firestore.settings', 'object', 1, settingsLiteral);

    if (contains(settingsLiteral, 'persistence')) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, '"persistence" is now specified with a separate call to ' + 'firestore.enablePersistence().');
    }

    var newSettings = new FirestoreSettings(settingsLiteral);

    if (this._firestoreClient && !this._config.settings.isEqual(newSettings)) {
      throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and its settings can no longer ' + 'be changed. You can only call settings() before calling any other ' + 'methods on a Firestore object.');
    }

    this._config.settings = newSettings;

    if (newSettings.credentials !== undefined) {
      this._config.credentials = makeCredentialsProvider(newSettings.credentials);
    }
  };

  Firestore.prototype.enableNetwork = function () {
    this.ensureClientConfigured();
    return this._firestoreClient.enableNetwork();
  };

  Firestore.prototype.disableNetwork = function () {
    this.ensureClientConfigured();
    return this._firestoreClient.disableNetwork();
  };

  Firestore.prototype.enablePersistence = function (settings) {
    if (this._firestoreClient) {
      throw new FirestoreError(Code.FAILED_PRECONDITION, 'Firestore has already been started and persistence can no longer ' + 'be enabled. You can only call enablePersistence() before calling ' + 'any other methods on a Firestore object.');
    }

    return this.configureClient(new IndexedDbPersistenceSettings(this._config.settings.cacheSizeBytes, settings !== undefined && defaulted(settings.experimentalTabSynchronization, DEFAULT_SYNCHRONIZE_TABS)));
  };

  Firestore.prototype.ensureClientConfigured = function () {
    if (!this._firestoreClient) {
      // Kick off starting the client but don't actually wait for it.
      // tslint:disable-next-line:no-floating-promises
      this.configureClient(new MemoryPersistenceSettings());
    }

    return this._firestoreClient;
  };

  Firestore.prototype.configureClient = function (persistenceSettings) {
    var _this = this;

    assert(!!this._config.settings.host, 'FirestoreSettings.host cannot be falsey');
    assert(!this._firestoreClient, 'configureClient() called multiple times');
    var databaseInfo = new DatabaseInfo(this._config.databaseId, this._config.persistenceKey, this._config.settings.host, this._config.settings.ssl);

    var preConverter = function (value) {
      if (value instanceof DocumentReference) {
        var thisDb = _this._config.databaseId;
        var otherDb = value.firestore._config.databaseId;

        if (!otherDb.isEqual(thisDb)) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document reference is for database ' + (otherDb.projectId + "/" + otherDb.database + " but should be ") + ("for database " + thisDb.projectId + "/" + thisDb.database));
        }

        return new DocumentKeyReference(_this._config.databaseId, value._key);
      } else {
        return value;
      }
    };

    this._dataConverter = new UserDataConverter(preConverter);
    this._firestoreClient = new FirestoreClient(PlatformSupport.getPlatform(), databaseInfo, this._config.credentials, this._queue);
    return this._firestoreClient.start(persistenceSettings);
  };

  Firestore.databaseIdFromApp = function (app) {
    var options = app.options;

    if (!contains(options, 'projectId')) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
    }

    var projectId = options['projectId'];

    if (!projectId || typeof projectId !== 'string') {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'projectId must be a string in FirebaseApp.options');
    }

    return new DatabaseId(projectId);
  };

  Object.defineProperty(Firestore.prototype, "app", {
    get: function () {
      if (!this._config.firebaseApp) {
        throw new FirestoreError(Code.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is " + 'not available');
      }

      return this._config.firebaseApp;
    },
    enumerable: true,
    configurable: true
  });

  Firestore.prototype.collection = function (pathString) {
    validateExactNumberOfArgs('Firestore.collection', arguments, 1);
    validateArgType('Firestore.collection', 'non-empty string', 1, pathString);
    this.ensureClientConfigured();
    return new CollectionReference(ResourcePath.fromString(pathString), this);
  };

  Firestore.prototype.doc = function (pathString) {
    validateExactNumberOfArgs('Firestore.doc', arguments, 1);
    validateArgType('Firestore.doc', 'non-empty string', 1, pathString);
    this.ensureClientConfigured();
    return DocumentReference.forPath(ResourcePath.fromString(pathString), this);
  }; // TODO(b/116617988): Fix name, uncomment d.ts definitions, and update CHANGELOG.md.


  Firestore.prototype._collectionGroup = function (collectionId) {
    validateExactNumberOfArgs('Firestore.collectionGroup', arguments, 1);
    validateArgType('Firestore.collectionGroup', 'non-empty string', 1, collectionId);

    if (collectionId.indexOf('/') >= 0) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid collection ID '" + collectionId + "' passed to function " + "Firestore.collectionGroup(). Collection IDs must not contain '/'.");
    }

    this.ensureClientConfigured();
    return new Query$1(new Query(ResourcePath.EMPTY_PATH, collectionId), this);
  };

  Firestore.prototype.runTransaction = function (updateFunction) {
    var _this = this;

    validateExactNumberOfArgs('Firestore.runTransaction', arguments, 1);
    validateArgType('Firestore.runTransaction', 'function', 1, updateFunction);
    return this.ensureClientConfigured().transaction(function (transaction) {
      return updateFunction(new Transaction$1(_this, transaction));
    });
  };

  Firestore.prototype.batch = function () {
    this.ensureClientConfigured();
    return new WriteBatch(this);
  };

  Object.defineProperty(Firestore, "logLevel", {
    get: function () {
      switch (getLogLevel()) {
        case LogLevel.DEBUG:
          return 'debug';

        case LogLevel.ERROR:
          return 'error';

        case LogLevel.SILENT:
          return 'silent';

        default:
          return fail('Unknown log level: ' + getLogLevel());
      }
    },
    enumerable: true,
    configurable: true
  });

  Firestore.setLogLevel = function (level) {
    validateExactNumberOfArgs('Firestore.setLogLevel', arguments, 1);
    validateArgType('Firestore.setLogLevel', 'non-empty string', 1, level);

    switch (level) {
      case 'debug':
        setLogLevel(LogLevel.DEBUG);
        break;

      case 'error':
        setLogLevel(LogLevel.ERROR);
        break;

      case 'silent':
        setLogLevel(LogLevel.SILENT);
        break;

      default:
        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid log level: ' + level);
    }
  }; // Note: this is not a property because the minifier can't work correctly with
  // the way TypeScript compiler outputs properties.


  Firestore.prototype._areTimestampsInSnapshotsEnabled = function () {
    return this._config.settings.timestampsInSnapshots;
  };

  return Firestore;
}();
/**
 * A reference to a transaction.
 */


var Transaction$1 =
/** @class */
function () {
  function Transaction(_firestore, _transaction) {
    this._firestore = _firestore;
    this._transaction = _transaction;
  }

  Transaction.prototype.get = function (documentRef) {
    var _this = this;

    validateExactNumberOfArgs('Transaction.get', arguments, 1);
    var ref = validateReference('Transaction.get', documentRef, this._firestore);
    return this._transaction.lookup([ref._key]).then(function (docs) {
      if (!docs || docs.length !== 1) {
        return fail('Mismatch in docs returned from document lookup.');
      }

      var doc = docs[0];

      if (doc instanceof NoDocument) {
        return new DocumentSnapshot(_this._firestore, ref._key, null,
        /* fromCache= */
        false,
        /* hasPendingWrites= */
        false);
      } else if (doc instanceof Document) {
        return new DocumentSnapshot(_this._firestore, ref._key, doc,
        /* fromCache= */
        false,
        /* hasPendingWrites= */
        false);
      } else {
        throw fail("BatchGetDocumentsRequest returned unexpected document type: " + doc.constructor.name);
      }
    });
  };

  Transaction.prototype.set = function (documentRef, value, options) {
    validateBetweenNumberOfArgs('Transaction.set', arguments, 2, 3);
    var ref = validateReference('Transaction.set', documentRef, this._firestore);
    options = validateSetOptions('Transaction.set', options);
    var parsed = options.merge || options.mergeFields ? this._firestore._dataConverter.parseMergeData('Transaction.set', value, options.mergeFields) : this._firestore._dataConverter.parseSetData('Transaction.set', value);

    this._transaction.set(ref._key, parsed);

    return this;
  };

  Transaction.prototype.update = function (documentRef, fieldOrUpdateData, value) {
    var moreFieldsAndValues = [];

    for (var _i = 3; _i < arguments.length; _i++) {
      moreFieldsAndValues[_i - 3] = arguments[_i];
    }

    var ref;
    var parsed;

    if (typeof fieldOrUpdateData === 'string' || fieldOrUpdateData instanceof FieldPath$1) {
      validateAtLeastNumberOfArgs('Transaction.update', arguments, 3);
      ref = validateReference('Transaction.update', documentRef, this._firestore);
      parsed = this._firestore._dataConverter.parseUpdateVarargs('Transaction.update', fieldOrUpdateData, value, moreFieldsAndValues);
    } else {
      validateExactNumberOfArgs('Transaction.update', arguments, 2);
      ref = validateReference('Transaction.update', documentRef, this._firestore);
      parsed = this._firestore._dataConverter.parseUpdateData('Transaction.update', fieldOrUpdateData);
    }

    this._transaction.update(ref._key, parsed);

    return this;
  };

  Transaction.prototype.delete = function (documentRef) {
    validateExactNumberOfArgs('Transaction.delete', arguments, 1);
    var ref = validateReference('Transaction.delete', documentRef, this._firestore);

    this._transaction.delete(ref._key);

    return this;
  };

  return Transaction;
}();

var WriteBatch =
/** @class */
function () {
  function WriteBatch(_firestore) {
    this._firestore = _firestore;
    this._mutations = [];
    this._committed = false;
  }

  WriteBatch.prototype.set = function (documentRef, value, options) {
    validateBetweenNumberOfArgs('WriteBatch.set', arguments, 2, 3);
    this.verifyNotCommitted();
    var ref = validateReference('WriteBatch.set', documentRef, this._firestore);
    options = validateSetOptions('WriteBatch.set', options);
    var parsed = options.merge || options.mergeFields ? this._firestore._dataConverter.parseMergeData('WriteBatch.set', value, options.mergeFields) : this._firestore._dataConverter.parseSetData('WriteBatch.set', value);
    this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.NONE));
    return this;
  };

  WriteBatch.prototype.update = function (documentRef, fieldOrUpdateData, value) {
    var moreFieldsAndValues = [];

    for (var _i = 3; _i < arguments.length; _i++) {
      moreFieldsAndValues[_i - 3] = arguments[_i];
    }

    this.verifyNotCommitted();
    var ref;
    var parsed;

    if (typeof fieldOrUpdateData === 'string' || fieldOrUpdateData instanceof FieldPath$1) {
      validateAtLeastNumberOfArgs('WriteBatch.update', arguments, 3);
      ref = validateReference('WriteBatch.update', documentRef, this._firestore);
      parsed = this._firestore._dataConverter.parseUpdateVarargs('WriteBatch.update', fieldOrUpdateData, value, moreFieldsAndValues);
    } else {
      validateExactNumberOfArgs('WriteBatch.update', arguments, 2);
      ref = validateReference('WriteBatch.update', documentRef, this._firestore);
      parsed = this._firestore._dataConverter.parseUpdateData('WriteBatch.update', fieldOrUpdateData);
    }

    this._mutations = this._mutations.concat(parsed.toMutations(ref._key, Precondition.exists(true)));
    return this;
  };

  WriteBatch.prototype.delete = function (documentRef) {
    validateExactNumberOfArgs('WriteBatch.delete', arguments, 1);
    this.verifyNotCommitted();
    var ref = validateReference('WriteBatch.delete', documentRef, this._firestore);
    this._mutations = this._mutations.concat(new DeleteMutation(ref._key, Precondition.NONE));
    return this;
  };

  WriteBatch.prototype.commit = function () {
    return tslib_1.__awaiter(this, void 0, void 0, function () {
      return tslib_1.__generator(this, function (_a) {
        this.verifyNotCommitted();
        this._committed = true;

        if (this._mutations.length > 0) {
          return [2
          /*return*/
          , this._firestore.ensureClientConfigured().write(this._mutations)];
        }

        return [2
        /*return*/
        ];
      });
    });
  };

  WriteBatch.prototype.verifyNotCommitted = function () {
    if (this._committed) {
      throw new FirestoreError(Code.FAILED_PRECONDITION, 'A write batch can no longer be used after commit() ' + 'has been called.');
    }
  };

  return WriteBatch;
}();
/**
 * A reference to a particular document in a collection in the database.
 */


var DocumentReference =
/** @class */
function () {
  function DocumentReference(_key, firestore) {
    this._key = _key;
    this.firestore = firestore;
    this._firestoreClient = this.firestore.ensureClientConfigured();
  }

  DocumentReference.forPath = function (path, firestore) {
    if (path.length % 2 !== 0) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid document reference. Document ' + 'references must have an even number of segments, but ' + (path.canonicalString() + " has " + path.length));
    }

    return new DocumentReference(new DocumentKey(path), firestore);
  };

  Object.defineProperty(DocumentReference.prototype, "id", {
    get: function () {
      return this._key.path.lastSegment();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(DocumentReference.prototype, "parent", {
    get: function () {
      return new CollectionReference(this._key.path.popLast(), this.firestore);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(DocumentReference.prototype, "path", {
    get: function () {
      return this._key.path.canonicalString();
    },
    enumerable: true,
    configurable: true
  });

  DocumentReference.prototype.collection = function (pathString) {
    validateExactNumberOfArgs('DocumentReference.collection', arguments, 1);
    validateArgType('DocumentReference.collection', 'non-empty string', 1, pathString);

    if (!pathString) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Must provide a non-empty collection name to collection()');
    }

    var path = ResourcePath.fromString(pathString);
    return new CollectionReference(this._key.path.child(path), this.firestore);
  };

  DocumentReference.prototype.isEqual = function (other) {
    if (!(other instanceof DocumentReference)) {
      throw invalidClassError('isEqual', 'DocumentReference', 1, other);
    }

    return this.firestore === other.firestore && this._key.isEqual(other._key);
  };

  DocumentReference.prototype.set = function (value, options) {
    validateBetweenNumberOfArgs('DocumentReference.set', arguments, 1, 2);
    options = validateSetOptions('DocumentReference.set', options);
    var parsed = options.merge || options.mergeFields ? this.firestore._dataConverter.parseMergeData('DocumentReference.set', value, options.mergeFields) : this.firestore._dataConverter.parseSetData('DocumentReference.set', value);
    return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.NONE));
  };

  DocumentReference.prototype.update = function (fieldOrUpdateData, value) {
    var moreFieldsAndValues = [];

    for (var _i = 2; _i < arguments.length; _i++) {
      moreFieldsAndValues[_i - 2] = arguments[_i];
    }

    var parsed;

    if (typeof fieldOrUpdateData === 'string' || fieldOrUpdateData instanceof FieldPath$1) {
      validateAtLeastNumberOfArgs('DocumentReference.update', arguments, 2);
      parsed = this.firestore._dataConverter.parseUpdateVarargs('DocumentReference.update', fieldOrUpdateData, value, moreFieldsAndValues);
    } else {
      validateExactNumberOfArgs('DocumentReference.update', arguments, 1);
      parsed = this.firestore._dataConverter.parseUpdateData('DocumentReference.update', fieldOrUpdateData);
    }

    return this._firestoreClient.write(parsed.toMutations(this._key, Precondition.exists(true)));
  };

  DocumentReference.prototype.delete = function () {
    validateExactNumberOfArgs('DocumentReference.delete', arguments, 0);
    return this._firestoreClient.write([new DeleteMutation(this._key, Precondition.NONE)]);
  };

  DocumentReference.prototype.onSnapshot = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    validateBetweenNumberOfArgs('DocumentReference.onSnapshot', arguments, 1, 4);
    var options = {
      includeMetadataChanges: false
    };
    var observer;
    var currArg = 0;

    if (typeof args[currArg] === 'object' && !isPartialObserver(args[currArg])) {
      options = args[currArg];
      validateOptionNames('DocumentReference.onSnapshot', options, ['includeMetadataChanges']);
      validateNamedOptionalType('DocumentReference.onSnapshot', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);
      currArg++;
    }

    var internalOptions = {
      includeMetadataChanges: options.includeMetadataChanges
    };

    if (isPartialObserver(args[currArg])) {
      observer = args[currArg];
    } else {
      validateArgType('DocumentReference.onSnapshot', 'function', currArg, args[currArg]);
      validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 1, args[currArg + 1]);
      validateOptionalArgType('DocumentReference.onSnapshot', 'function', currArg + 2, args[currArg + 2]);
      observer = {
        next: args[currArg],
        error: args[currArg + 1],
        complete: args[currArg + 2]
      };
    }

    return this.onSnapshotInternal(internalOptions, observer);
  };

  DocumentReference.prototype.onSnapshotInternal = function (options, observer) {
    var _this = this;

    var errHandler = function (err) {
      console.error('Uncaught Error in onSnapshot:', err);
    };

    if (observer.error) {
      errHandler = observer.error.bind(observer);
    }

    var asyncObserver = new AsyncObserver({
      next: function (snapshot) {
        if (observer.next) {
          assert(snapshot.docs.size <= 1, 'Too many documents returned on a document query');
          var doc = snapshot.docs.get(_this._key);
          observer.next(new DocumentSnapshot(_this.firestore, _this._key, doc, snapshot.fromCache, snapshot.hasPendingWrites));
        }
      },
      error: errHandler
    });

    var internalListener = this._firestoreClient.listen(Query.atPath(this._key.path), asyncObserver, options);

    return function () {
      asyncObserver.mute();

      _this._firestoreClient.unlisten(internalListener);
    };
  };

  DocumentReference.prototype.get = function (options) {
    var _this = this;

    validateBetweenNumberOfArgs('DocumentReference.get', arguments, 0, 1);
    validateGetOptions('DocumentReference.get', options);
    return new Promise(function (resolve, reject) {
      if (options && options.source === 'cache') {
        _this.firestore.ensureClientConfigured().getDocumentFromLocalCache(_this._key).then(function (doc) {
          resolve(new DocumentSnapshot(_this.firestore, _this._key, doc,
          /*fromCache=*/
          true, doc instanceof Document ? doc.hasLocalMutations : false));
        }, reject);
      } else {
        _this.getViaSnapshotListener(resolve, reject, options);
      }
    });
  };

  DocumentReference.prototype.getViaSnapshotListener = function (resolve, reject, options) {
    var unlisten = this.onSnapshotInternal({
      includeMetadataChanges: true,
      waitForSyncWhenOnline: true
    }, {
      next: function (snap) {
        // Remove query first before passing event to user to avoid
        // user actions affecting the now stale query.
        unlisten();

        if (!snap.exists && snap.metadata.fromCache) {
          // TODO(dimond): If we're online and the document doesn't
          // exist then we resolve with a doc.exists set to false. If
          // we're offline however, we reject the Promise in this
          // case. Two options: 1) Cache the negative response from
          // the server so we can deliver that even when you're
          // offline 2) Actually reject the Promise in the online case
          // if the document doesn't exist.
          reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document because the client is ' + 'offline.'));
        } else if (snap.exists && snap.metadata.fromCache && options && options.source === 'server') {
          reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from server. (However, this ' + 'document does exist in the local cache. Run again ' + 'without setting source to "server" to ' + 'retrieve the cached document.)'));
        } else {
          resolve(snap);
        }
      },
      error: reject
    });
  };

  return DocumentReference;
}();

var SnapshotMetadata =
/** @class */
function () {
  function SnapshotMetadata(hasPendingWrites, fromCache) {
    this.hasPendingWrites = hasPendingWrites;
    this.fromCache = fromCache;
  }

  SnapshotMetadata.prototype.isEqual = function (other) {
    return this.hasPendingWrites === other.hasPendingWrites && this.fromCache === other.fromCache;
  };

  return SnapshotMetadata;
}();

var DocumentSnapshot =
/** @class */
function () {
  function DocumentSnapshot(_firestore, _key, _document, _fromCache, _hasPendingWrites) {
    this._firestore = _firestore;
    this._key = _key;
    this._document = _document;
    this._fromCache = _fromCache;
    this._hasPendingWrites = _hasPendingWrites;
  }

  DocumentSnapshot.prototype.data = function (options) {
    validateBetweenNumberOfArgs('DocumentSnapshot.data', arguments, 0, 1);
    options = validateSnapshotOptions('DocumentSnapshot.data', options);
    return !this._document ? undefined : this.convertObject(this._document.data, FieldValueOptions.fromSnapshotOptions(options, this._firestore._areTimestampsInSnapshotsEnabled()));
  };

  DocumentSnapshot.prototype.get = function (fieldPath, options) {
    validateBetweenNumberOfArgs('DocumentSnapshot.get', arguments, 1, 2);
    options = validateSnapshotOptions('DocumentSnapshot.get', options);

    if (this._document) {
      var value = this._document.data.field(fieldPathFromArgument('DocumentSnapshot.get', fieldPath));

      if (value !== undefined) {
        return this.convertValue(value, FieldValueOptions.fromSnapshotOptions(options, this._firestore._areTimestampsInSnapshotsEnabled()));
      }
    }

    return undefined;
  };

  Object.defineProperty(DocumentSnapshot.prototype, "id", {
    get: function () {
      return this._key.path.lastSegment();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(DocumentSnapshot.prototype, "ref", {
    get: function () {
      return new DocumentReference(this._key, this._firestore);
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(DocumentSnapshot.prototype, "exists", {
    get: function () {
      return this._document !== null;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(DocumentSnapshot.prototype, "metadata", {
    get: function () {
      return new SnapshotMetadata(this._hasPendingWrites, this._fromCache);
    },
    enumerable: true,
    configurable: true
  });

  DocumentSnapshot.prototype.isEqual = function (other) {
    if (!(other instanceof DocumentSnapshot)) {
      throw invalidClassError('isEqual', 'DocumentSnapshot', 1, other);
    }

    return this._firestore === other._firestore && this._fromCache === other._fromCache && this._key.isEqual(other._key) && (this._document === null ? other._document === null : this._document.isEqual(other._document));
  };

  DocumentSnapshot.prototype.convertObject = function (data, options) {
    var _this = this;

    var result = {};
    data.forEach(function (key, value) {
      result[key] = _this.convertValue(value, options);
    });
    return result;
  };

  DocumentSnapshot.prototype.convertValue = function (value, options) {
    if (value instanceof ObjectValue) {
      return this.convertObject(value, options);
    } else if (value instanceof ArrayValue) {
      return this.convertArray(value, options);
    } else if (value instanceof RefValue) {
      var key = value.value(options);

      var database = this._firestore.ensureClientConfigured().databaseId();

      if (!value.databaseId.isEqual(database)) {
        // TODO(b/64130202): Somehow support foreign references.
        error("Document " + this._key.path + " contains a document " + "reference within a different database (" + (value.databaseId.projectId + "/" + value.databaseId.database + ") which is not ") + "supported. It will be treated as a reference in the current " + ("database (" + database.projectId + "/" + database.database + ") ") + "instead.");
      }

      return new DocumentReference(key, this._firestore);
    } else {
      return value.value(options);
    }
  };

  DocumentSnapshot.prototype.convertArray = function (data, options) {
    var _this = this;

    return data.internalValue.map(function (value) {
      return _this.convertValue(value, options);
    });
  };

  return DocumentSnapshot;
}();

var QueryDocumentSnapshot =
/** @class */
function (_super) {
  tslib_1.__extends(QueryDocumentSnapshot, _super);

  function QueryDocumentSnapshot(firestore, key, document, fromCache, hasPendingWrites) {
    return _super.call(this, firestore, key, document, fromCache, hasPendingWrites) || this;
  }

  QueryDocumentSnapshot.prototype.data = function (options) {
    var data = _super.prototype.data.call(this, options);

    assert(typeof data === 'object', 'Document in a QueryDocumentSnapshot should exist');
    return data;
  };

  return QueryDocumentSnapshot;
}(DocumentSnapshot);

var Query$1 =
/** @class */
function () {
  function Query(_query, firestore) {
    this._query = _query;
    this.firestore = firestore;
  }

  Query.prototype.where = function (field, opStr, value) {
    validateExactNumberOfArgs('Query.where', arguments, 3);
    validateArgType('Query.where', 'non-empty string', 2, opStr);
    validateDefined('Query.where', 3, value);
    var fieldValue;
    var fieldPath = fieldPathFromArgument('Query.where', field);
    var relationOp = RelationOp.fromString(opStr);

    if (fieldPath.isKeyField()) {
      if (relationOp === RelationOp.ARRAY_CONTAINS) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. You can't perform array-contains queries on " + 'FieldPath.documentId() since document IDs are not arrays.');
      }

      if (typeof value === 'string') {
        if (value === '') {
          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Function Query.where() requires its third parameter to be a ' + 'valid document ID if the first parameter is ' + 'FieldPath.documentId(), but it was an empty string.');
        }

        if (!this._query.isCollectionGroupQuery() && value.indexOf('/') !== -1) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid third parameter to Query.where(). When querying a collection by " + "FieldPath.documentId(), the value provided must be a plain document ID, but " + ("'" + value + "' contains a slash."));
        }

        var path = this._query.path.child(ResourcePath.fromString(value));

        if (!DocumentKey.isDocumentKey(path)) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid third parameter to Query.where(). When querying a collection group by " + "FieldPath.documentId(), the value provided must result in a valid document path, " + ("but '" + path + "' is not because it has an odd number of segments (" + path.length + ")."));
        }

        fieldValue = new RefValue(this.firestore._databaseId, new DocumentKey(path));
      } else if (value instanceof DocumentReference) {
        var ref = value;
        fieldValue = new RefValue(this.firestore._databaseId, ref._key);
      } else {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Function Query.where() requires its third parameter to be a " + "string or a DocumentReference if the first parameter is " + "FieldPath.documentId(), but it was: " + (valueDescription(value) + "."));
      }
    } else {
      fieldValue = this.firestore._dataConverter.parseQueryValue('Query.where', value);
    }

    var filter = Filter.create(fieldPath, relationOp, fieldValue);
    this.validateNewFilter(filter);
    return new Query(this._query.addFilter(filter), this.firestore);
  };

  Query.prototype.orderBy = function (field, directionStr) {
    validateBetweenNumberOfArgs('Query.orderBy', arguments, 1, 2);
    validateOptionalArgType('Query.orderBy', 'non-empty string', 2, directionStr);
    var direction;

    if (directionStr === undefined || directionStr === 'asc') {
      direction = Direction.ASCENDING;
    } else if (directionStr === 'desc') {
      direction = Direction.DESCENDING;
    } else {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Function Query.orderBy() has unknown direction '" + directionStr + "', " + "expected 'asc' or 'desc'.");
    }

    if (this._query.startAt !== null) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.startAt() or ' + 'Query.startAfter() before calling Query.orderBy().');
    }

    if (this._query.endAt !== null) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You must not call Query.endAt() or ' + 'Query.endBefore() before calling Query.orderBy().');
    }

    var fieldPath = fieldPathFromArgument('Query.orderBy', field);
    var orderBy = new OrderBy(fieldPath, direction);
    this.validateNewOrderBy(orderBy);
    return new Query(this._query.addOrderBy(orderBy), this.firestore);
  };

  Query.prototype.limit = function (n) {
    validateExactNumberOfArgs('Query.limit', arguments, 1);
    validateArgType('Query.limit', 'number', 1, n);

    if (n <= 0) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. Query limit (" + n + ") is invalid. Limit must be " + 'positive.');
    }

    return new Query(this._query.withLimit(n), this.firestore);
  };

  Query.prototype.startAt = function (docOrField) {
    var fields = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      fields[_i - 1] = arguments[_i];
    }

    validateAtLeastNumberOfArgs('Query.startAt', arguments, 1);
    var bound = this.boundFromDocOrFields('Query.startAt', docOrField, fields,
    /*before=*/
    true);
    return new Query(this._query.withStartAt(bound), this.firestore);
  };

  Query.prototype.startAfter = function (docOrField) {
    var fields = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      fields[_i - 1] = arguments[_i];
    }

    validateAtLeastNumberOfArgs('Query.startAfter', arguments, 1);
    var bound = this.boundFromDocOrFields('Query.startAfter', docOrField, fields,
    /*before=*/
    false);
    return new Query(this._query.withStartAt(bound), this.firestore);
  };

  Query.prototype.endBefore = function (docOrField) {
    var fields = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      fields[_i - 1] = arguments[_i];
    }

    validateAtLeastNumberOfArgs('Query.endBefore', arguments, 1);
    var bound = this.boundFromDocOrFields('Query.endBefore', docOrField, fields,
    /*before=*/
    true);
    return new Query(this._query.withEndAt(bound), this.firestore);
  };

  Query.prototype.endAt = function (docOrField) {
    var fields = [];

    for (var _i = 1; _i < arguments.length; _i++) {
      fields[_i - 1] = arguments[_i];
    }

    validateAtLeastNumberOfArgs('Query.endAt', arguments, 1);
    var bound = this.boundFromDocOrFields('Query.endAt', docOrField, fields,
    /*before=*/
    false);
    return new Query(this._query.withEndAt(bound), this.firestore);
  };

  Query.prototype.isEqual = function (other) {
    if (!(other instanceof Query)) {
      throw invalidClassError('isEqual', 'Query', 1, other);
    }

    return this.firestore === other.firestore && this._query.isEqual(other._query);
  };
  /** Helper function to create a bound from a document or fields */


  Query.prototype.boundFromDocOrFields = function (methodName, docOrField, fields, before) {
    validateDefined(methodName, 1, docOrField);

    if (docOrField instanceof DocumentSnapshot) {
      if (fields.length > 0) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Too many arguments provided to " + methodName + "().");
      }

      var snap = docOrField;

      if (!snap.exists) {
        throw new FirestoreError(Code.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + (methodName + "()."));
      }

      return this.boundFromDocument(methodName, snap._document, before);
    } else {
      var allFields = [docOrField].concat(fields);
      return this.boundFromFields(methodName, allFields, before);
    }
  };
  /**
   * Create a Bound from a query and a document.
   *
   * Note that the Bound will always include the key of the document
   * and so only the provided document will compare equal to the returned
   * position.
   *
   * Will throw if the document does not contain all fields of the order by
   * of the query or if any of the fields in the order by are an uncommitted
   * server timestamp.
   */


  Query.prototype.boundFromDocument = function (methodName, doc, before) {
    var components = []; // Because people expect to continue/end a query at the exact document
    // provided, we need to use the implicit sort order rather than the explicit
    // sort order, because it's guaranteed to contain the document key. That way
    // the position becomes unambiguous and the query continues/ends exactly at
    // the provided document. Without the key (by using the explicit sort
    // orders), multiple documents could match the position, yielding duplicate
    // results.

    for (var _i = 0, _a = this._query.orderBy; _i < _a.length; _i++) {
      var orderBy = _a[_i];

      if (orderBy.field.isKeyField()) {
        components.push(new RefValue(this.firestore._databaseId, doc.key));
      } else {
        var value = doc.field(orderBy.field);

        if (value instanceof ServerTimestampValue) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a ' + 'document for which the field "' + orderBy.field + '" is an uncommitted server timestamp. (Since the value of ' + 'this field is unknown, you cannot start/end a query with it.)');
        } else if (value !== undefined) {
          components.push(value);
        } else {
          var field = orderBy.field.canonicalString();
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a " + ("document for which the field '" + field + "' (used as the ") + "orderBy) does not exist.");
        }
      }
    }

    return new Bound(components, before);
  };
  /**
   * Converts a list of field values to a Bound for the given query.
   */


  Query.prototype.boundFromFields = function (methodName, values, before) {
    // Use explicit order by's because it has to match the query the user made
    var orderBy = this._query.explicitOrderBy;

    if (values.length > orderBy.length) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Too many arguments provided to " + methodName + "(). " + "The number of arguments must be less than or equal to the " + "number of Query.orderBy() clauses");
    }

    var components = [];

    for (var i = 0; i < values.length; i++) {
      var rawValue = values[i];
      var orderByComponent = orderBy[i];

      if (orderByComponent.field.isKeyField()) {
        if (typeof rawValue !== 'string') {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + (methodName + "(), but got a " + typeof rawValue));
        }

        if (!this._query.isCollectionGroupQuery() && rawValue.indexOf('/') !== -1) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), " + ("the value passed to " + methodName + "() must be a plain document ID, but ") + ("'" + rawValue + "' contains a slash."));
        }

        var path = this._query.path.child(ResourcePath.fromString(rawValue));

        if (!DocumentKey.isDocumentKey(path)) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by " + ("FieldPath.documentId(), the value passed to " + methodName + "() must result in a ") + ("valid document path, but '" + path + "' is not because it contains an odd number ") + "of segments.");
        }

        var key = new DocumentKey(path);
        components.push(new RefValue(this.firestore._databaseId, key));
      } else {
        var wrapped = this.firestore._dataConverter.parseQueryValue(methodName, rawValue);

        components.push(wrapped);
      }
    }

    return new Bound(components, before);
  };

  Query.prototype.onSnapshot = function () {
    var args = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      args[_i] = arguments[_i];
    }

    validateBetweenNumberOfArgs('Query.onSnapshot', arguments, 1, 4);
    var options = {};
    var observer;
    var currArg = 0;

    if (typeof args[currArg] === 'object' && !isPartialObserver(args[currArg])) {
      options = args[currArg];
      validateOptionNames('Query.onSnapshot', options, ['includeMetadataChanges']);
      validateNamedOptionalType('Query.onSnapshot', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);
      currArg++;
    }

    if (isPartialObserver(args[currArg])) {
      observer = args[currArg];
    } else {
      validateArgType('Query.onSnapshot', 'function', currArg, args[currArg]);
      validateOptionalArgType('Query.onSnapshot', 'function', currArg + 1, args[currArg + 1]);
      validateOptionalArgType('Query.onSnapshot', 'function', currArg + 2, args[currArg + 2]);
      observer = {
        next: args[currArg],
        error: args[currArg + 1],
        complete: args[currArg + 2]
      };
    }

    return this.onSnapshotInternal(options, observer);
  };

  Query.prototype.onSnapshotInternal = function (options, observer) {
    var _this = this;

    var errHandler = function (err) {
      console.error('Uncaught Error in onSnapshot:', err);
    };

    if (observer.error) {
      errHandler = observer.error.bind(observer);
    }

    var asyncObserver = new AsyncObserver({
      next: function (result) {
        if (observer.next) {
          observer.next(new QuerySnapshot(_this.firestore, _this._query, result));
        }
      },
      error: errHandler
    });
    var firestoreClient = this.firestore.ensureClientConfigured();
    var internalListener = firestoreClient.listen(this._query, asyncObserver, options);
    return function () {
      asyncObserver.mute();
      firestoreClient.unlisten(internalListener);
    };
  };

  Query.prototype.get = function (options) {
    var _this = this;

    validateBetweenNumberOfArgs('Query.get', arguments, 0, 1);
    validateGetOptions('Query.get', options);
    return new Promise(function (resolve, reject) {
      if (options && options.source === 'cache') {
        _this.firestore.ensureClientConfigured().getDocumentsFromLocalCache(_this._query).then(function (viewSnap) {
          resolve(new QuerySnapshot(_this.firestore, _this._query, viewSnap));
        }, reject);
      } else {
        _this.getViaSnapshotListener(resolve, reject, options);
      }
    });
  };

  Query.prototype.getViaSnapshotListener = function (resolve, reject, options) {
    var unlisten = this.onSnapshotInternal({
      includeMetadataChanges: true,
      waitForSyncWhenOnline: true
    }, {
      next: function (result) {
        // Remove query first before passing event to user to avoid
        // user actions affecting the now stale query.
        unlisten();

        if (result.metadata.fromCache && options && options.source === 'server') {
          reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get documents from server. (However, these ' + 'documents may exist in the local cache. Run again ' + 'without setting source to "server" to ' + 'retrieve the cached documents.)'));
        } else {
          resolve(result);
        }
      },
      error: reject
    });
  };

  Query.prototype.validateNewFilter = function (filter) {
    if (filter instanceof RelationFilter) {
      if (filter.isInequality()) {
        var existingField = this._query.getInequalityFilterField();

        if (existingField !== null && !existingField.isEqual(filter.field)) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. All where filters with an inequality' + ' (<, <=, >, or >=) must be on the same field. But you have' + (" inequality filters on '" + existingField.toString() + "'") + (" and '" + filter.field.toString() + "'"));
        }

        var firstOrderByField = this._query.getFirstOrderByField();

        if (firstOrderByField !== null) {
          this.validateOrderByAndInequalityMatch(filter.field, firstOrderByField);
        }
      } else if (filter.op === RelationOp.ARRAY_CONTAINS) {
        if (this._query.hasArrayContainsFilter()) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. Queries only support a single array-contains ' + 'filter.');
        }
      }
    }
  };

  Query.prototype.validateNewOrderBy = function (orderBy) {
    if (this._query.getFirstOrderByField() === null) {
      // This is the first order by. It must match any inequality.
      var inequalityField = this._query.getInequalityFilterField();

      if (inequalityField !== null) {
        this.validateOrderByAndInequalityMatch(inequalityField, orderBy.field);
      }
    }
  };

  Query.prototype.validateOrderByAndInequalityMatch = function (inequality, orderBy) {
    if (!orderBy.isEqual(inequality)) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality " + ("(<, <=, >, or >=) on field '" + inequality.toString() + "' ") + ("and so you must also use '" + inequality.toString() + "' ") + "as your first Query.orderBy(), but your first Query.orderBy() " + ("is on field '" + orderBy.toString() + "' instead."));
    }
  };

  return Query;
}();

var QuerySnapshot =
/** @class */
function () {
  function QuerySnapshot(_firestore, _originalQuery, _snapshot) {
    this._firestore = _firestore;
    this._originalQuery = _originalQuery;
    this._snapshot = _snapshot;
    this._cachedChanges = null;
    this._cachedChangesIncludeMetadataChanges = null;
    this.metadata = new SnapshotMetadata(_snapshot.hasPendingWrites, _snapshot.fromCache);
  }

  Object.defineProperty(QuerySnapshot.prototype, "docs", {
    get: function () {
      var result = [];
      this.forEach(function (doc) {
        return result.push(doc);
      });
      return result;
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(QuerySnapshot.prototype, "empty", {
    get: function () {
      return this._snapshot.docs.isEmpty();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(QuerySnapshot.prototype, "size", {
    get: function () {
      return this._snapshot.docs.size;
    },
    enumerable: true,
    configurable: true
  });

  QuerySnapshot.prototype.forEach = function (callback, thisArg) {
    var _this = this;

    validateBetweenNumberOfArgs('QuerySnapshot.forEach', arguments, 1, 2);
    validateArgType('QuerySnapshot.forEach', 'function', 1, callback);

    this._snapshot.docs.forEach(function (doc) {
      callback.call(thisArg, _this.convertToDocumentImpl(doc));
    });
  };

  Object.defineProperty(QuerySnapshot.prototype, "query", {
    get: function () {
      return new Query$1(this._originalQuery, this._firestore);
    },
    enumerable: true,
    configurable: true
  });

  QuerySnapshot.prototype.docChanges = function (options) {
    if (options) {
      validateOptionNames('QuerySnapshot.docChanges', options, ['includeMetadataChanges']);
      validateNamedOptionalType('QuerySnapshot.docChanges', 'boolean', 'includeMetadataChanges', options.includeMetadataChanges);
    }

    var includeMetadataChanges = !!(options && options.includeMetadataChanges);

    if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'To include metadata changes with your document changes, you must ' + 'also pass { includeMetadataChanges:true } to onSnapshot().');
    }

    if (!this._cachedChanges || this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges) {
      this._cachedChanges = changesFromSnapshot(this._firestore, includeMetadataChanges, this._snapshot);
      this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;
    }

    return this._cachedChanges;
  };
  /** Check the equality. The call can be very expensive. */


  QuerySnapshot.prototype.isEqual = function (other) {
    if (!(other instanceof QuerySnapshot)) {
      throw invalidClassError('isEqual', 'QuerySnapshot', 1, other);
    }

    return this._firestore === other._firestore && this._originalQuery.isEqual(other._originalQuery) && this._snapshot.isEqual(other._snapshot);
  };

  QuerySnapshot.prototype.convertToDocumentImpl = function (doc) {
    return new QueryDocumentSnapshot(this._firestore, doc.key, doc, this.metadata.fromCache, this._snapshot.mutatedKeys.has(doc.key));
  };

  return QuerySnapshot;
}(); // TODO(2018/11/01): As of 2018/04/17 we're changing docChanges from an array
// into a method. Because this is a runtime breaking change and somewhat subtle
// (both Array and Function have a .length, etc.), we'll replace commonly-used
// properties (including Symbol.iterator) to throw a custom error message. In
// ~6 months we can delete the custom error as most folks will have hopefully
// migrated.


function throwDocChangesMethodError() {
  throw new FirestoreError(Code.INVALID_ARGUMENT, 'QuerySnapshot.docChanges has been changed from a property into a ' + 'method, so usages like "querySnapshot.docChanges" should become ' + '"querySnapshot.docChanges()"');
}

var docChangesPropertiesToOverride = ['length', 'forEach', 'map'].concat(typeof Symbol !== 'undefined' ? [Symbol.iterator] : []);
docChangesPropertiesToOverride.forEach(function (property) {
  /**
   * We are (re-)defining properties on QuerySnapshot.prototype.docChanges which
   * is a Function. This could fail, in particular in the case of 'length' which
   * already exists on Function.prototype and on IE11 is improperly defined with
   * `{ configurable: false }`. So we wrap this in a try/catch to ensure that we
   * still have a functional SDK.
   */
  try {
    Object.defineProperty(QuerySnapshot.prototype.docChanges, property, {
      get: function () {
        return throwDocChangesMethodError();
      }
    });
  } catch (err) {} // Ignore this failure intentionally

});

var CollectionReference =
/** @class */
function (_super) {
  tslib_1.__extends(CollectionReference, _super);

  function CollectionReference(path, firestore) {
    var _this = _super.call(this, Query.atPath(path), firestore) || this;

    if (path.length % 2 !== 1) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid collection reference. Collection ' + 'references must have an odd number of segments, but ' + (path.canonicalString() + " has " + path.length));
    }

    return _this;
  }

  Object.defineProperty(CollectionReference.prototype, "id", {
    get: function () {
      return this._query.path.lastSegment();
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(CollectionReference.prototype, "parent", {
    get: function () {
      var parentPath = this._query.path.popLast();

      if (parentPath.isEmpty()) {
        return null;
      } else {
        return new DocumentReference(new DocumentKey(parentPath), this.firestore);
      }
    },
    enumerable: true,
    configurable: true
  });
  Object.defineProperty(CollectionReference.prototype, "path", {
    get: function () {
      return this._query.path.canonicalString();
    },
    enumerable: true,
    configurable: true
  });

  CollectionReference.prototype.doc = function (pathString) {
    validateBetweenNumberOfArgs('CollectionReference.doc', arguments, 0, 1); // We allow omission of 'pathString' but explicitly prohibit passing in both
    // 'undefined' and 'null'.

    if (arguments.length === 0) {
      pathString = AutoId.newId();
    }

    validateArgType('CollectionReference.doc', 'non-empty string', 1, pathString);

    if (pathString === '') {
      throw new FirestoreError(Code.INVALID_ARGUMENT, 'Document path must be a non-empty string');
    }

    var path = ResourcePath.fromString(pathString);
    return DocumentReference.forPath(this._query.path.child(path), this.firestore);
  };

  CollectionReference.prototype.add = function (value) {
    validateExactNumberOfArgs('CollectionReference.add', arguments, 1);
    validateArgType('CollectionReference.add', 'object', 1, value);
    var docRef = this.doc();
    return docRef.set(value).then(function () {
      return docRef;
    });
  };

  return CollectionReference;
}(Query$1);

function validateSetOptions(methodName, options) {
  if (options === undefined) {
    return {
      merge: false
    };
  }

  validateOptionNames(methodName, options, ['merge', 'mergeFields']);
  validateNamedOptionalType(methodName, 'boolean', 'merge', options.merge);
  validateOptionalArrayElements(methodName, 'mergeFields', 'a string or a FieldPath', options.mergeFields, function (element) {
    return typeof element === 'string' || element instanceof FieldPath$1;
  });

  if (options.mergeFields !== undefined && options.merge !== undefined) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid options passed to function " + methodName + "(): You cannot specify both \"merge\" " + "and \"mergeFields\".");
  }

  return options;
}

function validateSnapshotOptions(methodName, options) {
  if (options === undefined) {
    return {};
  }

  validateOptionNames(methodName, options, ['serverTimestamps']);
  validateNamedOptionalPropertyEquals(methodName, 'options', 'serverTimestamps', options.serverTimestamps, ['estimate', 'previous', 'none']);
  return options;
}

function validateGetOptions(methodName, options) {
  validateOptionalArgType(methodName, 'object', 1, options);

  if (options) {
    validateOptionNames(methodName, options, ['source']);
    validateNamedOptionalPropertyEquals(methodName, 'options', 'source', options.source, ['default', 'server', 'cache']);
  }
}

function validateReference(methodName, documentRef, firestore) {
  if (!(documentRef instanceof DocumentReference)) {
    throw invalidClassError(methodName, 'DocumentReference', 1, documentRef);
  } else if (documentRef.firestore !== firestore) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, 'Provided document reference is from a different Firestore instance.');
  } else {
    return documentRef;
  }
}
/**
 * Calculates the array of firestore.DocumentChange's for a given ViewSnapshot.
 *
 * Exported for testing.
 */


function changesFromSnapshot(firestore, includeMetadataChanges, snapshot) {
  if (snapshot.oldDocs.isEmpty()) {
    // Special case the first snapshot because index calculation is easy and
    // fast
    var lastDoc_1;
    var index_1 = 0;
    return snapshot.docChanges.map(function (change) {
      var doc = new QueryDocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache, snapshot.mutatedKeys.has(change.doc.key));
      assert(change.type === ChangeType.Added, 'Invalid event type for first snapshot');
      assert(!lastDoc_1 || snapshot.query.docComparator(lastDoc_1, change.doc) < 0, 'Got added events in wrong order');
      lastDoc_1 = change.doc;
      return {
        type: 'added',
        doc: doc,
        oldIndex: -1,
        newIndex: index_1++
      };
    });
  } else {
    // A DocumentSet that is updated incrementally as changes are applied to use
    // to lookup the index of a document.
    var indexTracker_1 = snapshot.oldDocs;
    return snapshot.docChanges.filter(function (change) {
      return includeMetadataChanges || change.type !== ChangeType.Metadata;
    }).map(function (change) {
      var doc = new QueryDocumentSnapshot(firestore, change.doc.key, change.doc, snapshot.fromCache, snapshot.mutatedKeys.has(change.doc.key));
      var oldIndex = -1;
      var newIndex = -1;

      if (change.type !== ChangeType.Added) {
        oldIndex = indexTracker_1.indexOf(change.doc.key);
        assert(oldIndex >= 0, 'Index for document not found');
        indexTracker_1 = indexTracker_1.delete(change.doc.key);
      }

      if (change.type !== ChangeType.Removed) {
        indexTracker_1 = indexTracker_1.add(change.doc);
        newIndex = indexTracker_1.indexOf(change.doc.key);
      }

      return {
        type: resultChangeType(change.type),
        doc: doc,
        oldIndex: oldIndex,
        newIndex: newIndex
      };
    });
  }
}

function resultChangeType(type) {
  switch (type) {
    case ChangeType.Added:
      return 'added';

    case ChangeType.Modified:
    case ChangeType.Metadata:
      return 'modified';

    case ChangeType.Removed:
      return 'removed';

    default:
      return fail('Unknown change type: ' + type);
  }
} // Export the classes with a private constructor (it will fail if invoked
// at runtime). Note that this still allows instanceof checks.
// We're treating the variables as class names, so disable checking for lower
// case variable names.
// tslint:disable:variable-name


var PublicFirestore = makeConstructorPrivate(Firestore, 'Use firebase.firestore() instead.');
var PublicTransaction = makeConstructorPrivate(Transaction$1, 'Use firebase.firestore().runTransaction() instead.');
var PublicWriteBatch = makeConstructorPrivate(WriteBatch, 'Use firebase.firestore().batch() instead.');
var PublicDocumentReference = makeConstructorPrivate(DocumentReference, 'Use firebase.firestore().doc() instead.');
var PublicDocumentSnapshot = makeConstructorPrivate(DocumentSnapshot);
var PublicQueryDocumentSnapshot = makeConstructorPrivate(QueryDocumentSnapshot);
var PublicQuery = makeConstructorPrivate(Query$1);
var PublicQuerySnapshot = makeConstructorPrivate(QuerySnapshot);
var PublicCollectionReference = makeConstructorPrivate(CollectionReference, 'Use firebase.firestore().collection() instead.'); // tslint:enable:variable-name

/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

var firestoreNamespace = {
  Firestore: PublicFirestore,
  GeoPoint: GeoPoint,
  Timestamp: Timestamp,
  Blob: PublicBlob,
  Transaction: PublicTransaction,
  WriteBatch: PublicWriteBatch,
  DocumentReference: PublicDocumentReference,
  DocumentSnapshot: PublicDocumentSnapshot,
  Query: PublicQuery,
  QueryDocumentSnapshot: PublicQueryDocumentSnapshot,
  QuerySnapshot: PublicQuerySnapshot,
  CollectionReference: PublicCollectionReference,
  FieldPath: FieldPath$1,
  FieldValue: PublicFieldValue,
  setLogLevel: Firestore.setLogLevel,
  CACHE_SIZE_UNLIMITED: CACHE_SIZE_UNLIMITED
};
/**
 * Configures Firestore as part of the Firebase SDK by calling registerService.
 */

function configureForFirebase(firebase) {
  firebase.INTERNAL.registerService('firestore', function (app) {
    return new Firestore(app);
  }, shallowCopy(firestoreNamespace));
}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


function registerFirestore(instance) {
  configureForFirebase(instance);
}

registerFirestore(firebase);
exports.registerFirestore = registerFirestore;
},{"@firebase/app":"node_modules/@firebase/app/dist/index.cjs.js","@firebase/logger":"node_modules/@firebase/logger/dist/index.esm.js","tslib":"node_modules/tslib/tslib.es6.js","@firebase/webchannel-wrapper":"node_modules/@firebase/webchannel-wrapper/dist/index.esm.js","@firebase/util":"node_modules/@firebase/util/dist/index.cjs.js"}],"node_modules/firebase/firestore/dist/index.esm.js":[function(require,module,exports) {
"use strict";

require("@firebase/firestore");
},{"@firebase/firestore":"node_modules/@firebase/firestore/dist/index.cjs.js"}],"node_modules/@firebase/auth/dist/auth.esm.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

var _app = _interopRequireDefault(require("@firebase/app"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(function () {
  var g,
      aa = aa || {},
      k = this;

  function l(a) {
    return "string" == typeof a;
  }

  function ba(a) {
    return "boolean" == typeof a;
  }

  var ca = /^[\w+/_-]+[=]{0,2}$/,
      da = null;

  function ea() {}

  function fa(a) {
    var b = typeof a;
    if ("object" == b) {
      if (a) {
        if (a instanceof Array) return "array";
        if (a instanceof Object) return b;
        var c = Object.prototype.toString.call(a);
        if ("[object Window]" == c) return "object";
        if ("[object Array]" == c || "number" == typeof a.length && "undefined" != typeof a.splice && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("splice")) return "array";
        if ("[object Function]" == c || "undefined" != typeof a.call && "undefined" != typeof a.propertyIsEnumerable && !a.propertyIsEnumerable("call")) return "function";
      } else return "null";
    } else if ("function" == b && "undefined" == typeof a.call) return "object";
    return b;
  }

  function ha(a) {
    return null === a;
  }

  function ia(a) {
    return "array" == fa(a);
  }

  function ja(a) {
    var b = fa(a);
    return "array" == b || "object" == b && "number" == typeof a.length;
  }

  function n(a) {
    return "function" == fa(a);
  }

  function q(a) {
    var b = typeof a;
    return "object" == b && null != a || "function" == b;
  }

  var ka = "closure_uid_" + (1E9 * Math.random() >>> 0),
      ma = 0;

  function na(a, b, c) {
    return a.call.apply(a.bind, arguments);
  }

  function oa(a, b, c) {
    if (!a) throw Error();

    if (2 < arguments.length) {
      var d = Array.prototype.slice.call(arguments, 2);
      return function () {
        var c = Array.prototype.slice.call(arguments);
        Array.prototype.unshift.apply(c, d);
        return a.apply(b, c);
      };
    }

    return function () {
      return a.apply(b, arguments);
    };
  }

  function r(a, b, c) {
    Function.prototype.bind && -1 != Function.prototype.bind.toString().indexOf("native code") ? r = na : r = oa;
    return r.apply(null, arguments);
  }

  function pa(a, b) {
    var c = Array.prototype.slice.call(arguments, 1);
    return function () {
      var b = c.slice();
      b.push.apply(b, arguments);
      return a.apply(this, b);
    };
  }

  var qa = Date.now || function () {
    return +new Date();
  };

  function t(a, b) {
    function c() {}

    c.prototype = b.prototype;
    a.pb = b.prototype;
    a.prototype = new c();
    a.prototype.constructor = a;

    a.gd = function (a, c, f) {
      for (var d = Array(arguments.length - 2), e = 2; e < arguments.length; e++) d[e - 2] = arguments[e];

      return b.prototype[c].apply(a, d);
    };
  }

  ;

  function ra(a) {
    if (!a) return !1;

    try {
      return !!a.$goog_Thenable;
    } catch (b) {
      return !1;
    }
  }

  ;

  function u(a) {
    if (Error.captureStackTrace) Error.captureStackTrace(this, u);else {
      var b = Error().stack;
      b && (this.stack = b);
    }
    a && (this.message = String(a));
  }

  t(u, Error);
  u.prototype.name = "CustomError";

  function sa(a, b) {
    a = a.split("%s");

    for (var c = "", d = a.length - 1, e = 0; e < d; e++) c += a[e] + (e < b.length ? b[e] : "%s");

    u.call(this, c + a[d]);
  }

  t(sa, u);
  sa.prototype.name = "AssertionError";

  function ta(a, b) {
    throw new sa("Failure" + (a ? ": " + a : ""), Array.prototype.slice.call(arguments, 1));
  }

  ;

  function ua(a, b) {
    this.c = a;
    this.f = b;
    this.b = 0;
    this.a = null;
  }

  ua.prototype.get = function () {
    if (0 < this.b) {
      this.b--;
      var a = this.a;
      this.a = a.next;
      a.next = null;
    } else a = this.c();

    return a;
  };

  function va(a, b) {
    a.f(b);
    100 > a.b && (a.b++, b.next = a.a, a.a = b);
  }

  ;

  function wa() {
    this.b = this.a = null;
  }

  var ya = new ua(function () {
    return new xa();
  }, function (a) {
    a.reset();
  });

  wa.prototype.add = function (a, b) {
    var c = ya.get();
    c.set(a, b);
    this.b ? this.b.next = c : this.a = c;
    this.b = c;
  };

  function za() {
    var a = Aa,
        b = null;
    a.a && (b = a.a, a.a = a.a.next, a.a || (a.b = null), b.next = null);
    return b;
  }

  function xa() {
    this.next = this.b = this.a = null;
  }

  xa.prototype.set = function (a, b) {
    this.a = a;
    this.b = b;
    this.next = null;
  };

  xa.prototype.reset = function () {
    this.next = this.b = this.a = null;
  };

  var Ba = Array.prototype.indexOf ? function (a, b) {
    return Array.prototype.indexOf.call(a, b, void 0);
  } : function (a, b) {
    if (l(a)) return l(b) && 1 == b.length ? a.indexOf(b, 0) : -1;

    for (var c = 0; c < a.length; c++) if (c in a && a[c] === b) return c;

    return -1;
  },
      v = Array.prototype.forEach ? function (a, b, c) {
    Array.prototype.forEach.call(a, b, c);
  } : function (a, b, c) {
    for (var d = a.length, e = l(a) ? a.split("") : a, f = 0; f < d; f++) f in e && b.call(c, e[f], f, a);
  };

  function Ca(a, b) {
    var c = a.length,
        d = l(a) ? a.split("") : a;

    for (--c; 0 <= c; --c) c in d && b.call(void 0, d[c], c, a);
  }

  var Da = Array.prototype.map ? function (a, b) {
    return Array.prototype.map.call(a, b, void 0);
  } : function (a, b) {
    for (var c = a.length, d = Array(c), e = l(a) ? a.split("") : a, f = 0; f < c; f++) f in e && (d[f] = b.call(void 0, e[f], f, a));

    return d;
  },
      Ea = Array.prototype.some ? function (a, b) {
    return Array.prototype.some.call(a, b, void 0);
  } : function (a, b) {
    for (var c = a.length, d = l(a) ? a.split("") : a, e = 0; e < c; e++) if (e in d && b.call(void 0, d[e], e, a)) return !0;

    return !1;
  };

  function Fa(a) {
    a: {
      var b = Ga;

      for (var c = a.length, d = l(a) ? a.split("") : a, e = 0; e < c; e++) if (e in d && b.call(void 0, d[e], e, a)) {
        b = e;
        break a;
      }

      b = -1;
    }

    return 0 > b ? null : l(a) ? a.charAt(b) : a[b];
  }

  function Ha(a, b) {
    return 0 <= Ba(a, b);
  }

  function Ia(a, b) {
    b = Ba(a, b);
    var c;
    (c = 0 <= b) && Array.prototype.splice.call(a, b, 1);
    return c;
  }

  function w(a, b) {
    var c = 0;
    Ca(a, function (d, e) {
      b.call(void 0, d, e, a) && 1 == Array.prototype.splice.call(a, e, 1).length && c++;
    });
  }

  function Ja(a) {
    return Array.prototype.concat.apply([], arguments);
  }

  function Ka(a) {
    var b = a.length;

    if (0 < b) {
      for (var c = Array(b), d = 0; d < b; d++) c[d] = a[d];

      return c;
    }

    return [];
  }

  ;
  var La = String.prototype.trim ? function (a) {
    return a.trim();
  } : function (a) {
    return /^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(a)[1];
  },
      Ma = /&/g,
      Na = /</g,
      Oa = />/g,
      Pa = /"/g,
      Qa = /'/g,
      Ra = /\x00/g,
      Sa = /[\x00&<>"']/;

  function y(a, b) {
    return -1 != a.indexOf(b);
  }

  function Ta(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }

  ;
  var Ua;

  a: {
    var Va = k.navigator;

    if (Va) {
      var Wa = Va.userAgent;

      if (Wa) {
        Ua = Wa;
        break a;
      }
    }

    Ua = "";
  }

  function z(a) {
    return y(Ua, a);
  }

  ;

  function Xa(a, b) {
    for (var c in a) b.call(void 0, a[c], c, a);
  }

  function Ya(a) {
    for (var b in a) return !1;

    return !0;
  }

  function Za(a) {
    var b = {},
        c;

    for (c in a) b[c] = a[c];

    return b;
  }

  var $a = "constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");

  function ab(a, b) {
    for (var c, d, e = 1; e < arguments.length; e++) {
      d = arguments[e];

      for (c in d) a[c] = d[c];

      for (var f = 0; f < $a.length; f++) c = $a[f], Object.prototype.hasOwnProperty.call(d, c) && (a[c] = d[c]);
    }
  }

  ;

  function bb(a, b) {
    for (var c = a.split("%s"), d = "", e = Array.prototype.slice.call(arguments, 1); e.length && 1 < c.length;) d += c.shift() + e.shift();

    return d + c.join("%s");
  }

  function cb(a) {
    Sa.test(a) && (-1 != a.indexOf("&") && (a = a.replace(Ma, "&amp;")), -1 != a.indexOf("<") && (a = a.replace(Na, "&lt;")), -1 != a.indexOf(">") && (a = a.replace(Oa, "&gt;")), -1 != a.indexOf('"') && (a = a.replace(Pa, "&quot;")), -1 != a.indexOf("'") && (a = a.replace(Qa, "&#39;")), -1 != a.indexOf("\x00") && (a = a.replace(Ra, "&#0;")));
    return a;
  }

  ;

  function db(a) {
    k.setTimeout(function () {
      throw a;
    }, 0);
  }

  var eb;

  function fb() {
    var a = k.MessageChannel;
    "undefined" === typeof a && "undefined" !== typeof window && window.postMessage && window.addEventListener && !z("Presto") && (a = function () {
      var a = document.createElement("IFRAME");
      a.style.display = "none";
      a.src = "";
      document.documentElement.appendChild(a);
      var b = a.contentWindow;
      a = b.document;
      a.open();
      a.write("");
      a.close();
      var c = "callImmediate" + Math.random(),
          d = "file:" == b.location.protocol ? "*" : b.location.protocol + "//" + b.location.host;
      a = r(function (a) {
        if (("*" == d || a.origin == d) && a.data == c) this.port1.onmessage();
      }, this);
      b.addEventListener("message", a, !1);
      this.port1 = {};
      this.port2 = {
        postMessage: function () {
          b.postMessage(c, d);
        }
      };
    });

    if ("undefined" !== typeof a && !z("Trident") && !z("MSIE")) {
      var b = new a(),
          c = {},
          d = c;

      b.port1.onmessage = function () {
        if (void 0 !== c.next) {
          c = c.next;
          var a = c.xb;
          c.xb = null;
          a();
        }
      };

      return function (a) {
        d.next = {
          xb: a
        };
        d = d.next;
        b.port2.postMessage(0);
      };
    }

    return "undefined" !== typeof document && "onreadystatechange" in document.createElement("SCRIPT") ? function (a) {
      var b = document.createElement("SCRIPT");

      b.onreadystatechange = function () {
        b.onreadystatechange = null;
        b.parentNode.removeChild(b);
        b = null;
        a();
        a = null;
      };

      document.documentElement.appendChild(b);
    } : function (a) {
      k.setTimeout(a, 0);
    };
  }

  ;

  function hb(a, b) {
    ib || jb();
    kb || (ib(), kb = !0);
    Aa.add(a, b);
  }

  var ib;

  function jb() {
    if (k.Promise && k.Promise.resolve) {
      var a = k.Promise.resolve(void 0);

      ib = function () {
        a.then(lb);
      };
    } else ib = function () {
      var a = lb;
      !n(k.setImmediate) || k.Window && k.Window.prototype && !z("Edge") && k.Window.prototype.setImmediate == k.setImmediate ? (eb || (eb = fb()), eb(a)) : k.setImmediate(a);
    };
  }

  var kb = !1,
      Aa = new wa();

  function lb() {
    for (var a; a = za();) {
      try {
        a.a.call(a.b);
      } catch (b) {
        db(b);
      }

      va(ya, a);
    }

    kb = !1;
  }

  ;

  function A(a, b) {
    this.a = mb;
    this.i = void 0;
    this.f = this.b = this.c = null;
    this.g = this.h = !1;
    if (a != ea) try {
      var c = this;
      a.call(b, function (a) {
        nb(c, ob, a);
      }, function (a) {
        if (!(a instanceof pb)) try {
          if (a instanceof Error) throw a;
          throw Error("Promise rejected.");
        } catch (e) {}
        nb(c, qb, a);
      });
    } catch (d) {
      nb(this, qb, d);
    }
  }

  var mb = 0,
      ob = 2,
      qb = 3;

  function rb() {
    this.next = this.f = this.b = this.g = this.a = null;
    this.c = !1;
  }

  rb.prototype.reset = function () {
    this.f = this.b = this.g = this.a = null;
    this.c = !1;
  };

  var sb = new ua(function () {
    return new rb();
  }, function (a) {
    a.reset();
  });

  function tb(a, b, c) {
    var d = sb.get();
    d.g = a;
    d.b = b;
    d.f = c;
    return d;
  }

  function B(a) {
    if (a instanceof A) return a;
    var b = new A(ea);
    nb(b, ob, a);
    return b;
  }

  function C(a) {
    return new A(function (b, c) {
      c(a);
    });
  }

  function ub(a, b, c) {
    vb(a, b, c, null) || hb(pa(b, a));
  }

  function wb(a) {
    return new A(function (b, c) {
      var d = a.length,
          e = [];
      if (d) for (var f = function (a, c) {
        d--;
        e[a] = c;
        0 == d && b(e);
      }, h = function (a) {
        c(a);
      }, m = 0, p; m < a.length; m++) p = a[m], ub(p, pa(f, m), h);else b(e);
    });
  }

  function xb(a) {
    return new A(function (b) {
      var c = a.length,
          d = [];
      if (c) for (var e = function (a, e, f) {
        c--;
        d[a] = e ? {
          Eb: !0,
          value: f
        } : {
          Eb: !1,
          reason: f
        };
        0 == c && b(d);
      }, f = 0, h; f < a.length; f++) h = a[f], ub(h, pa(e, f, !0), pa(e, f, !1));else b(d);
    });
  }

  A.prototype.then = function (a, b, c) {
    return yb(this, n(a) ? a : null, n(b) ? b : null, c);
  };

  A.prototype.$goog_Thenable = !0;
  g = A.prototype;

  g.ia = function (a, b) {
    a = tb(a, a, b);
    a.c = !0;
    zb(this, a);
    return this;
  };

  g.s = function (a, b) {
    return yb(this, null, a, b);
  };

  g.cancel = function (a) {
    this.a == mb && hb(function () {
      var b = new pb(a);
      Ab(this, b);
    }, this);
  };

  function Ab(a, b) {
    if (a.a == mb) if (a.c) {
      var c = a.c;

      if (c.b) {
        for (var d = 0, e = null, f = null, h = c.b; h && (h.c || (d++, h.a == a && (e = h), !(e && 1 < d))); h = h.next) e || (f = h);

        e && (c.a == mb && 1 == d ? Ab(c, b) : (f ? (d = f, d.next == c.f && (c.f = d), d.next = d.next.next) : Bb(c), Cb(c, e, qb, b)));
      }

      a.c = null;
    } else nb(a, qb, b);
  }

  function zb(a, b) {
    a.b || a.a != ob && a.a != qb || Db(a);
    a.f ? a.f.next = b : a.b = b;
    a.f = b;
  }

  function yb(a, b, c, d) {
    var e = tb(null, null, null);
    e.a = new A(function (a, h) {
      e.g = b ? function (c) {
        try {
          var e = b.call(d, c);
          a(e);
        } catch (x) {
          h(x);
        }
      } : a;
      e.b = c ? function (b) {
        try {
          var e = c.call(d, b);
          void 0 === e && b instanceof pb ? h(b) : a(e);
        } catch (x) {
          h(x);
        }
      } : h;
    });
    e.a.c = a;
    zb(a, e);
    return e.a;
  }

  g.Pc = function (a) {
    this.a = mb;
    nb(this, ob, a);
  };

  g.Qc = function (a) {
    this.a = mb;
    nb(this, qb, a);
  };

  function nb(a, b, c) {
    a.a == mb && (a === c && (b = qb, c = new TypeError("Promise cannot resolve to itself")), a.a = 1, vb(c, a.Pc, a.Qc, a) || (a.i = c, a.a = b, a.c = null, Db(a), b != qb || c instanceof pb || Eb(a, c)));
  }

  function vb(a, b, c, d) {
    if (a instanceof A) return zb(a, tb(b || ea, c || null, d)), !0;
    if (ra(a)) return a.then(b, c, d), !0;
    if (q(a)) try {
      var e = a.then;
      if (n(e)) return Fb(a, e, b, c, d), !0;
    } catch (f) {
      return c.call(d, f), !0;
    }
    return !1;
  }

  function Fb(a, b, c, d, e) {
    function f(a) {
      m || (m = !0, d.call(e, a));
    }

    function h(a) {
      m || (m = !0, c.call(e, a));
    }

    var m = !1;

    try {
      b.call(a, h, f);
    } catch (p) {
      f(p);
    }
  }

  function Db(a) {
    a.h || (a.h = !0, hb(a.Yb, a));
  }

  function Bb(a) {
    var b = null;
    a.b && (b = a.b, a.b = b.next, b.next = null);
    a.b || (a.f = null);
    return b;
  }

  g.Yb = function () {
    for (var a; a = Bb(this);) Cb(this, a, this.a, this.i);

    this.h = !1;
  };

  function Cb(a, b, c, d) {
    if (c == qb && b.b && !b.c) for (; a && a.g; a = a.c) a.g = !1;
    if (b.a) b.a.c = null, Gb(b, c, d);else try {
      b.c ? b.g.call(b.f) : Gb(b, c, d);
    } catch (e) {
      Hb.call(null, e);
    }
    va(sb, b);
  }

  function Gb(a, b, c) {
    b == ob ? a.g.call(a.f, c) : a.b && a.b.call(a.f, c);
  }

  function Eb(a, b) {
    a.g = !0;
    hb(function () {
      a.g && Hb.call(null, b);
    });
  }

  var Hb = db;

  function pb(a) {
    u.call(this, a);
  }

  t(pb, u);
  pb.prototype.name = "cancel";

  function Ib() {
    0 != Jb && (Kb[this[ka] || (this[ka] = ++ma)] = this);
    this.qa = this.qa;
    this.ja = this.ja;
  }

  var Jb = 0,
      Kb = {};
  Ib.prototype.qa = !1;

  function Lb(a) {
    if (!a.qa && (a.qa = !0, a.va(), 0 != Jb)) {
      var b = a[ka] || (a[ka] = ++ma);
      if (0 != Jb && a.ja && 0 < a.ja.length) throw Error(a + " did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");
      delete Kb[b];
    }
  }

  Ib.prototype.va = function () {
    if (this.ja) for (; this.ja.length;) this.ja.shift()();
  };

  function Mb(a) {
    Mb[" "](a);
    return a;
  }

  Mb[" "] = ea;

  function Nb(a, b) {
    var c = Ob;
    return Object.prototype.hasOwnProperty.call(c, a) ? c[a] : c[a] = b(a);
  }

  ;
  var Pb = z("Opera"),
      Qb = z("Trident") || z("MSIE"),
      Rb = z("Edge"),
      Sb = Rb || Qb,
      Tb = z("Gecko") && !(y(Ua.toLowerCase(), "webkit") && !z("Edge")) && !(z("Trident") || z("MSIE")) && !z("Edge"),
      Ub = y(Ua.toLowerCase(), "webkit") && !z("Edge");

  function Vb() {
    var a = k.document;
    return a ? a.documentMode : void 0;
  }

  var Wb;

  a: {
    var Xb = "",
        Yb = function () {
      var a = Ua;
      if (Tb) return /rv:([^\);]+)(\)|;)/.exec(a);
      if (Rb) return /Edge\/([\d\.]+)/.exec(a);
      if (Qb) return /\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(a);
      if (Ub) return /WebKit\/(\S+)/.exec(a);
      if (Pb) return /(?:Version)[ \/]?(\S+)/.exec(a);
    }();

    Yb && (Xb = Yb ? Yb[1] : "");

    if (Qb) {
      var Zb = Vb();

      if (null != Zb && Zb > parseFloat(Xb)) {
        Wb = String(Zb);
        break a;
      }
    }

    Wb = Xb;
  }

  var Ob = {};

  function $b(a) {
    return Nb(a, function () {
      for (var b = 0, c = La(String(Wb)).split("."), d = La(String(a)).split("."), e = Math.max(c.length, d.length), f = 0; 0 == b && f < e; f++) {
        var h = c[f] || "",
            m = d[f] || "";

        do {
          h = /(\d*)(\D*)(.*)/.exec(h) || ["", "", "", ""];
          m = /(\d*)(\D*)(.*)/.exec(m) || ["", "", "", ""];
          if (0 == h[0].length && 0 == m[0].length) break;
          b = Ta(0 == h[1].length ? 0 : parseInt(h[1], 10), 0 == m[1].length ? 0 : parseInt(m[1], 10)) || Ta(0 == h[2].length, 0 == m[2].length) || Ta(h[2], m[2]);
          h = h[3];
          m = m[3];
        } while (0 == b);
      }

      return 0 <= b;
    });
  }

  var ac;
  var bc = k.document;
  ac = bc && Qb ? Vb() || ("CSS1Compat" == bc.compatMode ? parseInt(Wb, 10) : 5) : void 0;

  var cc = Object.freeze || function (a) {
    return a;
  };

  var dc = !Qb || 9 <= Number(ac),
      ec = Qb && !$b("9"),
      fc = function () {
    if (!k.addEventListener || !Object.defineProperty) return !1;
    var a = !1,
        b = Object.defineProperty({}, "passive", {
      get: function () {
        a = !0;
      }
    });

    try {
      k.addEventListener("test", ea, b), k.removeEventListener("test", ea, b);
    } catch (c) {}

    return a;
  }();

  function D(a, b) {
    this.type = a;
    this.b = this.target = b;
    this.Kb = !0;
  }

  D.prototype.preventDefault = function () {
    this.Kb = !1;
  };

  function gc(a, b) {
    D.call(this, a ? a.type : "");
    this.relatedTarget = this.b = this.target = null;
    this.button = this.screenY = this.screenX = this.clientY = this.clientX = 0;
    this.key = "";
    this.metaKey = this.shiftKey = this.altKey = this.ctrlKey = !1;
    this.pointerId = 0;
    this.pointerType = "";
    this.a = null;

    if (a) {
      var c = this.type = a.type,
          d = a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : null;
      this.target = a.target || a.srcElement;
      this.b = b;

      if (b = a.relatedTarget) {
        if (Tb) {
          a: {
            try {
              Mb(b.nodeName);
              var e = !0;
              break a;
            } catch (f) {}

            e = !1;
          }

          e || (b = null);
        }
      } else "mouseover" == c ? b = a.fromElement : "mouseout" == c && (b = a.toElement);

      this.relatedTarget = b;
      d ? (this.clientX = void 0 !== d.clientX ? d.clientX : d.pageX, this.clientY = void 0 !== d.clientY ? d.clientY : d.pageY, this.screenX = d.screenX || 0, this.screenY = d.screenY || 0) : (this.clientX = void 0 !== a.clientX ? a.clientX : a.pageX, this.clientY = void 0 !== a.clientY ? a.clientY : a.pageY, this.screenX = a.screenX || 0, this.screenY = a.screenY || 0);
      this.button = a.button;
      this.key = a.key || "";
      this.ctrlKey = a.ctrlKey;
      this.altKey = a.altKey;
      this.shiftKey = a.shiftKey;
      this.metaKey = a.metaKey;
      this.pointerId = a.pointerId || 0;
      this.pointerType = l(a.pointerType) ? a.pointerType : hc[a.pointerType] || "";
      this.a = a;
      a.defaultPrevented && this.preventDefault();
    }
  }

  t(gc, D);
  var hc = cc({
    2: "touch",
    3: "pen",
    4: "mouse"
  });

  gc.prototype.preventDefault = function () {
    gc.pb.preventDefault.call(this);
    var a = this.a;
    if (a.preventDefault) a.preventDefault();else if (a.returnValue = !1, ec) try {
      if (a.ctrlKey || 112 <= a.keyCode && 123 >= a.keyCode) a.keyCode = -1;
    } catch (b) {}
  };

  gc.prototype.f = function () {
    return this.a;
  };

  var ic = "closure_listenable_" + (1E6 * Math.random() | 0),
      jc = 0;

  function kc(a, b, c, d, e) {
    this.listener = a;
    this.proxy = null;
    this.src = b;
    this.type = c;
    this.capture = !!d;
    this.Ma = e;
    this.key = ++jc;
    this.oa = this.Ia = !1;
  }

  function lc(a) {
    a.oa = !0;
    a.listener = null;
    a.proxy = null;
    a.src = null;
    a.Ma = null;
  }

  ;

  function mc(a) {
    this.src = a;
    this.a = {};
    this.b = 0;
  }

  mc.prototype.add = function (a, b, c, d, e) {
    var f = a.toString();
    a = this.a[f];
    a || (a = this.a[f] = [], this.b++);
    var h = nc(a, b, d, e);
    -1 < h ? (b = a[h], c || (b.Ia = !1)) : (b = new kc(b, this.src, f, !!d, e), b.Ia = c, a.push(b));
    return b;
  };

  function oc(a, b) {
    var c = b.type;
    c in a.a && Ia(a.a[c], b) && (lc(b), 0 == a.a[c].length && (delete a.a[c], a.b--));
  }

  function nc(a, b, c, d) {
    for (var e = 0; e < a.length; ++e) {
      var f = a[e];
      if (!f.oa && f.listener == b && f.capture == !!c && f.Ma == d) return e;
    }

    return -1;
  }

  ;
  var pc = "closure_lm_" + (1E6 * Math.random() | 0),
      qc = {},
      rc = 0;

  function sc(a, b, c, d, e) {
    if (d && d.once) tc(a, b, c, d, e);else if (ia(b)) for (var f = 0; f < b.length; f++) sc(a, b[f], c, d, e);else c = uc(c), a && a[ic] ? vc(a, b, c, q(d) ? !!d.capture : !!d, e) : wc(a, b, c, !1, d, e);
  }

  function wc(a, b, c, d, e, f) {
    if (!b) throw Error("Invalid event type");
    var h = q(e) ? !!e.capture : !!e,
        m = xc(a);
    m || (a[pc] = m = new mc(a));
    c = m.add(b, c, d, h, f);

    if (!c.proxy) {
      d = yc();
      c.proxy = d;
      d.src = a;
      d.listener = c;
      if (a.addEventListener) fc || (e = h), void 0 === e && (e = !1), a.addEventListener(b.toString(), d, e);else if (a.attachEvent) a.attachEvent(zc(b.toString()), d);else if (a.addListener && a.removeListener) a.addListener(d);else throw Error("addEventListener and attachEvent are unavailable.");
      rc++;
    }
  }

  function yc() {
    var a = Ac,
        b = dc ? function (c) {
      return a.call(b.src, b.listener, c);
    } : function (c) {
      c = a.call(b.src, b.listener, c);
      if (!c) return c;
    };
    return b;
  }

  function tc(a, b, c, d, e) {
    if (ia(b)) for (var f = 0; f < b.length; f++) tc(a, b[f], c, d, e);else c = uc(c), a && a[ic] ? Bc(a, b, c, q(d) ? !!d.capture : !!d, e) : wc(a, b, c, !0, d, e);
  }

  function E(a, b, c, d, e) {
    if (ia(b)) for (var f = 0; f < b.length; f++) E(a, b[f], c, d, e);else (d = q(d) ? !!d.capture : !!d, c = uc(c), a && a[ic]) ? (a = a.o, b = String(b).toString(), b in a.a && (f = a.a[b], c = nc(f, c, d, e), -1 < c && (lc(f[c]), Array.prototype.splice.call(f, c, 1), 0 == f.length && (delete a.a[b], a.b--)))) : a && (a = xc(a)) && (b = a.a[b.toString()], a = -1, b && (a = nc(b, c, d, e)), (c = -1 < a ? b[a] : null) && Cc(c));
  }

  function Cc(a) {
    if ("number" != typeof a && a && !a.oa) {
      var b = a.src;
      if (b && b[ic]) oc(b.o, a);else {
        var c = a.type,
            d = a.proxy;
        b.removeEventListener ? b.removeEventListener(c, d, a.capture) : b.detachEvent ? b.detachEvent(zc(c), d) : b.addListener && b.removeListener && b.removeListener(d);
        rc--;
        (c = xc(b)) ? (oc(c, a), 0 == c.b && (c.src = null, b[pc] = null)) : lc(a);
      }
    }
  }

  function zc(a) {
    return a in qc ? qc[a] : qc[a] = "on" + a;
  }

  function Dc(a, b, c, d) {
    var e = !0;
    if (a = xc(a)) if (b = a.a[b.toString()]) for (b = b.concat(), a = 0; a < b.length; a++) {
      var f = b[a];
      f && f.capture == c && !f.oa && (f = Ec(f, d), e = e && !1 !== f);
    }
    return e;
  }

  function Ec(a, b) {
    var c = a.listener,
        d = a.Ma || a.src;
    a.Ia && Cc(a);
    return c.call(d, b);
  }

  function Ac(a, b) {
    if (a.oa) return !0;

    if (!dc) {
      if (!b) a: {
        b = ["window", "event"];

        for (var c = k, d = 0; d < b.length; d++) if (c = c[b[d]], null == c) {
          b = null;
          break a;
        }

        b = c;
      }
      d = b;
      b = new gc(d, this);
      c = !0;

      if (!(0 > d.keyCode || void 0 != d.returnValue)) {
        a: {
          var e = !1;
          if (0 == d.keyCode) try {
            d.keyCode = -1;
            break a;
          } catch (h) {
            e = !0;
          }
          if (e || void 0 == d.returnValue) d.returnValue = !0;
        }

        d = [];

        for (e = b.b; e; e = e.parentNode) d.push(e);

        a = a.type;

        for (e = d.length - 1; 0 <= e; e--) {
          b.b = d[e];
          var f = Dc(d[e], a, !0, b);
          c = c && f;
        }

        for (e = 0; e < d.length; e++) b.b = d[e], f = Dc(d[e], a, !1, b), c = c && f;
      }

      return c;
    }

    return Ec(a, new gc(b, this));
  }

  function xc(a) {
    a = a[pc];
    return a instanceof mc ? a : null;
  }

  var Fc = "__closure_events_fn_" + (1E9 * Math.random() >>> 0);

  function uc(a) {
    if (n(a)) return a;
    a[Fc] || (a[Fc] = function (b) {
      return a.handleEvent(b);
    });
    return a[Fc];
  }

  ;

  function F() {
    Ib.call(this);
    this.o = new mc(this);
    this.Rb = this;
    this.Wa = null;
  }

  t(F, Ib);
  F.prototype[ic] = !0;

  F.prototype.addEventListener = function (a, b, c, d) {
    sc(this, a, b, c, d);
  };

  F.prototype.removeEventListener = function (a, b, c, d) {
    E(this, a, b, c, d);
  };

  F.prototype.dispatchEvent = function (a) {
    var b,
        c = this.Wa;
    if (c) for (b = []; c; c = c.Wa) b.push(c);
    c = this.Rb;
    var d = a.type || a;
    if (l(a)) a = new D(a, c);else if (a instanceof D) a.target = a.target || c;else {
      var e = a;
      a = new D(d, c);
      ab(a, e);
    }
    e = !0;
    if (b) for (var f = b.length - 1; 0 <= f; f--) {
      var h = a.b = b[f];
      e = Gc(h, d, !0, a) && e;
    }
    h = a.b = c;
    e = Gc(h, d, !0, a) && e;
    e = Gc(h, d, !1, a) && e;
    if (b) for (f = 0; f < b.length; f++) h = a.b = b[f], e = Gc(h, d, !1, a) && e;
    return e;
  };

  F.prototype.va = function () {
    F.pb.va.call(this);

    if (this.o) {
      var a = this.o,
          b = 0,
          c;

      for (c in a.a) {
        for (var d = a.a[c], e = 0; e < d.length; e++) ++b, lc(d[e]);

        delete a.a[c];
        a.b--;
      }
    }

    this.Wa = null;
  };

  function vc(a, b, c, d, e) {
    a.o.add(String(b), c, !1, d, e);
  }

  function Bc(a, b, c, d, e) {
    a.o.add(String(b), c, !0, d, e);
  }

  function Gc(a, b, c, d) {
    b = a.o.a[String(b)];
    if (!b) return !0;
    b = b.concat();

    for (var e = !0, f = 0; f < b.length; ++f) {
      var h = b[f];

      if (h && !h.oa && h.capture == c) {
        var m = h.listener,
            p = h.Ma || h.src;
        h.Ia && oc(a.o, h);
        e = !1 !== m.call(p, d) && e;
      }
    }

    return e && 0 != d.Kb;
  }

  ;

  function Hc(a, b, c) {
    if (n(a)) c && (a = r(a, c));else if (a && "function" == typeof a.handleEvent) a = r(a.handleEvent, a);else throw Error("Invalid listener argument");
    return 2147483647 < Number(b) ? -1 : k.setTimeout(a, b || 0);
  }

  function Ic(a) {
    var b = null;
    return new A(function (c, d) {
      b = Hc(function () {
        c(void 0);
      }, a);
      -1 == b && d(Error("Failed to schedule timer."));
    }).s(function (a) {
      k.clearTimeout(b);
      throw a;
    });
  }

  ;

  function Jc(a) {
    if (a.S && "function" == typeof a.S) return a.S();
    if (l(a)) return a.split("");

    if (ja(a)) {
      for (var b = [], c = a.length, d = 0; d < c; d++) b.push(a[d]);

      return b;
    }

    b = [];
    c = 0;

    for (d in a) b[c++] = a[d];

    return b;
  }

  function Kc(a) {
    if (a.U && "function" == typeof a.U) return a.U();

    if (!a.S || "function" != typeof a.S) {
      if (ja(a) || l(a)) {
        var b = [];
        a = a.length;

        for (var c = 0; c < a; c++) b.push(c);

        return b;
      }

      b = [];
      c = 0;

      for (var d in a) b[c++] = d;

      return b;
    }
  }

  function Lc(a, b) {
    if (a.forEach && "function" == typeof a.forEach) a.forEach(b, void 0);else if (ja(a) || l(a)) v(a, b, void 0);else for (var c = Kc(a), d = Jc(a), e = d.length, f = 0; f < e; f++) b.call(void 0, d[f], c && c[f], a);
  }

  ;

  function Mc(a, b) {
    this.b = {};
    this.a = [];
    this.c = 0;
    var c = arguments.length;

    if (1 < c) {
      if (c % 2) throw Error("Uneven number of arguments");

      for (var d = 0; d < c; d += 2) this.set(arguments[d], arguments[d + 1]);
    } else if (a) if (a instanceof Mc) for (c = a.U(), d = 0; d < c.length; d++) this.set(c[d], a.get(c[d]));else for (d in a) this.set(d, a[d]);
  }

  g = Mc.prototype;

  g.S = function () {
    Nc(this);

    for (var a = [], b = 0; b < this.a.length; b++) a.push(this.b[this.a[b]]);

    return a;
  };

  g.U = function () {
    Nc(this);
    return this.a.concat();
  };

  g.clear = function () {
    this.b = {};
    this.c = this.a.length = 0;
  };

  function Nc(a) {
    if (a.c != a.a.length) {
      for (var b = 0, c = 0; b < a.a.length;) {
        var d = a.a[b];
        Oc(a.b, d) && (a.a[c++] = d);
        b++;
      }

      a.a.length = c;
    }

    if (a.c != a.a.length) {
      var e = {};

      for (c = b = 0; b < a.a.length;) d = a.a[b], Oc(e, d) || (a.a[c++] = d, e[d] = 1), b++;

      a.a.length = c;
    }
  }

  g.get = function (a, b) {
    return Oc(this.b, a) ? this.b[a] : b;
  };

  g.set = function (a, b) {
    Oc(this.b, a) || (this.c++, this.a.push(a));
    this.b[a] = b;
  };

  g.forEach = function (a, b) {
    for (var c = this.U(), d = 0; d < c.length; d++) {
      var e = c[d],
          f = this.get(e);
      a.call(b, f, e, this);
    }
  };

  function Oc(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
  }

  ;
  var Pc = /^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;

  function Qc(a, b) {
    if (a) {
      a = a.split("&");

      for (var c = 0; c < a.length; c++) {
        var d = a[c].indexOf("="),
            e = null;

        if (0 <= d) {
          var f = a[c].substring(0, d);
          e = a[c].substring(d + 1);
        } else f = a[c];

        b(f, e ? decodeURIComponent(e.replace(/\+/g, " ")) : "");
      }
    }
  }

  ;

  function Rc(a, b) {
    this.b = this.o = this.c = "";
    this.i = null;
    this.h = this.g = "";
    this.f = !1;

    if (a instanceof Rc) {
      this.f = void 0 !== b ? b : a.f;
      Sc(this, a.c);
      this.o = a.o;
      this.b = a.b;
      Tc(this, a.i);
      this.g = a.g;
      b = a.a;
      var c = new Uc();
      c.c = b.c;
      b.a && (c.a = new Mc(b.a), c.b = b.b);
      Vc(this, c);
      this.h = a.h;
    } else a && (c = String(a).match(Pc)) ? (this.f = !!b, Sc(this, c[1] || "", !0), this.o = Wc(c[2] || ""), this.b = Wc(c[3] || "", !0), Tc(this, c[4]), this.g = Wc(c[5] || "", !0), Vc(this, c[6] || "", !0), this.h = Wc(c[7] || "")) : (this.f = !!b, this.a = new Uc(null, this.f));
  }

  Rc.prototype.toString = function () {
    var a = [],
        b = this.c;
    b && a.push(Xc(b, Yc, !0), ":");
    var c = this.b;
    if (c || "file" == b) a.push("//"), (b = this.o) && a.push(Xc(b, Yc, !0), "@"), a.push(encodeURIComponent(String(c)).replace(/%25([0-9a-fA-F]{2})/g, "%$1")), c = this.i, null != c && a.push(":", String(c));
    if (c = this.g) this.b && "/" != c.charAt(0) && a.push("/"), a.push(Xc(c, "/" == c.charAt(0) ? Zc : $c, !0));
    (c = this.a.toString()) && a.push("?", c);
    (c = this.h) && a.push("#", Xc(c, ad));
    return a.join("");
  };

  function Sc(a, b, c) {
    a.c = c ? Wc(b, !0) : b;
    a.c && (a.c = a.c.replace(/:$/, ""));
  }

  function Tc(a, b) {
    if (b) {
      b = Number(b);
      if (isNaN(b) || 0 > b) throw Error("Bad port number " + b);
      a.i = b;
    } else a.i = null;
  }

  function Vc(a, b, c) {
    b instanceof Uc ? (a.a = b, bd(a.a, a.f)) : (c || (b = Xc(b, cd)), a.a = new Uc(b, a.f));
  }

  function G(a, b, c) {
    a.a.set(b, c);
  }

  function dd(a, b) {
    return a.a.get(b);
  }

  function ed(a) {
    return a instanceof Rc ? new Rc(a) : new Rc(a, void 0);
  }

  function fd(a, b) {
    var c = new Rc(null, void 0);
    Sc(c, "https");
    a && (c.b = a);
    b && (c.g = b);
    return c;
  }

  function Wc(a, b) {
    return a ? b ? decodeURI(a.replace(/%25/g, "%2525")) : decodeURIComponent(a) : "";
  }

  function Xc(a, b, c) {
    return l(a) ? (a = encodeURI(a).replace(b, gd), c && (a = a.replace(/%25([0-9a-fA-F]{2})/g, "%$1")), a) : null;
  }

  function gd(a) {
    a = a.charCodeAt(0);
    return "%" + (a >> 4 & 15).toString(16) + (a & 15).toString(16);
  }

  var Yc = /[#\/\?@]/g,
      $c = /[#\?:]/g,
      Zc = /[#\?]/g,
      cd = /[#\?@]/g,
      ad = /#/g;

  function Uc(a, b) {
    this.b = this.a = null;
    this.c = a || null;
    this.f = !!b;
  }

  function hd(a) {
    a.a || (a.a = new Mc(), a.b = 0, a.c && Qc(a.c, function (b, c) {
      a.add(decodeURIComponent(b.replace(/\+/g, " ")), c);
    }));
  }

  function id(a) {
    var b = Kc(a);
    if ("undefined" == typeof b) throw Error("Keys are undefined");
    var c = new Uc(null, void 0);
    a = Jc(a);

    for (var d = 0; d < b.length; d++) {
      var e = b[d],
          f = a[d];
      ia(f) ? jd(c, e, f) : c.add(e, f);
    }

    return c;
  }

  g = Uc.prototype;

  g.add = function (a, b) {
    hd(this);
    this.c = null;
    a = kd(this, a);
    var c = this.a.get(a);
    c || this.a.set(a, c = []);
    c.push(b);
    this.b += 1;
    return this;
  };

  function ld(a, b) {
    hd(a);
    b = kd(a, b);
    Oc(a.a.b, b) && (a.c = null, a.b -= a.a.get(b).length, a = a.a, Oc(a.b, b) && (delete a.b[b], a.c--, a.a.length > 2 * a.c && Nc(a)));
  }

  g.clear = function () {
    this.a = this.c = null;
    this.b = 0;
  };

  function md(a, b) {
    hd(a);
    b = kd(a, b);
    return Oc(a.a.b, b);
  }

  g.forEach = function (a, b) {
    hd(this);
    this.a.forEach(function (c, d) {
      v(c, function (c) {
        a.call(b, c, d, this);
      }, this);
    }, this);
  };

  g.U = function () {
    hd(this);

    for (var a = this.a.S(), b = this.a.U(), c = [], d = 0; d < b.length; d++) for (var e = a[d], f = 0; f < e.length; f++) c.push(b[d]);

    return c;
  };

  g.S = function (a) {
    hd(this);
    var b = [];
    if (l(a)) md(this, a) && (b = Ja(b, this.a.get(kd(this, a))));else {
      a = this.a.S();

      for (var c = 0; c < a.length; c++) b = Ja(b, a[c]);
    }
    return b;
  };

  g.set = function (a, b) {
    hd(this);
    this.c = null;
    a = kd(this, a);
    md(this, a) && (this.b -= this.a.get(a).length);
    this.a.set(a, [b]);
    this.b += 1;
    return this;
  };

  g.get = function (a, b) {
    if (!a) return b;
    a = this.S(a);
    return 0 < a.length ? String(a[0]) : b;
  };

  function jd(a, b, c) {
    ld(a, b);
    0 < c.length && (a.c = null, a.a.set(kd(a, b), Ka(c)), a.b += c.length);
  }

  g.toString = function () {
    if (this.c) return this.c;
    if (!this.a) return "";

    for (var a = [], b = this.a.U(), c = 0; c < b.length; c++) {
      var d = b[c],
          e = encodeURIComponent(String(d));
      d = this.S(d);

      for (var f = 0; f < d.length; f++) {
        var h = e;
        "" !== d[f] && (h += "=" + encodeURIComponent(String(d[f])));
        a.push(h);
      }
    }

    return this.c = a.join("&");
  };

  function kd(a, b) {
    b = String(b);
    a.f && (b = b.toLowerCase());
    return b;
  }

  function bd(a, b) {
    b && !a.f && (hd(a), a.c = null, a.a.forEach(function (a, b) {
      var c = b.toLowerCase();
      b != c && (ld(this, b), jd(this, c, a));
    }, a));
    a.f = b;
  }

  ;
  var nd = !Qb || 9 <= Number(ac);

  function od(a, b) {
    this.a = a === pd && b || "";
    this.b = qd;
  }

  od.prototype.na = !0;

  od.prototype.ma = function () {
    return this.a;
  };

  od.prototype.toString = function () {
    return "Const{" + this.a + "}";
  };

  function rd(a) {
    if (a instanceof od && a.constructor === od && a.b === qd) return a.a;
    ta("expected object of type Const, got '" + a + "'");
    return "type_error:Const";
  }

  var qd = {},
      pd = {};

  function sd() {
    this.a = "";
    this.b = td;
  }

  sd.prototype.na = !0;

  sd.prototype.ma = function () {
    return this.a;
  };

  sd.prototype.toString = function () {
    return "TrustedResourceUrl{" + this.a + "}";
  };

  function ud(a) {
    if (a instanceof sd && a.constructor === sd && a.b === td) return a.a;
    ta("expected object of type TrustedResourceUrl, got '" + a + "' of type " + fa(a));
    return "type_error:TrustedResourceUrl";
  }

  function vd(a, b) {
    var c = rd(a);
    if (!wd.test(c)) throw Error("Invalid TrustedResourceUrl format: " + c);
    a = c.replace(xd, function (a, e) {
      if (!Object.prototype.hasOwnProperty.call(b, e)) throw Error('Found marker, "' + e + '", in format string, "' + c + '", but no valid label mapping found in args: ' + JSON.stringify(b));
      a = b[e];
      return a instanceof od ? rd(a) : encodeURIComponent(String(a));
    });
    return yd(a);
  }

  var xd = /%{(\w+)}/g,
      wd = /^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,
      td = {};

  function yd(a) {
    var b = new sd();
    b.a = a;
    return b;
  }

  ;

  function zd() {
    this.a = "";
    this.b = Ad;
  }

  zd.prototype.na = !0;

  zd.prototype.ma = function () {
    return this.a;
  };

  zd.prototype.toString = function () {
    return "SafeUrl{" + this.a + "}";
  };

  function Bd(a) {
    if (a instanceof zd && a.constructor === zd && a.b === Ad) return a.a;
    ta("expected object of type SafeUrl, got '" + a + "' of type " + fa(a));
    return "type_error:SafeUrl";
  }

  var Cd = /^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;

  function Dd(a) {
    if (a instanceof zd) return a;
    a = "object" == typeof a && a.na ? a.ma() : String(a);
    Cd.test(a) || (a = "about:invalid#zClosurez");
    return Ed(a);
  }

  var Ad = {};

  function Ed(a) {
    var b = new zd();
    b.a = a;
    return b;
  }

  Ed("about:blank");

  function Fd() {
    this.a = "";
    this.b = Gd;
  }

  Fd.prototype.na = !0;

  Fd.prototype.ma = function () {
    return this.a;
  };

  Fd.prototype.toString = function () {
    return "SafeHtml{" + this.a + "}";
  };

  function Hd(a) {
    if (a instanceof Fd && a.constructor === Fd && a.b === Gd) return a.a;
    ta("expected object of type SafeHtml, got '" + a + "' of type " + fa(a));
    return "type_error:SafeHtml";
  }

  var Gd = {};

  function Id(a) {
    var b = new Fd();
    b.a = a;
    return b;
  }

  Id("<!DOCTYPE html>");
  Id("");
  Id("<br>");

  function Jd(a, b) {
    a.src = ud(b);
    if (null === da) b: {
      b = k.document;

      if ((b = b.querySelector && b.querySelector("script[nonce]")) && (b = b.nonce || b.getAttribute("nonce")) && ca.test(b)) {
        da = b;
        break b;
      }

      da = "";
    }
    b = da;
    b && a.setAttribute("nonce", b);
  }

  ;

  function Kd(a) {
    var b = document;
    return l(a) ? b.getElementById(a) : a;
  }

  function Ld(a, b) {
    Xa(b, function (b, d) {
      b && "object" == typeof b && b.na && (b = b.ma());
      "style" == d ? a.style.cssText = b : "class" == d ? a.className = b : "for" == d ? a.htmlFor = b : Md.hasOwnProperty(d) ? a.setAttribute(Md[d], b) : 0 == d.lastIndexOf("aria-", 0) || 0 == d.lastIndexOf("data-", 0) ? a.setAttribute(d, b) : a[d] = b;
    });
  }

  var Md = {
    cellpadding: "cellPadding",
    cellspacing: "cellSpacing",
    colspan: "colSpan",
    frameborder: "frameBorder",
    height: "height",
    maxlength: "maxLength",
    nonce: "nonce",
    role: "role",
    rowspan: "rowSpan",
    type: "type",
    usemap: "useMap",
    valign: "vAlign",
    width: "width"
  };

  function Nd(a, b, c) {
    var d = arguments,
        e = document,
        f = String(d[0]),
        h = d[1];

    if (!nd && h && (h.name || h.type)) {
      f = ["<", f];
      h.name && f.push(' name="', cb(h.name), '"');

      if (h.type) {
        f.push(' type="', cb(h.type), '"');
        var m = {};
        ab(m, h);
        delete m.type;
        h = m;
      }

      f.push(">");
      f = f.join("");
    }

    f = e.createElement(f);
    h && (l(h) ? f.className = h : ia(h) ? f.className = h.join(" ") : Ld(f, h));
    2 < d.length && Od(e, f, d);
    return f;
  }

  function Od(a, b, c) {
    function d(c) {
      c && b.appendChild(l(c) ? a.createTextNode(c) : c);
    }

    for (var e = 2; e < c.length; e++) {
      var f = c[e];
      !ja(f) || q(f) && 0 < f.nodeType ? d(f) : v(Pd(f) ? Ka(f) : f, d);
    }
  }

  function Pd(a) {
    if (a && "number" == typeof a.length) {
      if (q(a)) return "function" == typeof a.item || "string" == typeof a.item;
      if (n(a)) return "function" == typeof a.item;
    }

    return !1;
  }

  ;

  function Qd(a) {
    var b = [];
    Rd(new Sd(), a, b);
    return b.join("");
  }

  function Sd() {}

  function Rd(a, b, c) {
    if (null == b) c.push("null");else {
      if ("object" == typeof b) {
        if (ia(b)) {
          var d = b;
          b = d.length;
          c.push("[");

          for (var e = "", f = 0; f < b; f++) c.push(e), Rd(a, d[f], c), e = ",";

          c.push("]");
          return;
        }

        if (b instanceof String || b instanceof Number || b instanceof Boolean) b = b.valueOf();else {
          c.push("{");
          e = "";

          for (d in b) Object.prototype.hasOwnProperty.call(b, d) && (f = b[d], "function" != typeof f && (c.push(e), Td(d, c), c.push(":"), Rd(a, f, c), e = ","));

          c.push("}");
          return;
        }
      }

      switch (typeof b) {
        case "string":
          Td(b, c);
          break;

        case "number":
          c.push(isFinite(b) && !isNaN(b) ? String(b) : "null");
          break;

        case "boolean":
          c.push(String(b));
          break;

        case "function":
          c.push("null");
          break;

        default:
          throw Error("Unknown type: " + typeof b);
      }
    }
  }

  var Ud = {
    '"': '\\"',
    "\\": "\\\\",
    "/": "\\/",
    "\b": "\\b",
    "\f": "\\f",
    "\n": "\\n",
    "\r": "\\r",
    "\t": "\\t",
    "\x0B": "\\u000b"
  },
      Vd = /\uffff/.test("\uffff") ? /[\\"\x00-\x1f\x7f-\uffff]/g : /[\\"\x00-\x1f\x7f-\xff]/g;

  function Td(a, b) {
    b.push('"', a.replace(Vd, function (a) {
      var b = Ud[a];
      b || (b = "\\u" + (a.charCodeAt(0) | 65536).toString(16).substr(1), Ud[a] = b);
      return b;
    }), '"');
  }

  ;
  /*
  Copyright 2017 Google Inc.
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */

  function Wd() {
    var a = H();
    return Qb && !!ac && 11 == ac || /Edge\/\d+/.test(a);
  }

  function Xd() {
    return k.window && k.window.location.href || self && self.location && self.location.href || "";
  }

  function Yd(a, b) {
    b = b || k.window;
    var c = "about:blank";
    a && (c = Bd(Dd(a)));
    b.location.href = c;
  }

  function Zd(a, b) {
    var c = [],
        d;

    for (d in a) d in b ? typeof a[d] != typeof b[d] ? c.push(d) : "object" == typeof a[d] && null != a[d] && null != b[d] ? 0 < Zd(a[d], b[d]).length && c.push(d) : a[d] !== b[d] && c.push(d) : c.push(d);

    for (d in b) d in a || c.push(d);

    return c;
  }

  function $d() {
    var a = H();
    a = ae(a) != be ? null : (a = a.match(/\sChrome\/(\d+)/i)) && 2 == a.length ? parseInt(a[1], 10) : null;
    return a && 30 > a ? !1 : !Qb || !ac || 9 < ac;
  }

  function ce(a) {
    a = (a || H()).toLowerCase();
    return a.match(/android/) || a.match(/webos/) || a.match(/iphone|ipad|ipod/) || a.match(/blackberry/) || a.match(/windows phone/) || a.match(/iemobile/) ? !0 : !1;
  }

  function de(a) {
    a = a || k.window;

    try {
      a.close();
    } catch (b) {}
  }

  function ee(a, b, c) {
    var d = Math.floor(1E9 * Math.random()).toString();
    b = b || 500;
    c = c || 600;
    var e = (window.screen.availHeight - c) / 2,
        f = (window.screen.availWidth - b) / 2;
    b = {
      width: b,
      height: c,
      top: 0 < e ? e : 0,
      left: 0 < f ? f : 0,
      location: !0,
      resizable: !0,
      statusbar: !0,
      toolbar: !1
    };
    c = H().toLowerCase();
    d && (b.target = d, y(c, "crios/") && (b.target = "_blank"));
    ae(H()) == fe && (a = a || "http://localhost", b.scrollbars = !0);
    c = a || "";
    (a = b) || (a = {});
    d = window;
    b = c instanceof zd ? c : Dd("undefined" != typeof c.href ? c.href : String(c));
    c = a.target || c.target;
    e = [];

    for (h in a) switch (h) {
      case "width":
      case "height":
      case "top":
      case "left":
        e.push(h + "=" + a[h]);
        break;

      case "target":
      case "noopener":
      case "noreferrer":
        break;

      default:
        e.push(h + "=" + (a[h] ? 1 : 0));
    }

    var h = e.join(",");
    (z("iPhone") && !z("iPod") && !z("iPad") || z("iPad") || z("iPod")) && d.navigator && d.navigator.standalone && c && "_self" != c ? (h = d.document.createElement("A"), b instanceof zd || b instanceof zd || (b = "object" == typeof b && b.na ? b.ma() : String(b), Cd.test(b) || (b = "about:invalid#zClosurez"), b = Ed(b)), h.href = Bd(b), h.setAttribute("target", c), a.noreferrer && h.setAttribute("rel", "noreferrer"), a = document.createEvent("MouseEvent"), a.initMouseEvent("click", !0, !0, d, 1), h.dispatchEvent(a), h = {}) : a.noreferrer ? (h = d.open("", c, h), a = Bd(b), h && (Sb && y(a, ";") && (a = "'" + a.replace(/'/g, "%27") + "'"), h.opener = null, a = Id('<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url=' + cb(a) + '">'), h.document.write(Hd(a)), h.document.close())) : (h = d.open(Bd(b), c, h)) && a.noopener && (h.opener = null);
    if (h) try {
      h.focus();
    } catch (m) {}
    return h;
  }

  function ge(a) {
    return new A(function (b) {
      function c() {
        Ic(2E3).then(function () {
          if (!a || a.closed) b();else return c();
        });
      }

      return c();
    });
  }

  var he = /^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,
      ie = /^[^@]+@[^@]+$/;

  function je() {
    var a = null;
    return new A(function (b) {
      "complete" == k.document.readyState ? b() : (a = function () {
        b();
      }, tc(window, "load", a));
    }).s(function (b) {
      E(window, "load", a);
      throw b;
    });
  }

  function ke() {
    return le(void 0) ? je().then(function () {
      return new A(function (a, b) {
        var c = k.document,
            d = setTimeout(function () {
          b(Error("Cordova framework is not ready."));
        }, 1E3);
        c.addEventListener("deviceready", function () {
          clearTimeout(d);
          a();
        }, !1);
      });
    }) : C(Error("Cordova must run in an Android or iOS file scheme."));
  }

  function le(a) {
    a = a || H();
    return !("file:" !== me() || !a.toLowerCase().match(/iphone|ipad|ipod|android/));
  }

  function ne() {
    var a = k.window;

    try {
      return !(!a || a == a.top);
    } catch (b) {
      return !1;
    }
  }

  function oe() {
    return "object" !== typeof k.window && "function" === typeof k.importScripts;
  }

  function pe() {
    return _app.default.INTERNAL.hasOwnProperty("reactNative") ? "ReactNative" : _app.default.INTERNAL.hasOwnProperty("node") ? "Node" : oe() ? "Worker" : "Browser";
  }

  function qe() {
    var a = pe();
    return "ReactNative" === a || "Node" === a;
  }

  function re() {
    for (var a = 50, b = []; 0 < a;) b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;

    return b.join("");
  }

  var fe = "Firefox",
      be = "Chrome";

  function ae(a) {
    var b = a.toLowerCase();
    if (y(b, "opera/") || y(b, "opr/") || y(b, "opios/")) return "Opera";
    if (y(b, "iemobile")) return "IEMobile";
    if (y(b, "msie") || y(b, "trident/")) return "IE";
    if (y(b, "edge/")) return "Edge";
    if (y(b, "firefox/")) return fe;
    if (y(b, "silk/")) return "Silk";
    if (y(b, "blackberry")) return "Blackberry";
    if (y(b, "webos")) return "Webos";
    if (!y(b, "safari/") || y(b, "chrome/") || y(b, "crios/") || y(b, "android")) {
      if (!y(b, "chrome/") && !y(b, "crios/") || y(b, "edge/")) {
        if (y(b, "android")) return "Android";
        if ((a = a.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/)) && 2 == a.length) return a[1];
      } else return be;
    } else return "Safari";
    return "Other";
  }

  var se = {
    Wc: "FirebaseCore-web",
    Yc: "FirebaseUI-web"
  };

  function te(a, b) {
    b = b || [];
    var c = [],
        d = {},
        e;

    for (e in se) d[se[e]] = !0;

    for (e = 0; e < b.length; e++) "undefined" !== typeof d[b[e]] && (delete d[b[e]], c.push(b[e]));

    c.sort();
    b = c;
    b.length || (b = ["FirebaseCore-web"]);
    c = pe();
    "Browser" === c ? (d = H(), c = ae(d)) : "Worker" === c && (d = H(), c = ae(d) + "-" + c);
    return c + "/JsCore/" + a + "/" + b.join(",");
  }

  function H() {
    return k.navigator && k.navigator.userAgent || "";
  }

  function I(a, b) {
    a = a.split(".");
    b = b || k;

    for (var c = 0; c < a.length && "object" == typeof b && null != b; c++) b = b[a[c]];

    c != a.length && (b = void 0);
    return b;
  }

  function ue() {
    try {
      var a = k.localStorage,
          b = ve();
      if (a) return a.setItem(b, "1"), a.removeItem(b), Wd() ? !!k.indexedDB : !0;
    } catch (c) {
      return oe() && !!k.indexedDB;
    }

    return !1;
  }

  function we() {
    return (xe() || "chrome-extension:" === me() || le()) && !qe() && ue() && !oe();
  }

  function xe() {
    return "http:" === me() || "https:" === me();
  }

  function me() {
    return k.location && k.location.protocol || null;
  }

  function ye(a) {
    a = a || H();
    return ce(a) || ae(a) == fe ? !1 : !0;
  }

  function ze(a) {
    return "undefined" === typeof a ? null : Qd(a);
  }

  function Ae(a) {
    var b = {},
        c;

    for (c in a) a.hasOwnProperty(c) && null !== a[c] && void 0 !== a[c] && (b[c] = a[c]);

    return b;
  }

  function Be(a) {
    if (null !== a) return JSON.parse(a);
  }

  function ve(a) {
    return a ? a : Math.floor(1E9 * Math.random()).toString();
  }

  function Ce(a) {
    a = a || H();
    return "Safari" == ae(a) || a.toLowerCase().match(/iphone|ipad|ipod/) ? !1 : !0;
  }

  function De() {
    var a = k.___jsl;
    if (a && a.H) for (var b in a.H) if (a.H[b].r = a.H[b].r || [], a.H[b].L = a.H[b].L || [], a.H[b].r = a.H[b].L.concat(), a.CP) for (var c = 0; c < a.CP.length; c++) a.CP[c] = null;
  }

  function Ee(a, b) {
    if (a > b) throw Error("Short delay should be less than long delay!");
    this.a = a;
    this.c = b;
    a = H();
    b = pe();
    this.b = ce(a) || "ReactNative" === b;
  }

  Ee.prototype.get = function () {
    var a = k.navigator;
    return (a && "boolean" === typeof a.onLine && (xe() || "chrome-extension:" === me() || "undefined" !== typeof a.connection) ? a.onLine : 1) ? this.b ? this.c : this.a : Math.min(5E3, this.a);
  };

  function Fe() {
    var a = k.document;
    return a && "undefined" !== typeof a.visibilityState ? "visible" == a.visibilityState : !0;
  }

  function Ge() {
    var a = k.document,
        b = null;
    return Fe() || !a ? B() : new A(function (c) {
      b = function () {
        Fe() && (a.removeEventListener("visibilitychange", b, !1), c());
      };

      a.addEventListener("visibilitychange", b, !1);
    }).s(function (c) {
      a.removeEventListener("visibilitychange", b, !1);
      throw c;
    });
  }

  function He(a) {
    try {
      var b = new Date(parseInt(a, 10));
      if (!isNaN(b.getTime()) && !/[^0-9]/.test(a)) return b.toUTCString();
    } catch (c) {}

    return null;
  }

  function Ie() {
    return !(!I("fireauth.oauthhelper", k) && !I("fireauth.iframe", k));
  }

  function Je() {
    var a = k.navigator;
    return a && a.serviceWorker && a.serviceWorker.controller || null;
  }

  function Ke() {
    var a = k.navigator;
    return a && a.serviceWorker ? B().then(function () {
      return a.serviceWorker.ready;
    }).then(function (a) {
      return a.active || null;
    }).s(function () {
      return null;
    }) : B(null);
  }

  ;
  var Le = {};

  function Me(a) {
    Le[a] || (Le[a] = !0, "undefined" !== typeof console && "function" === typeof console.warn && console.warn(a));
  }

  ;
  var Ne;

  try {
    var Oe = {};
    Object.defineProperty(Oe, "abcd", {
      configurable: !0,
      enumerable: !0,
      value: 1
    });
    Object.defineProperty(Oe, "abcd", {
      configurable: !0,
      enumerable: !0,
      value: 2
    });
    Ne = 2 == Oe.abcd;
  } catch (a) {
    Ne = !1;
  }

  function J(a, b, c) {
    Ne ? Object.defineProperty(a, b, {
      configurable: !0,
      enumerable: !0,
      value: c
    }) : a[b] = c;
  }

  function K(a, b) {
    if (b) for (var c in b) b.hasOwnProperty(c) && J(a, c, b[c]);
  }

  function Pe(a) {
    var b = {};
    K(b, a);
    return b;
  }

  function Qe(a) {
    var b = {},
        c;

    for (c in a) a.hasOwnProperty(c) && (b[c] = a[c]);

    return b;
  }

  function Re(a, b) {
    if (!b || !b.length) return !0;
    if (!a) return !1;

    for (var c = 0; c < b.length; c++) {
      var d = a[b[c]];
      if (void 0 === d || null === d || "" === d) return !1;
    }

    return !0;
  }

  function Se(a) {
    var b = a;

    if ("object" == typeof a && null != a) {
      b = "length" in a ? [] : {};

      for (var c in a) J(b, c, Se(a[c]));
    }

    return b;
  }

  ;

  function Te(a) {
    var b = {},
        c = a[Ue],
        d = a[Ve];
    a = a[We];
    if (!a || a != Xe && !c) throw Error("Invalid provider user info!");
    b[Ye] = d || null;
    b[Ze] = c || null;
    J(this, $e, a);
    J(this, af, Se(b));
  }

  var Xe = "EMAIL_SIGNIN",
      Ue = "email",
      Ve = "newEmail",
      We = "requestType",
      Ze = "email",
      Ye = "fromEmail",
      af = "data",
      $e = "operation";

  function L(a, b) {
    this.code = bf + a;
    this.message = b || cf[a] || "";
  }

  t(L, Error);

  L.prototype.C = function () {
    return {
      code: this.code,
      message: this.message
    };
  };

  L.prototype.toJSON = function () {
    return this.C();
  };

  function df(a) {
    var b = a && a.code;
    return b ? new L(b.substring(bf.length), a.message) : null;
  }

  var bf = "auth/",
      cf = {
    "argument-error": "",
    "app-not-authorized": "This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.",
    "app-not-installed": "The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.",
    "captcha-check-failed": "The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.",
    "code-expired": "The SMS code has expired. Please re-send the verification code to try again.",
    "cordova-not-ready": "Cordova framework is not ready.",
    "cors-unsupported": "This browser is not supported.",
    "credential-already-in-use": "This credential is already associated with a different user account.",
    "custom-token-mismatch": "The custom token corresponds to a different audience.",
    "requires-recent-login": "This operation is sensitive and requires recent authentication. Log in again before retrying this request.",
    "dynamic-link-not-activated": "Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.",
    "email-already-in-use": "The email address is already in use by another account.",
    "expired-action-code": "The action code has expired. ",
    "cancelled-popup-request": "This operation has been cancelled due to another conflicting popup being opened.",
    "internal-error": "An internal error has occurred.",
    "invalid-app-credential": "The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.",
    "invalid-app-id": "The mobile app identifier is not registed for the current project.",
    "invalid-user-token": "This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.",
    "invalid-auth-event": "An internal error has occurred.",
    "invalid-verification-code": "The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.",
    "invalid-continue-uri": "The continue URL provided in the request is invalid.",
    "invalid-cordova-configuration": "The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.",
    "invalid-custom-token": "The custom token format is incorrect. Please check the documentation.",
    "invalid-dynamic-link-domain": "The provided dynamic link domain is not configured or authorized for the current project.",
    "invalid-email": "The email address is badly formatted.",
    "invalid-api-key": "Your API key is invalid, please check you have copied it correctly.",
    "invalid-cert-hash": "The SHA-1 certificate hash provided is invalid.",
    "invalid-credential": "The supplied auth credential is malformed or has expired.",
    "invalid-persistence-type": "The specified persistence type is invalid. It can only be local, session or none.",
    "invalid-message-payload": "The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.",
    "invalid-oauth-provider": "EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.",
    "invalid-oauth-client-id": "The OAuth client ID provided is either invalid or does not match the specified API key.",
    "unauthorized-domain": "This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.",
    "invalid-action-code": "The action code is invalid. This can happen if the code is malformed, expired, or has already been used.",
    "wrong-password": "The password is invalid or the user does not have a password.",
    "invalid-phone-number": "The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].",
    "invalid-provider-id": "The specified provider ID is invalid.",
    "invalid-recipient-email": "The email corresponding to this action failed to send as the provided recipient email address is invalid.",
    "invalid-sender": "The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.",
    "invalid-verification-id": "The verification ID used to create the phone auth credential is invalid.",
    "missing-android-pkg-name": "An Android Package Name must be provided if the Android App is required to be installed.",
    "auth-domain-config-required": "Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.",
    "missing-app-credential": "The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.",
    "missing-verification-code": "The phone auth credential was created with an empty SMS verification code.",
    "missing-continue-uri": "A continue URL must be provided in the request.",
    "missing-iframe-start": "An internal error has occurred.",
    "missing-ios-bundle-id": "An iOS Bundle ID must be provided if an App Store ID is provided.",
    "missing-or-invalid-nonce": "The OIDC ID token requires a valid unhashed nonce.",
    "missing-phone-number": "To send verification codes, provide a phone number for the recipient.",
    "missing-verification-id": "The phone auth credential was created with an empty verification ID.",
    "app-deleted": "This instance of FirebaseApp has been deleted.",
    "account-exists-with-different-credential": "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.",
    "network-request-failed": "A network error (such as timeout, interrupted connection or unreachable host) has occurred.",
    "no-auth-event": "An internal error has occurred.",
    "no-such-provider": "User was not linked to an account with the given provider.",
    "null-user": "A null user object was provided as the argument for an operation which requires a non-null user object.",
    "operation-not-allowed": "The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.",
    "operation-not-supported-in-this-environment": 'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',
    "popup-blocked": "Unable to establish a connection with the popup. It may have been blocked by the browser.",
    "popup-closed-by-user": "The popup has been closed by the user before finalizing the operation.",
    "provider-already-linked": "User can only be linked to one identity for the given provider.",
    "quota-exceeded": "The project's quota for this operation has been exceeded.",
    "redirect-cancelled-by-user": "The redirect operation has been cancelled by the user before finalizing.",
    "redirect-operation-pending": "A redirect sign-in operation is already pending.",
    "rejected-credential": "The request contains malformed or mismatching credentials.",
    timeout: "The operation has timed out.",
    "user-token-expired": "The user's credential is no longer valid. The user must sign in again.",
    "too-many-requests": "We have blocked all requests from this device due to unusual activity. Try again later.",
    "unauthorized-continue-uri": "The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.",
    "unsupported-persistence-type": "The current environment does not support the specified persistence type.",
    "user-cancelled": "User did not grant your application the permissions it requested.",
    "user-not-found": "There is no user record corresponding to this identifier. The user may have been deleted.",
    "user-disabled": "The user account has been disabled by an administrator.",
    "user-mismatch": "The supplied credentials do not correspond to the previously signed in user.",
    "user-signed-out": "",
    "weak-password": "The password must be 6 characters long or more.",
    "web-storage-unsupported": "This browser is not supported or 3rd party cookies and data may be disabled."
  };

  function ef(a) {
    var b = a[ff];
    if ("undefined" === typeof b) throw new L("missing-continue-uri");
    if ("string" !== typeof b || "string" === typeof b && !b.length) throw new L("invalid-continue-uri");
    this.h = b;
    this.b = this.a = null;
    this.g = !1;
    var c = a[gf];

    if (c && "object" === typeof c) {
      b = c[hf];
      var d = c[jf];
      c = c[kf];

      if ("string" === typeof b && b.length) {
        this.a = b;
        if ("undefined" !== typeof d && "boolean" !== typeof d) throw new L("argument-error", jf + " property must be a boolean when specified.");
        this.g = !!d;
        if ("undefined" !== typeof c && ("string" !== typeof c || "string" === typeof c && !c.length)) throw new L("argument-error", kf + " property must be a non empty string when specified.");
        this.b = c || null;
      } else {
        if ("undefined" !== typeof b) throw new L("argument-error", hf + " property must be a non empty string when specified.");
        if ("undefined" !== typeof d || "undefined" !== typeof c) throw new L("missing-android-pkg-name");
      }
    } else if ("undefined" !== typeof c) throw new L("argument-error", gf + " property must be a non null object when specified.");

    this.f = null;
    if ((b = a[lf]) && "object" === typeof b) {
      if (b = b[mf], "string" === typeof b && b.length) this.f = b;else {
        if ("undefined" !== typeof b) throw new L("argument-error", mf + " property must be a non empty string when specified.");
      }
    } else if ("undefined" !== typeof b) throw new L("argument-error", lf + " property must be a non null object when specified.");
    b = a[nf];
    if ("undefined" !== typeof b && "boolean" !== typeof b) throw new L("argument-error", nf + " property must be a boolean when specified.");
    this.c = !!b;
    a = a[of];
    if ("undefined" !== typeof a && ("string" !== typeof a || "string" === typeof a && !a.length)) throw new L("argument-error", of + " property must be a non empty string when specified.");
    this.i = a || null;
  }

  var gf = "android",
      of = "dynamicLinkDomain",
      nf = "handleCodeInApp",
      lf = "iOS",
      ff = "url",
      jf = "installApp",
      kf = "minimumVersion",
      hf = "packageName",
      mf = "bundleId";

  function pf(a) {
    var b = {};
    b.continueUrl = a.h;
    b.canHandleCodeInApp = a.c;
    if (b.androidPackageName = a.a) b.androidMinimumVersion = a.b, b.androidInstallApp = a.g;
    b.iOSBundleId = a.f;
    b.dynamicLinkDomain = a.i;

    for (var c in b) null === b[c] && delete b[c];

    return b;
  }

  ;

  function qf(a) {
    return Da(a, function (a) {
      a = a.toString(16);
      return 1 < a.length ? a : "0" + a;
    }).join("");
  }

  ;
  var rf = null,
      sf = null;

  function tf(a) {
    var b = "";
    uf(a, function (a) {
      b += String.fromCharCode(a);
    });
    return b;
  }

  function uf(a, b) {
    function c(b) {
      for (; d < a.length;) {
        var c = a.charAt(d++),
            e = sf[c];
        if (null != e) return e;
        if (!/^[\s\xa0]*$/.test(c)) throw Error("Unknown base64 encoding at char: " + c);
      }

      return b;
    }

    vf();

    for (var d = 0;;) {
      var e = c(-1),
          f = c(0),
          h = c(64),
          m = c(64);
      if (64 === m && -1 === e) break;
      b(e << 2 | f >> 4);
      64 != h && (b(f << 4 & 240 | h >> 2), 64 != m && b(h << 6 & 192 | m));
    }
  }

  function vf() {
    if (!rf) {
      rf = {};
      sf = {};

      for (var a = 0; 65 > a; a++) rf[a] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(a), sf[rf[a]] = a, 62 <= a && (sf["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(a)] = a);
    }
  }

  ;

  function wf(a) {
    this.c = a.sub;
    qa();
    this.a = a.provider_id || a.firebase && a.firebase.sign_in_provider || null;
    this.b = !!a.is_anonymous || "anonymous" == this.a;
  }

  wf.prototype.f = function () {
    return this.b;
  };

  function xf(a) {
    return (a = yf(a)) && a.sub && a.iss && a.aud && a.exp ? new wf(a) : null;
  }

  function yf(a) {
    if (!a) return null;
    a = a.split(".");
    if (3 != a.length) return null;
    a = a[1];

    for (var b = (4 - a.length % 4) % 4, c = 0; c < b; c++) a += ".";

    try {
      return JSON.parse(tf(a));
    } catch (d) {}

    return null;
  }

  ;
  var zf = {
    bd: {
      bb: "https://www.googleapis.com/identitytoolkit/v3/relyingparty/",
      jb: "https://securetoken.googleapis.com/v1/token",
      id: "p"
    },
    dd: {
      bb: "https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",
      jb: "https://staging-securetoken.sandbox.googleapis.com/v1/token",
      id: "s"
    },
    ed: {
      bb: "https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",
      jb: "https://test-securetoken.sandbox.googleapis.com/v1/token",
      id: "t"
    }
  };

  function Af(a) {
    for (var b in zf) if (zf[b].id === a) return a = zf[b], {
      firebaseEndpoint: a.bb,
      secureTokenEndpoint: a.jb
    };

    return null;
  }

  var Bf;
  Bf = Af("__EID__") ? "__EID__" : void 0;
  var Cf = "oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),
      Df = ["client_id", "response_type", "scope", "redirect_uri", "state"],
      Ef = {
    Xc: {
      Na: "locale",
      Ba: 500,
      Aa: 600,
      Oa: "facebook.com",
      ib: Df
    },
    Zc: {
      Na: null,
      Ba: 500,
      Aa: 620,
      Oa: "github.com",
      ib: Df
    },
    $c: {
      Na: "hl",
      Ba: 515,
      Aa: 680,
      Oa: "google.com",
      ib: Df
    },
    fd: {
      Na: "lang",
      Ba: 485,
      Aa: 705,
      Oa: "twitter.com",
      ib: Cf
    }
  };

  function Ff(a) {
    for (var b in Ef) if (Ef[b].Oa == a) return Ef[b];

    return null;
  }

  ;

  function Gf(a) {
    var b = {};
    b["facebook.com"] = Hf;
    b["google.com"] = If;
    b["github.com"] = Jf;
    b["twitter.com"] = Kf;
    var c = a && a[Lf];

    try {
      if (c) return b[c] ? new b[c](a) : new Mf(a);
      if ("undefined" !== typeof a[Nf]) return new Of(a);
    } catch (d) {}

    return null;
  }

  var Nf = "idToken",
      Lf = "providerId";

  function Of(a) {
    var b = a[Lf];

    if (!b && a[Nf]) {
      var c = xf(a[Nf]);
      c && c.a && (b = c.a);
    }

    if (!b) throw Error("Invalid additional user info!");
    if ("anonymous" == b || "custom" == b) b = null;
    c = !1;
    "undefined" !== typeof a.isNewUser ? c = !!a.isNewUser : "identitytoolkit#SignupNewUserResponse" === a.kind && (c = !0);
    J(this, "providerId", b);
    J(this, "isNewUser", c);
  }

  function Mf(a) {
    Of.call(this, a);
    a = Be(a.rawUserInfo || "{}");
    J(this, "profile", Se(a || {}));
  }

  t(Mf, Of);

  function Hf(a) {
    Mf.call(this, a);
    if ("facebook.com" != this.providerId) throw Error("Invalid provider ID!");
  }

  t(Hf, Mf);

  function Jf(a) {
    Mf.call(this, a);
    if ("github.com" != this.providerId) throw Error("Invalid provider ID!");
    J(this, "username", this.profile && this.profile.login || null);
  }

  t(Jf, Mf);

  function If(a) {
    Mf.call(this, a);
    if ("google.com" != this.providerId) throw Error("Invalid provider ID!");
  }

  t(If, Mf);

  function Kf(a) {
    Mf.call(this, a);
    if ("twitter.com" != this.providerId) throw Error("Invalid provider ID!");
    J(this, "username", a.screenName || null);
  }

  t(Kf, Mf);

  function Pf(a) {
    this.a = ed(a);
  }

  ;

  function Qf(a) {
    var b = ed(a),
        c = dd(b, "link"),
        d = dd(ed(c), "link");
    b = dd(b, "deep_link_id");
    return dd(ed(b), "link") || b || d || c || a;
  }

  ;

  function Rf(a, b) {
    return a.then(function (a) {
      if (a[M]) {
        var c = xf(a[M]);
        if (!c || b != c.c) throw new L("user-mismatch");
        return a;
      }

      throw new L("user-mismatch");
    }).s(function (a) {
      throw a && a.code && a.code == bf + "user-not-found" ? new L("user-mismatch") : a;
    });
  }

  function Sf(a, b) {
    if (b) this.a = b;else throw new L("internal-error", "failed to construct a credential");
    J(this, "providerId", a);
    J(this, "signInMethod", a);
  }

  Sf.prototype.la = function (a) {
    return Tf(a, Uf(this));
  };

  Sf.prototype.b = function (a, b) {
    var c = Uf(this);
    c.idToken = b;
    return Vf(a, c);
  };

  Sf.prototype.f = function (a, b) {
    return Rf(Wf(a, Uf(this)), b);
  };

  function Uf(a) {
    return {
      pendingToken: a.a,
      requestUri: "http://localhost"
    };
  }

  Sf.prototype.C = function () {
    return {
      providerId: this.providerId,
      signInMethod: this.signInMethod,
      pendingToken: this.a
    };
  };

  function Xf(a, b, c) {
    this.a = null;
    if (b.idToken || b.accessToken) b.idToken && J(this, "idToken", b.idToken), b.accessToken && J(this, "accessToken", b.accessToken), b.nonce && !b.pendingToken && J(this, "nonce", b.nonce), b.pendingToken && (this.a = b.pendingToken);else if (b.oauthToken && b.oauthTokenSecret) J(this, "accessToken", b.oauthToken), J(this, "secret", b.oauthTokenSecret);else throw new L("internal-error", "failed to construct a credential");
    J(this, "providerId", a);
    J(this, "signInMethod", c);
  }

  Xf.prototype.la = function (a) {
    return Tf(a, Yf(this));
  };

  Xf.prototype.b = function (a, b) {
    var c = Yf(this);
    c.idToken = b;
    return Vf(a, c);
  };

  Xf.prototype.f = function (a, b) {
    var c = Yf(this);
    return Rf(Wf(a, c), b);
  };

  function Yf(a) {
    var b = {};
    a.idToken && (b.id_token = a.idToken);
    a.accessToken && (b.access_token = a.accessToken);
    a.secret && (b.oauth_token_secret = a.secret);
    b.providerId = a.providerId;
    a.nonce && !a.a && (b.nonce = a.nonce);
    b = {
      postBody: id(b).toString(),
      requestUri: "http://localhost"
    };
    a.a && (delete b.postBody, b.pendingToken = a.a);
    return b;
  }

  Xf.prototype.C = function () {
    var a = {
      providerId: this.providerId,
      signInMethod: this.signInMethod
    };
    this.idToken && (a.oauthIdToken = this.idToken);
    this.accessToken && (a.oauthAccessToken = this.accessToken);
    this.secret && (a.oauthTokenSecret = this.secret);
    this.nonce && (a.nonce = this.nonce);
    this.a && (a.pendingToken = this.a);
    return a;
  };

  function Zf(a, b) {
    this.Fc = b || [];
    K(this, {
      providerId: a,
      isOAuthProvider: !0
    });
    this.zb = {};
    this.eb = (Ff(a) || {}).Na || null;
    this.ab = null;
  }

  Zf.prototype.Da = function (a) {
    this.zb = Za(a);
    return this;
  };

  function $f(a) {
    if ("string" !== typeof a || 0 != a.indexOf("saml.")) throw new L("argument-error", 'SAML provider IDs must be prefixed with "saml."');
    Zf.call(this, a, []);
  }

  t($f, Zf);

  function N(a) {
    Zf.call(this, a, Df);
    this.a = [];
  }

  t(N, Zf);

  N.prototype.ua = function (a) {
    Ha(this.a, a) || this.a.push(a);
    return this;
  };

  N.prototype.Fb = function () {
    return Ka(this.a);
  };

  N.prototype.credential = function (a, b, c) {
    if (!a && !b) throw new L("argument-error", "credential failed: must provide the ID token and/or the access token.");
    return new Xf(this.providerId, {
      idToken: a || null,
      accessToken: b || null,
      nonce: c || null
    }, this.providerId);
  };

  function ag() {
    N.call(this, "facebook.com");
  }

  t(ag, N);
  J(ag, "PROVIDER_ID", "facebook.com");
  J(ag, "FACEBOOK_SIGN_IN_METHOD", "facebook.com");

  function bg(a) {
    if (!a) throw new L("argument-error", "credential failed: expected 1 argument (the OAuth access token).");
    var b = a;
    q(a) && (b = a.accessToken);
    return new ag().credential(null, b);
  }

  function cg() {
    N.call(this, "github.com");
  }

  t(cg, N);
  J(cg, "PROVIDER_ID", "github.com");
  J(cg, "GITHUB_SIGN_IN_METHOD", "github.com");

  function dg(a) {
    if (!a) throw new L("argument-error", "credential failed: expected 1 argument (the OAuth access token).");
    var b = a;
    q(a) && (b = a.accessToken);
    return new cg().credential(null, b);
  }

  function eg() {
    N.call(this, "google.com");
    this.ua("profile");
  }

  t(eg, N);
  J(eg, "PROVIDER_ID", "google.com");
  J(eg, "GOOGLE_SIGN_IN_METHOD", "google.com");

  function fg(a, b) {
    var c = a;
    q(a) && (c = a.idToken, b = a.accessToken);
    return new eg().credential(c, b);
  }

  function gg() {
    Zf.call(this, "twitter.com", Cf);
  }

  t(gg, Zf);
  J(gg, "PROVIDER_ID", "twitter.com");
  J(gg, "TWITTER_SIGN_IN_METHOD", "twitter.com");

  function hg(a, b) {
    var c = a;
    q(c) || (c = {
      oauthToken: a,
      oauthTokenSecret: b
    });
    if (!c.oauthToken || !c.oauthTokenSecret) throw new L("argument-error", "credential failed: expected 2 arguments (the OAuth access token and secret).");
    return new Xf("twitter.com", c, "twitter.com");
  }

  function ig(a, b, c) {
    this.a = a;
    this.c = b;
    J(this, "providerId", "password");
    J(this, "signInMethod", c === O.EMAIL_LINK_SIGN_IN_METHOD ? O.EMAIL_LINK_SIGN_IN_METHOD : O.EMAIL_PASSWORD_SIGN_IN_METHOD);
  }

  ig.prototype.la = function (a) {
    return this.signInMethod == O.EMAIL_LINK_SIGN_IN_METHOD ? P(a, jg, {
      email: this.a,
      oobCode: this.c
    }) : P(a, kg, {
      email: this.a,
      password: this.c
    });
  };

  ig.prototype.b = function (a, b) {
    return this.signInMethod == O.EMAIL_LINK_SIGN_IN_METHOD ? P(a, lg, {
      idToken: b,
      email: this.a,
      oobCode: this.c
    }) : P(a, mg, {
      idToken: b,
      email: this.a,
      password: this.c
    });
  };

  ig.prototype.f = function (a, b) {
    return Rf(this.la(a), b);
  };

  ig.prototype.C = function () {
    return {
      email: this.a,
      password: this.c,
      signInMethod: this.signInMethod
    };
  };

  function O() {
    K(this, {
      providerId: "password",
      isOAuthProvider: !1
    });
  }

  function ng(a, b) {
    b = og(b);
    if (!b) throw new L("argument-error", "Invalid email link!");
    return new ig(a, b, O.EMAIL_LINK_SIGN_IN_METHOD);
  }

  function og(a) {
    a = Qf(a);
    a = new Pf(a);
    var b = dd(a.a, "oobCode") || null;
    return "signIn" === (dd(a.a, "mode") || null) && b ? b : null;
  }

  K(O, {
    PROVIDER_ID: "password"
  });
  K(O, {
    EMAIL_LINK_SIGN_IN_METHOD: "emailLink"
  });
  K(O, {
    EMAIL_PASSWORD_SIGN_IN_METHOD: "password"
  });

  function pg(a) {
    if (!(a.Ua && a.Ta || a.Fa && a.$)) throw new L("internal-error");
    this.a = a;
    J(this, "providerId", "phone");
    J(this, "signInMethod", "phone");
  }

  pg.prototype.la = function (a) {
    return a.Va(qg(this));
  };

  pg.prototype.b = function (a, b) {
    var c = qg(this);
    c.idToken = b;
    return P(a, rg, c);
  };

  pg.prototype.f = function (a, b) {
    var c = qg(this);
    c.operation = "REAUTH";
    a = P(a, sg, c);
    return Rf(a, b);
  };

  pg.prototype.C = function () {
    var a = {
      providerId: "phone"
    };
    this.a.Ua && (a.verificationId = this.a.Ua);
    this.a.Ta && (a.verificationCode = this.a.Ta);
    this.a.Fa && (a.temporaryProof = this.a.Fa);
    this.a.$ && (a.phoneNumber = this.a.$);
    return a;
  };

  function qg(a) {
    return a.a.Fa && a.a.$ ? {
      temporaryProof: a.a.Fa,
      phoneNumber: a.a.$
    } : {
      sessionInfo: a.a.Ua,
      code: a.a.Ta
    };
  }

  function tg(a) {
    try {
      this.a = a || _app.default.auth();
    } catch (b) {
      throw new L("argument-error", "Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().");
    }

    K(this, {
      providerId: "phone",
      isOAuthProvider: !1
    });
  }

  tg.prototype.Va = function (a, b) {
    var c = this.a.b;
    return B(b.verify()).then(function (d) {
      if (!l(d)) throw new L("argument-error", "An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");

      switch (b.type) {
        case "recaptcha":
          return ug(c, {
            phoneNumber: a,
            recaptchaToken: d
          }).then(function (a) {
            "function" === typeof b.reset && b.reset();
            return a;
          }, function (a) {
            "function" === typeof b.reset && b.reset();
            throw a;
          });

        default:
          throw new L("argument-error", 'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.');
      }
    });
  };

  function vg(a, b) {
    if (!a) throw new L("missing-verification-id");
    if (!b) throw new L("missing-verification-code");
    return new pg({
      Ua: a,
      Ta: b
    });
  }

  K(tg, {
    PROVIDER_ID: "phone"
  });
  K(tg, {
    PHONE_SIGN_IN_METHOD: "phone"
  });

  function wg(a) {
    if (a.temporaryProof && a.phoneNumber) return new pg({
      Fa: a.temporaryProof,
      $: a.phoneNumber
    });
    var b = a && a.providerId;
    if (!b || "password" === b) return null;
    var c = a && a.oauthAccessToken,
        d = a && a.oauthTokenSecret,
        e = a && a.nonce,
        f = a && a.oauthIdToken,
        h = a && a.pendingToken;

    try {
      switch (b) {
        case "google.com":
          return fg(f, c);

        case "facebook.com":
          return bg(c);

        case "github.com":
          return dg(c);

        case "twitter.com":
          return hg(c, d);

        default:
          return c || d || f || h ? h ? 0 == b.indexOf("saml.") ? new Sf(b, h) : new Xf(b, {
            pendingToken: h,
            idToken: a.oauthIdToken,
            accessToken: a.oauthAccessToken
          }, b) : new N(b).credential(f, c, e) : null;
      }
    } catch (m) {
      return null;
    }
  }

  function xg(a) {
    if (!a.isOAuthProvider) throw new L("invalid-oauth-provider");
  }

  ;

  function yg(a, b, c, d, e, f) {
    this.b = a;
    this.c = b || null;
    this.f = c || null;
    this.g = d || null;
    this.h = f || null;
    this.a = e || null;

    if (this.f || this.a) {
      if (this.f && this.a) throw new L("invalid-auth-event");
      if (this.f && !this.g) throw new L("invalid-auth-event");
    } else throw new L("invalid-auth-event");
  }

  yg.prototype.C = function () {
    return {
      type: this.b,
      eventId: this.c,
      urlResponse: this.f,
      sessionId: this.g,
      postBody: this.h,
      error: this.a && this.a.C()
    };
  };

  function zg(a) {
    a = a || {};
    return a.type ? new yg(a.type, a.eventId, a.urlResponse, a.sessionId, a.error && df(a.error), a.postBody) : null;
  }

  ;
  /*
  Copyright 2018 Google Inc.
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  http://www.apache.org/licenses/LICENSE-2.0
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */

  function Ag() {
    this.b = null;
    this.a = [];
  }

  var Bg = null;

  Ag.prototype.subscribe = function (a) {
    var b = this;
    this.a.push(a);
    this.b || (this.b = function (a) {
      for (var c = 0; c < b.a.length; c++) b.a[c](a);
    }, a = I("universalLinks.subscribe", k), "function" === typeof a && a(null, this.b));
  };

  Ag.prototype.unsubscribe = function (a) {
    w(this.a, function (b) {
      return b == a;
    });
  };

  function Cg(a) {
    var b = "unauthorized-domain",
        c = void 0,
        d = ed(a);
    a = d.b;
    d = d.c;
    "chrome-extension" == d ? c = bb("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : "http" == d || "https" == d ? c = bb("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.", a) : b = "operation-not-supported-in-this-environment";
    L.call(this, b, c);
  }

  t(Cg, L);

  function Dg(a, b, c) {
    L.call(this, a, c);
    a = b || {};
    a.Ab && J(this, "email", a.Ab);
    a.$ && J(this, "phoneNumber", a.$);
    a.credential && J(this, "credential", a.credential);
  }

  t(Dg, L);

  Dg.prototype.C = function () {
    var a = {
      code: this.code,
      message: this.message
    };
    this.email && (a.email = this.email);
    this.phoneNumber && (a.phoneNumber = this.phoneNumber);
    var b = this.credential && this.credential.C();
    b && ab(a, b);
    return a;
  };

  Dg.prototype.toJSON = function () {
    return this.C();
  };

  function Eg(a) {
    if (a.code) {
      var b = a.code || "";
      0 == b.indexOf(bf) && (b = b.substring(bf.length));
      var c = {
        credential: wg(a)
      };
      if (a.email) c.Ab = a.email;else if (a.phoneNumber) c.$ = a.phoneNumber;else if (!c.credential) return new L(b, a.message || void 0);
      return new Dg(b, c, a.message);
    }

    return null;
  }

  ;

  function Fg() {}

  Fg.prototype.c = null;

  function Gg(a) {
    return a.c || (a.c = a.b());
  }

  ;
  var Hg;

  function Ig() {}

  t(Ig, Fg);

  Ig.prototype.a = function () {
    var a = Jg(this);
    return a ? new ActiveXObject(a) : new XMLHttpRequest();
  };

  Ig.prototype.b = function () {
    var a = {};
    Jg(this) && (a[0] = !0, a[1] = !0);
    return a;
  };

  function Jg(a) {
    if (!a.f && "undefined" == typeof XMLHttpRequest && "undefined" != typeof ActiveXObject) {
      for (var b = ["MSXML2.XMLHTTP.6.0", "MSXML2.XMLHTTP.3.0", "MSXML2.XMLHTTP", "Microsoft.XMLHTTP"], c = 0; c < b.length; c++) {
        var d = b[c];

        try {
          return new ActiveXObject(d), a.f = d;
        } catch (e) {}
      }

      throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed");
    }

    return a.f;
  }

  Hg = new Ig();

  function Kg() {}

  t(Kg, Fg);

  Kg.prototype.a = function () {
    var a = new XMLHttpRequest();
    if ("withCredentials" in a) return a;
    if ("undefined" != typeof XDomainRequest) return new Lg();
    throw Error("Unsupported browser");
  };

  Kg.prototype.b = function () {
    return {};
  };

  function Lg() {
    this.a = new XDomainRequest();
    this.readyState = 0;
    this.onreadystatechange = null;
    this.responseType = this.responseText = this.response = "";
    this.status = -1;
    this.statusText = "";
    this.a.onload = r(this.fc, this);
    this.a.onerror = r(this.Gb, this);
    this.a.onprogress = r(this.gc, this);
    this.a.ontimeout = r(this.kc, this);
  }

  g = Lg.prototype;

  g.open = function (a, b, c) {
    if (null != c && !c) throw Error("Only async requests are supported.");
    this.a.open(a, b);
  };

  g.send = function (a) {
    if (a) {
      if ("string" == typeof a) this.a.send(a);else throw Error("Only string data is supported");
    } else this.a.send();
  };

  g.abort = function () {
    this.a.abort();
  };

  g.setRequestHeader = function () {};

  g.getResponseHeader = function (a) {
    return "content-type" == a.toLowerCase() ? this.a.contentType : "";
  };

  g.fc = function () {
    this.status = 200;
    this.response = this.responseText = this.a.responseText;
    Mg(this, 4);
  };

  g.Gb = function () {
    this.status = 500;
    this.response = this.responseText = "";
    Mg(this, 4);
  };

  g.kc = function () {
    this.Gb();
  };

  g.gc = function () {
    this.status = 200;
    Mg(this, 1);
  };

  function Mg(a, b) {
    a.readyState = b;
    if (a.onreadystatechange) a.onreadystatechange();
  }

  g.getAllResponseHeaders = function () {
    return "content-type: " + this.a.contentType;
  };

  function Ng(a, b, c) {
    this.reset(a, b, c, void 0, void 0);
  }

  Ng.prototype.a = null;
  var Og = 0;

  Ng.prototype.reset = function (a, b, c, d, e) {
    "number" == typeof e || Og++;
    d || qa();
    delete this.a;
  };

  function Pg(a) {
    this.f = a;
    this.b = this.c = this.a = null;
  }

  function Qg(a, b) {
    this.name = a;
    this.value = b;
  }

  Qg.prototype.toString = function () {
    return this.name;
  };

  var Rg = new Qg("SEVERE", 1E3),
      Sg = new Qg("WARNING", 900),
      Tg = new Qg("CONFIG", 700),
      Ug = new Qg("FINE", 500);

  function Vg(a) {
    if (a.c) return a.c;
    if (a.a) return Vg(a.a);
    ta("Root logger has no level set.");
    return null;
  }

  Pg.prototype.log = function (a, b, c) {
    if (a.value >= Vg(this).value) for (n(b) && (b = b()), a = new Ng(a, String(b), this.f), c && (a.a = c), c = this; c;) c = c.a;
  };

  var Wg = {},
      Xg = null;

  function Yg(a) {
    Xg || (Xg = new Pg(""), Wg[""] = Xg, Xg.c = Tg);
    var b;

    if (!(b = Wg[a])) {
      b = new Pg(a);
      var c = a.lastIndexOf("."),
          d = a.substr(c + 1);
      c = Yg(a.substr(0, c));
      c.b || (c.b = {});
      c.b[d] = b;
      b.a = c;
      Wg[a] = b;
    }

    return b;
  }

  ;

  function Zg(a, b) {
    a && a.log(Ug, b, void 0);
  }

  ;

  function $g(a) {
    this.f = a;
  }

  t($g, Fg);

  $g.prototype.a = function () {
    return new ah(this.f);
  };

  $g.prototype.b = function (a) {
    return function () {
      return a;
    };
  }({});

  function ah(a) {
    F.call(this);
    this.u = a;
    this.readyState = bh;
    this.status = 0;
    this.responseType = this.responseText = this.response = this.statusText = "";
    this.onreadystatechange = null;
    this.i = new Headers();
    this.b = null;
    this.m = "GET";
    this.g = "";
    this.a = !1;
    this.h = Yg("goog.net.FetchXmlHttp");
    this.l = this.c = this.f = null;
  }

  t(ah, F);
  var bh = 0;
  g = ah.prototype;

  g.open = function (a, b) {
    if (this.readyState != bh) throw this.abort(), Error("Error reopening a connection");
    this.m = a;
    this.g = b;
    this.readyState = 1;
    ch(this);
  };

  g.send = function (a) {
    if (1 != this.readyState) throw this.abort(), Error("need to call open() first. ");
    this.a = !0;
    var b = {
      headers: this.i,
      method: this.m,
      credentials: void 0,
      cache: void 0
    };
    a && (b.body = a);
    this.u.fetch(new Request(this.g, b)).then(this.jc.bind(this), this.La.bind(this));
  };

  g.abort = function () {
    this.response = this.responseText = "";
    this.i = new Headers();
    this.status = 0;
    this.c && this.c.cancel("Request was aborted.");
    1 <= this.readyState && this.a && 4 != this.readyState && (this.a = !1, dh(this, !1));
    this.readyState = bh;
  };

  g.jc = function (a) {
    this.a && (this.f = a, this.b || (this.b = a.headers, this.readyState = 2, ch(this)), this.a && (this.readyState = 3, ch(this), this.a && ("arraybuffer" === this.responseType ? a.arrayBuffer().then(this.hc.bind(this), this.La.bind(this)) : "undefined" !== typeof k.ReadableStream && "body" in a ? (this.response = this.responseText = "", this.c = a.body.getReader(), this.l = new TextDecoder(), eh(this)) : a.text().then(this.ic.bind(this), this.La.bind(this)))));
  };

  function eh(a) {
    a.c.read().then(a.ec.bind(a)).catch(a.La.bind(a));
  }

  g.ec = function (a) {
    if (this.a) {
      var b = this.l.decode(a.value ? a.value : new Uint8Array(0), {
        stream: !a.done
      });
      b && (this.response = this.responseText += b);
      a.done ? dh(this, !0) : ch(this);
      3 == this.readyState && eh(this);
    }
  };

  g.ic = function (a) {
    this.a && (this.response = this.responseText = a, dh(this, !0));
  };

  g.hc = function (a) {
    this.a && (this.response = a, dh(this, !0));
  };

  g.La = function (a) {
    var b = this.h;
    b && b.log(Sg, "Failed to fetch url " + this.g, a instanceof Error ? a : Error(a));
    this.a && dh(this, !0);
  };

  function dh(a, b) {
    b && a.f && (a.status = a.f.status, a.statusText = a.f.statusText);
    a.readyState = 4;
    a.f = null;
    a.c = null;
    a.l = null;
    ch(a);
  }

  g.setRequestHeader = function (a, b) {
    this.i.append(a, b);
  };

  g.getResponseHeader = function (a) {
    return this.b ? this.b.get(a.toLowerCase()) || "" : ((a = this.h) && a.log(Sg, "Attempting to get response header but no headers have been received for url: " + this.g, void 0), "");
  };

  g.getAllResponseHeaders = function () {
    if (!this.b) {
      var a = this.h;
      a && a.log(Sg, "Attempting to get all response headers but no headers have been received for url: " + this.g, void 0);
      return "";
    }

    a = [];

    for (var b = this.b.entries(), c = b.next(); !c.done;) c = c.value, a.push(c[0] + ": " + c[1]), c = b.next();

    return a.join("\r\n");
  };

  function ch(a) {
    a.onreadystatechange && a.onreadystatechange.call(a);
  }

  ;

  function fh(a) {
    F.call(this);
    this.headers = new Mc();
    this.D = a || null;
    this.c = !1;
    this.w = this.a = null;
    this.h = this.N = this.l = "";
    this.f = this.I = this.i = this.G = !1;
    this.g = 0;
    this.u = null;
    this.m = gh;
    this.v = this.O = !1;
  }

  t(fh, F);
  var gh = "";
  fh.prototype.b = Yg("goog.net.XhrIo");
  var hh = /^https?$/i,
      ih = ["POST", "PUT"];

  function jh(a, b, c, d, e) {
    if (a.a) throw Error("[goog.net.XhrIo] Object is active with another request=" + a.l + "; newUri=" + b);
    c = c ? c.toUpperCase() : "GET";
    a.l = b;
    a.h = "";
    a.N = c;
    a.G = !1;
    a.c = !0;
    a.a = a.D ? a.D.a() : Hg.a();
    a.w = a.D ? Gg(a.D) : Gg(Hg);
    a.a.onreadystatechange = r(a.Jb, a);

    try {
      Zg(a.b, kh(a, "Opening Xhr")), a.I = !0, a.a.open(c, String(b), !0), a.I = !1;
    } catch (h) {
      Zg(a.b, kh(a, "Error opening Xhr: " + h.message));
      lh(a, h);
      return;
    }

    b = d || "";
    var f = new Mc(a.headers);
    e && Lc(e, function (a, b) {
      f.set(b, a);
    });
    e = Fa(f.U());
    d = k.FormData && b instanceof k.FormData;
    !Ha(ih, c) || e || d || f.set("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
    f.forEach(function (a, b) {
      this.a.setRequestHeader(b, a);
    }, a);
    a.m && (a.a.responseType = a.m);
    "withCredentials" in a.a && a.a.withCredentials !== a.O && (a.a.withCredentials = a.O);

    try {
      mh(a), 0 < a.g && (a.v = nh(a.a), Zg(a.b, kh(a, "Will abort after " + a.g + "ms if incomplete, xhr2 " + a.v)), a.v ? (a.a.timeout = a.g, a.a.ontimeout = r(a.Ga, a)) : a.u = Hc(a.Ga, a.g, a)), Zg(a.b, kh(a, "Sending request")), a.i = !0, a.a.send(b), a.i = !1;
    } catch (h) {
      Zg(a.b, kh(a, "Send error: " + h.message)), lh(a, h);
    }
  }

  function nh(a) {
    return Qb && $b(9) && "number" == typeof a.timeout && void 0 !== a.ontimeout;
  }

  function Ga(a) {
    return "content-type" == a.toLowerCase();
  }

  g = fh.prototype;

  g.Ga = function () {
    "undefined" != typeof aa && this.a && (this.h = "Timed out after " + this.g + "ms, aborting", Zg(this.b, kh(this, this.h)), this.dispatchEvent("timeout"), this.abort(8));
  };

  function lh(a, b) {
    a.c = !1;
    a.a && (a.f = !0, a.a.abort(), a.f = !1);
    a.h = b;
    oh(a);
    ph(a);
  }

  function oh(a) {
    a.G || (a.G = !0, a.dispatchEvent("complete"), a.dispatchEvent("error"));
  }

  g.abort = function () {
    this.a && this.c && (Zg(this.b, kh(this, "Aborting")), this.c = !1, this.f = !0, this.a.abort(), this.f = !1, this.dispatchEvent("complete"), this.dispatchEvent("abort"), ph(this));
  };

  g.va = function () {
    this.a && (this.c && (this.c = !1, this.f = !0, this.a.abort(), this.f = !1), ph(this, !0));
    fh.pb.va.call(this);
  };

  g.Jb = function () {
    this.qa || (this.I || this.i || this.f ? qh(this) : this.yc());
  };

  g.yc = function () {
    qh(this);
  };

  function qh(a) {
    if (a.c && "undefined" != typeof aa) if (a.w[1] && 4 == rh(a) && 2 == sh(a)) Zg(a.b, kh(a, "Local request error detected and ignored"));else if (a.i && 4 == rh(a)) Hc(a.Jb, 0, a);else if (a.dispatchEvent("readystatechange"), 4 == rh(a)) {
      Zg(a.b, kh(a, "Request complete"));
      a.c = !1;

      try {
        var b = sh(a);

        a: switch (b) {
          case 200:
          case 201:
          case 202:
          case 204:
          case 206:
          case 304:
          case 1223:
            var c = !0;
            break a;

          default:
            c = !1;
        }

        var d;

        if (!(d = c)) {
          var e;

          if (e = 0 === b) {
            var f = String(a.l).match(Pc)[1] || null;

            if (!f && k.self && k.self.location) {
              var h = k.self.location.protocol;
              f = h.substr(0, h.length - 1);
            }

            e = !hh.test(f ? f.toLowerCase() : "");
          }

          d = e;
        }

        if (d) a.dispatchEvent("complete"), a.dispatchEvent("success");else {
          try {
            var m = 2 < rh(a) ? a.a.statusText : "";
          } catch (p) {
            Zg(a.b, "Can not get status: " + p.message), m = "";
          }

          a.h = m + " [" + sh(a) + "]";
          oh(a);
        }
      } finally {
        ph(a);
      }
    }
  }

  function ph(a, b) {
    if (a.a) {
      mh(a);
      var c = a.a,
          d = a.w[0] ? ea : null;
      a.a = null;
      a.w = null;
      b || a.dispatchEvent("ready");

      try {
        c.onreadystatechange = d;
      } catch (e) {
        (a = a.b) && a.log(Rg, "Problem encountered resetting onreadystatechange: " + e.message, void 0);
      }
    }
  }

  function mh(a) {
    a.a && a.v && (a.a.ontimeout = null);
    a.u && (k.clearTimeout(a.u), a.u = null);
  }

  function rh(a) {
    return a.a ? a.a.readyState : 0;
  }

  function sh(a) {
    try {
      return 2 < rh(a) ? a.a.status : -1;
    } catch (b) {
      return -1;
    }
  }

  function th(a) {
    try {
      return a.a ? a.a.responseText : "";
    } catch (b) {
      return Zg(a.b, "Can not get responseText: " + b.message), "";
    }
  }

  g.getResponse = function () {
    try {
      if (!this.a) return null;
      if ("response" in this.a) return this.a.response;

      switch (this.m) {
        case gh:
        case "text":
          return this.a.responseText;

        case "arraybuffer":
          if ("mozResponseArrayBuffer" in this.a) return this.a.mozResponseArrayBuffer;
      }

      var a = this.b;
      a && a.log(Rg, "Response type " + this.m + " is not supported on this browser", void 0);
      return null;
    } catch (b) {
      return Zg(this.b, "Can not get response: " + b.message), null;
    }
  };

  function kh(a, b) {
    return b + " [" + a.N + " " + a.l + " " + sh(a) + "]";
  }

  ;
  /*
  Portions of this code are from MochiKit, received by
  The Closure Authors under the MIT license. All other code is Copyright
  2005-2009 The Closure Authors. All Rights Reserved.
  */

  function uh(a) {
    var b = vh;
    this.g = [];
    this.v = b;
    this.u = a || null;
    this.f = this.a = !1;
    this.c = void 0;
    this.l = this.w = this.i = !1;
    this.h = 0;
    this.b = null;
    this.o = 0;
  }

  uh.prototype.cancel = function (a) {
    if (this.a) this.c instanceof uh && this.c.cancel();else {
      if (this.b) {
        var b = this.b;
        delete this.b;
        a ? b.cancel(a) : (b.o--, 0 >= b.o && b.cancel());
      }

      this.v ? this.v.call(this.u, this) : this.l = !0;
      this.a || (a = new wh(this), xh(this), yh(this, !1, a));
    }
  };

  uh.prototype.m = function (a, b) {
    this.i = !1;
    yh(this, a, b);
  };

  function yh(a, b, c) {
    a.a = !0;
    a.c = c;
    a.f = !b;
    zh(a);
  }

  function xh(a) {
    if (a.a) {
      if (!a.l) throw new Ah(a);
      a.l = !1;
    }
  }

  function Bh(a, b) {
    Ch(a, null, b, void 0);
  }

  function Ch(a, b, c, d) {
    a.g.push([b, c, d]);
    a.a && zh(a);
  }

  uh.prototype.then = function (a, b, c) {
    var d,
        e,
        f = new A(function (a, b) {
      d = a;
      e = b;
    });
    Ch(this, d, function (a) {
      a instanceof wh ? f.cancel() : e(a);
    });
    return f.then(a, b, c);
  };

  uh.prototype.$goog_Thenable = !0;

  function Dh(a) {
    return Ea(a.g, function (a) {
      return n(a[1]);
    });
  }

  function zh(a) {
    if (a.h && a.a && Dh(a)) {
      var b = a.h,
          c = Eh[b];
      c && (k.clearTimeout(c.a), delete Eh[b]);
      a.h = 0;
    }

    a.b && (a.b.o--, delete a.b);
    b = a.c;

    for (var d = c = !1; a.g.length && !a.i;) {
      var e = a.g.shift(),
          f = e[0],
          h = e[1];
      e = e[2];
      if (f = a.f ? h : f) try {
        var m = f.call(e || a.u, b);
        void 0 !== m && (a.f = a.f && (m == b || m instanceof Error), a.c = b = m);
        if (ra(b) || "function" === typeof k.Promise && b instanceof k.Promise) d = !0, a.i = !0;
      } catch (p) {
        b = p, a.f = !0, Dh(a) || (c = !0);
      }
    }

    a.c = b;
    d && (m = r(a.m, a, !0), d = r(a.m, a, !1), b instanceof uh ? (Ch(b, m, d), b.w = !0) : b.then(m, d));
    c && (b = new Fh(b), Eh[b.a] = b, a.h = b.a);
  }

  function Ah() {
    u.call(this);
  }

  t(Ah, u);
  Ah.prototype.message = "Deferred has already fired";
  Ah.prototype.name = "AlreadyCalledError";

  function wh() {
    u.call(this);
  }

  t(wh, u);
  wh.prototype.message = "Deferred was canceled";
  wh.prototype.name = "CanceledError";

  function Fh(a) {
    this.a = k.setTimeout(r(this.c, this), 0);
    this.b = a;
  }

  Fh.prototype.c = function () {
    delete Eh[this.a];
    throw this.b;
  };

  var Eh = {};

  function Gh(a) {
    var b = {},
        c = b.document || document,
        d = ud(a),
        e = document.createElement("SCRIPT"),
        f = {
      Lb: e,
      Ga: void 0
    },
        h = new uh(f),
        m = null,
        p = null != b.timeout ? b.timeout : 5E3;
    0 < p && (m = window.setTimeout(function () {
      Hh(e, !0);
      var a = new Ih(Jh, "Timeout reached for loading script " + d);
      xh(h);
      yh(h, !1, a);
    }, p), f.Ga = m);

    e.onload = e.onreadystatechange = function () {
      e.readyState && "loaded" != e.readyState && "complete" != e.readyState || (Hh(e, b.hd || !1, m), xh(h), yh(h, !0, null));
    };

    e.onerror = function () {
      Hh(e, !0, m);
      var a = new Ih(Kh, "Error while loading script " + d);
      xh(h);
      yh(h, !1, a);
    };

    f = b.attributes || {};
    ab(f, {
      type: "text/javascript",
      charset: "UTF-8"
    });
    Ld(e, f);
    Jd(e, a);
    Lh(c).appendChild(e);
    return h;
  }

  function Lh(a) {
    var b;
    return (b = (a || document).getElementsByTagName("HEAD")) && 0 != b.length ? b[0] : a.documentElement;
  }

  function vh() {
    if (this && this.Lb) {
      var a = this.Lb;
      a && "SCRIPT" == a.tagName && Hh(a, !0, this.Ga);
    }
  }

  function Hh(a, b, c) {
    null != c && k.clearTimeout(c);
    a.onload = ea;
    a.onerror = ea;
    a.onreadystatechange = ea;
    b && window.setTimeout(function () {
      a && a.parentNode && a.parentNode.removeChild(a);
    }, 0);
  }

  var Kh = 0,
      Jh = 1;

  function Ih(a, b) {
    var c = "Jsloader error (code #" + a + ")";
    b && (c += ": " + b);
    u.call(this, c);
    this.code = a;
  }

  t(Ih, u);

  function Mh(a) {
    this.f = a;
  }

  t(Mh, Fg);

  Mh.prototype.a = function () {
    return new this.f();
  };

  Mh.prototype.b = function () {
    return {};
  };

  function Nh(a, b, c) {
    this.b = a;
    a = b || {};
    this.i = a.secureTokenEndpoint || "https://securetoken.googleapis.com/v1/token";
    this.o = a.secureTokenTimeout || Oh;
    this.f = Za(a.secureTokenHeaders || Ph);
    this.g = a.firebaseEndpoint || "https://www.googleapis.com/identitytoolkit/v3/relyingparty/";
    this.h = a.firebaseTimeout || Qh;
    this.a = Za(a.firebaseHeaders || Rh);
    c && (this.a["X-Client-Version"] = c, this.f["X-Client-Version"] = c);
    c = "Node" == pe();
    c = k.XMLHttpRequest || c && _app.default.INTERNAL.node && _app.default.INTERNAL.node.XMLHttpRequest;
    if (!c && !oe()) throw new L("internal-error", "The XMLHttpRequest compatibility library was not found.");
    this.c = void 0;
    oe() ? this.c = new $g(self) : qe() ? this.c = new Mh(c) : this.c = new Kg();
  }

  var Sh,
      M = "idToken",
      Oh = new Ee(3E4, 6E4),
      Ph = {
    "Content-Type": "application/x-www-form-urlencoded"
  },
      Qh = new Ee(3E4, 6E4),
      Rh = {
    "Content-Type": "application/json"
  };

  function Th(a, b) {
    b ? a.a["X-Firebase-Locale"] = b : delete a.a["X-Firebase-Locale"];
  }

  function Uh(a, b) {
    b ? (a.a["X-Client-Version"] = b, a.f["X-Client-Version"] = b) : (delete a.a["X-Client-Version"], delete a.f["X-Client-Version"]);
  }

  function Vh(a, b, c, d, e, f, h) {
    $d() || oe() ? a = r(a.m, a) : (Sh || (Sh = new A(function (a, b) {
      Wh(a, b);
    })), a = r(a.l, a));
    a(b, c, d, e, f, h);
  }

  Nh.prototype.m = function (a, b, c, d, e, f) {
    if (oe() && ("undefined" === typeof k.fetch || "undefined" === typeof k.Headers || "undefined" === typeof k.Request)) throw new L("operation-not-supported-in-this-environment", "fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");
    var h = new fh(this.c);

    if (f) {
      h.g = Math.max(0, f);
      var m = setTimeout(function () {
        h.dispatchEvent("timeout");
      }, f);
    }

    vc(h, "complete", function () {
      m && clearTimeout(m);
      var a = null;

      try {
        a = JSON.parse(th(this)) || null;
      } catch (x) {
        a = null;
      }

      b && b(a);
    });
    Bc(h, "ready", function () {
      m && clearTimeout(m);
      Lb(this);
    });
    Bc(h, "timeout", function () {
      m && clearTimeout(m);
      Lb(this);
      b && b(null);
    });
    jh(h, a, c, d, e);
  };

  var Xh = new od(pd, "https://apis.google.com/js/client.js?onload=%{onload}"),
      Yh = "__fcb" + Math.floor(1E6 * Math.random()).toString();

  function Wh(a, b) {
    if (((window.gapi || {}).client || {}).request) a();else {
      k[Yh] = function () {
        ((window.gapi || {}).client || {}).request ? a() : b(Error("CORS_UNSUPPORTED"));
      };

      var c = vd(Xh, {
        onload: Yh
      });
      Bh(Gh(c), function () {
        b(Error("CORS_UNSUPPORTED"));
      });
    }
  }

  Nh.prototype.l = function (a, b, c, d, e) {
    var f = this;
    Sh.then(function () {
      window.gapi.client.setApiKey(f.b);
      var h = window.gapi.auth.getToken();
      window.gapi.auth.setToken(null);
      window.gapi.client.request({
        path: a,
        method: c,
        body: d,
        headers: e,
        authType: "none",
        callback: function (a) {
          window.gapi.auth.setToken(h);
          b && b(a);
        }
      });
    }).s(function (a) {
      b && b({
        error: {
          message: a && a.message || "CORS_UNSUPPORTED"
        }
      });
    });
  };

  function Zh(a, b) {
    return new A(function (c, d) {
      "refresh_token" == b.grant_type && b.refresh_token || "authorization_code" == b.grant_type && b.code ? Vh(a, a.i + "?key=" + encodeURIComponent(a.b), function (a) {
        a ? a.error ? d($h(a)) : a.access_token && a.refresh_token ? c(a) : d(new L("internal-error")) : d(new L("network-request-failed"));
      }, "POST", id(b).toString(), a.f, a.o.get()) : d(new L("internal-error"));
    });
  }

  function ai(a, b, c, d, e, f) {
    var h = ed(a.g + b);
    G(h, "key", a.b);
    f && G(h, "cb", qa().toString());
    var m = "GET" == c;
    if (m) for (var p in d) d.hasOwnProperty(p) && G(h, p, d[p]);
    return new A(function (b, f) {
      Vh(a, h.toString(), function (a) {
        a ? a.error ? f($h(a, e || {})) : b(a) : f(new L("network-request-failed"));
      }, c, m ? void 0 : Qd(Ae(d)), a.a, a.h.get());
    });
  }

  function bi(a) {
    a = a.email;
    if (!l(a) || !ie.test(a)) throw new L("invalid-email");
  }

  function ci(a) {
    "email" in a && bi(a);
  }

  function di(a, b) {
    return P(a, ei, {
      identifier: b,
      continueUri: xe() ? Xd() : "http://localhost"
    }).then(function (a) {
      return a.allProviders || [];
    });
  }

  function fi(a, b) {
    return P(a, ei, {
      identifier: b,
      continueUri: xe() ? Xd() : "http://localhost"
    }).then(function (a) {
      return a.signinMethods || [];
    });
  }

  function gi(a) {
    return P(a, hi, {}).then(function (a) {
      return a.authorizedDomains || [];
    });
  }

  function ii(a) {
    if (!a[M]) throw new L("internal-error");
  }

  function ji(a) {
    if (a.phoneNumber || a.temporaryProof) {
      if (!a.phoneNumber || !a.temporaryProof) throw new L("internal-error");
    } else {
      if (!a.sessionInfo) throw new L("missing-verification-id");
      if (!a.code) throw new L("missing-verification-code");
    }
  }

  Nh.prototype.Ra = function () {
    return P(this, ki, {});
  };

  Nh.prototype.qb = function (a, b) {
    return P(this, li, {
      idToken: a,
      email: b
    });
  };

  Nh.prototype.rb = function (a, b) {
    return P(this, mg, {
      idToken: a,
      password: b
    });
  };

  var mi = {
    displayName: "DISPLAY_NAME",
    photoUrl: "PHOTO_URL"
  };
  g = Nh.prototype;

  g.sb = function (a, b) {
    var c = {
      idToken: a
    },
        d = [];
    Xa(mi, function (a, f) {
      var e = b[f];
      null === e ? d.push(a) : f in b && (c[f] = e);
    });
    d.length && (c.deleteAttribute = d);
    return P(this, li, c);
  };

  g.lb = function (a, b) {
    a = {
      requestType: "PASSWORD_RESET",
      email: a
    };
    ab(a, b);
    return P(this, ni, a);
  };

  g.mb = function (a, b) {
    a = {
      requestType: "EMAIL_SIGNIN",
      email: a
    };
    ab(a, b);
    return P(this, oi, a);
  };

  g.kb = function (a, b) {
    a = {
      requestType: "VERIFY_EMAIL",
      idToken: a
    };
    ab(a, b);
    return P(this, pi, a);
  };

  function ug(a, b) {
    return P(a, qi, b);
  }

  g.Va = function (a) {
    return P(this, ri, a);
  };

  function si(a, b, c) {
    return P(a, ti, {
      idToken: b,
      deleteProvider: c
    });
  }

  function ui(a) {
    if (!a.requestUri || !a.sessionId && !a.postBody && !a.pendingToken) throw new L("internal-error");
  }

  function vi(a, b) {
    b.oauthIdToken && b.providerId && 0 == b.providerId.indexOf("oidc.") && !b.pendingToken && (a.sessionId ? b.nonce = a.sessionId : a.postBody && (a = new Uc(a.postBody), md(a, "nonce") && (b.nonce = a.get("nonce"))));
    return b;
  }

  function wi(a) {
    var b = null;
    a.needConfirmation ? (a.code = "account-exists-with-different-credential", b = Eg(a)) : "FEDERATED_USER_ID_ALREADY_LINKED" == a.errorMessage ? (a.code = "credential-already-in-use", b = Eg(a)) : "EMAIL_EXISTS" == a.errorMessage ? (a.code = "email-already-in-use", b = Eg(a)) : a.errorMessage && (b = xi(a.errorMessage));
    if (b) throw b;
    if (!a[M]) throw new L("internal-error");
  }

  function Tf(a, b) {
    b.returnIdpCredential = !0;
    return P(a, yi, b);
  }

  function Vf(a, b) {
    b.returnIdpCredential = !0;
    return P(a, zi, b);
  }

  function Wf(a, b) {
    b.returnIdpCredential = !0;
    b.autoCreate = !1;
    return P(a, Ai, b);
  }

  function Bi(a) {
    if (!a.oobCode) throw new L("invalid-action-code");
  }

  g.$a = function (a, b) {
    return P(this, Ci, {
      oobCode: a,
      newPassword: b
    });
  };

  g.Ja = function (a) {
    return P(this, Di, {
      oobCode: a
    });
  };

  g.Xa = function (a) {
    return P(this, Ei, {
      oobCode: a
    });
  };

  var Ei = {
    endpoint: "setAccountInfo",
    B: Bi,
    da: "email"
  },
      Di = {
    endpoint: "resetPassword",
    B: Bi,
    J: function (a) {
      var b = a.requestType;
      if (!b || !a.email && "EMAIL_SIGNIN" != b) throw new L("internal-error");
    }
  },
      Fi = {
    endpoint: "signupNewUser",
    B: function (a) {
      bi(a);
      if (!a.password) throw new L("weak-password");
    },
    J: ii,
    R: !0
  },
      ei = {
    endpoint: "createAuthUri"
  },
      Gi = {
    endpoint: "deleteAccount",
    T: ["idToken"]
  },
      ti = {
    endpoint: "setAccountInfo",
    T: ["idToken", "deleteProvider"],
    B: function (a) {
      if (!ia(a.deleteProvider)) throw new L("internal-error");
    }
  },
      jg = {
    endpoint: "emailLinkSignin",
    T: ["email", "oobCode"],
    B: bi,
    J: ii,
    R: !0
  },
      lg = {
    endpoint: "emailLinkSignin",
    T: ["idToken", "email", "oobCode"],
    B: bi,
    J: ii,
    R: !0
  },
      Hi = {
    endpoint: "getAccountInfo"
  },
      oi = {
    endpoint: "getOobConfirmationCode",
    T: ["requestType"],
    B: function (a) {
      if ("EMAIL_SIGNIN" != a.requestType) throw new L("internal-error");
      bi(a);
    },
    da: "email"
  },
      pi = {
    endpoint: "getOobConfirmationCode",
    T: ["idToken", "requestType"],
    B: function (a) {
      if ("VERIFY_EMAIL" != a.requestType) throw new L("internal-error");
    },
    da: "email"
  },
      ni = {
    endpoint: "getOobConfirmationCode",
    T: ["requestType"],
    B: function (a) {
      if ("PASSWORD_RESET" != a.requestType) throw new L("internal-error");
      bi(a);
    },
    da: "email"
  },
      hi = {
    vb: !0,
    endpoint: "getProjectConfig",
    Ib: "GET"
  },
      Ii = {
    vb: !0,
    endpoint: "getRecaptchaParam",
    Ib: "GET",
    J: function (a) {
      if (!a.recaptchaSiteKey) throw new L("internal-error");
    }
  },
      Ci = {
    endpoint: "resetPassword",
    B: Bi,
    da: "email"
  },
      qi = {
    endpoint: "sendVerificationCode",
    T: ["phoneNumber", "recaptchaToken"],
    da: "sessionInfo"
  },
      li = {
    endpoint: "setAccountInfo",
    T: ["idToken"],
    B: ci,
    R: !0
  },
      mg = {
    endpoint: "setAccountInfo",
    T: ["idToken"],
    B: function (a) {
      ci(a);
      if (!a.password) throw new L("weak-password");
    },
    J: ii,
    R: !0
  },
      ki = {
    endpoint: "signupNewUser",
    J: ii,
    R: !0
  },
      yi = {
    endpoint: "verifyAssertion",
    B: ui,
    Pa: vi,
    J: wi,
    R: !0
  },
      Ai = {
    endpoint: "verifyAssertion",
    B: ui,
    Pa: vi,
    J: function (a) {
      if (a.errorMessage && "USER_NOT_FOUND" == a.errorMessage) throw new L("user-not-found");
      if (a.errorMessage) throw xi(a.errorMessage);
      if (!a[M]) throw new L("internal-error");
    },
    R: !0
  },
      zi = {
    endpoint: "verifyAssertion",
    B: function (a) {
      ui(a);
      if (!a.idToken) throw new L("internal-error");
    },
    Pa: vi,
    J: wi,
    R: !0
  },
      Ji = {
    endpoint: "verifyCustomToken",
    B: function (a) {
      if (!a.token) throw new L("invalid-custom-token");
    },
    J: ii,
    R: !0
  },
      kg = {
    endpoint: "verifyPassword",
    B: function (a) {
      bi(a);
      if (!a.password) throw new L("wrong-password");
    },
    J: ii,
    R: !0
  },
      ri = {
    endpoint: "verifyPhoneNumber",
    B: ji,
    J: ii
  },
      rg = {
    endpoint: "verifyPhoneNumber",
    B: function (a) {
      if (!a.idToken) throw new L("internal-error");
      ji(a);
    },
    J: function (a) {
      if (a.temporaryProof) throw a.code = "credential-already-in-use", Eg(a);
      ii(a);
    }
  },
      sg = {
    Xb: {
      USER_NOT_FOUND: "user-not-found"
    },
    endpoint: "verifyPhoneNumber",
    B: ji,
    J: ii
  };

  function P(a, b, c) {
    if (!Re(c, b.T)) return C(new L("internal-error"));
    var d = b.Ib || "POST",
        e;
    return B(c).then(b.B).then(function () {
      b.R && (c.returnSecureToken = !0);
      return ai(a, b.endpoint, d, c, b.Xb, b.vb || !1);
    }).then(function (a) {
      e = a;
      return b.Pa ? b.Pa(c, e) : e;
    }).then(b.J).then(function () {
      if (!b.da) return e;
      if (!(b.da in e)) throw new L("internal-error");
      return e[b.da];
    });
  }

  function xi(a) {
    return $h({
      error: {
        errors: [{
          message: a
        }],
        code: 400,
        message: a
      }
    });
  }

  function $h(a, b) {
    var c = (a.error && a.error.errors && a.error.errors[0] || {}).reason || "";
    var d = {
      keyInvalid: "invalid-api-key",
      ipRefererBlocked: "app-not-authorized"
    };
    if (c = d[c] ? new L(d[c]) : null) return c;
    c = a.error && a.error.message || "";
    d = {
      INVALID_CUSTOM_TOKEN: "invalid-custom-token",
      CREDENTIAL_MISMATCH: "custom-token-mismatch",
      MISSING_CUSTOM_TOKEN: "internal-error",
      INVALID_IDENTIFIER: "invalid-email",
      MISSING_CONTINUE_URI: "internal-error",
      INVALID_EMAIL: "invalid-email",
      INVALID_PASSWORD: "wrong-password",
      USER_DISABLED: "user-disabled",
      MISSING_PASSWORD: "internal-error",
      EMAIL_EXISTS: "email-already-in-use",
      PASSWORD_LOGIN_DISABLED: "operation-not-allowed",
      INVALID_IDP_RESPONSE: "invalid-credential",
      INVALID_PENDING_TOKEN: "invalid-credential",
      FEDERATED_USER_ID_ALREADY_LINKED: "credential-already-in-use",
      MISSING_OR_INVALID_NONCE: "missing-or-invalid-nonce",
      INVALID_MESSAGE_PAYLOAD: "invalid-message-payload",
      INVALID_RECIPIENT_EMAIL: "invalid-recipient-email",
      INVALID_SENDER: "invalid-sender",
      EMAIL_NOT_FOUND: "user-not-found",
      RESET_PASSWORD_EXCEED_LIMIT: "too-many-requests",
      EXPIRED_OOB_CODE: "expired-action-code",
      INVALID_OOB_CODE: "invalid-action-code",
      MISSING_OOB_CODE: "internal-error",
      INVALID_PROVIDER_ID: "invalid-provider-id",
      CREDENTIAL_TOO_OLD_LOGIN_AGAIN: "requires-recent-login",
      INVALID_ID_TOKEN: "invalid-user-token",
      TOKEN_EXPIRED: "user-token-expired",
      USER_NOT_FOUND: "user-token-expired",
      CORS_UNSUPPORTED: "cors-unsupported",
      DYNAMIC_LINK_NOT_ACTIVATED: "dynamic-link-not-activated",
      INVALID_APP_ID: "invalid-app-id",
      TOO_MANY_ATTEMPTS_TRY_LATER: "too-many-requests",
      WEAK_PASSWORD: "weak-password",
      OPERATION_NOT_ALLOWED: "operation-not-allowed",
      USER_CANCELLED: "user-cancelled",
      CAPTCHA_CHECK_FAILED: "captcha-check-failed",
      INVALID_APP_CREDENTIAL: "invalid-app-credential",
      INVALID_CODE: "invalid-verification-code",
      INVALID_PHONE_NUMBER: "invalid-phone-number",
      INVALID_SESSION_INFO: "invalid-verification-id",
      INVALID_TEMPORARY_PROOF: "invalid-credential",
      MISSING_APP_CREDENTIAL: "missing-app-credential",
      MISSING_CODE: "missing-verification-code",
      MISSING_PHONE_NUMBER: "missing-phone-number",
      MISSING_SESSION_INFO: "missing-verification-id",
      QUOTA_EXCEEDED: "quota-exceeded",
      SESSION_EXPIRED: "code-expired",
      REJECTED_CREDENTIAL: "rejected-credential",
      INVALID_CONTINUE_URI: "invalid-continue-uri",
      MISSING_ANDROID_PACKAGE_NAME: "missing-android-pkg-name",
      MISSING_IOS_BUNDLE_ID: "missing-ios-bundle-id",
      UNAUTHORIZED_DOMAIN: "unauthorized-continue-uri",
      INVALID_DYNAMIC_LINK_DOMAIN: "invalid-dynamic-link-domain",
      INVALID_OAUTH_CLIENT_ID: "invalid-oauth-client-id",
      INVALID_CERT_HASH: "invalid-cert-hash"
    };
    ab(d, b || {});
    b = (b = c.match(/^[^\s]+\s*:\s*(.*)$/)) && 1 < b.length ? b[1] : void 0;

    for (var e in d) if (0 === c.indexOf(e)) return new L(d[e], b);

    !b && a && (b = ze(a));
    return new L("internal-error", b);
  }

  ;

  function Ki(a) {
    this.b = a;
    this.a = null;
    this.gb = Li(this);
  }

  function Li(a) {
    return Mi().then(function () {
      return new A(function (b, c) {
        I("gapi.iframes.getContext")().open({
          where: document.body,
          url: a.b,
          messageHandlersFilter: I("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),
          attributes: {
            style: {
              position: "absolute",
              top: "-100px",
              width: "1px",
              height: "1px"
            }
          },
          dontclear: !0
        }, function (d) {
          function e() {
            clearTimeout(f);
            b();
          }

          a.a = d;
          a.a.restyle({
            setHideOnLeave: !1
          });
          var f = setTimeout(function () {
            c(Error("Network Error"));
          }, Ni.get());
          d.ping(e).then(e, function () {
            c(Error("Network Error"));
          });
        });
      });
    });
  }

  function Oi(a, b) {
    return a.gb.then(function () {
      return new A(function (c) {
        a.a.send(b.type, b, c, I("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
      });
    });
  }

  function Pi(a, b) {
    a.gb.then(function () {
      a.a.register("authEvent", b, I("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"));
    });
  }

  var Qi = new od(pd, "https://apis.google.com/js/api.js?onload=%{onload}"),
      Ri = new Ee(3E4, 6E4),
      Ni = new Ee(5E3, 15E3),
      Si = null;

  function Mi() {
    return Si ? Si : Si = new A(function (a, b) {
      function c() {
        De();
        I("gapi.load")("gapi.iframes", {
          callback: a,
          ontimeout: function () {
            De();
            b(Error("Network Error"));
          },
          timeout: Ri.get()
        });
      }

      if (I("gapi.iframes.Iframe")) a();else if (I("gapi.load")) c();else {
        var d = "__iframefcb" + Math.floor(1E6 * Math.random()).toString();

        k[d] = function () {
          I("gapi.load") ? c() : b(Error("Network Error"));
        };

        d = vd(Qi, {
          onload: d
        });
        B(Gh(d)).s(function () {
          b(Error("Network Error"));
        });
      }
    }).s(function (a) {
      Si = null;
      throw a;
    });
  }

  ;

  function Ti(a, b, c) {
    this.i = a;
    this.g = b;
    this.h = c;
    this.f = null;
    this.a = fd(this.i, "/__/auth/iframe");
    G(this.a, "apiKey", this.g);
    G(this.a, "appName", this.h);
    this.b = null;
    this.c = [];
  }

  Ti.prototype.toString = function () {
    this.f ? G(this.a, "v", this.f) : ld(this.a.a, "v");
    this.b ? G(this.a, "eid", this.b) : ld(this.a.a, "eid");
    this.c.length ? G(this.a, "fw", this.c.join(",")) : ld(this.a.a, "fw");
    return this.a.toString();
  };

  function Ui(a, b, c, d, e) {
    this.m = a;
    this.l = b;
    this.c = c;
    this.o = d;
    this.h = this.g = this.i = null;
    this.a = e;
    this.f = null;
  }

  Ui.prototype.toString = function () {
    var a = fd(this.m, "/__/auth/handler");
    G(a, "apiKey", this.l);
    G(a, "appName", this.c);
    G(a, "authType", this.o);

    if (this.a.isOAuthProvider) {
      var b = this.a;

      try {
        var c = _app.default.app(this.c).auth().ea();
      } catch (m) {
        c = null;
      }

      b.ab = c;
      G(a, "providerId", this.a.providerId);
      b = this.a;
      c = Ae(b.zb);

      for (var d in c) c[d] = c[d].toString();

      d = b.Fc;
      c = Za(c);

      for (var e = 0; e < d.length; e++) {
        var f = d[e];
        f in c && delete c[f];
      }

      b.eb && b.ab && !c[b.eb] && (c[b.eb] = b.ab);
      Ya(c) || G(a, "customParameters", ze(c));
    }

    "function" === typeof this.a.Fb && (b = this.a.Fb(), b.length && G(a, "scopes", b.join(",")));
    this.i ? G(a, "redirectUrl", this.i) : ld(a.a, "redirectUrl");
    this.g ? G(a, "eventId", this.g) : ld(a.a, "eventId");
    this.h ? G(a, "v", this.h) : ld(a.a, "v");
    if (this.b) for (var h in this.b) this.b.hasOwnProperty(h) && !dd(a, h) && G(a, h, this.b[h]);
    this.f ? G(a, "eid", this.f) : ld(a.a, "eid");
    h = Vi(this.c);
    h.length && G(a, "fw", h.join(","));
    return a.toString();
  };

  function Vi(a) {
    try {
      return _app.default.app(a).auth().ya();
    } catch (b) {
      return [];
    }
  }

  function Wi(a, b, c, d, e) {
    this.l = a;
    this.f = b;
    this.b = c;
    this.c = d || null;
    this.h = e || null;
    this.m = this.u = this.v = null;
    this.g = [];
    this.o = this.a = null;
  }

  function Xi(a) {
    var b = Xd();
    return gi(a).then(function (a) {
      a: {
        var c = ed(b),
            e = c.c;
        c = c.b;

        for (var f = 0; f < a.length; f++) {
          var h = a[f];
          var m = c;
          var p = e;
          0 == h.indexOf("chrome-extension://") ? m = ed(h).b == m && "chrome-extension" == p : "http" != p && "https" != p ? m = !1 : he.test(h) ? m = m == h : (h = h.split(".").join("\\."), m = new RegExp("^(.+\\." + h + "|" + h + ")$", "i").test(m));

          if (m) {
            a = !0;
            break a;
          }
        }

        a = !1;
      }

      if (!a) throw new Cg(Xd());
    });
  }

  function Yi(a) {
    if (a.o) return a.o;
    a.o = je().then(function () {
      if (!a.u) {
        var b = a.c,
            c = a.h,
            d = Vi(a.b),
            e = new Ti(a.l, a.f, a.b);
        e.f = b;
        e.b = c;
        e.c = Ka(d || []);
        a.u = e.toString();
      }

      a.i = new Ki(a.u);
      Zi(a);
    });
    return a.o;
  }

  g = Wi.prototype;

  g.Ea = function (a, b, c) {
    var d = new L("popup-closed-by-user"),
        e = new L("web-storage-unsupported"),
        f = this,
        h = !1;
    return this.ga().then(function () {
      $i(f).then(function (c) {
        c || (a && de(a), b(e), h = !0);
      });
    }).s(function () {}).then(function () {
      if (!h) return ge(a);
    }).then(function () {
      if (!h) return Ic(c).then(function () {
        b(d);
      });
    });
  };

  g.Mb = function () {
    var a = H();
    return !ye(a) && !Ce(a);
  };

  g.Hb = function () {
    return !1;
  };

  g.Db = function (a, b, c, d, e, f, h) {
    if (!a) return C(new L("popup-blocked"));
    if (h && !ye()) return this.ga().s(function (b) {
      de(a);
      e(b);
    }), d(), B();
    this.a || (this.a = Xi(aj(this)));
    var m = this;
    return this.a.then(function () {
      var b = m.ga().s(function (b) {
        de(a);
        e(b);
        throw b;
      });
      d();
      return b;
    }).then(function () {
      xg(c);

      if (!h) {
        var d = bj(m.l, m.f, m.b, b, c, null, f, m.c, void 0, m.h);
        Yd(d, a);
      }
    }).s(function (a) {
      "auth/network-request-failed" == a.code && (m.a = null);
      throw a;
    });
  };

  function aj(a) {
    a.m || (a.v = a.c ? te(a.c, Vi(a.b)) : null, a.m = new Nh(a.f, Af(a.h), a.v));
    return a.m;
  }

  g.Ca = function (a, b, c) {
    this.a || (this.a = Xi(aj(this)));
    var d = this;
    return this.a.then(function () {
      xg(b);
      var e = bj(d.l, d.f, d.b, a, b, Xd(), c, d.c, void 0, d.h);
      Yd(e);
    }).s(function (a) {
      "auth/network-request-failed" == a.code && (d.a = null);
      throw a;
    });
  };

  g.ga = function () {
    var a = this;
    return Yi(this).then(function () {
      return a.i.gb;
    }).s(function () {
      a.a = null;
      throw new L("network-request-failed");
    });
  };

  g.Qb = function () {
    return !0;
  };

  function bj(a, b, c, d, e, f, h, m, p, x) {
    a = new Ui(a, b, c, d, e);
    a.i = f;
    a.g = h;
    a.h = m;
    a.b = Za(p || null);
    a.f = x;
    return a.toString();
  }

  function Zi(a) {
    if (!a.i) throw Error("IfcHandler must be initialized!");
    Pi(a.i, function (b) {
      var c = {};

      if (b && b.authEvent) {
        var d = !1;
        b = zg(b.authEvent);

        for (c = 0; c < a.g.length; c++) d = a.g[c](b) || d;

        c = {};
        c.status = d ? "ACK" : "ERROR";
        return B(c);
      }

      c.status = "ERROR";
      return B(c);
    });
  }

  function $i(a) {
    var b = {
      type: "webStorageSupport"
    };
    return Yi(a).then(function () {
      return Oi(a.i, b);
    }).then(function (a) {
      if (a && a.length && "undefined" !== typeof a[0].webStorageSupport) return a[0].webStorageSupport;
      throw Error();
    });
  }

  g.wa = function (a) {
    this.g.push(a);
  };

  g.Ka = function (a) {
    w(this.g, function (b) {
      return b == a;
    });
  };

  function cj(a) {
    this.a = a || _app.default.INTERNAL.reactNative && _app.default.INTERNAL.reactNative.AsyncStorage;
    if (!this.a) throw new L("internal-error", "The React Native compatibility library was not found.");
    this.type = "asyncStorage";
  }

  g = cj.prototype;

  g.get = function (a) {
    return B(this.a.getItem(a)).then(function (a) {
      return a && Be(a);
    });
  };

  g.set = function (a, b) {
    return B(this.a.setItem(a, ze(b)));
  };

  g.P = function (a) {
    return B(this.a.removeItem(a));
  };

  g.Y = function () {};

  g.ca = function () {};

  function dj(a) {
    this.b = a;
    this.a = {};
    this.c = r(this.f, this);
  }

  var ej = [];

  function fj() {
    var a = oe() ? self : null;
    v(ej, function (c) {
      c.b == a && (b = c);
    });

    if (!b) {
      var b = new dj(a);
      ej.push(b);
    }

    return b;
  }

  dj.prototype.f = function (a) {
    var b = a.data.eventType,
        c = a.data.eventId,
        d = this.a[b];

    if (d && 0 < d.length) {
      a.ports[0].postMessage({
        status: "ack",
        eventId: c,
        eventType: b,
        response: null
      });
      var e = [];
      v(d, function (b) {
        e.push(B().then(function () {
          return b(a.origin, a.data.data);
        }));
      });
      xb(e).then(function (d) {
        var e = [];
        v(d, function (a) {
          e.push({
            fulfilled: a.Eb,
            value: a.value,
            reason: a.reason ? a.reason.message : void 0
          });
        });
        v(e, function (a) {
          for (var b in a) "undefined" === typeof a[b] && delete a[b];
        });
        a.ports[0].postMessage({
          status: "done",
          eventId: c,
          eventType: b,
          response: e
        });
      });
    }
  };

  dj.prototype.subscribe = function (a, b) {
    Ya(this.a) && this.b.addEventListener("message", this.c);
    "undefined" === typeof this.a[a] && (this.a[a] = []);
    this.a[a].push(b);
  };

  dj.prototype.unsubscribe = function (a, b) {
    "undefined" !== typeof this.a[a] && b ? (w(this.a[a], function (a) {
      return a == b;
    }), 0 == this.a[a].length && delete this.a[a]) : b || delete this.a[a];
    Ya(this.a) && this.b.removeEventListener("message", this.c);
  };

  function gj(a) {
    this.a = a;
  }

  gj.prototype.postMessage = function (a, b) {
    this.a.postMessage(a, b);
  };

  function hj(a) {
    this.c = a;
    this.b = !1;
    this.a = [];
  }

  function ij(a, b, c, d) {
    var e,
        f = c || {},
        h,
        m,
        p,
        x = null;
    if (a.b) return C(Error("connection_unavailable"));
    var gb = d ? 800 : 50,
        la = "undefined" !== typeof MessageChannel ? new MessageChannel() : null;
    return new A(function (c, d) {
      la ? (e = Math.floor(Math.random() * Math.pow(10, 20)).toString(), la.port1.start(), m = setTimeout(function () {
        d(Error("unsupported_event"));
      }, gb), h = function (a) {
        a.data.eventId === e && ("ack" === a.data.status ? (clearTimeout(m), p = setTimeout(function () {
          d(Error("timeout"));
        }, 3E3)) : "done" === a.data.status ? (clearTimeout(p), "undefined" !== typeof a.data.response ? c(a.data.response) : d(Error("unknown_error"))) : (clearTimeout(m), clearTimeout(p), d(Error("invalid_response"))));
      }, x = {
        messageChannel: la,
        onMessage: h
      }, a.a.push(x), la.port1.addEventListener("message", h), a.c.postMessage({
        eventType: b,
        eventId: e,
        data: f
      }, [la.port2])) : d(Error("connection_unavailable"));
    }).then(function (b) {
      jj(a, x);
      return b;
    }).s(function (b) {
      jj(a, x);
      throw b;
    });
  }

  function jj(a, b) {
    if (b) {
      var c = b.messageChannel,
          d = b.onMessage;
      c && (c.port1.removeEventListener("message", d), c.port1.close());
      w(a.a, function (a) {
        return a == b;
      });
    }
  }

  hj.prototype.close = function () {
    for (; 0 < this.a.length;) jj(this, this.a[0]);

    this.b = !0;
  };

  function kj() {
    if (!lj()) throw new L("web-storage-unsupported");
    this.c = {};
    this.a = [];
    this.b = 0;
    this.l = k.indexedDB;
    this.type = "indexedDB";
    this.g = this.o = this.f = this.i = null;
    this.u = !1;
    this.h = null;
    var a = this;
    oe() && self ? (this.o = fj(), this.o.subscribe("keyChanged", function (b, c) {
      return mj(a).then(function (b) {
        0 < b.length && v(a.a, function (a) {
          a(b);
        });
        return {
          keyProcessed: Ha(b, c.key)
        };
      });
    }), this.o.subscribe("ping", function () {
      return B(["keyChanged"]);
    })) : Ke().then(function (b) {
      if (a.h = b) a.g = new hj(new gj(b)), ij(a.g, "ping", null, !0).then(function (b) {
        b[0].fulfilled && Ha(b[0].value, "keyChanged") && (a.u = !0);
      }).s(function () {});
    });
  }

  var nj;

  function oj(a) {
    return new A(function (b, c) {
      var d = a.l.deleteDatabase("firebaseLocalStorageDb");

      d.onsuccess = function () {
        b();
      };

      d.onerror = function (a) {
        c(Error(a.target.error));
      };
    });
  }

  function pj(a) {
    return new A(function (b, c) {
      var d = a.l.open("firebaseLocalStorageDb", 1);

      d.onerror = function (a) {
        try {
          a.preventDefault();
        } catch (f) {}

        c(Error(a.target.error));
      };

      d.onupgradeneeded = function (a) {
        a = a.target.result;

        try {
          a.createObjectStore("firebaseLocalStorage", {
            keyPath: "fbase_key"
          });
        } catch (f) {
          c(f);
        }
      };

      d.onsuccess = function (d) {
        d = d.target.result;
        d.objectStoreNames.contains("firebaseLocalStorage") ? b(d) : oj(a).then(function () {
          return pj(a);
        }).then(function (a) {
          b(a);
        }).s(function (a) {
          c(a);
        });
      };
    });
  }

  function qj(a) {
    a.m || (a.m = pj(a));
    return a.m;
  }

  function lj() {
    try {
      return !!k.indexedDB;
    } catch (a) {
      return !1;
    }
  }

  function rj(a) {
    return a.objectStore("firebaseLocalStorage");
  }

  function sj(a, b) {
    return a.transaction(["firebaseLocalStorage"], b ? "readwrite" : "readonly");
  }

  function tj(a) {
    return new A(function (b, c) {
      a.onsuccess = function (a) {
        a && a.target ? b(a.target.result) : b();
      };

      a.onerror = function (a) {
        c(a.target.error);
      };
    });
  }

  g = kj.prototype;

  g.set = function (a, b) {
    var c = !1,
        d,
        e = this;
    return qj(this).then(function (b) {
      d = b;
      b = rj(sj(d, !0));
      return tj(b.get(a));
    }).then(function (f) {
      var h = rj(sj(d, !0));
      if (f) return f.value = b, tj(h.put(f));
      e.b++;
      c = !0;
      f = {};
      f.fbase_key = a;
      f.value = b;
      return tj(h.add(f));
    }).then(function () {
      e.c[a] = b;
      return uj(e, a);
    }).ia(function () {
      c && e.b--;
    });
  };

  function uj(a, b) {
    return a.g && a.h && Je() === a.h ? ij(a.g, "keyChanged", {
      key: b
    }, a.u).then(function () {}).s(function () {}) : B();
  }

  g.get = function (a) {
    return qj(this).then(function (b) {
      return tj(rj(sj(b, !1)).get(a));
    }).then(function (a) {
      return a && a.value;
    });
  };

  g.P = function (a) {
    var b = !1,
        c = this;
    return qj(this).then(function (d) {
      b = !0;
      c.b++;
      return tj(rj(sj(d, !0))["delete"](a));
    }).then(function () {
      delete c.c[a];
      return uj(c, a);
    }).ia(function () {
      b && c.b--;
    });
  };

  function mj(a) {
    return qj(a).then(function (a) {
      var b = rj(sj(a, !1));
      return b.getAll ? tj(b.getAll()) : new A(function (a, c) {
        var d = [],
            e = b.openCursor();

        e.onsuccess = function (b) {
          (b = b.target.result) ? (d.push(b.value), b["continue"]()) : a(d);
        };

        e.onerror = function (a) {
          c(a.target.error);
        };
      });
    }).then(function (b) {
      var c = {},
          d = [];

      if (0 == a.b) {
        for (d = 0; d < b.length; d++) c[b[d].fbase_key] = b[d].value;

        d = Zd(a.c, c);
        a.c = c;
      }

      return d;
    });
  }

  g.Y = function (a) {
    0 == this.a.length && vj(this);
    this.a.push(a);
  };

  g.ca = function (a) {
    w(this.a, function (b) {
      return b == a;
    });
    0 == this.a.length && wj(this);
  };

  function vj(a) {
    function b() {
      a.f = setTimeout(function () {
        a.i = mj(a).then(function (b) {
          0 < b.length && v(a.a, function (a) {
            a(b);
          });
        }).then(function () {
          b();
        }).s(function (a) {
          "STOP_EVENT" != a.message && b();
        });
      }, 800);
    }

    wj(a);
    b();
  }

  function wj(a) {
    a.i && a.i.cancel("STOP_EVENT");
    a.f && (clearTimeout(a.f), a.f = null);
  }

  ;

  function xj(a) {
    var b = this,
        c = null;
    this.a = [];
    this.type = "indexedDB";
    this.c = a;
    this.b = B().then(function () {
      if (lj()) {
        var a = ve(),
            e = "__sak" + a;
        nj || (nj = new kj());
        c = nj;
        return c.set(e, a).then(function () {
          return c.get(e);
        }).then(function (b) {
          if (b !== a) throw Error("indexedDB not supported!");
          return c.P(e);
        }).then(function () {
          return c;
        }).s(function () {
          return b.c;
        });
      }

      return b.c;
    }).then(function (a) {
      b.type = a.type;
      a.Y(function (a) {
        v(b.a, function (b) {
          b(a);
        });
      });
      return a;
    });
  }

  g = xj.prototype;

  g.get = function (a) {
    return this.b.then(function (b) {
      return b.get(a);
    });
  };

  g.set = function (a, b) {
    return this.b.then(function (c) {
      return c.set(a, b);
    });
  };

  g.P = function (a) {
    return this.b.then(function (b) {
      return b.P(a);
    });
  };

  g.Y = function (a) {
    this.a.push(a);
  };

  g.ca = function (a) {
    w(this.a, function (b) {
      return b == a;
    });
  };

  function yj() {
    this.a = {};
    this.type = "inMemory";
  }

  g = yj.prototype;

  g.get = function (a) {
    return B(this.a[a]);
  };

  g.set = function (a, b) {
    this.a[a] = b;
    return B();
  };

  g.P = function (a) {
    delete this.a[a];
    return B();
  };

  g.Y = function () {};

  g.ca = function () {};

  function zj() {
    if (!Aj()) {
      if ("Node" == pe()) throw new L("internal-error", "The LocalStorage compatibility library was not found.");
      throw new L("web-storage-unsupported");
    }

    this.a = Bj() || _app.default.INTERNAL.node.localStorage;
    this.type = "localStorage";
  }

  function Bj() {
    try {
      var a = k.localStorage,
          b = ve();
      a && (a.setItem(b, "1"), a.removeItem(b));
      return a;
    } catch (c) {
      return null;
    }
  }

  function Aj() {
    var a = "Node" == pe();
    a = Bj() || a && _app.default.INTERNAL.node && _app.default.INTERNAL.node.localStorage;
    if (!a) return !1;

    try {
      return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;
    } catch (b) {
      return !1;
    }
  }

  g = zj.prototype;

  g.get = function (a) {
    var b = this;
    return B().then(function () {
      var c = b.a.getItem(a);
      return Be(c);
    });
  };

  g.set = function (a, b) {
    var c = this;
    return B().then(function () {
      var d = ze(b);
      null === d ? c.P(a) : c.a.setItem(a, d);
    });
  };

  g.P = function (a) {
    var b = this;
    return B().then(function () {
      b.a.removeItem(a);
    });
  };

  g.Y = function (a) {
    k.window && sc(k.window, "storage", a);
  };

  g.ca = function (a) {
    k.window && E(k.window, "storage", a);
  };

  function Cj() {
    this.type = "nullStorage";
  }

  g = Cj.prototype;

  g.get = function () {
    return B(null);
  };

  g.set = function () {
    return B();
  };

  g.P = function () {
    return B();
  };

  g.Y = function () {};

  g.ca = function () {};

  function Dj() {
    if (!Ej()) {
      if ("Node" == pe()) throw new L("internal-error", "The SessionStorage compatibility library was not found.");
      throw new L("web-storage-unsupported");
    }

    this.a = Fj() || _app.default.INTERNAL.node.sessionStorage;
    this.type = "sessionStorage";
  }

  function Fj() {
    try {
      var a = k.sessionStorage,
          b = ve();
      a && (a.setItem(b, "1"), a.removeItem(b));
      return a;
    } catch (c) {
      return null;
    }
  }

  function Ej() {
    var a = "Node" == pe();
    a = Fj() || a && _app.default.INTERNAL.node && _app.default.INTERNAL.node.sessionStorage;
    if (!a) return !1;

    try {
      return a.setItem("__sak", "1"), a.removeItem("__sak"), !0;
    } catch (b) {
      return !1;
    }
  }

  g = Dj.prototype;

  g.get = function (a) {
    var b = this;
    return B().then(function () {
      var c = b.a.getItem(a);
      return Be(c);
    });
  };

  g.set = function (a, b) {
    var c = this;
    return B().then(function () {
      var d = ze(b);
      null === d ? c.P(a) : c.a.setItem(a, d);
    });
  };

  g.P = function (a) {
    var b = this;
    return B().then(function () {
      b.a.removeItem(a);
    });
  };

  g.Y = function () {};

  g.ca = function () {};

  function Gj() {
    var a = {};
    a.Browser = Hj;
    a.Node = Ij;
    a.ReactNative = Jj;
    a.Worker = Kj;
    this.a = a[pe()];
  }

  var Lj,
      Hj = {
    A: zj,
    Sa: Dj
  },
      Ij = {
    A: zj,
    Sa: Dj
  },
      Jj = {
    A: cj,
    Sa: Cj
  },
      Kj = {
    A: zj,
    Sa: Cj
  };
  var Mj = {
    ad: "local",
    NONE: "none",
    cd: "session"
  };

  function Nj(a) {
    var b = new L("invalid-persistence-type"),
        c = new L("unsupported-persistence-type");

    a: {
      for (d in Mj) if (Mj[d] == a) {
        var d = !0;
        break a;
      }

      d = !1;
    }

    if (!d || "string" !== typeof a) throw b;

    switch (pe()) {
      case "ReactNative":
        if ("session" === a) throw c;
        break;

      case "Node":
        if ("none" !== a) throw c;
        break;

      default:
        if (!ue() && "none" !== a) throw c;
    }
  }

  function Oj() {
    var a = !Ce(H()) && ne() ? !0 : !1,
        b = ye(),
        c = ue();
    this.m = a;
    this.h = b;
    this.o = c;
    this.a = {};
    Lj || (Lj = new Gj());
    a = Lj;

    try {
      this.g = !Wd() && Ie() || !k.indexedDB ? new a.a.A() : new xj(oe() ? new yj() : new a.a.A());
    } catch (d) {
      this.g = new yj(), this.h = !0;
    }

    try {
      this.i = new a.a.Sa();
    } catch (d) {
      this.i = new yj();
    }

    this.l = new yj();
    this.f = r(this.Pb, this);
    this.b = {};
  }

  var Pj;

  function Qj() {
    Pj || (Pj = new Oj());
    return Pj;
  }

  function Rj(a, b) {
    switch (b) {
      case "session":
        return a.i;

      case "none":
        return a.l;

      default:
        return a.g;
    }
  }

  function Sj(a, b) {
    return "firebase:" + a.name + (b ? ":" + b : "");
  }

  function Tj(a, b, c) {
    var d = Sj(b, c),
        e = Rj(a, b.A);
    return a.get(b, c).then(function (f) {
      var h = null;

      try {
        h = Be(k.localStorage.getItem(d));
      } catch (m) {}

      if (h && !f) return k.localStorage.removeItem(d), a.set(b, h, c);
      h && f && "localStorage" != e.type && k.localStorage.removeItem(d);
    });
  }

  g = Oj.prototype;

  g.get = function (a, b) {
    return Rj(this, a.A).get(Sj(a, b));
  };

  function Uj(a, b, c) {
    c = Sj(b, c);
    "local" == b.A && (a.b[c] = null);
    return Rj(a, b.A).P(c);
  }

  g.set = function (a, b, c) {
    var d = Sj(a, c),
        e = this,
        f = Rj(this, a.A);
    return f.set(d, b).then(function () {
      return f.get(d);
    }).then(function (b) {
      "local" == a.A && (e.b[d] = b);
    });
  };

  g.addListener = function (a, b, c) {
    a = Sj(a, b);
    this.o && (this.b[a] = k.localStorage.getItem(a));
    Ya(this.a) && (Rj(this, "local").Y(this.f), this.h || (Wd() || !Ie()) && k.indexedDB || !this.o || Vj(this));
    this.a[a] || (this.a[a] = []);
    this.a[a].push(c);
  };

  g.removeListener = function (a, b, c) {
    a = Sj(a, b);
    this.a[a] && (w(this.a[a], function (a) {
      return a == c;
    }), 0 == this.a[a].length && delete this.a[a]);
    Ya(this.a) && (Rj(this, "local").ca(this.f), Wj(this));
  };

  function Vj(a) {
    Wj(a);
    a.c = setInterval(function () {
      for (var b in a.a) {
        var c = k.localStorage.getItem(b),
            d = a.b[b];
        c != d && (a.b[b] = c, c = new gc({
          type: "storage",
          key: b,
          target: window,
          oldValue: d,
          newValue: c,
          a: !0
        }), a.Pb(c));
      }
    }, 1E3);
  }

  function Wj(a) {
    a.c && (clearInterval(a.c), a.c = null);
  }

  g.Pb = function (a) {
    if (a && a.f) {
      var b = a.a.key;
      if (null == b) for (var c in this.a) {
        var d = this.b[c];
        "undefined" === typeof d && (d = null);
        var e = k.localStorage.getItem(c);
        e !== d && (this.b[c] = e, this.Ya(c));
      } else if (0 == b.indexOf("firebase:") && this.a[b]) {
        "undefined" !== typeof a.a.a ? Rj(this, "local").ca(this.f) : Wj(this);
        if (this.m) if (c = k.localStorage.getItem(b), d = a.a.newValue, d !== c) null !== d ? k.localStorage.setItem(b, d) : k.localStorage.removeItem(b);else if (this.b[b] === d && "undefined" === typeof a.a.a) return;
        var f = this;

        c = function () {
          if ("undefined" !== typeof a.a.a || f.b[b] !== k.localStorage.getItem(b)) f.b[b] = k.localStorage.getItem(b), f.Ya(b);
        };

        Qb && ac && 10 == ac && k.localStorage.getItem(b) !== a.a.newValue && a.a.newValue !== a.a.oldValue ? setTimeout(c, 10) : c();
      }
    } else v(a, r(this.Ya, this));
  };

  g.Ya = function (a) {
    this.a[a] && v(this.a[a], function (a) {
      a();
    });
  };

  function Xj(a) {
    this.a = a;
    this.b = Qj();
  }

  var Yj = {
    name: "authEvent",
    A: "local"
  };

  function Zj(a) {
    return a.b.get(Yj, a.a).then(function (a) {
      return zg(a);
    });
  }

  ;

  function ak() {
    this.a = Qj();
  }

  ;

  function bk() {
    this.b = -1;
  }

  ;

  function ck(a, b) {
    this.b = dk;
    this.f = k.Uint8Array ? new Uint8Array(this.b) : Array(this.b);
    this.g = this.c = 0;
    this.a = [];
    this.i = a;
    this.h = b;
    this.o = k.Int32Array ? new Int32Array(64) : Array(64);
    void 0 !== ek || (k.Int32Array ? ek = new Int32Array(fk) : ek = fk);
    this.reset();
  }

  var ek;
  t(ck, bk);

  for (var dk = 64, gk = dk - 1, hk = [], ik = 0; ik < gk; ik++) hk[ik] = 0;

  var jk = Ja(128, hk);

  ck.prototype.reset = function () {
    this.g = this.c = 0;
    this.a = k.Int32Array ? new Int32Array(this.h) : Ka(this.h);
  };

  function kk(a) {
    for (var b = a.f, c = a.o, d = 0, e = 0; e < b.length;) c[d++] = b[e] << 24 | b[e + 1] << 16 | b[e + 2] << 8 | b[e + 3], e = 4 * d;

    for (b = 16; 64 > b; b++) {
      e = c[b - 15] | 0;
      d = c[b - 2] | 0;
      var f = (c[b - 16] | 0) + ((e >>> 7 | e << 25) ^ (e >>> 18 | e << 14) ^ e >>> 3) | 0,
          h = (c[b - 7] | 0) + ((d >>> 17 | d << 15) ^ (d >>> 19 | d << 13) ^ d >>> 10) | 0;
      c[b] = f + h | 0;
    }

    d = a.a[0] | 0;
    e = a.a[1] | 0;
    var m = a.a[2] | 0,
        p = a.a[3] | 0,
        x = a.a[4] | 0,
        gb = a.a[5] | 0,
        la = a.a[6] | 0;
    f = a.a[7] | 0;

    for (b = 0; 64 > b; b++) {
      var Vl = ((d >>> 2 | d << 30) ^ (d >>> 13 | d << 19) ^ (d >>> 22 | d << 10)) + (d & e ^ d & m ^ e & m) | 0;
      h = x & gb ^ ~x & la;
      f = f + ((x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7)) | 0;
      h = h + (ek[b] | 0) | 0;
      h = f + (h + (c[b] | 0) | 0) | 0;
      f = la;
      la = gb;
      gb = x;
      x = p + h | 0;
      p = m;
      m = e;
      e = d;
      d = h + Vl | 0;
    }

    a.a[0] = a.a[0] + d | 0;
    a.a[1] = a.a[1] + e | 0;
    a.a[2] = a.a[2] + m | 0;
    a.a[3] = a.a[3] + p | 0;
    a.a[4] = a.a[4] + x | 0;
    a.a[5] = a.a[5] + gb | 0;
    a.a[6] = a.a[6] + la | 0;
    a.a[7] = a.a[7] + f | 0;
  }

  function lk(a, b, c) {
    void 0 === c && (c = b.length);
    var d = 0,
        e = a.c;
    if (l(b)) for (; d < c;) a.f[e++] = b.charCodeAt(d++), e == a.b && (kk(a), e = 0);else if (ja(b)) for (; d < c;) {
      var f = b[d++];
      if (!("number" == typeof f && 0 <= f && 255 >= f && f == (f | 0))) throw Error("message must be a byte array");
      a.f[e++] = f;
      e == a.b && (kk(a), e = 0);
    } else throw Error("message must be string or array");
    a.c = e;
    a.g += c;
  }

  var fk = [1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080, 310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298];

  function mk() {
    ck.call(this, 8, nk);
  }

  t(mk, ck);
  var nk = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];

  function ok(a, b, c, d, e) {
    this.l = a;
    this.i = b;
    this.o = c;
    this.m = d || null;
    this.u = e || null;
    this.h = b + ":" + c;
    this.v = new ak();
    this.g = new Xj(this.h);
    this.f = null;
    this.b = [];
    this.a = this.c = null;
  }

  function pk(a) {
    return new L("invalid-cordova-configuration", a);
  }

  g = ok.prototype;

  g.ga = function () {
    return this.za ? this.za : this.za = ke().then(function () {
      if ("function" !== typeof I("universalLinks.subscribe", k)) throw pk("cordova-universal-links-plugin-fix is not installed");
      if ("undefined" === typeof I("BuildInfo.packageName", k)) throw pk("cordova-plugin-buildinfo is not installed");
      if ("function" !== typeof I("cordova.plugins.browsertab.openUrl", k)) throw pk("cordova-plugin-browsertab is not installed");
      if ("function" !== typeof I("cordova.InAppBrowser.open", k)) throw pk("cordova-plugin-inappbrowser is not installed");
    }, function () {
      throw new L("cordova-not-ready");
    });
  };

  function qk() {
    for (var a = 20, b = []; 0 < a;) b.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62 * Math.random()))), a--;

    return b.join("");
  }

  function rk(a) {
    var b = new mk();
    lk(b, a);
    a = [];
    var c = 8 * b.g;
    56 > b.c ? lk(b, jk, 56 - b.c) : lk(b, jk, b.b - (b.c - 56));

    for (var d = 63; 56 <= d; d--) b.f[d] = c & 255, c /= 256;

    kk(b);

    for (d = c = 0; d < b.i; d++) for (var e = 24; 0 <= e; e -= 8) a[c++] = b.a[d] >> e & 255;

    return qf(a);
  }

  g.Ea = function (a, b) {
    b(new L("operation-not-supported-in-this-environment"));
    return B();
  };

  g.Db = function () {
    return C(new L("operation-not-supported-in-this-environment"));
  };

  g.Qb = function () {
    return !1;
  };

  g.Mb = function () {
    return !0;
  };

  g.Hb = function () {
    return !0;
  };

  g.Ca = function (a, b, c) {
    if (this.c) return C(new L("redirect-operation-pending"));
    var d = this,
        e = k.document,
        f = null,
        h = null,
        m = null,
        p = null;
    return this.c = B().then(function () {
      xg(b);
      return sk(d);
    }).then(function () {
      return tk(d, a, b, c);
    }).then(function () {
      return new A(function (a, b) {
        h = function () {
          var b = I("cordova.plugins.browsertab.close", k);
          a();
          "function" === typeof b && b();
          d.a && "function" === typeof d.a.close && (d.a.close(), d.a = null);
          return !1;
        };

        d.wa(h);

        m = function () {
          f || (f = Ic(2E3).then(function () {
            b(new L("redirect-cancelled-by-user"));
          }));
        };

        p = function () {
          Fe() && m();
        };

        e.addEventListener("resume", m, !1);
        H().toLowerCase().match(/android/) || e.addEventListener("visibilitychange", p, !1);
      }).s(function (a) {
        return uk(d).then(function () {
          throw a;
        });
      });
    }).ia(function () {
      m && e.removeEventListener("resume", m, !1);
      p && e.removeEventListener("visibilitychange", p, !1);
      f && f.cancel();
      h && d.Ka(h);
      d.c = null;
    });
  };

  function tk(a, b, c, d) {
    var e = qk(),
        f = new yg(b, d, null, e, new L("no-auth-event")),
        h = I("BuildInfo.packageName", k);
    if ("string" !== typeof h) throw new L("invalid-cordova-configuration");
    var m = I("BuildInfo.displayName", k),
        p = {};
    if (H().toLowerCase().match(/iphone|ipad|ipod/)) p.ibi = h;else if (H().toLowerCase().match(/android/)) p.apn = h;else return C(new L("operation-not-supported-in-this-environment"));
    m && (p.appDisplayName = m);
    e = rk(e);
    p.sessionId = e;
    var x = bj(a.l, a.i, a.o, b, c, null, d, a.m, p, a.u);
    return a.ga().then(function () {
      var b = a.h;
      return a.v.a.set(Yj, f.C(), b);
    }).then(function () {
      var b = I("cordova.plugins.browsertab.isAvailable", k);
      if ("function" !== typeof b) throw new L("invalid-cordova-configuration");
      var c = null;
      b(function (b) {
        if (b) {
          c = I("cordova.plugins.browsertab.openUrl", k);
          if ("function" !== typeof c) throw new L("invalid-cordova-configuration");
          c(x);
        } else {
          c = I("cordova.InAppBrowser.open", k);
          if ("function" !== typeof c) throw new L("invalid-cordova-configuration");
          b = H();
          b = !(!b.match(/(iPad|iPhone|iPod).*OS 7_\d/i) && !b.match(/(iPad|iPhone|iPod).*OS 8_\d/i));
          a.a = c(x, b ? "_blank" : "_system", "location=yes");
        }
      });
    });
  }

  function vk(a, b) {
    for (var c = 0; c < a.b.length; c++) try {
      a.b[c](b);
    } catch (d) {}
  }

  function sk(a) {
    a.f || (a.f = a.ga().then(function () {
      return new A(function (b) {
        function c(d) {
          b(d);
          a.Ka(c);
          return !1;
        }

        a.wa(c);
        wk(a);
      });
    }));
    return a.f;
  }

  function uk(a) {
    var b = null;
    return Zj(a.g).then(function (c) {
      b = c;
      c = a.g;
      return Uj(c.b, Yj, c.a);
    }).then(function () {
      return b;
    });
  }

  function wk(a) {
    function b(b) {
      d = !0;
      e && e.cancel();
      uk(a).then(function (d) {
        var e = c;

        if (d && b && b.url) {
          var f = null;
          e = Qf(b.url);
          -1 != e.indexOf("/__/auth/callback") && (f = ed(e), f = Be(dd(f, "firebaseError") || null), f = (f = "object" === typeof f ? df(f) : null) ? new yg(d.b, d.c, null, null, f) : new yg(d.b, d.c, e, d.g));
          e = f || c;
        }

        vk(a, e);
      });
    }

    var c = new yg("unknown", null, null, null, new L("no-auth-event")),
        d = !1,
        e = Ic(500).then(function () {
      return uk(a).then(function () {
        d || vk(a, c);
      });
    }),
        f = k.handleOpenURL;

    k.handleOpenURL = function (a) {
      0 == a.toLowerCase().indexOf(I("BuildInfo.packageName", k).toLowerCase() + "://") && b({
        url: a
      });
      if ("function" === typeof f) try {
        f(a);
      } catch (m) {
        console.error(m);
      }
    };

    Bg || (Bg = new Ag());
    Bg.subscribe(b);
  }

  g.wa = function (a) {
    this.b.push(a);
    sk(this).s(function (b) {
      "auth/invalid-cordova-configuration" === b.code && (b = new yg("unknown", null, null, null, new L("no-auth-event")), a(b));
    });
  };

  g.Ka = function (a) {
    w(this.b, function (b) {
      return b == a;
    });
  };

  function xk(a) {
    this.a = a;
    this.b = Qj();
  }

  var yk = {
    name: "pendingRedirect",
    A: "session"
  };

  function zk(a) {
    return a.b.set(yk, "pending", a.a);
  }

  function Ak(a) {
    return Uj(a.b, yk, a.a);
  }

  function Bk(a) {
    return a.b.get(yk, a.a).then(function (a) {
      return "pending" == a;
    });
  }

  ;

  function Ck(a, b, c) {
    this.u = a;
    this.o = b;
    this.l = c;
    this.h = [];
    this.f = !1;
    this.i = r(this.cb, this);
    this.b = new Dk();
    this.m = new Ek();
    this.g = new xk(this.o + ":" + this.l);
    this.c = {};
    this.c.unknown = this.b;
    this.c.signInViaRedirect = this.b;
    this.c.linkViaRedirect = this.b;
    this.c.reauthViaRedirect = this.b;
    this.c.signInViaPopup = this.m;
    this.c.linkViaPopup = this.m;
    this.c.reauthViaPopup = this.m;
    this.a = Fk(this.u, this.o, this.l, Bf);
  }

  function Fk(a, b, c, d) {
    var e = _app.default.SDK_VERSION || null;
    return le() ? new ok(a, b, c, e, d) : new Wi(a, b, c, e, d);
  }

  g = Ck.prototype;

  g.reset = function () {
    this.f = !1;
    this.a.Ka(this.i);
    this.a = Fk(this.u, this.o, this.l);
  };

  g.Za = function () {
    this.b.Za();
  };

  function Gk(a) {
    a.f || (a.f = !0, a.a.wa(a.i));
    var b = a.a;
    return a.a.ga().s(function (c) {
      a.a == b && a.reset();
      throw c;
    });
  }

  function Hk(a) {
    a.a.Mb() && Gk(a).s(function (b) {
      var c = new yg("unknown", null, null, null, new L("operation-not-supported-in-this-environment"));
      Ik(b) && a.cb(c);
    });
    a.a.Hb() || Jk(a.b);
  }

  g.subscribe = function (a) {
    Ha(this.h, a) || this.h.push(a);

    if (!this.f) {
      var b = this;
      Bk(this.g).then(function (a) {
        a ? Ak(b.g).then(function () {
          Gk(b).s(function (a) {
            var c = new yg("unknown", null, null, null, new L("operation-not-supported-in-this-environment"));
            Ik(a) && b.cb(c);
          });
        }) : Hk(b);
      }).s(function () {
        Hk(b);
      });
    }
  };

  g.unsubscribe = function (a) {
    w(this.h, function (b) {
      return b == a;
    });
  };

  g.cb = function (a) {
    if (!a) throw new L("invalid-auth-event");

    for (var b = !1, c = 0; c < this.h.length; c++) {
      var d = this.h[c];

      if (d.wb(a.b, a.c)) {
        (b = this.c[a.b]) && b.h(a, d);
        b = !0;
        break;
      }
    }

    Jk(this.b);
    return b;
  };

  var Kk = new Ee(2E3, 1E4),
      Lk = new Ee(3E4, 6E4);

  Ck.prototype.fa = function () {
    return this.b.fa();
  };

  function Mk(a, b, c, d, e, f) {
    return a.a.Db(b, c, d, function () {
      a.f || (a.f = !0, a.a.wa(a.i));
    }, function () {
      a.reset();
    }, e, f);
  }

  function Ik(a) {
    return a && "auth/cordova-not-ready" == a.code ? !0 : !1;
  }

  Ck.prototype.Ca = function (a, b, c) {
    var d = this,
        e;
    return zk(this.g).then(function () {
      return d.a.Ca(a, b, c).s(function (a) {
        if (Ik(a)) throw new L("operation-not-supported-in-this-environment");
        e = a;
        return Ak(d.g).then(function () {
          throw e;
        });
      }).then(function () {
        return d.a.Qb() ? new A(function () {}) : Ak(d.g).then(function () {
          return d.fa();
        }).then(function () {}).s(function () {});
      });
    });
  };

  Ck.prototype.Ea = function (a, b, c, d) {
    return this.a.Ea(c, function (c) {
      a.ha(b, null, c, d);
    }, Kk.get());
  };

  var Nk = {};

  function Ok(a, b, c) {
    var d = b + ":" + c;
    Nk[d] || (Nk[d] = new Ck(a, b, c));
    return Nk[d];
  }

  function Dk() {
    this.b = null;
    this.f = [];
    this.c = [];
    this.a = null;
    this.i = this.g = !1;
  }

  Dk.prototype.reset = function () {
    this.b = null;
    this.a && (this.a.cancel(), this.a = null);
  };

  Dk.prototype.h = function (a, b) {
    if (a) {
      this.reset();
      this.g = !0;
      var c = a.b,
          d = a.c,
          e = a.a && "auth/web-storage-unsupported" == a.a.code,
          f = a.a && "auth/operation-not-supported-in-this-environment" == a.a.code;
      this.i = !(!e && !f);
      "unknown" != c || e || f ? a.a ? (Pk(this, !0, null, a.a), B()) : b.xa(c, d) ? Qk(this, a, b) : C(new L("invalid-auth-event")) : (Pk(this, !1, null, null), B());
    } else C(new L("invalid-auth-event"));
  };

  function Jk(a) {
    a.g || (a.g = !0, Pk(a, !1, null, null));
  }

  Dk.prototype.Za = function () {
    this.g && !this.i && Pk(this, !1, null, null);
  };

  function Qk(a, b, c) {
    c = c.xa(b.b, b.c);
    var d = b.f,
        e = b.g,
        f = b.h,
        h = !!b.b.match(/Redirect$/);
    c(d, e, f).then(function (b) {
      Pk(a, h, b, null);
    }).s(function (b) {
      Pk(a, h, null, b);
    });
  }

  function Rk(a, b) {
    a.b = function () {
      return C(b);
    };

    if (a.c.length) for (var c = 0; c < a.c.length; c++) a.c[c](b);
  }

  function Sk(a, b) {
    a.b = function () {
      return B(b);
    };

    if (a.f.length) for (var c = 0; c < a.f.length; c++) a.f[c](b);
  }

  function Pk(a, b, c, d) {
    b ? d ? Rk(a, d) : Sk(a, c) : Sk(a, {
      user: null
    });
    a.f = [];
    a.c = [];
  }

  Dk.prototype.fa = function () {
    var a = this;
    return new A(function (b, c) {
      a.b ? a.b().then(b, c) : (a.f.push(b), a.c.push(c), Tk(a));
    });
  };

  function Tk(a) {
    var b = new L("timeout");
    a.a && a.a.cancel();
    a.a = Ic(Lk.get()).then(function () {
      a.b || (a.g = !0, Pk(a, !0, null, b));
    });
  }

  function Ek() {}

  Ek.prototype.h = function (a, b) {
    if (a) {
      var c = a.b,
          d = a.c;
      a.a ? (b.ha(a.b, null, a.a, a.c), B()) : b.xa(c, d) ? Uk(a, b) : C(new L("invalid-auth-event"));
    } else C(new L("invalid-auth-event"));
  };

  function Uk(a, b) {
    var c = a.c,
        d = a.b;
    b.xa(d, c)(a.f, a.g, a.h).then(function (a) {
      b.ha(d, a, null, c);
    }).s(function (a) {
      b.ha(d, null, a, c);
    });
  }

  ;

  function Vk() {
    this.tb = !1;
    Object.defineProperty(this, "appVerificationDisabled", {
      get: function () {
        return this.tb;
      },
      set: function (a) {
        this.tb = a;
      },
      enumerable: !1
    });
  }

  ;

  function Wk(a, b) {
    this.a = b;
    J(this, "verificationId", a);
  }

  Wk.prototype.confirm = function (a) {
    a = vg(this.verificationId, a);
    return this.a(a);
  };

  function Xk(a, b, c, d) {
    return new tg(a).Va(b, c).then(function (a) {
      return new Wk(a, d);
    });
  }

  ;

  function Yk(a) {
    var b = yf(a);
    if (!(b && b.exp && b.auth_time && b.iat)) throw new L("internal-error", "An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");
    K(this, {
      token: a,
      expirationTime: He(1E3 * b.exp),
      authTime: He(1E3 * b.auth_time),
      issuedAtTime: He(1E3 * b.iat),
      signInProvider: b.firebase && b.firebase.sign_in_provider ? b.firebase.sign_in_provider : null,
      claims: b
    });
  }

  ;

  function Zk(a, b, c) {
    this.h = a;
    this.i = b;
    this.g = c;
    this.c = 3E4;
    this.f = 96E4;
    this.b = null;
    this.a = this.c;
    if (this.f < this.c) throw Error("Proactive refresh lower bound greater than upper bound!");
  }

  Zk.prototype.start = function () {
    this.a = this.c;
    $k(this, !0);
  };

  function al(a, b) {
    if (b) return a.a = a.c, a.g();
    b = a.a;
    a.a *= 2;
    a.a > a.f && (a.a = a.f);
    return b;
  }

  function $k(a, b) {
    a.stop();
    a.b = Ic(al(a, b)).then(function () {
      return Ge();
    }).then(function () {
      return a.h();
    }).then(function () {
      $k(a, !0);
    }).s(function (b) {
      a.i(b) && $k(a, !1);
    });
  }

  Zk.prototype.stop = function () {
    this.b && (this.b.cancel(), this.b = null);
  };

  function bl(a) {
    this.f = a;
    this.b = this.a = null;
    this.c = 0;
  }

  bl.prototype.C = function () {
    return {
      apiKey: this.f.b,
      refreshToken: this.a,
      accessToken: this.b,
      expirationTime: this.c
    };
  };

  function cl(a, b) {
    var c = b[M],
        d = b.refreshToken;
    b = dl(b.expiresIn);
    a.b = c;
    a.c = b;
    a.a = d;
  }

  function el(a, b) {
    a.b = b.b;
    a.a = b.a;
    a.c = b.c;
  }

  function dl(a) {
    return qa() + 1E3 * parseInt(a, 10);
  }

  function fl(a, b) {
    return Zh(a.f, b).then(function (b) {
      a.b = b.access_token;
      a.c = dl(b.expires_in);
      a.a = b.refresh_token;
      return {
        accessToken: a.b,
        expirationTime: a.c,
        refreshToken: a.a
      };
    }).s(function (b) {
      "auth/user-token-expired" == b.code && (a.a = null);
      throw b;
    });
  }

  bl.prototype.getToken = function (a) {
    a = !!a;
    return this.b && !this.a ? C(new L("user-token-expired")) : a || !this.b || qa() > this.c - 3E4 ? this.a ? fl(this, {
      grant_type: "refresh_token",
      refresh_token: this.a
    }) : B(null) : B({
      accessToken: this.b,
      expirationTime: this.c,
      refreshToken: this.a
    });
  };

  function gl(a, b) {
    this.a = a || null;
    this.b = b || null;
    K(this, {
      lastSignInTime: He(b || null),
      creationTime: He(a || null)
    });
  }

  function hl(a) {
    return new gl(a.a, a.b);
  }

  gl.prototype.C = function () {
    return {
      lastLoginAt: this.b,
      createdAt: this.a
    };
  };

  function il(a, b, c, d, e, f) {
    K(this, {
      uid: a,
      displayName: d || null,
      photoURL: e || null,
      email: c || null,
      phoneNumber: f || null,
      providerId: b
    });
  }

  function jl(a, b) {
    D.call(this, a);

    for (var c in b) this[c] = b[c];
  }

  t(jl, D);

  function Q(a, b, c) {
    this.G = [];
    this.l = a.apiKey;
    this.m = a.appName;
    this.u = a.authDomain || null;
    a = _app.default.SDK_VERSION ? te(_app.default.SDK_VERSION) : null;
    this.b = new Nh(this.l, Af(Bf), a);
    this.h = new bl(this.b);
    kl(this, b[M]);
    cl(this.h, b);
    J(this, "refreshToken", this.h.a);
    ll(this, c || {});
    F.call(this);
    this.I = !1;
    this.u && we() && (this.a = Ok(this.u, this.l, this.m));
    this.N = [];
    this.i = null;
    this.w = ml(this);
    this.V = r(this.Ha, this);
    var d = this;
    this.ka = null;

    this.ta = function (a) {
      d.pa(a.g);
    };

    this.X = null;
    this.O = [];

    this.sa = function (a) {
      nl(d, a.c);
    };

    this.W = null;
  }

  t(Q, F);

  Q.prototype.pa = function (a) {
    this.ka = a;
    Th(this.b, a);
  };

  Q.prototype.ea = function () {
    return this.ka;
  };

  function ol(a, b) {
    a.X && E(a.X, "languageCodeChanged", a.ta);
    (a.X = b) && sc(b, "languageCodeChanged", a.ta);
  }

  function nl(a, b) {
    a.O = b;
    Uh(a.b, _app.default.SDK_VERSION ? te(_app.default.SDK_VERSION, a.O) : null);
  }

  Q.prototype.ya = function () {
    return Ka(this.O);
  };

  function pl(a, b) {
    a.W && E(a.W, "frameworkChanged", a.sa);
    (a.W = b) && sc(b, "frameworkChanged", a.sa);
  }

  Q.prototype.Ha = function () {
    this.w.b && (this.w.stop(), this.w.start());
  };

  function ql(a) {
    try {
      return _app.default.app(a.m).auth();
    } catch (b) {
      throw new L("internal-error", "No firebase.auth.Auth instance is available for the Firebase App '" + a.m + "'!");
    }
  }

  function ml(a) {
    return new Zk(function () {
      return a.F(!0);
    }, function (a) {
      return a && "auth/network-request-failed" == a.code ? !0 : !1;
    }, function () {
      var b = a.h.c - qa() - 3E5;
      return 0 < b ? b : 0;
    });
  }

  function rl(a) {
    a.D || a.w.b || (a.w.start(), E(a, "tokenChanged", a.V), sc(a, "tokenChanged", a.V));
  }

  function sl(a) {
    E(a, "tokenChanged", a.V);
    a.w.stop();
  }

  function kl(a, b) {
    a.ra = b;
    J(a, "_lat", b);
  }

  function tl(a, b) {
    w(a.N, function (a) {
      return a == b;
    });
  }

  function ul(a) {
    for (var b = [], c = 0; c < a.N.length; c++) b.push(a.N[c](a));

    return xb(b).then(function () {
      return a;
    });
  }

  function vl(a) {
    a.a && !a.I && (a.I = !0, a.a.subscribe(a));
  }

  function ll(a, b) {
    K(a, {
      uid: b.uid,
      displayName: b.displayName || null,
      photoURL: b.photoURL || null,
      email: b.email || null,
      emailVerified: b.emailVerified || !1,
      phoneNumber: b.phoneNumber || null,
      isAnonymous: b.isAnonymous || !1,
      metadata: new gl(b.createdAt, b.lastLoginAt),
      providerData: []
    });
  }

  J(Q.prototype, "providerId", "firebase");

  function wl() {}

  function xl(a) {
    return B().then(function () {
      if (a.D) throw new L("app-deleted");
    });
  }

  function yl(a) {
    return Da(a.providerData, function (a) {
      return a.providerId;
    });
  }

  function zl(a, b) {
    b && (Al(a, b.providerId), a.providerData.push(b));
  }

  function Al(a, b) {
    w(a.providerData, function (a) {
      return a.providerId == b;
    });
  }

  function Bl(a, b, c) {
    ("uid" != b || c) && a.hasOwnProperty(b) && J(a, b, c);
  }

  function Cl(a, b) {
    a != b && (K(a, {
      uid: b.uid,
      displayName: b.displayName,
      photoURL: b.photoURL,
      email: b.email,
      emailVerified: b.emailVerified,
      phoneNumber: b.phoneNumber,
      isAnonymous: b.isAnonymous,
      providerData: []
    }), b.metadata ? J(a, "metadata", hl(b.metadata)) : J(a, "metadata", new gl()), v(b.providerData, function (b) {
      zl(a, b);
    }), el(a.h, b.h), J(a, "refreshToken", a.h.a));
  }

  g = Q.prototype;

  g.reload = function () {
    var a = this;
    return R(this, xl(this).then(function () {
      return Dl(a).then(function () {
        return ul(a);
      }).then(wl);
    }));
  };

  function Dl(a) {
    return a.F().then(function (b) {
      var c = a.isAnonymous;
      return El(a, b).then(function () {
        c || Bl(a, "isAnonymous", !1);
        return b;
      });
    });
  }

  g.dc = function (a) {
    return this.F(a).then(function (a) {
      return new Yk(a);
    });
  };

  g.F = function (a) {
    var b = this;
    return R(this, xl(this).then(function () {
      return b.h.getToken(a);
    }).then(function (a) {
      if (!a) throw new L("internal-error");
      a.accessToken != b.ra && (kl(b, a.accessToken), b.dispatchEvent(new jl("tokenChanged")));
      Bl(b, "refreshToken", a.refreshToken);
      return a.accessToken;
    }));
  };

  function Fl(a, b) {
    b[M] && a.ra != b[M] && (cl(a.h, b), a.dispatchEvent(new jl("tokenChanged")), kl(a, b[M]), Bl(a, "refreshToken", a.h.a));
  }

  function El(a, b) {
    return P(a.b, Hi, {
      idToken: b
    }).then(r(a.zc, a));
  }

  g.zc = function (a) {
    a = a.users;
    if (!a || !a.length) throw new L("internal-error");
    a = a[0];
    ll(this, {
      uid: a.localId,
      displayName: a.displayName,
      photoURL: a.photoUrl,
      email: a.email,
      emailVerified: !!a.emailVerified,
      phoneNumber: a.phoneNumber,
      lastLoginAt: a.lastLoginAt,
      createdAt: a.createdAt
    });

    for (var b = Gl(a), c = 0; c < b.length; c++) zl(this, b[c]);

    Bl(this, "isAnonymous", !(this.email && a.passwordHash) && !(this.providerData && this.providerData.length));
  };

  function Gl(a) {
    return (a = a.providerUserInfo) && a.length ? Da(a, function (a) {
      return new il(a.rawId, a.providerId, a.email, a.displayName, a.photoUrl, a.phoneNumber);
    }) : [];
  }

  g.hb = function (a) {
    var b = this,
        c = null;
    return R(this, a.f(this.b, this.uid).then(function (a) {
      Fl(b, a);
      c = Hl(b, a, "reauthenticate");
      b.i = null;
      return b.reload();
    }).then(function () {
      return c;
    }), !0);
  };

  g.Ac = function (a) {
    Me("firebase.User.prototype.reauthenticateWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential instead.");
    return this.hb(a).then(function () {});
  };

  function Il(a, b) {
    return Dl(a).then(function () {
      if (Ha(yl(a), b)) return ul(a).then(function () {
        throw new L("provider-already-linked");
      });
    });
  }

  g.fb = function (a) {
    var b = this,
        c = null;
    return R(this, Il(this, a.providerId).then(function () {
      return b.F();
    }).then(function (c) {
      return a.b(b.b, c);
    }).then(function (a) {
      c = Hl(b, a, "link");
      return Jl(b, a);
    }).then(function () {
      return c;
    }));
  };

  g.rc = function (a) {
    Me("firebase.User.prototype.linkWithCredential is deprecated. Please use firebase.User.prototype.linkAndRetrieveDataWithCredential instead.");
    return this.fb(a).then(function (a) {
      return a.user;
    });
  };

  g.sc = function (a, b) {
    var c = this;
    return R(this, Il(this, "phone").then(function () {
      return Xk(ql(c), a, b, r(c.fb, c));
    }));
  };

  g.Bc = function (a, b) {
    var c = this;
    return R(this, B().then(function () {
      return Xk(ql(c), a, b, r(c.hb, c));
    }), !0);
  };

  function Hl(a, b, c) {
    var d = wg(b);
    b = Gf(b);
    return Pe({
      user: a,
      credential: d,
      additionalUserInfo: b,
      operationType: c
    });
  }

  function Jl(a, b) {
    Fl(a, b);
    return a.reload().then(function () {
      return a;
    });
  }

  g.qb = function (a) {
    var b = this;
    return R(this, this.F().then(function (c) {
      return b.b.qb(c, a);
    }).then(function (a) {
      Fl(b, a);
      return b.reload();
    }));
  };

  g.Tc = function (a) {
    var b = this;
    return R(this, this.F().then(function (c) {
      return a.b(b.b, c);
    }).then(function (a) {
      Fl(b, a);
      return b.reload();
    }));
  };

  g.rb = function (a) {
    var b = this;
    return R(this, this.F().then(function (c) {
      return b.b.rb(c, a);
    }).then(function (a) {
      Fl(b, a);
      return b.reload();
    }));
  };

  g.sb = function (a) {
    if (void 0 === a.displayName && void 0 === a.photoURL) return xl(this);
    var b = this;
    return R(this, this.F().then(function (c) {
      return b.b.sb(c, {
        displayName: a.displayName,
        photoUrl: a.photoURL
      });
    }).then(function (a) {
      Fl(b, a);
      Bl(b, "displayName", a.displayName || null);
      Bl(b, "photoURL", a.photoUrl || null);
      v(b.providerData, function (a) {
        "password" === a.providerId && (J(a, "displayName", b.displayName), J(a, "photoURL", b.photoURL));
      });
      return ul(b);
    }).then(wl));
  };

  g.Rc = function (a) {
    var b = this;
    return R(this, Dl(this).then(function (c) {
      return Ha(yl(b), a) ? si(b.b, c, [a]).then(function (a) {
        var c = {};
        v(a.providerUserInfo || [], function (a) {
          c[a.providerId] = !0;
        });
        v(yl(b), function (a) {
          c[a] || Al(b, a);
        });
        c[tg.PROVIDER_ID] || J(b, "phoneNumber", null);
        return ul(b);
      }) : ul(b).then(function () {
        throw new L("no-such-provider");
      });
    }));
  };

  g.delete = function () {
    var a = this;
    return R(this, this.F().then(function (b) {
      return P(a.b, Gi, {
        idToken: b
      });
    }).then(function () {
      a.dispatchEvent(new jl("userDeleted"));
    })).then(function () {
      for (var b = 0; b < a.G.length; b++) a.G[b].cancel("app-deleted");

      ol(a, null);
      pl(a, null);
      a.G = [];
      a.D = !0;
      sl(a);
      J(a, "refreshToken", null);
      a.a && a.a.unsubscribe(a);
    });
  };

  g.wb = function (a, b) {
    return "linkViaPopup" == a && (this.g || null) == b && this.f || "reauthViaPopup" == a && (this.g || null) == b && this.f || "linkViaRedirect" == a && (this.aa || null) == b || "reauthViaRedirect" == a && (this.aa || null) == b ? !0 : !1;
  };

  g.ha = function (a, b, c, d) {
    "linkViaPopup" != a && "reauthViaPopup" != a || d != (this.g || null) || (c && this.v ? this.v(c) : b && !c && this.f && this.f(b), this.c && (this.c.cancel(), this.c = null), delete this.f, delete this.v);
  };

  g.xa = function (a, b) {
    return "linkViaPopup" == a && b == (this.g || null) ? r(this.Bb, this) : "reauthViaPopup" == a && b == (this.g || null) ? r(this.Cb, this) : "linkViaRedirect" == a && (this.aa || null) == b ? r(this.Bb, this) : "reauthViaRedirect" == a && (this.aa || null) == b ? r(this.Cb, this) : null;
  };

  g.tc = function (a) {
    var b = this;
    return Kl(this, "linkViaPopup", a, function () {
      return Il(b, a.providerId).then(function () {
        return ul(b);
      });
    }, !1);
  };

  g.Cc = function (a) {
    return Kl(this, "reauthViaPopup", a, function () {
      return B();
    }, !0);
  };

  function Kl(a, b, c, d, e) {
    if (!we()) return C(new L("operation-not-supported-in-this-environment"));
    if (a.i && !e) return C(a.i);
    var f = Ff(c.providerId),
        h = ve(a.uid + ":::"),
        m = null;
    (!ye() || ne()) && a.u && c.isOAuthProvider && (m = bj(a.u, a.l, a.m, b, c, null, h, _app.default.SDK_VERSION || null));
    var p = ee(m, f && f.Ba, f && f.Aa);
    d = d().then(function () {
      Ll(a);
      if (!e) return a.F().then(function () {});
    }).then(function () {
      return Mk(a.a, p, b, c, h, !!m);
    }).then(function () {
      return new A(function (c, d) {
        a.ha(b, null, new L("cancelled-popup-request"), a.g || null);
        a.f = c;
        a.v = d;
        a.g = h;
        a.c = a.a.Ea(a, b, p, h);
      });
    }).then(function (a) {
      p && de(p);
      return a ? Pe(a) : null;
    }).s(function (a) {
      p && de(p);
      throw a;
    });
    return R(a, d, e);
  }

  g.uc = function (a) {
    var b = this;
    return Ml(this, "linkViaRedirect", a, function () {
      return Il(b, a.providerId);
    }, !1);
  };

  g.Dc = function (a) {
    return Ml(this, "reauthViaRedirect", a, function () {
      return B();
    }, !0);
  };

  function Ml(a, b, c, d, e) {
    if (!we()) return C(new L("operation-not-supported-in-this-environment"));
    if (a.i && !e) return C(a.i);
    var f = null,
        h = ve(a.uid + ":::");
    d = d().then(function () {
      Ll(a);
      if (!e) return a.F().then(function () {});
    }).then(function () {
      a.aa = h;
      return ul(a);
    }).then(function (b) {
      a.ba && (b = a.ba, b = b.b.set(Nl, a.C(), b.a));
      return b;
    }).then(function () {
      return a.a.Ca(b, c, h);
    }).s(function (b) {
      f = b;
      if (a.ba) return Ol(a.ba);
      throw f;
    }).then(function () {
      if (f) throw f;
    });
    return R(a, d, e);
  }

  function Ll(a) {
    if (!a.a || !a.I) {
      if (a.a && !a.I) throw new L("internal-error");
      throw new L("auth-domain-config-required");
    }
  }

  g.Bb = function (a, b, c) {
    var d = this;
    this.c && (this.c.cancel(), this.c = null);
    var e = null,
        f = this.F().then(function (e) {
      return Vf(d.b, {
        requestUri: a,
        postBody: c,
        sessionId: b,
        idToken: e
      });
    }).then(function (a) {
      e = Hl(d, a, "link");
      return Jl(d, a);
    }).then(function () {
      return e;
    });
    return R(this, f);
  };

  g.Cb = function (a, b, c) {
    var d = this;
    this.c && (this.c.cancel(), this.c = null);
    var e = null,
        f = B().then(function () {
      return Rf(Wf(d.b, {
        requestUri: a,
        sessionId: b,
        postBody: c
      }), d.uid);
    }).then(function (a) {
      e = Hl(d, a, "reauthenticate");
      Fl(d, a);
      d.i = null;
      return d.reload();
    }).then(function () {
      return e;
    });
    return R(this, f, !0);
  };

  g.kb = function (a) {
    var b = this,
        c = null;
    return R(this, this.F().then(function (b) {
      c = b;
      return "undefined" === typeof a || Ya(a) ? {} : pf(new ef(a));
    }).then(function (a) {
      return b.b.kb(c, a);
    }).then(function (a) {
      if (b.email != a) return b.reload();
    }).then(function () {}));
  };

  function R(a, b, c) {
    var d = Pl(a, b, c);
    a.G.push(d);
    d.ia(function () {
      Ia(a.G, d);
    });
    return d;
  }

  function Pl(a, b, c) {
    return a.i && !c ? (b.cancel(), C(a.i)) : b.s(function (b) {
      !b || "auth/user-disabled" != b.code && "auth/user-token-expired" != b.code || (a.i || a.dispatchEvent(new jl("userInvalidated")), a.i = b);
      throw b;
    });
  }

  g.toJSON = function () {
    return this.C();
  };

  g.C = function () {
    var a = {
      uid: this.uid,
      displayName: this.displayName,
      photoURL: this.photoURL,
      email: this.email,
      emailVerified: this.emailVerified,
      phoneNumber: this.phoneNumber,
      isAnonymous: this.isAnonymous,
      providerData: [],
      apiKey: this.l,
      appName: this.m,
      authDomain: this.u,
      stsTokenManager: this.h.C(),
      redirectEventId: this.aa || null
    };
    this.metadata && ab(a, this.metadata.C());
    v(this.providerData, function (b) {
      a.providerData.push(Qe(b));
    });
    return a;
  };

  function Ql(a) {
    if (!a.apiKey) return null;
    var b = {
      apiKey: a.apiKey,
      authDomain: a.authDomain,
      appName: a.appName
    },
        c = {};
    if (a.stsTokenManager && a.stsTokenManager.accessToken && a.stsTokenManager.expirationTime) c[M] = a.stsTokenManager.accessToken, c.refreshToken = a.stsTokenManager.refreshToken || null, c.expiresIn = (a.stsTokenManager.expirationTime - qa()) / 1E3;else return null;
    var d = new Q(b, c, a);
    a.providerData && v(a.providerData, function (a) {
      a && zl(d, Pe(a));
    });
    a.redirectEventId && (d.aa = a.redirectEventId);
    return d;
  }

  function Rl(a, b, c, d) {
    var e = new Q(a, b);
    c && (e.ba = c);
    d && nl(e, d);
    return e.reload().then(function () {
      return e;
    });
  }

  function Sl(a, b, c, d) {
    b = b || {
      apiKey: a.l,
      authDomain: a.u,
      appName: a.m
    };
    var e = a.h,
        f = {};
    f[M] = e.b;
    f.refreshToken = e.a;
    f.expiresIn = (e.c - qa()) / 1E3;
    b = new Q(b, f);
    c && (b.ba = c);
    d && nl(b, d);
    Cl(b, a);
    return b;
  }

  ;

  function Tl(a) {
    this.a = a;
    this.b = Qj();
  }

  var Nl = {
    name: "redirectUser",
    A: "session"
  };

  function Ol(a) {
    return Uj(a.b, Nl, a.a);
  }

  function Ul(a, b) {
    return a.b.get(Nl, a.a).then(function (a) {
      a && b && (a.authDomain = b);
      return Ql(a || {});
    });
  }

  ;

  function Wl(a) {
    this.a = a;
    this.b = Qj();
    this.c = null;
    this.f = Xl(this);
    this.b.addListener(Yl("local"), this.a, r(this.g, this));
  }

  Wl.prototype.g = function () {
    var a = this,
        b = Yl("local");
    Zl(this, function () {
      return B().then(function () {
        return a.c && "local" != a.c.A ? a.b.get(b, a.a) : null;
      }).then(function (c) {
        if (c) return $l(a, "local").then(function () {
          a.c = b;
        });
      });
    });
  };

  function $l(a, b) {
    var c = [],
        d;

    for (d in Mj) Mj[d] !== b && c.push(Uj(a.b, Yl(Mj[d]), a.a));

    c.push(Uj(a.b, am, a.a));
    return wb(c);
  }

  function Xl(a) {
    var b = Yl("local"),
        c = Yl("session"),
        d = Yl("none");
    return Tj(a.b, b, a.a).then(function () {
      return a.b.get(c, a.a);
    }).then(function (e) {
      return e ? c : a.b.get(d, a.a).then(function (c) {
        return c ? d : a.b.get(b, a.a).then(function (c) {
          return c ? b : a.b.get(am, a.a).then(function (a) {
            return a ? Yl(a) : b;
          });
        });
      });
    }).then(function (b) {
      a.c = b;
      return $l(a, b.A);
    }).s(function () {
      a.c || (a.c = b);
    });
  }

  var am = {
    name: "persistence",
    A: "session"
  };

  function Yl(a) {
    return {
      name: "authUser",
      A: a
    };
  }

  Wl.prototype.nb = function (a) {
    var b = null,
        c = this;
    Nj(a);
    return Zl(this, function () {
      return a != c.c.A ? c.b.get(c.c, c.a).then(function (d) {
        b = d;
        return $l(c, a);
      }).then(function () {
        c.c = Yl(a);
        if (b) return c.b.set(c.c, b, c.a);
      }) : B();
    });
  };

  function bm(a) {
    return Zl(a, function () {
      return a.b.set(am, a.c.A, a.a);
    });
  }

  function cm(a, b) {
    return Zl(a, function () {
      return a.b.set(a.c, b.C(), a.a);
    });
  }

  function dm(a) {
    return Zl(a, function () {
      return Uj(a.b, a.c, a.a);
    });
  }

  function em(a, b) {
    return Zl(a, function () {
      return a.b.get(a.c, a.a).then(function (a) {
        a && b && (a.authDomain = b);
        return Ql(a || {});
      });
    });
  }

  function Zl(a, b) {
    a.f = a.f.then(b, b);
    return a.f;
  }

  ;

  function fm(a) {
    this.l = !1;
    J(this, "settings", new Vk());
    J(this, "app", a);
    if (S(this).options && S(this).options.apiKey) a = _app.default.SDK_VERSION ? te(_app.default.SDK_VERSION) : null, this.b = new Nh(S(this).options && S(this).options.apiKey, Af(Bf), a);else throw new L("invalid-api-key");
    this.N = [];
    this.m = [];
    this.I = [];
    this.Tb = _app.default.INTERNAL.createSubscribe(r(this.oc, this));
    this.O = void 0;
    this.Ub = _app.default.INTERNAL.createSubscribe(r(this.pc, this));
    gm(this, null);
    this.h = new Wl(S(this).options.apiKey + ":" + S(this).name);
    this.w = new Tl(S(this).options.apiKey + ":" + S(this).name);
    this.V = T(this, hm(this));
    this.i = T(this, im(this));
    this.X = !1;
    this.ka = r(this.Oc, this);
    this.Ha = r(this.Z, this);
    this.ra = r(this.bc, this);
    this.sa = r(this.mc, this);
    this.ta = r(this.nc, this);
    jm(this);
    this.INTERNAL = {};
    this.INTERNAL["delete"] = r(this.delete, this);
    this.INTERNAL.logFramework = r(this.vc, this);
    this.u = 0;
    F.call(this);
    km(this);
    this.G = [];
  }

  t(fm, F);

  function lm(a) {
    D.call(this, "languageCodeChanged");
    this.g = a;
  }

  t(lm, D);

  function mm(a) {
    D.call(this, "frameworkChanged");
    this.c = a;
  }

  t(mm, D);
  g = fm.prototype;

  g.nb = function (a) {
    a = this.h.nb(a);
    return T(this, a);
  };

  g.pa = function (a) {
    this.W === a || this.l || (this.W = a, Th(this.b, this.W), this.dispatchEvent(new lm(this.ea())));
  };

  g.ea = function () {
    return this.W;
  };

  g.Uc = function () {
    var a = k.navigator;
    this.pa(a ? a.languages && a.languages[0] || a.language || a.userLanguage || null : null);
  };

  g.vc = function (a) {
    this.G.push(a);
    Uh(this.b, _app.default.SDK_VERSION ? te(_app.default.SDK_VERSION, this.G) : null);
    this.dispatchEvent(new mm(this.G));
  };

  g.ya = function () {
    return Ka(this.G);
  };

  function km(a) {
    Object.defineProperty(a, "lc", {
      get: function () {
        return this.ea();
      },
      set: function (a) {
        this.pa(a);
      },
      enumerable: !1
    });
    a.W = null;
  }

  g.toJSON = function () {
    return {
      apiKey: S(this).options.apiKey,
      authDomain: S(this).options.authDomain,
      appName: S(this).name,
      currentUser: U(this) && U(this).C()
    };
  };

  function nm(a) {
    return a.Sb || C(new L("auth-domain-config-required"));
  }

  function jm(a) {
    var b = S(a).options.authDomain,
        c = S(a).options.apiKey;
    b && we() && (a.Sb = a.V.then(function () {
      if (!a.l) {
        a.a = Ok(b, c, S(a).name);
        a.a.subscribe(a);
        U(a) && vl(U(a));

        if (a.D) {
          vl(a.D);
          var d = a.D;
          d.pa(a.ea());
          ol(d, a);
          d = a.D;
          nl(d, a.G);
          pl(d, a);
          a.D = null;
        }

        return a.a;
      }
    }));
  }

  g.wb = function (a, b) {
    switch (a) {
      case "unknown":
      case "signInViaRedirect":
        return !0;

      case "signInViaPopup":
        return this.g == b && !!this.f;

      default:
        return !1;
    }
  };

  g.ha = function (a, b, c, d) {
    "signInViaPopup" == a && this.g == d && (c && this.v ? this.v(c) : b && !c && this.f && this.f(b), this.c && (this.c.cancel(), this.c = null), delete this.f, delete this.v);
  };

  g.xa = function (a, b) {
    return "signInViaRedirect" == a || "signInViaPopup" == a && this.g == b && this.f ? r(this.ac, this) : null;
  };

  g.ac = function (a, b, c) {
    var d = this;
    a = {
      requestUri: a,
      postBody: c,
      sessionId: b
    };
    this.c && (this.c.cancel(), this.c = null);
    var e = null,
        f = null,
        h = Tf(d.b, a).then(function (a) {
      e = wg(a);
      f = Gf(a);
      return a;
    });
    a = d.V.then(function () {
      return h;
    }).then(function (a) {
      return om(d, a);
    }).then(function () {
      return Pe({
        user: U(d),
        credential: e,
        additionalUserInfo: f,
        operationType: "signIn"
      });
    });
    return T(this, a);
  };

  g.Mc = function (a) {
    if (!we()) return C(new L("operation-not-supported-in-this-environment"));
    var b = this,
        c = Ff(a.providerId),
        d = ve(),
        e = null;
    (!ye() || ne()) && S(this).options.authDomain && a.isOAuthProvider && (e = bj(S(this).options.authDomain, S(this).options.apiKey, S(this).name, "signInViaPopup", a, null, d, _app.default.SDK_VERSION || null));
    var f = ee(e, c && c.Ba, c && c.Aa);
    c = nm(this).then(function (b) {
      return Mk(b, f, "signInViaPopup", a, d, !!e);
    }).then(function () {
      return new A(function (a, c) {
        b.ha("signInViaPopup", null, new L("cancelled-popup-request"), b.g);
        b.f = a;
        b.v = c;
        b.g = d;
        b.c = b.a.Ea(b, "signInViaPopup", f, d);
      });
    }).then(function (a) {
      f && de(f);
      return a ? Pe(a) : null;
    }).s(function (a) {
      f && de(f);
      throw a;
    });
    return T(this, c);
  };

  g.Nc = function (a) {
    if (!we()) return C(new L("operation-not-supported-in-this-environment"));
    var b = this,
        c = nm(this).then(function () {
      return bm(b.h);
    }).then(function () {
      return b.a.Ca("signInViaRedirect", a);
    });
    return T(this, c);
  };

  g.fa = function () {
    if (!we()) return C(new L("operation-not-supported-in-this-environment"));
    var a = this,
        b = nm(this).then(function () {
      return a.a.fa();
    }).then(function (a) {
      return a ? Pe(a) : null;
    });
    return T(this, b);
  };

  g.Sc = function (a) {
    if (!a) return C(new L("null-user"));
    var b = this,
        c = {};
    c.apiKey = S(this).options.apiKey;
    c.authDomain = S(this).options.authDomain;
    c.appName = S(this).name;
    var d = Sl(a, c, b.w, b.ya());
    return T(this, this.i.then(function () {
      if (S(b).options.apiKey != a.l) return d.reload();
    }).then(function () {
      if (U(b) && a.uid == U(b).uid) return Cl(U(b), a), b.Z(a);
      gm(b, d);
      vl(d);
      return b.Z(d);
    }).then(function () {
      pm(b);
    }));
  };

  function om(a, b) {
    var c = {};
    c.apiKey = S(a).options.apiKey;
    c.authDomain = S(a).options.authDomain;
    c.appName = S(a).name;
    return a.V.then(function () {
      return Rl(c, b, a.w, a.ya());
    }).then(function (b) {
      if (U(a) && b.uid == U(a).uid) return Cl(U(a), b), a.Z(b);
      gm(a, b);
      vl(b);
      return a.Z(b);
    }).then(function () {
      pm(a);
    });
  }

  function gm(a, b) {
    U(a) && (tl(U(a), a.Ha), E(U(a), "tokenChanged", a.ra), E(U(a), "userDeleted", a.sa), E(U(a), "userInvalidated", a.ta), sl(U(a)));
    b && (b.N.push(a.Ha), sc(b, "tokenChanged", a.ra), sc(b, "userDeleted", a.sa), sc(b, "userInvalidated", a.ta), 0 < a.u && rl(b));
    J(a, "currentUser", b);
    b && (b.pa(a.ea()), ol(b, a), nl(b, a.G), pl(b, a));
  }

  g.ob = function () {
    var a = this,
        b = this.i.then(function () {
      if (!U(a)) return B();
      gm(a, null);
      return dm(a.h).then(function () {
        pm(a);
      });
    });
    return T(this, b);
  };

  function qm(a) {
    var b = Ul(a.w, S(a).options.authDomain).then(function (b) {
      if (a.D = b) b.ba = a.w;
      return Ol(a.w);
    });
    return T(a, b);
  }

  function hm(a) {
    var b = S(a).options.authDomain,
        c = qm(a).then(function () {
      return em(a.h, b);
    }).then(function (b) {
      return b ? (b.ba = a.w, a.D && (a.D.aa || null) == (b.aa || null) ? b : b.reload().then(function () {
        return cm(a.h, b).then(function () {
          return b;
        });
      }).s(function (c) {
        return "auth/network-request-failed" == c.code ? b : dm(a.h);
      })) : null;
    }).then(function (b) {
      gm(a, b || null);
    });
    return T(a, c);
  }

  function im(a) {
    return a.V.then(function () {
      return a.fa();
    }).s(function () {}).then(function () {
      if (!a.l) return a.ka();
    }).s(function () {}).then(function () {
      if (!a.l) {
        a.X = !0;
        var b = a.h;
        b.b.addListener(Yl("local"), b.a, a.ka);
      }
    });
  }

  g.Oc = function () {
    var a = this;
    return em(this.h, S(this).options.authDomain).then(function (b) {
      if (!a.l) {
        var c;

        if (c = U(a) && b) {
          c = U(a).uid;
          var d = b.uid;
          c = void 0 === c || null === c || "" === c || void 0 === d || null === d || "" === d ? !1 : c == d;
        }

        if (c) return Cl(U(a), b), U(a).F();
        if (U(a) || b) gm(a, b), b && (vl(b), b.ba = a.w), a.a && a.a.subscribe(a), pm(a);
      }
    });
  };

  g.Z = function (a) {
    return cm(this.h, a);
  };

  g.bc = function () {
    pm(this);
    this.Z(U(this));
  };

  g.mc = function () {
    this.ob();
  };

  g.nc = function () {
    this.ob();
  };

  function rm(a, b) {
    var c = null,
        d = null;
    return T(a, b.then(function (b) {
      c = wg(b);
      d = Gf(b);
      return om(a, b);
    }).then(function () {
      return Pe({
        user: U(a),
        credential: c,
        additionalUserInfo: d,
        operationType: "signIn"
      });
    }));
  }

  g.oc = function (a) {
    var b = this;
    this.addAuthTokenListener(function () {
      a.next(U(b));
    });
  };

  g.pc = function (a) {
    var b = this;
    sm(this, function () {
      a.next(U(b));
    });
  };

  g.xc = function (a, b, c) {
    var d = this;
    this.X && _app.default.Promise.resolve().then(function () {
      n(a) ? a(U(d)) : n(a.next) && a.next(U(d));
    });
    return this.Tb(a, b, c);
  };

  g.wc = function (a, b, c) {
    var d = this;
    this.X && _app.default.Promise.resolve().then(function () {
      d.O = d.getUid();
      n(a) ? a(U(d)) : n(a.next) && a.next(U(d));
    });
    return this.Ub(a, b, c);
  };

  g.cc = function (a) {
    var b = this,
        c = this.i.then(function () {
      return U(b) ? U(b).F(a).then(function (a) {
        return {
          accessToken: a
        };
      }) : null;
    });
    return T(this, c);
  };

  g.Nb = function (a) {
    var b = this;
    return this.i.then(function () {
      return rm(b, P(b.b, Ji, {
        token: a
      }));
    }).then(function (a) {
      var c = a.user;
      Bl(c, "isAnonymous", !1);
      b.Z(c);
      return a;
    });
  };

  g.Gc = function (a) {
    Me("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCustomToken is deprecated. Please use firebase.auth.Auth.prototype.signInWithCustomToken instead.");
    return this.Nb(a);
  };

  g.Hc = function (a, b) {
    Me("firebase.auth.Auth.prototype.signInAndRetrieveDataWithEmailAndPassword is deprecated. Please use firebase.auth.Auth.prototype.signInWithEmailAndPassword instead.");
    return this.Ob(a, b);
  };

  g.Ob = function (a, b) {
    var c = this;
    return this.i.then(function () {
      return rm(c, P(c.b, kg, {
        email: a,
        password: b
      }));
    });
  };

  g.yb = function (a, b) {
    var c = this;
    return this.i.then(function () {
      return rm(c, P(c.b, Fi, {
        email: a,
        password: b
      }));
    });
  };

  g.Wb = function (a, b) {
    Me("firebase.auth.Auth.prototype.createUserAndRetrieveDataWithEmailAndPassword is deprecated. Please use firebase.auth.Auth.prototype.createUserWithEmailAndPassword instead.");
    return this.yb(a, b);
  };

  g.Jc = function (a) {
    Me("firebase.auth.Auth.prototype.signInWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential instead.");
    return this.Qa(a).then(function (a) {
      return a.user;
    });
  };

  g.Qa = function (a) {
    var b = this;
    return this.i.then(function () {
      return rm(b, a.la(b.b));
    });
  };

  g.Ra = function () {
    var a = this;
    return this.i.then(function () {
      var b = U(a);

      if (b && b.isAnonymous) {
        var c = Pe({
          providerId: null,
          isNewUser: !1
        });
        return Pe({
          user: b,
          credential: null,
          additionalUserInfo: c,
          operationType: "signIn"
        });
      }

      return rm(a, a.b.Ra()).then(function (b) {
        var c = b.user;
        Bl(c, "isAnonymous", !0);
        a.Z(c);
        return b;
      });
    });
  };

  g.Ic = function () {
    Me("firebase.auth.Auth.prototype.signInAnonymouslyAndRetrieveData is deprecated. Please use firebase.auth.Auth.prototype.signInAnonymously instead.");
    return this.Ra();
  };

  function S(a) {
    return a.app;
  }

  function U(a) {
    return a.currentUser;
  }

  g.getUid = function () {
    return U(this) && U(this).uid || null;
  };

  function tm(a) {
    return U(a) && U(a)._lat || null;
  }

  function pm(a) {
    if (a.X) {
      for (var b = 0; b < a.m.length; b++) if (a.m[b]) a.m[b](tm(a));

      if (a.O !== a.getUid() && a.I.length) for (a.O = a.getUid(), b = 0; b < a.I.length; b++) if (a.I[b]) a.I[b](tm(a));
    }
  }

  g.Vb = function (a) {
    this.addAuthTokenListener(a);
    this.u++;
    0 < this.u && U(this) && rl(U(this));
  };

  g.Ec = function (a) {
    var b = this;
    v(this.m, function (c) {
      c == a && b.u--;
    });
    0 > this.u && (this.u = 0);
    0 == this.u && U(this) && sl(U(this));
    this.removeAuthTokenListener(a);
  };

  g.addAuthTokenListener = function (a) {
    var b = this;
    this.m.push(a);
    T(this, this.i.then(function () {
      b.l || Ha(b.m, a) && a(tm(b));
    }));
  };

  g.removeAuthTokenListener = function (a) {
    w(this.m, function (b) {
      return b == a;
    });
  };

  function sm(a, b) {
    a.I.push(b);
    T(a, a.i.then(function () {
      !a.l && Ha(a.I, b) && a.O !== a.getUid() && (a.O = a.getUid(), b(tm(a)));
    }));
  }

  g.delete = function () {
    this.l = !0;

    for (var a = 0; a < this.N.length; a++) this.N[a].cancel("app-deleted");

    this.N = [];
    this.h && (a = this.h, a.b.removeListener(Yl("local"), a.a, this.ka));
    this.a && (this.a.unsubscribe(this), this.a.Za());
    return _app.default.Promise.resolve();
  };

  function T(a, b) {
    a.N.push(b);
    b.ia(function () {
      Ia(a.N, b);
    });
    return b;
  }

  g.Zb = function (a) {
    Me("firebase.auth.Auth.prototype.fetchProvidersForEmail is deprecated. Please use firebase.auth.Auth.prototype.fetchSignInMethodsForEmail instead.");
    return T(this, di(this.b, a));
  };

  g.$b = function (a) {
    return T(this, fi(this.b, a));
  };

  g.qc = function (a) {
    return !!og(a);
  };

  g.mb = function (a, b) {
    var c = this;
    return T(this, B().then(function () {
      var a = new ef(b);
      if (!a.c) throw new L("argument-error", nf + " must be true when sending sign in link to email");
      return pf(a);
    }).then(function (b) {
      return c.b.mb(a, b);
    }).then(function () {}));
  };

  g.Vc = function (a) {
    return this.Ja(a).then(function (a) {
      return a.data.email;
    });
  };

  g.$a = function (a, b) {
    return T(this, this.b.$a(a, b).then(function () {}));
  };

  g.Ja = function (a) {
    return T(this, this.b.Ja(a).then(function (a) {
      return new Te(a);
    }));
  };

  g.Xa = function (a) {
    return T(this, this.b.Xa(a).then(function () {}));
  };

  g.lb = function (a, b) {
    var c = this;
    return T(this, B().then(function () {
      return "undefined" === typeof b || Ya(b) ? {} : pf(new ef(b));
    }).then(function (b) {
      return c.b.lb(a, b);
    }).then(function () {}));
  };

  g.Lc = function (a, b) {
    return T(this, Xk(this, a, b, r(this.Qa, this)));
  };

  g.Kc = function (a, b) {
    var c = this;
    return T(this, B().then(function () {
      var d = ng(a, b || Xd());
      return c.Qa(d);
    }));
  };

  function um() {}

  um.prototype.render = function () {};

  um.prototype.reset = function () {};

  um.prototype.getResponse = function () {};

  um.prototype.execute = function () {};

  function vm() {
    this.a = {};
    this.b = 1E12;
  }

  var wm = null;

  vm.prototype.render = function (a, b) {
    this.a[this.b.toString()] = new xm(a, b);
    return this.b++;
  };

  vm.prototype.reset = function (a) {
    var b = ym(this, a);
    a = zm(a);
    b && a && (b.delete(), delete this.a[a]);
  };

  vm.prototype.getResponse = function (a) {
    return (a = ym(this, a)) ? a.getResponse() : null;
  };

  vm.prototype.execute = function (a) {
    (a = ym(this, a)) && a.execute();
  };

  function ym(a, b) {
    return (b = zm(b)) ? a.a[b] || null : null;
  }

  function zm(a) {
    return (a = "undefined" === typeof a ? 1E12 : a) ? a.toString() : null;
  }

  function xm(a, b) {
    this.g = !1;
    this.c = b;
    this.a = this.b = null;
    this.h = "invisible" !== this.c.size;
    this.f = Kd(a);
    var c = this;

    this.i = function () {
      c.execute();
    };

    this.h ? this.execute() : sc(this.f, "click", this.i);
  }

  xm.prototype.getResponse = function () {
    Am(this);
    return this.b;
  };

  xm.prototype.execute = function () {
    Am(this);
    var a = this;
    this.a || (this.a = setTimeout(function () {
      a.b = re();
      var b = a.c.callback,
          c = a.c["expired-callback"];
      if (b) try {
        b(a.b);
      } catch (d) {}
      a.a = setTimeout(function () {
        a.a = null;
        a.b = null;
        if (c) try {
          c();
        } catch (d) {}
        a.h && a.execute();
      }, 6E4);
    }, 500));
  };

  xm.prototype.delete = function () {
    Am(this);
    this.g = !0;
    clearTimeout(this.a);
    this.a = null;
    E(this.f, "click", this.i);
  };

  function Am(a) {
    if (a.g) throw Error("reCAPTCHA mock was already deleted!");
  }

  ;

  function Bm() {}

  Bm.prototype.g = function () {
    wm || (wm = new vm());
    return B(wm);
  };

  Bm.prototype.c = function () {};

  var Cm = null;

  function Dm() {
    this.b = k.grecaptcha ? Infinity : 0;
    this.f = null;
    this.a = "__rcb" + Math.floor(1E6 * Math.random()).toString();
  }

  var Em = new od(pd, "https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),
      Fm = new Ee(3E4, 6E4);

  Dm.prototype.g = function (a) {
    var b = this;
    return new A(function (c, d) {
      var e = setTimeout(function () {
        d(new L("network-request-failed"));
      }, Fm.get());

      if (!k.grecaptcha || a !== b.f && !b.b) {
        k[b.a] = function () {
          if (k.grecaptcha) {
            b.f = a;
            var f = k.grecaptcha.render;

            k.grecaptcha.render = function (a, c) {
              a = f(a, c);
              b.b++;
              return a;
            };

            clearTimeout(e);
            c(k.grecaptcha);
          } else clearTimeout(e), d(new L("internal-error"));

          delete k[b.a];
        };

        var f = vd(Em, {
          onload: b.a,
          hl: a || ""
        });
        B(Gh(f)).s(function () {
          clearTimeout(e);
          d(new L("internal-error", "Unable to load external reCAPTCHA dependencies!"));
        });
      } else clearTimeout(e), c(k.grecaptcha);
    });
  };

  Dm.prototype.c = function () {
    this.b--;
  };

  var Gm = null;

  function Hm(a, b, c, d, e, f, h) {
    J(this, "type", "recaptcha");
    this.c = this.f = null;
    this.D = !1;
    this.l = b;
    this.g = null;
    h ? (Cm || (Cm = new Bm()), h = Cm) : (Gm || (Gm = new Dm()), h = Gm);
    this.m = h;
    this.a = c || {
      theme: "light",
      type: "image"
    };
    this.h = [];
    if (this.a[Im]) throw new L("argument-error", "sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");
    this.i = "invisible" === this.a[Jm];
    if (!k.document) throw new L("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");
    if (!Kd(b) || !this.i && Kd(b).hasChildNodes()) throw new L("argument-error", "reCAPTCHA container is either not found or already contains inner elements!");
    this.u = new Nh(a, f || null, e || null);

    this.v = d || function () {
      return null;
    };

    var m = this;
    this.o = [];
    var p = this.a[Km];

    this.a[Km] = function (a) {
      Lm(m, a);
      if ("function" === typeof p) p(a);else if ("string" === typeof p) {
        var b = I(p, k);
        "function" === typeof b && b(a);
      }
    };

    var x = this.a[Mm];

    this.a[Mm] = function () {
      Lm(m, null);
      if ("function" === typeof x) x();else if ("string" === typeof x) {
        var a = I(x, k);
        "function" === typeof a && a();
      }
    };
  }

  var Km = "callback",
      Mm = "expired-callback",
      Im = "sitekey",
      Jm = "size";

  function Lm(a, b) {
    for (var c = 0; c < a.o.length; c++) try {
      a.o[c](b);
    } catch (d) {}
  }

  function Nm(a, b) {
    w(a.o, function (a) {
      return a == b;
    });
  }

  function Om(a, b) {
    a.h.push(b);
    b.ia(function () {
      Ia(a.h, b);
    });
    return b;
  }

  g = Hm.prototype;

  g.za = function () {
    var a = this;
    return this.f ? this.f : this.f = Om(this, B().then(function () {
      if (xe() && !oe()) return je();
      throw new L("operation-not-supported-in-this-environment", "RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.");
    }).then(function () {
      return a.m.g(a.v());
    }).then(function (b) {
      a.g = b;
      return P(a.u, Ii, {});
    }).then(function (b) {
      a.a[Im] = b.recaptchaSiteKey;
    }).s(function (b) {
      a.f = null;
      throw b;
    }));
  };

  g.render = function () {
    Pm(this);
    var a = this;
    return Om(this, this.za().then(function () {
      if (null === a.c) {
        var b = a.l;

        if (!a.i) {
          var c = Kd(b);
          b = Nd("DIV");
          c.appendChild(b);
        }

        a.c = a.g.render(b, a.a);
      }

      return a.c;
    }));
  };

  g.verify = function () {
    Pm(this);
    var a = this;
    return Om(this, this.render().then(function (b) {
      return new A(function (c) {
        var d = a.g.getResponse(b);
        if (d) c(d);else {
          var e = function (b) {
            b && (Nm(a, e), c(b));
          };

          a.o.push(e);
          a.i && a.g.execute(a.c);
        }
      });
    }));
  };

  g.reset = function () {
    Pm(this);
    null !== this.c && this.g.reset(this.c);
  };

  function Pm(a) {
    if (a.D) throw new L("internal-error", "RecaptchaVerifier instance has been destroyed.");
  }

  g.clear = function () {
    Pm(this);
    this.D = !0;
    this.m.c();

    for (var a = 0; a < this.h.length; a++) this.h[a].cancel("RecaptchaVerifier instance has been destroyed.");

    if (!this.i) {
      a = Kd(this.l);

      for (var b; b = a.firstChild;) a.removeChild(b);
    }
  };

  function Qm(a, b, c) {
    var d = !1;

    try {
      this.b = c || _app.default.app();
    } catch (h) {
      throw new L("argument-error", "No firebase.app.App instance is currently initialized.");
    }

    if (this.b.options && this.b.options.apiKey) c = this.b.options.apiKey;else throw new L("invalid-api-key");
    var e = this,
        f = null;

    try {
      f = this.b.auth().ya();
    } catch (h) {}

    try {
      d = this.b.auth().settings.appVerificationDisabledForTesting;
    } catch (h) {}

    f = _app.default.SDK_VERSION ? te(_app.default.SDK_VERSION, f) : null;
    Hm.call(this, c, a, b, function () {
      try {
        var a = e.b.auth().ea();
      } catch (m) {
        a = null;
      }

      return a;
    }, f, Af(Bf), d);
  }

  t(Qm, Hm);

  function Rm(a, b, c, d) {
    a: {
      c = Array.prototype.slice.call(c);
      var e = 0;

      for (var f = !1, h = 0; h < b.length; h++) if (b[h].optional) f = !0;else {
        if (f) throw new L("internal-error", "Argument validator encountered a required argument after an optional argument.");
        e++;
      }

      f = b.length;
      if (c.length < e || f < c.length) d = "Expected " + (e == f ? 1 == e ? "1 argument" : e + " arguments" : e + "-" + f + " arguments") + " but got " + c.length + ".";else {
        for (e = 0; e < c.length; e++) if (f = b[e].optional && void 0 === c[e], !b[e].M(c[e]) && !f) {
          b = b[e];
          if (0 > e || e >= Sm.length) throw new L("internal-error", "Argument validator received an unsupported number of arguments.");
          c = Sm[e];
          d = (d ? "" : c + " argument ") + (b.name ? '"' + b.name + '" ' : "") + "must be " + b.K + ".";
          break a;
        }

        d = null;
      }
    }

    if (d) throw new L("argument-error", a + " failed: " + d);
  }

  var Sm = "First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");

  function V(a, b) {
    return {
      name: a || "",
      K: "a valid string",
      optional: !!b,
      M: l
    };
  }

  function Tm(a, b) {
    return {
      name: a || "",
      K: "a boolean",
      optional: !!b,
      M: ba
    };
  }

  function W(a, b) {
    return {
      name: a || "",
      K: "a valid object",
      optional: !!b,
      M: q
    };
  }

  function Um(a, b) {
    return {
      name: a || "",
      K: "a function",
      optional: !!b,
      M: n
    };
  }

  function Vm(a, b) {
    return {
      name: a || "",
      K: "null",
      optional: !!b,
      M: ha
    };
  }

  function Wm() {
    return {
      name: "",
      K: "an HTML element",
      optional: !1,
      M: function (a) {
        return !!(a && a instanceof Element);
      }
    };
  }

  function Xm() {
    return {
      name: "auth",
      K: "an instance of Firebase Auth",
      optional: !0,
      M: function (a) {
        return !!(a && a instanceof fm);
      }
    };
  }

  function Ym() {
    return {
      name: "app",
      K: "an instance of Firebase App",
      optional: !0,
      M: function (a) {
        return !!(a && a instanceof _app.default.app.App);
      }
    };
  }

  function Zm(a) {
    return {
      name: a ? a + "Credential" : "credential",
      K: a ? "a valid " + a + " credential" : "a valid credential",
      optional: !1,
      M: function (b) {
        if (!b) return !1;
        var c = !a || b.providerId === a;
        return !(!b.la || !c);
      }
    };
  }

  function $m() {
    return {
      name: "authProvider",
      K: "a valid Auth provider",
      optional: !1,
      M: function (a) {
        return !!(a && a.providerId && a.hasOwnProperty && a.hasOwnProperty("isOAuthProvider"));
      }
    };
  }

  function an() {
    return {
      name: "applicationVerifier",
      K: "an implementation of firebase.auth.ApplicationVerifier",
      optional: !1,
      M: function (a) {
        return !!(a && l(a.type) && n(a.verify));
      }
    };
  }

  function X(a, b, c, d) {
    return {
      name: c || "",
      K: a.K + " or " + b.K,
      optional: !!d,
      M: function (c) {
        return a.M(c) || b.M(c);
      }
    };
  }

  ;

  function Y(a, b) {
    for (var c in b) {
      var d = b[c].name;
      a[d] = bn(d, a[c], b[c].j);
    }
  }

  function cn(a, b) {
    for (var c in b) {
      var d = b[c].name;
      d !== c && Object.defineProperty(a, d, {
        get: pa(function (a) {
          return this[a];
        }, c),
        set: pa(function (a, b, c, d) {
          Rm(a, [c], [d], !0);
          this[b] = d;
        }, d, c, b[c].ub),
        enumerable: !0
      });
    }
  }

  function Z(a, b, c, d) {
    a[b] = bn(b, c, d);
  }

  function bn(a, b, c) {
    function d() {
      var a = Array.prototype.slice.call(arguments);
      Rm(e, c, a);
      return b.apply(this, a);
    }

    if (!c) return b;
    var e = dn(a),
        f;

    for (f in b) d[f] = b[f];

    for (f in b.prototype) d.prototype[f] = b.prototype[f];

    return d;
  }

  function dn(a) {
    a = a.split(".");
    return a[a.length - 1];
  }

  ;
  Y(fm.prototype, {
    Xa: {
      name: "applyActionCode",
      j: [V("code")]
    },
    Ja: {
      name: "checkActionCode",
      j: [V("code")]
    },
    $a: {
      name: "confirmPasswordReset",
      j: [V("code"), V("newPassword")]
    },
    yb: {
      name: "createUserWithEmailAndPassword",
      j: [V("email"), V("password")]
    },
    Wb: {
      name: "createUserAndRetrieveDataWithEmailAndPassword",
      j: [V("email"), V("password")]
    },
    Zb: {
      name: "fetchProvidersForEmail",
      j: [V("email")]
    },
    $b: {
      name: "fetchSignInMethodsForEmail",
      j: [V("email")]
    },
    fa: {
      name: "getRedirectResult",
      j: []
    },
    qc: {
      name: "isSignInWithEmailLink",
      j: [V("emailLink")]
    },
    wc: {
      name: "onAuthStateChanged",
      j: [X(W(), Um(), "nextOrObserver"), Um("opt_error", !0), Um("opt_completed", !0)]
    },
    xc: {
      name: "onIdTokenChanged",
      j: [X(W(), Um(), "nextOrObserver"), Um("opt_error", !0), Um("opt_completed", !0)]
    },
    lb: {
      name: "sendPasswordResetEmail",
      j: [V("email"), X(W("opt_actionCodeSettings", !0), Vm(null, !0), "opt_actionCodeSettings", !0)]
    },
    mb: {
      name: "sendSignInLinkToEmail",
      j: [V("email"), W("actionCodeSettings")]
    },
    nb: {
      name: "setPersistence",
      j: [V("persistence")]
    },
    Qa: {
      name: "signInAndRetrieveDataWithCredential",
      j: [Zm()]
    },
    Ra: {
      name: "signInAnonymously",
      j: []
    },
    Ic: {
      name: "signInAnonymouslyAndRetrieveData",
      j: []
    },
    Jc: {
      name: "signInWithCredential",
      j: [Zm()]
    },
    Nb: {
      name: "signInWithCustomToken",
      j: [V("token")]
    },
    Gc: {
      name: "signInAndRetrieveDataWithCustomToken",
      j: [V("token")]
    },
    Ob: {
      name: "signInWithEmailAndPassword",
      j: [V("email"), V("password")]
    },
    Kc: {
      name: "signInWithEmailLink",
      j: [V("email"), V("emailLink", !0)]
    },
    Hc: {
      name: "signInAndRetrieveDataWithEmailAndPassword",
      j: [V("email"), V("password")]
    },
    Lc: {
      name: "signInWithPhoneNumber",
      j: [V("phoneNumber"), an()]
    },
    Mc: {
      name: "signInWithPopup",
      j: [$m()]
    },
    Nc: {
      name: "signInWithRedirect",
      j: [$m()]
    },
    Sc: {
      name: "updateCurrentUser",
      j: [X(function (a) {
        return {
          name: "user",
          K: "an instance of Firebase User",
          optional: !!a,
          M: function (a) {
            return !!(a && a instanceof Q);
          }
        };
      }(), Vm(), "user")]
    },
    ob: {
      name: "signOut",
      j: []
    },
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    },
    Uc: {
      name: "useDeviceLanguage",
      j: []
    },
    Vc: {
      name: "verifyPasswordResetCode",
      j: [V("code")]
    }
  });
  cn(fm.prototype, {
    lc: {
      name: "languageCode",
      ub: X(V(), Vm(), "languageCode")
    }
  });
  fm.Persistence = Mj;
  fm.Persistence.LOCAL = "local";
  fm.Persistence.SESSION = "session";
  fm.Persistence.NONE = "none";
  Y(Q.prototype, {
    "delete": {
      name: "delete",
      j: []
    },
    dc: {
      name: "getIdTokenResult",
      j: [Tm("opt_forceRefresh", !0)]
    },
    F: {
      name: "getIdToken",
      j: [Tm("opt_forceRefresh", !0)]
    },
    fb: {
      name: "linkAndRetrieveDataWithCredential",
      j: [Zm()]
    },
    rc: {
      name: "linkWithCredential",
      j: [Zm()]
    },
    sc: {
      name: "linkWithPhoneNumber",
      j: [V("phoneNumber"), an()]
    },
    tc: {
      name: "linkWithPopup",
      j: [$m()]
    },
    uc: {
      name: "linkWithRedirect",
      j: [$m()]
    },
    hb: {
      name: "reauthenticateAndRetrieveDataWithCredential",
      j: [Zm()]
    },
    Ac: {
      name: "reauthenticateWithCredential",
      j: [Zm()]
    },
    Bc: {
      name: "reauthenticateWithPhoneNumber",
      j: [V("phoneNumber"), an()]
    },
    Cc: {
      name: "reauthenticateWithPopup",
      j: [$m()]
    },
    Dc: {
      name: "reauthenticateWithRedirect",
      j: [$m()]
    },
    reload: {
      name: "reload",
      j: []
    },
    kb: {
      name: "sendEmailVerification",
      j: [X(W("opt_actionCodeSettings", !0), Vm(null, !0), "opt_actionCodeSettings", !0)]
    },
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    },
    Rc: {
      name: "unlink",
      j: [V("provider")]
    },
    qb: {
      name: "updateEmail",
      j: [V("email")]
    },
    rb: {
      name: "updatePassword",
      j: [V("password")]
    },
    Tc: {
      name: "updatePhoneNumber",
      j: [Zm("phone")]
    },
    sb: {
      name: "updateProfile",
      j: [W("profile")]
    }
  });
  Y(vm.prototype, {
    execute: {
      name: "execute"
    },
    render: {
      name: "render"
    },
    reset: {
      name: "reset"
    },
    getResponse: {
      name: "getResponse"
    }
  });
  Y(um.prototype, {
    execute: {
      name: "execute"
    },
    render: {
      name: "render"
    },
    reset: {
      name: "reset"
    },
    getResponse: {
      name: "getResponse"
    }
  });
  Y(A.prototype, {
    ia: {
      name: "finally"
    },
    s: {
      name: "catch"
    },
    then: {
      name: "then"
    }
  });
  cn(Vk.prototype, {
    appVerificationDisabled: {
      name: "appVerificationDisabledForTesting",
      ub: Tm("appVerificationDisabledForTesting")
    }
  });
  Y(Wk.prototype, {
    confirm: {
      name: "confirm",
      j: [V("verificationCode")]
    }
  });
  Z(O, "credential", function (a, b) {
    return new ig(a, b);
  }, [V("email"), V("password")]);
  Y(ag.prototype, {
    ua: {
      name: "addScope",
      j: [V("scope")]
    },
    Da: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Z(ag, "credential", bg, [X(V(), W(), "token")]);
  Z(O, "credentialWithLink", ng, [V("email"), V("emailLink")]);
  Y(cg.prototype, {
    ua: {
      name: "addScope",
      j: [V("scope")]
    },
    Da: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Z(cg, "credential", dg, [X(V(), W(), "token")]);
  Y(eg.prototype, {
    ua: {
      name: "addScope",
      j: [V("scope")]
    },
    Da: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Z(eg, "credential", fg, [X(V(), X(W(), Vm()), "idToken"), X(V(), Vm(), "accessToken", !0)]);
  Y(gg.prototype, {
    Da: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Z(gg, "credential", hg, [X(V(), W(), "token"), V("secret", !0)]);
  Y(N.prototype, {
    ua: {
      name: "addScope",
      j: [V("scope")]
    },
    credential: {
      name: "credential",
      j: [X(V(), Vm(), "idToken", !0), X(V(), Vm(), "accessToken", !0), X(V(), Vm(), "nonce", !0)]
    },
    Da: {
      name: "setCustomParameters",
      j: [W("customOAuthParameters")]
    }
  });
  Z(tg, "credential", vg, [V("verificationId"), V("verificationCode")]);
  Y(tg.prototype, {
    Va: {
      name: "verifyPhoneNumber",
      j: [V("phoneNumber"), an()]
    }
  });
  Y(L.prototype, {
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(Dg.prototype, {
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(Cg.prototype, {
    toJSON: {
      name: "toJSON",
      j: [V(null, !0)]
    }
  });
  Y(Qm.prototype, {
    clear: {
      name: "clear",
      j: []
    },
    render: {
      name: "render",
      j: []
    },
    verify: {
      name: "verify",
      j: []
    }
  });

  (function () {
    if ("undefined" !== typeof _app.default && _app.default.INTERNAL && _app.default.INTERNAL.registerService) {
      var a = {
        Auth: fm,
        Error: L
      };
      Z(a, "EmailAuthProvider", O, []);
      Z(a, "FacebookAuthProvider", ag, []);
      Z(a, "GithubAuthProvider", cg, []);
      Z(a, "GoogleAuthProvider", eg, []);
      Z(a, "TwitterAuthProvider", gg, []);
      Z(a, "OAuthProvider", N, [V("providerId")]);
      Z(a, "SAMLAuthProvider", $f, [V("providerId")]);
      Z(a, "PhoneAuthProvider", tg, [Xm()]);
      Z(a, "RecaptchaVerifier", Qm, [X(V(), Wm(), "recaptchaContainer"), W("recaptchaParameters", !0), Ym()]);

      _app.default.INTERNAL.registerService("auth", function (a, c) {
        a = new fm(a);
        c({
          INTERNAL: {
            getUid: r(a.getUid, a),
            getToken: r(a.cc, a),
            addAuthTokenListener: r(a.Vb, a),
            removeAuthTokenListener: r(a.Ec, a)
          }
        });
        return a;
      }, a, function (a, c) {
        if ("create" === a) try {
          c.auth();
        } catch (d) {}
      });

      _app.default.INTERNAL.extendNamespace({
        User: Q
      });
    } else throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");
  })();
}).apply(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {});
},{"@firebase/app":"node_modules/@firebase/app/dist/index.cjs.js"}],"node_modules/firebase/auth/dist/index.esm.js":[function(require,module,exports) {
"use strict";

require("@firebase/auth");
},{"@firebase/auth":"node_modules/@firebase/auth/dist/auth.esm.js"}],"node_modules/is-what/dist/index.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getType = getType;
exports.isUndefined = isUndefined;
exports.isNull = isNull;
exports.isPlainObject = isPlainObject;
exports.isObject = isObject;
exports.isAnyObject = isAnyObject;
exports.isObjectLike = isObjectLike;
exports.isFunction = isFunction;
exports.isArray = isArray;
exports.isString = isString;
exports.isFullString = isFullString;
exports.isEmptyString = isEmptyString;
exports.isNumber = isNumber;
exports.isBoolean = isBoolean;
exports.isRegExp = isRegExp;
exports.isDate = isDate;
exports.isSymbol = isSymbol;
exports.isPrimitive = isPrimitive;
exports.isType = isType;

/**
 * Returns the object type of the given payload
 *
 * @param {*} payload
 * @returns {string}
 */
function getType(payload) {
  return Object.prototype.toString.call(payload).slice(8, -1);
}
/**
 * Returns whether the payload is undefined
 *
 * @param {*} payload
 * @returns {payload is undefined}
 */


function isUndefined(payload) {
  return getType(payload) === 'Undefined';
}
/**
 * Returns whether the payload is null
 *
 * @param {*} payload
 * @returns {payload is null}
 */


function isNull(payload) {
  return getType(payload) === 'Null';
}
/**
 * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)
 *
 * @param {*} payload
 * @returns {payload is {[key: string]: any}}
 */


function isPlainObject(payload) {
  if (getType(payload) !== 'Object') return false;
  return payload.constructor === Object && Object.getPrototypeOf(payload) === Object.prototype;
}
/**
 * Returns whether the payload is a plain JavaScript object (excluding special classes or objects with other prototypes)
 *
 * @param {*} payload
 * @returns {payload is {[key: string]: any}}
 */


function isObject(payload) {
  return isPlainObject(payload);
}
/**
 * Returns whether the payload is an any kind of object (including special classes or objects with different prototypes)
 *
 * @param {*} payload
 * @returns {payload is {[key: string]: any}}
 */


function isAnyObject(payload) {
  return getType(payload) === 'Object';
}
/**
 * Returns whether the payload is an object like a type passed in < >
 *
 * Usage: isObjectLike<{id: any}>(payload) // will make sure it's an object and has an `id` prop.
 *
 * @template T this must be passed in < >
 * @param {*} payload
 * @returns {payload is T}
 */


function isObjectLike(payload) {
  return isAnyObject(payload);
}
/**
 * Returns whether the payload is a function
 *
 * @param {*} payload
 * @returns {payload is Function}
 */


function isFunction(payload) {
  return getType(payload) === 'Function';
}
/**
 * Returns whether the payload is an array
 *
 * @param {*} payload
 * @returns {payload is undefined}
 */


function isArray(payload) {
  return getType(payload) === 'Array';
}
/**
 * Returns whether the payload is a string
 *
 * @param {*} payload
 * @returns {payload is string}
 */


function isString(payload) {
  return getType(payload) === 'String';
}
/**
 * Returns whether the payload is a string, BUT returns false for ''
 *
 * @param {*} payload
 * @returns {payload is string}
 */


function isFullString(payload) {
  return isString(payload) && payload !== '';
}
/**
 * Returns whether the payload is ''
 *
 * @param {*} payload
 * @returns {payload is string}
 */


function isEmptyString(payload) {
  return payload === '';
}
/**
 * Returns whether the payload is a number
 *
 * This will return false for NaN
 *
 * @param {*} payload
 * @returns {payload is number}
 */


function isNumber(payload) {
  return getType(payload) === 'Number' && !isNaN(payload);
}
/**
 * Returns whether the payload is a boolean
 *
 * @param {*} payload
 * @returns {payload is boolean}
 */


function isBoolean(payload) {
  return getType(payload) === 'Boolean';
}
/**
 * Returns whether the payload is a regular expression
 *
 * @param {*} payload
 * @returns {payload is RegExp}
 */


function isRegExp(payload) {
  return getType(payload) === 'RegExp';
}
/**
 * Returns whether the payload is a date, and that the date is Valid
 *
 * @param {*} payload
 * @returns {payload is Date}
 */


function isDate(payload) {
  return getType(payload) === 'Date' && !isNaN(payload);
}
/**
 * Returns whether the payload is a Symbol
 *
 * @param {*} payload
 * @returns {payload is Symbol}
 */


function isSymbol(payload) {
  return getType(payload) === 'Symbol';
}
/**
 * Returns whether the payload is a primitive type (eg. Boolean | Null | Undefined | Number | String | Symbol)
 *
 * @param {*} payload
 * @returns {*}
 */


function isPrimitive(payload) {
  return isBoolean(payload) || isNull(payload) || isUndefined(payload) || isNumber(payload) || isString(payload) || isSymbol(payload);
}
/**
 * Does a generic check to check that the given payload is of a given type.
 * In cases like Number, it will return true for NaN as NaN is a Number (thanks javascript!);
 * It will, however, differentiate between object and null
 *
 * @template T
 * @param {*} payload
 * @param {T} type
 * @throws {TypeError} Will throw type error if type is an invalid type
 * @returns {payload is T}
 */


function isType(payload, type) {
  if (!(type instanceof Function)) {
    throw new TypeError('Type must be a function');
  }

  if (!type.hasOwnProperty('prototype')) {
    throw new TypeError('Type is not a class');
  } // Classes usually have names (as functions usually have names)


  var name = type.name;
  return getType(payload) === name || Boolean(payload && payload.constructor === type);
}
},{}],"node_modules/merge-anything/dist/index.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isWhat = require("is-what");

function mergeRecursively(origin, newComer, extensions) {
  // work directly on newComer if its not an object
  if (!(0, _isWhat.isPlainObject)(newComer)) {
    // extend merge rules
    if (extensions && (0, _isWhat.isArray)(extensions)) {
      extensions.forEach(function (extend) {
        newComer = extend(origin, newComer);
      });
    }

    return newComer;
  } // define newObject to merge all values upon


  var newObject = (0, _isWhat.isPlainObject)(origin) ? Object.keys(origin).reduce(function (carry, key) {
    var targetVal = origin[key]; // @ts-ignore

    if (!Object.keys(newComer).includes(key)) carry[key] = targetVal;
    return carry;
  }, {}) : {};
  return Object.keys(newComer).reduce(function (carry, key) {
    // re-define the origin and newComer as targetVal and newVal
    var newVal = newComer[key];
    var targetVal = (0, _isWhat.isPlainObject)(origin) ? origin[key] : undefined; // extend merge rules

    if (extensions && (0, _isWhat.isArray)(extensions)) {
      extensions.forEach(function (extend) {
        newVal = extend(targetVal, newVal);
      });
    } // early return when targetVal === undefined


    if (targetVal === undefined) {
      carry[key] = newVal;
      return carry;
    } // When newVal is an object do the merge recursively


    if ((0, _isWhat.isPlainObject)(newVal)) {
      carry[key] = mergeRecursively(targetVal, newVal, extensions);
      return carry;
    } // all the rest


    carry[key] = newVal;
    return carry;
  }, newObject);
}
/**
 * Merge anything recursively.
 * Objects get merged, special objects (classes etc.) are re-assigned "as is".
 * Basic types overwrite objects or other basic types.
 *
 * @param {(IConfig | any)} origin
 * @param {...any[]} newComers
 * @returns the result
 */


function index(origin) {
  var newComers = [];

  for (var _i = 1; _i < arguments.length; _i++) {
    newComers[_i - 1] = arguments[_i];
  }

  var extensions = null;
  var base = origin;

  if ((0, _isWhat.isPlainObject)(origin) && origin.extensions && Object.keys(origin).length === 1) {
    base = {};
    extensions = origin.extensions;
  }

  return newComers.reduce(function (result, newComer) {
    return mergeRecursively(result, newComer, extensions);
  }, base);
}

var _default = index;
exports.default = _default;
},{"is-what":"node_modules/is-what/dist/index.esm.js"}],"node_modules/vuex-easy-access/dist/index.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createEasyAccess = createEasyAccess;
exports.defaultMutations = defaultMutations;
exports.defaultGetter = defaultGetter;
exports.defaultSetter = defaultSetter;
exports.defaultDeletor = defaultDeletor;
exports.getDeepRef = getDeepRef;
exports.getKeysFromPath = getKeysFromPath;
exports.default = void 0;

var _isWhat = require("is-what");

var _vue = _interopRequireDefault(require("vue"));

var _mergeAnything = _interopRequireDefault(require("merge-anything"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var defaultConfig = {
  setter: 'set',
  getter: 'get',
  deletor: 'delete',
  vuexEasyFirestore: false,
  ignorePrivateProps: true,
  ignoreProps: [],
  pattern: 'simple'
};
/* eslint-disable */

function getErrors(conf, path, props) {
  var originInfo = path || props ? "problem with prop: `" + props + "` at path: `" + path + "`" : '';
  var tradPatt = conf.pattern === 'traditional';
  var setter = conf.setter;
  var deletor = conf.deletor;
  var prop = 'items';
  var mutationNameSet = tradPatt ? 'SET_' + prop.toUpperCase() : prop;
  var mutationNameDel = tradPatt ? 'DELETE_' + prop.toUpperCase() : prop;
  var exampleSetters__Wildcard = "\n    Correct usage examples:\n    // From Vue-components:\n    " + setter + "('" + prop + ".*', {'123': {name: 'the best item'}})\n\n    // From the Vuex store:\n    dispatch('" + setter + "/" + prop + ".*', {'123': {name: 'the best item'}})\n    // or\n    commit('" + mutationNameSet + ".*', {'123': {name: 'the best item'}})";
  var exampleSetters__DoubleWildcard = "\n    Correct usage examples:\n    // From Vue-components:\n    " + setter + "('" + prop + ".*.tags.*', ['123', {water: true}])\n\n    // From the Vuex store:\n    dispatch('" + setter + "/" + prop + ".*.tags.*', ['123', {water: true}])\n    // or\n    commit('" + mutationNameSet + ".*.tags.*', ['123', {water: true}])";
  var exampleDeletor = "\n    Correct usage examples:\n    // From Vue-components:\n    " + deletor + "('" + prop + ".*', '123')\n\n    // From the Vuex store:\n    dispatch('" + deletor + "/" + prop + ".*', '123')\n    // or\n    commit('" + mutationNameDel + ".*', '123')";
  return {
    mutationSetterNoId: originInfo + "\n      The payload needs to be an object with an `id` field.\n      " + exampleSetters__Wildcard,
    mutationSetterPropPathWildcardMissingItemDoesntExist: originInfo + "\n      The item does not exist! Make sure you first set the item.\n      " + exampleSetters__Wildcard,
    mutationSetterPropPathWildcardIdCount: originInfo + "\n      The amount of ids and wildcards `'*'` are not equal.\n      If you have multiple wildcards you need to pass an array, where each item is an ID and the last is the property you want to set.\n      " + exampleSetters__DoubleWildcard + "\n      ",
    mutationDeleteNoId: originInfo + "\n      The payload needs to be an object with an `id` field.\n      " + exampleDeletor + "\n      ",
    wildcardFormatWrong: originInfo + "\n      There was something wrong with the payload passed when using a path with wildcards.\n\n      A) Path with wildcard:\n      " + exampleSetters__Wildcard + "\n\n      B) Path with multiple wildcards:\n      " + exampleSetters__DoubleWildcard + "\n    ",
    missingDeleteMutation: "\n      There is no mutation set for '" + path + "'.\n      Something went wrong with your vuex-easy-access setup.\n      Did you manually add `...defaultMutations(state)` to your modules?\n      See the documentation here:\n        https://github.com/mesqueeb/VuexEasyAccess#setup\n\n\n      // You can also manually add a mutation like so in the correct module (not recommended!!):\n      mutations: {\n        '" + (tradPatt ? 'DELETE_' + props.toUpperCase() : '-' + props) + "': (state, payload) => {\n          this._vm.$delete(state." + props + ")\n        }\n      }\n    ",
    missingSetterMutation: "\n      There is no mutation set for '" + path + "'.\n      Something went wrong with your vuex-easy-access setup.\n      Did you manually add `...defaultMutations(state)` to your modules?\n      See the documentation here:\n        https://github.com/mesqueeb/VuexEasyAccess#setup\n\n\n      // You can also manually add a mutation like so in the correct module (not recommended!!):\n      mutations: {\n        '" + (tradPatt ? 'SET_' + props.toUpperCase() : props) + "': (state, payload) => {\n          state." + props + " = payload\n        }\n      }\n    "
  };
}
/**
 * Error logging
 *
 * @export
 * @param {string} error the error code
 * @param {object} conf the user config
 * @param {string} [path] (optional) the path the error occured in
 * @param {string} [props] (optional) the props the error occured with
 * @returns {string} the error code
 */


function error(error, conf, path, props) {
  if (conf === void 0) {
    conf = {};
  }

  var mergedConf = Object.assign({}, defaultConfig, conf);
  var errorMessages = getErrors(mergedConf, path, props);
  console.error('[vuex-easy-access] Error!', errorMessages[error]);
  return error;
}
/**
 * gets an ID from a single piece of payload.
 *
 * @param {(object | ({ id: string } & object) | string)} payloadPiece
 * @param {object} [conf] (optional - for error handling) the vuex-easy-access config
 * @param {string} [path] (optional - for error handling) the path called
 * @param {(any[] | object | string)} [fullPayload] (optional - for error handling) the full payload on which each was `getId()` called
 * @returns {string} the id
 */


function getId(payloadPiece, conf, path, fullPayload) {
  if ((0, _isWhat.isObject)(payloadPiece)) {
    if ('id' in payloadPiece) return payloadPiece.id;
    if (Object.keys(payloadPiece).length === 1) return Object.keys(payloadPiece)[0];
  }

  if ((0, _isWhat.isString)(payloadPiece)) return payloadPiece;
  error('wildcardFormatWrong', conf, path);
  return '';
}
/**
 * Get all ids from an array payload.
 *
 * @param {any[]} payload
 * @param {object} [conf] (optional - for error handling) the vuex-easy-access config
 * @param {string} [path] (optional - for error handling) the path called
 * @returns {string[]} all ids
 */


function getIdsFromPayload(payload, conf, path) {
  return payload.map(function (payloadPiece) {
    return getId(payloadPiece, conf, path, payload);
  });
}
/**
 * Returns a value of a payload piece. Eg. {[id]: 'val'} will return 'val'
 *
 * @param {(object | string)} payloadPiece
 * @returns {any}
 */


function getValueFromPayloadPiece(payloadPiece) {
  if ((0, _isWhat.isObject)(payloadPiece) && !('id' in payloadPiece) && Object.keys(payloadPiece).length === 1) {
    return Object.values(payloadPiece)[0];
  }

  return payloadPiece;
}
/**
 * Checks the ratio between an array of IDs and a path with wildcards
 *
 * @param {string[]} ids
 * @param {string} path
 * @param {object} [conf] (optional - for error handling) the vuex-easy-access config
 * @returns {boolean} true if no problem. false if the ratio is incorrect
 */


function checkIdWildcardRatio(ids, path, conf) {
  var match = path.match(/\*/g);
  var idCount = (0, _isWhat.isArray)(match) ? match.length : 0;
  if (ids.length === idCount) return true;
  error('mutationSetterPropPathWildcardIdCount', conf);
  return false;
}
/**
 * Fill in IDs at '*' in a path, based on the IDs received.
 *
 * @param {string[]} ids
 * @param {string} path 'path.*.with.*.wildcards'
 * @param {object} [state] RELATIVE TO PATH START! the state to check if the value actually exists
 * @param {object} [conf] (optional - for error handling) the vuex-easy-access config
 * @returns {string} The path with '*' replaced by IDs
 */


function fillinPathWildcards(ids, path, state, conf) {
  // Ignore pool check if '*' comes last
  var ignorePoolCheckOn = path.endsWith('*') ? ids[ids.length - 1] : null;
  ids.forEach(function (_id, _index, _array) {
    var idIndex = path.indexOf('*');
    var pathUntilPool = path.substring(0, idIndex); // check for errors when both state and conf are passed
    // pathUntilPool can be '' in case the path starts with '*'

    if (ignorePoolCheckOn !== _id && state && conf) {
      var pool = pathUntilPool ? getDeepRef(state, pathUntilPool) : state;
      if (pool[_id] === undefined) return error('mutationSetterPropPathWildcardMissingItemDoesntExist', conf, pathUntilPool, _id);
    }

    path = path.split('').map(function (char, ind) {
      return ind === idIndex ? _id : char;
    }).join('');
  });
  return path;
}
/**
 * ('/sub.prop', payload) becomes →  {sub: {prop: payload}}
 * ('sub', payload) becomes →  {sub: payload}
 *
 * @param   {string} path     'a/path/like.this'
 * @param   {*}      payload
 * @param   {object} [state] the state to check if the value actually exists
 * @param   {object} [conf] (optional - for error handling) the vuex-easy-access config
 * @returns {AnyObject} a nested object re-created based on the path & payload
 */


function createObjectFromPath(path, payload, state, conf) {
  var _a; // edge cases


  if (path === '*') return payload;
  if (!path.includes('.') && !path.includes('/')) return _a = {}, _a[path] = payload, _a; // start

  var newValue = payload;

  if (path.includes('*')) {
    // only work with arrays
    if (!(0, _isWhat.isArray)(payload)) payload = [payload];
    var lastPayloadPiece = payload.pop();
    var ids = payload; // CASE: 'dex/pokemonById.*.tags'

    if (!path.endsWith('*')) {
      newValue = lastPayloadPiece;
    } // CASE: 'dex/pokemonById.*.tags.*'


    if (path.endsWith('*')) {
      var lastId = getId(lastPayloadPiece, conf, path);
      ids.push(lastId);
      newValue = getValueFromPayloadPiece(lastPayloadPiece);
      if ((0, _isWhat.isObject)(newValue)) newValue.id = lastId;
    }

    ids = ids.map(function (_id) {
      _id = _id.replace('.', '_____dot_____');
      _id = _id.replace('/', '_____slash_____');
      return _id;
    });
    if (!checkIdWildcardRatio(ids, path, conf)) return;
    var pathWithIds = fillinPathWildcards(ids, path, state, conf);
    path = pathWithIds;
  } // important to set the result here and not return the reduce directly!


  var result = {};
  path.match(/[^\/^\.]+/g).reduce(function (carry, _prop, index, array) {
    _prop = _prop.replace('_____dot_____', '.');
    _prop = _prop.replace('_____slash_____', '/');
    var container = index === array.length - 1 ? newValue : {};
    carry[_prop] = container;
    return container;
  }, result);
  return result;
}
/**
 * Returns the keys of a path
 *
 * @param   {string} path   a/path/like.this
 * @returns {string[]} with keys
 */


function getKeysFromPath(path) {
  if (!path) return [];
  return path.match(/[^\/^\.]+/g);
}
/**
 * Gets a deep property in an object, based on a path to that property
 *
 * @param {object} target an object to wherefrom to retrieve the deep reference of
 * @param {string} path   'path/to.prop'
 * @returns {AnyObject} the last prop in the path
 */


function getDeepRef(target, path) {
  if (target === void 0) {
    target = {};
  }

  var keys = getKeysFromPath(path);
  if (!keys.length) return target;
  var obj = target;

  while (obj && keys.length > 1) {
    obj = obj[keys.shift()];
  }

  var key = keys.shift();

  if (obj && obj.hasOwnProperty(key)) {
    return obj[key];
  }
}
/**
 * Gets a deep property in an object, based on a path to that property
 *
 * @param   {object} target   the Object to get the value of
 * @param   {string} path     'path/to/prop.subprop'
 * @returns {AnyObject}          the property's value
 */


function getDeepValue(target, path) {
  return getDeepRef(target, path);
}
/**
 * Sets a value to a deep property in an object, based on a path to that property
 *
 * @param   {object} target   the Object to set the value on
 * @param   {string} path     'path/to/prop.subprop'
 * @param   {*}      value    the value to set
 * @returns {AnyObject} the original target object
 */


function setDeepValue(target, path, value) {
  var keys = getKeysFromPath(path);
  var lastKey = keys.pop();
  var deepRef = getDeepRef(target, keys.join('.'));

  if (deepRef && deepRef.hasOwnProperty(lastKey)) {
    deepRef[lastKey] = value;
  }

  return target;
}
/**
 * Pushes a value in an array which is a deep property in an object, based on a path to that property
 *
 * @param   {object} target   the Object to push the value on
 * @param   {string} path     'path/to.sub.prop'
 * @param   {*}      value    the value to push
 * @returns {number}          the new length of the array
 */


function pushDeepValue(target, path, value) {
  var deepRef = getDeepRef(target, path);
  if (!(0, _isWhat.isArray)(deepRef)) return;
  return deepRef.push(value);
}
/**
 * Pops a value of an array which is a deep property in an object, based on a path to that property
 *
 * @param   {object} target   the Object to pop the value of
 * @param   {string} path     'path.to.sub.prop'
 * @returns {*}               the popped value
 */


function popDeepValue(target, path) {
  var deepRef = getDeepRef(target, path);
  if (!(0, _isWhat.isArray)(deepRef)) return;
  return deepRef.pop();
}
/**
 * Shift a value of an array which is a deep property in an object, based on a path to that property
 *
 * @param   {object} target   the Object to shift the value of
 * @param   {string} path     'path.to.sub.prop'
 * @returns {*}               the shifted value
 */


function shiftDeepValue(target, path) {
  var deepRef = getDeepRef(target, path);
  if (!(0, _isWhat.isArray)(deepRef)) return;
  return deepRef.shift();
}
/**
 * Splice into an array which is a deep property in an object, based on a path to that property
 *
 * @param   {object} target       the Object to splice the value of
 * @param   {string} path         'path/to.sub.prop'
 * @param   {number} [index=0]        the index to splice in the value, defaults to 0
 * @param   {number} [deleteCount=0]  the amount of items to delete, defaults to 0
 * @param   {*}      value        the value to splice in
 * @returns {any[]}              an array containing the deleted elements
 */


function spliceDeepValue(target, path, index, deleteCount, value) {
  if (index === void 0) {
    index = 0;
  }

  if (deleteCount === void 0) {
    deleteCount = 0;
  }

  var deepRef = getDeepRef(target, path);
  if (!(0, _isWhat.isArray)(deepRef)) return;
  if (value === undefined) return deepRef.splice(index, deleteCount);
  return deepRef.splice(index, deleteCount, value);
} // define possible functions
// eslint-disable-next-line


function SET_PROP_SUBPROP(state, payload, PROP_SUBPROP) {
  return setDeepValue(state, PROP_SUBPROP, payload);
} // eslint-disable-next-line


function DELETE_PROP_SUBPROP(state, PROP_SUBPROP) {
  var propsArray = PROP_SUBPROP.includes('.') ? PROP_SUBPROP.split('.') : [PROP_SUBPROP];
  var lastProp = propsArray.pop();
  var propsWithoutLast = propsArray.join('.');
  var ref = getDeepRef(state, propsWithoutLast);
  return _vue.default.delete(ref, lastProp);
} // eslint-disable-next-line


function MUTATE_PROP_x_SUBPROP(state, payload, PROP_SUBPROP, conf) {
  if (!(0, _isWhat.isArray)(payload)) payload = [payload];
  var newValue = payload.pop();
  var ids = getIdsFromPayload(payload, conf, PROP_SUBPROP);
  if (!checkIdWildcardRatio(ids, PROP_SUBPROP, conf)) return;
  var pathWithIds = fillinPathWildcards(ids, PROP_SUBPROP, state, conf);
  return setDeepValue(state, pathWithIds, newValue);
} // eslint-disable-next-line


function DELETE_PROP_x_SUBPROP(state, payload, PROP_SUBPROP, conf) {
  var propsArray = PROP_SUBPROP.includes('.') ? PROP_SUBPROP.split('.') : [PROP_SUBPROP];
  var lastProp = propsArray.pop();
  var propsWithoutLast = propsArray.join('.');
  var ids = payload;
  if (!checkIdWildcardRatio(ids, propsWithoutLast, conf)) return;
  var pathWithIds = fillinPathWildcards(ids, propsWithoutLast, state, conf);
  var ref = getDeepRef(state, pathWithIds);
  return _vue.default.delete(ref, lastProp);
} // eslint-disable-next-line


function MUTATE_PROP_x(state, payload, PROP_SUBPROP, conf, propValue) {
  if (!(0, _isWhat.isArray)(payload)) payload = [payload];
  var ids = getIdsFromPayload(payload, conf, PROP_SUBPROP);
  if (!checkIdWildcardRatio(ids, PROP_SUBPROP, conf)) return;
  var lastId = ids.pop();
  var propPathWithoutLast = PROP_SUBPROP.slice(0, -1);
  var pathWithIds = fillinPathWildcards(ids, propPathWithoutLast, state, conf);
  var ref = getDeepRef(state, pathWithIds);
  var newValue = getValueFromPayloadPiece(payload.pop());
  if ((0, _isWhat.isObject)(newValue)) newValue.id = lastId;
  if ((0, _isWhat.isObject)(propValue)) newValue = (0, _mergeAnything.default)(propValue, newValue);
  return _vue.default.set(ref, lastId, newValue);
} // eslint-disable-next-line


function DELETE_PROP_x(state, id, PROP_SUBPROP, conf) {
  if (!id) return error('mutationDeleteNoId', conf, PROP_SUBPROP);
  var ids = !(0, _isWhat.isArray)(id) ? [id] : id;
  if (!checkIdWildcardRatio(ids, PROP_SUBPROP, conf)) return;
  var lastId = ids.pop();
  var pathWithoutWildcard = PROP_SUBPROP.endsWith('*') ? PROP_SUBPROP.slice(0, -1) : PROP_SUBPROP;
  var pathWithIds = fillinPathWildcards(ids, pathWithoutWildcard, state, conf);
  var ref = getDeepRef(state, pathWithIds);
  return _vue.default.delete(ref, lastId);
} // execute mutation


function executeArrayMutation(state, payload, action, PROP_SUBPROP, conf) {
  var newValue, pathWithIds;

  if (!PROP_SUBPROP.includes('*')) {
    newValue = payload;
    pathWithIds = PROP_SUBPROP;
  } else {
    if (!(0, _isWhat.isArray)(payload) && action !== 'splice') payload = [payload];
    if (action !== 'pop' && action !== 'shift') newValue = payload.pop();
    var ids = getIdsFromPayload(payload, conf, PROP_SUBPROP);
    if (!checkIdWildcardRatio(ids, PROP_SUBPROP, conf)) return;
    pathWithIds = fillinPathWildcards(ids, PROP_SUBPROP, state, conf);
  }

  if (action === 'push') {
    return pushDeepValue(state, pathWithIds, newValue);
  }

  if (action === 'pop') {
    return popDeepValue(state, pathWithIds);
  }

  if (action === 'shift') {
    return shiftDeepValue(state, pathWithIds);
  }

  if (action === 'splice') {
    var index = newValue[0];
    var deleteCount = newValue[1];
    var value = newValue[2];
    return spliceDeepValue(state, pathWithIds, index, deleteCount, value);
  }
}
/**
 * Creates the mutations for each property of the object passed recursively
 *
 * @param   {object} propParent an Object of which all props will get a mutation
 * @param   {(string | null)} path the path taken until the current propParent instance
 * @param   {IDefaultConfig} conf user config
 * @param   {string} [infoNS] (optional) module namespace in light of ignoreProps config
 *
 * @returns {AnyObject} all mutations for each property.
 */


function makeMutationsForAllProps(propParent, path, conf, infoNS) {
  if (!(0, _isWhat.isObject)(propParent)) return {};
  return Object.keys(propParent).reduce(function (mutations, prop) {
    // Get the path info up until this point
    var PROP_SUBPROP = !path ? prop : path + '.' + prop; // Avoid making setters for private props

    if (conf.ignorePrivateProps && prop[0] === '_') return mutations;

    if (conf.ignoreProps.some(function (ignPropFull) {
      var separatePropFromNS = /(.*?)\/([^\/]*?)$/.exec(ignPropFull);
      var ignPropNS = separatePropFromNS ? separatePropFromNS[1] + '/' : '';
      var ignProp = separatePropFromNS ? separatePropFromNS[2] : ignPropFull;
      return !infoNS && ignProp === PROP_SUBPROP || infoNS && infoNS.moduleNamespace === ignPropNS && ignProp === PROP_SUBPROP;
    })) {
      return mutations;
    } // Get the value of the prop


    var propValue = propParent[prop]; // =================================================>
    //   SET & DELETE MUTATION NAMES
    // =================================================>

    var SET = conf.pattern === 'traditional' ? 'SET_' + PROP_SUBPROP.toUpperCase() : PROP_SUBPROP;
    var DELETE = conf.pattern === 'traditional' ? 'DELETE_' + PROP_SUBPROP.toUpperCase() : '-' + PROP_SUBPROP; // =================================================>
    //   PROP MUTATION
    // =================================================>
    // All good, make the mutation!

    if (!PROP_SUBPROP.includes('*')) {
      mutations[SET] = function (state, payload) {
        return SET_PROP_SUBPROP(state, payload, PROP_SUBPROP);
      };

      mutations[DELETE] = function (state) {
        return DELETE_PROP_SUBPROP(state, PROP_SUBPROP);
      };
    } else if (prop !== '*') {
      // path includes wildcard, but prop is not a wildcard
      mutations[SET] = function (state, payload) {
        return MUTATE_PROP_x_SUBPROP(state, payload, PROP_SUBPROP, conf);
      };

      mutations[DELETE] = function (state, payload) {
        return DELETE_PROP_x_SUBPROP(state, payload, PROP_SUBPROP, conf);
      };
    } // =================================================>
    //   WILDCARD MUTATION
    // =================================================>


    if (prop === '*') {
      mutations[SET] = function (state, payload) {
        return MUTATE_PROP_x(state, payload, PROP_SUBPROP, conf, propValue);
      };

      mutations[DELETE] = function (state, payload) {
        return DELETE_PROP_x(state, payload, PROP_SUBPROP, conf);
      };
    } // =================================================>
    //   ARRAY MUTATIONS
    // =================================================>


    if ((0, _isWhat.isArray)(propValue)) {
      // PUSH mutation name
      var push = conf.pattern === 'traditional' ? 'PUSH_' + PROP_SUBPROP.toUpperCase() : PROP_SUBPROP + '.push';

      mutations[push] = function (state, payload) {
        return executeArrayMutation(state, payload, 'push', PROP_SUBPROP, conf);
      }; // POP mutation name


      var pop = conf.pattern === 'traditional' ? 'POP_' + PROP_SUBPROP.toUpperCase() : PROP_SUBPROP + '.pop';

      mutations[pop] = function (state, payload) {
        return executeArrayMutation(state, payload, 'pop', PROP_SUBPROP, conf);
      }; // SHIFT mutation name


      var shift = conf.pattern === 'traditional' ? 'SHIFT_' + PROP_SUBPROP.toUpperCase() : PROP_SUBPROP + '.shift';

      mutations[shift] = function (state, payload) {
        return executeArrayMutation(state, payload, 'shift', PROP_SUBPROP, conf);
      }; // SPLICE mutation name


      var splice = conf.pattern === 'traditional' ? 'SPLICE_' + PROP_SUBPROP.toUpperCase() : PROP_SUBPROP + '.splice';

      mutations[splice] = function (state, payload) {
        return executeArrayMutation(state, payload, 'splice', PROP_SUBPROP, conf);
      };
    } // =================================================>
    //   CHILDREN MUTATIONS
    // =================================================>


    if ((0, _isWhat.isObject)(propValue) && Object.keys(propValue).length) {
      var childrenMutations = makeMutationsForAllProps(propValue, PROP_SUBPROP, conf, infoNS);
      Object.assign(mutations, childrenMutations);
    }

    return mutations;
  }, {});
}
/**
 * Creates all mutations for the state of a module.
 * Usage:
 * commit('module/path/SET_PATH.TO.PROP', newValue)
 * Import method:
 * mutations {
 *   ...defaultMutations(initialState)
 * }
 *
 * @param {object} initialState the initial state of a module
 * @param {IDefaultConfig} [userConf={}] (optional) user config
 * @param {IInfoNS} [infoNS] (optional) info on the module namespace
 * @returns {AnyObject} all mutations for the state
 */


function defaultMutations(initialState, userConf, infoNS) {
  if (userConf === void 0) {
    userConf = {};
  }

  var mergedConf = Object.assign({}, defaultConfig, userConf);
  return makeMutationsForAllProps(initialState, null, mergedConf, infoNS);
}
/**
 * Creates a getter function in the store to set any state value.
 * Usage:
 * `get('module/path/path.to.prop')`
 * it will check first for existence of: `getters['module/path/path.to.prop']`
 * if non existant it will return: `state.module.path.path.to.prop`
 * Import method:
 * `store.get = (path) => { return defaultGetter(path, store) }`
 *
 * @param {string} path the path of the prop to get eg. 'info/user/favColours.primary'
 * @param {IInitialisedStore} store the store to attach
 * @returns {*} getter or state
 */


function defaultGetter(path, store) {
  var getterExists = store.getters.hasOwnProperty(path);
  if (getterExists) return store.getters[path];
  return getDeepValue(store.state, path);
}
/**
 * Creates a setter function in the store to set any state value
 * Usage:
 * `set('module/path/path.to.prop', newValue)`
 * it will check first for existence of: `dispatch('module/path/path.to.prop')`
 * if non existant it will execute: `commit('module/path/path.to.prop', newValue)`
 * Import method:
 * `store.set = (path, payload) => { return defaultSetter(path, payload, store, conf) }`
 *
 * @param {string} path the path of the prop to set eg. 'info/user/favColours.primary'
 * @param {*} payload the payload to set the prop to
 * @param {IInitialisedStore} store the store to attach
 * @param {IDefaultConfig} [conf={}] user config
 * @returns {*} the dispatch or commit function
 */


function defaultSetter(path, payload, store, conf) {
  if (conf === void 0) {
    conf = {};
  }

  var _a = formatSetter(path, payload, store, conf),
      command = _a.command,
      _path = _a._path,
      _payload = _a._payload;

  if (command === 'error') return _payload;
  return store[command](_path, _payload);
}

function formatSetter(path, payload, store, conf) {
  if (conf === void 0) {
    conf = {};
  }

  var dConf = Object.assign({}, defaultConfig, conf);
  var pArr = path.split('/'); // ['info', 'user', 'favColours.primary']

  var props = pArr.pop(); // 'favColours.primary'

  var modulePath = pArr.length ? pArr.join('/') + '/' // 'info/user/'
  : '';
  var setProp = dConf.pattern === 'traditional' ? 'set' + props[0].toUpperCase() + props.substring(1) // 'setFavColours.primary'
  : props; // 'favColours.primary'
  // Check if an action exists, if it does, trigger that and return early!

  var moduleSetProp = modulePath + setProp;
  var actionExists = store._actions[moduleSetProp];

  if (actionExists) {
    return {
      command: 'dispatch',
      _path: moduleSetProp,
      _payload: payload
    };
  } // [vuex-easy-firestore] check if it's a firestore module


  var fsModulePath = !modulePath && props && !props.includes('.') && dConf.vuexEasyFirestore ? props + '/' : modulePath;
  var _module = store._modulesNamespaceMap[fsModulePath];
  var fsConf = !_module ? null : _module.state._conf;

  if (dConf.vuexEasyFirestore && fsConf) {
    // 'info/user/set', {favColours: {primary: payload}}'
    var firestoreActionPath = fsModulePath + 'set';
    var firestoreActionExists = store._actions[firestoreActionPath];

    if (firestoreActionExists) {
      var fsPropName = fsConf.statePropName;
      var fsProps = fsPropName && props.startsWith(fsPropName + ".") ? props.replace(fsPropName + ".", '') : props;
      var newPayload = !fsProps || !modulePath && fsProps && !fsProps.includes('.') ? payload : createObjectFromPath(fsProps, payload);
      return {
        command: 'dispatch',
        _path: firestoreActionPath,
        _payload: newPayload
      };
    }
  } // Trigger the mutation!


  var SET_PROP = dConf.pattern === 'traditional' ? 'SET_' + props.toUpperCase() // 'SET_FAVCOLOURS.PRIMARY'
  : props; // 'favColours.primary'

  var MODULES_SET_PROP = modulePath + SET_PROP;
  var mutationExists = store._mutations[MODULES_SET_PROP];

  if (mutationExists) {
    return {
      command: 'commit',
      _path: MODULES_SET_PROP,
      _payload: payload
    };
  }

  var triggeredError = error('missingSetterMutation', dConf, MODULES_SET_PROP, props);
  return {
    command: 'error',
    _payload: triggeredError
  };
}
/**
 * Creates a delete function in the store to delete any prop from a value
 * Usage:
 * `delete('module/path/path.to.prop', id)` will delete prop[id]
 * `delete('module/path/path.to.prop.*', {id})` will delete prop[id]
 * it will check first for existence of: `dispatch('module/path/-path.to.prop')` or `dispatch('module/path/-path.to.prop.*')`
 * if non existant it will execute: `commit('module/path/-path.to.prop')` or `commit('module/path/-path.to.prop.*')`
 * Import method:
 * `store.delete = (path, payload) => { return defaultDeletor(path, payload, store, conf) }`
 *
 * @param {string} path the path of the prop to delete eg. 'info/user/favColours.primary'
 * @param {*} payload either nothing or an id or {id}
 * @param {IInitialisedStore} store the store to attach
 * @param {IDefaultConfig} [conf={}] user config
 * @returns {*} dispatch or commit
 */


function defaultDeletor(path, payload, store, conf) {
  if (conf === void 0) {
    conf = {};
  }

  var _a = formatDeletor(path, payload, store, conf),
      command = _a.command,
      _path = _a._path,
      _payload = _a._payload;

  if (command === 'error') return _payload;
  return store[command](_path, _payload);
}

function formatDeletor(path, payload, store, conf) {
  if (conf === void 0) {
    conf = {};
  }

  var dConf = Object.assign({}, defaultConfig, conf); // 'user/items.*.tags.*'

  var pArr = path.split('/'); // ['user', 'items.*.tags.*']

  var props = pArr.pop(); // 'items.*.tags.*'

  var modulePath = pArr.length ? pArr.join('/') + '/' // 'user/'
  : '';
  var deleteProp = dConf.pattern === 'traditional' ? 'delete' + props[0].toUpperCase() + props.substring(1) // 'deleteItems.*.tags.*'
  : '-' + props; // '-items.*.tags.*'
  // Check if an action exists, if it does, trigger that and return early!

  var moduleDeleteProp = modulePath + deleteProp;
  var actionExists = store._actions[moduleDeleteProp];

  if (actionExists) {
    return {
      command: 'dispatch',
      _path: moduleDeleteProp,
      _payload: payload
    };
  } // [vuex-easy-firestore] check if it's a firestore module


  var _module = store._modulesNamespaceMap[modulePath];
  var fsConf = !_module ? null : _module.state._conf;

  if (dConf.vuexEasyFirestore && fsConf) {
    // DOC: 'user/favColours.*', 'primary'
    // COLLECTION: 'items.*', '123'
    // COLLECTION: 'items.*.tags.*', ['123', 'dark']
    var fsPropName = fsConf.statePropName;
    var fsProps = fsPropName && props.startsWith(fsPropName + ".") ? props.replace(fsPropName + ".", '') : props;
    var newPath = fsProps;

    if (fsProps.includes('*')) {
      var idsPayload = !(0, _isWhat.isArray)(payload) ? [payload] : payload;
      var ids = getIdsFromPayload(idsPayload);
      newPath = fillinPathWildcards(ids, fsProps);
    }

    if (newPath) return {
      command: 'dispatch',
      _path: modulePath + 'delete',
      _payload: newPath
    };
  } // Trigger the mutation!


  var DELETE_PROP = dConf.pattern === 'traditional' ? 'DELETE_' + props.toUpperCase() // 'DELETE_ITEMS.*.TAGS.*'
  : '-' + props; // '-items.*.tags.*'

  var MODULE_DELETE_PROP = modulePath + DELETE_PROP;
  var mutationExists = store._mutations[MODULE_DELETE_PROP];

  if (mutationExists) {
    return {
      command: 'commit',
      _path: MODULE_DELETE_PROP,
      _payload: payload
    };
  }

  var triggeredError = error('missingDeleteMutation', dConf, MODULE_DELETE_PROP, props);
  return {
    command: 'error',
    _payload: triggeredError
  };
}
/**
 * Creates a special 'setter-module' to be registered as a child of a module. This 'setter-module' will have the 'set' namespace (by default) and have one setter action per state prop in the parent module. The setter action's name will be the state prop name.
 *
 * @param {AnyObject} targetState parent module's state object
 * @param {string} [moduleNS=''] parent module's namespace, must end in '/'
 * @param {IInitialisedStore} store vuex store
 * @param {IDefaultConfig} conf user config
 * @returns {*} a special 'setter-module' to be registered as child of target module.
 */


function createSetterModule(targetState, moduleNS, store, conf) {
  if (moduleNS === void 0) {
    moduleNS = '';
  }

  function getSetters(_targetState, _propPath) {
    if (_propPath === void 0) {
      _propPath = '';
    }

    return Object.keys(_targetState).reduce(function (carry, stateProp) {
      // Get the path info up until this point
      var PROP_SUBPROP = _propPath ? _propPath + '.' + stateProp : stateProp;
      var MODULE_PROP_SUBPROP = moduleNS + PROP_SUBPROP; // Avoid making setters for private props

      if (conf.ignorePrivateProps && stateProp[0] === '_') return carry;
      if (conf.ignoreProps.includes(MODULE_PROP_SUBPROP)) return carry; // Avoid making setters for props which are an entire module on its own

      if (store._modulesNamespaceMap[MODULE_PROP_SUBPROP + '/']) return carry; // =================================================>
      //   NORMAL SETTER
      // =================================================>
      // All good, make the action!

      carry[PROP_SUBPROP] = function (context, payload) {
        return defaultSetter(MODULE_PROP_SUBPROP, payload, store, conf);
      }; // Get the value of the prop


      var propValue = _targetState[stateProp]; // =================================================>
      //   ARRAY SETTERS
      // =================================================>

      if ((0, _isWhat.isArray)(propValue)) {
        carry[PROP_SUBPROP + '.push'] = function (context, payload) {
          return defaultSetter(MODULE_PROP_SUBPROP + '.push', payload, store, conf);
        };

        carry[PROP_SUBPROP + '.pop'] = function (context, payload) {
          return defaultSetter(MODULE_PROP_SUBPROP + '.pop', payload, store, conf);
        };

        carry[PROP_SUBPROP + '.shift'] = function (context, payload) {
          return defaultSetter(MODULE_PROP_SUBPROP + '.shift', payload, store, conf);
        };

        carry[PROP_SUBPROP + '.splice'] = function (context, payload) {
          return defaultSetter(MODULE_PROP_SUBPROP + '.splice', payload, store, conf);
        };
      } // =================================================>
      //   WILDCARDS SETTER
      // =================================================>
      // if (isObject(propValue) && !Object.keys(propValue).length) {
      //   carry[PROP_SUBPROP + '.*'] = (context, payload) => {
      //     return defaultSetter(MODULE_PROP_SUBPROP + '.*', payload, store, conf)
      //   }
      // }
      // =================================================>
      //   CHILDREN SETTERS
      // =================================================>
      // let's do it's children as well!


      if ((0, _isWhat.isObject)(propValue) && Object.keys(propValue).length) {
        var childrenSetters = getSetters(propValue, PROP_SUBPROP);
        Object.assign(carry, childrenSetters);
      }

      return carry;
    }, {});
  }

  var setters = getSetters(targetState);
  return {
    actions: setters,
    namespaced: true
  };
}
/**
 * Creates a special 'delete-module' to be registered as a child of a module. This 'delete-module' will have the 'delete' namespace (by default) and have one delete action per state prop in the parent module which holds an empty object. The delete action's name will be the state prop name + `.*`.
 *
 * @param {AnyObject} targetState parent module's state object
 * @param {string} [moduleNS=''] parent module's namespace, must end in '/'
 * @param {IInitialisedStore} store vuex store
 * @param {IDefaultConfig} conf user config
 * @returns {*} a special 'delete-module' to be registered as child of target module.
 */


function createDeleteModule(targetState, moduleNS, store, conf) {
  if (moduleNS === void 0) {
    moduleNS = '';
  }

  function getDeletors(_targetState, _propPath) {
    if (_propPath === void 0) {
      _propPath = '';
    }

    return Object.keys(_targetState).reduce(function (carry, stateProp) {
      // Get the path info up until this point
      var PROP_SUBPROP = _propPath ? _propPath + '.' + stateProp : stateProp;
      var MODULE_PROP_SUBPROP = moduleNS + PROP_SUBPROP; // Avoid making deletor for private props

      if (conf.ignorePrivateProps && stateProp[0] === '_') return carry;
      if (conf.ignoreProps.includes(MODULE_PROP_SUBPROP)) return carry; // Avoid making deletor for props which are an entire module on its own

      if (store._modulesNamespaceMap[MODULE_PROP_SUBPROP + '/']) return carry; // Get the value of the prop

      var propValue = _targetState[stateProp];

      carry[PROP_SUBPROP] = function (context, payload) {
        return defaultDeletor(MODULE_PROP_SUBPROP, payload, store, conf);
      }; // let's do it's children as well!


      if ((0, _isWhat.isObject)(propValue) && Object.keys(propValue).length) {
        var childrenDeletors = getDeletors(propValue, PROP_SUBPROP);
        Object.assign(carry, childrenDeletors);
      }

      return carry;
    }, {});
  }

  var deletors = getDeletors(targetState);
  return {
    actions: deletors,
    namespaced: true
  };
}
/**
 * Generate all vuex-easy-access modules: `/set/` and `/delete/` for each module
 *
 * @export
 * @param {IInitialisedStore} store
 * @param {IDefaultConfig} [conf={}]
 */


function generateSetterModules(store, conf) {
  if (conf === void 0) {
    conf = {};
  }

  var modules = store._modulesNamespaceMap;
  var dConf = Object.assign({}, defaultConfig, conf);
  Object.keys(modules).forEach(function (moduleNS) {
    var _module = modules[moduleNS];
    var moduleName = getKeysFromPath(moduleNS + dConf.setter);
    var setterModule = createSetterModule(_module.state, moduleNS, store, dConf);
    store.registerModule(moduleName, setterModule);
    var deleteModule = createDeleteModule(_module.state, moduleNS, store, dConf);
    var deleteModuleName = getKeysFromPath(moduleNS + dConf.deletor);
    store.registerModule(deleteModuleName, deleteModule);
  });
  var rootModuleName = dConf.setter;
  var rootSetterModule = createSetterModule(store.state, '', store, dConf);
  store.registerModule(rootModuleName, rootSetterModule);
  var rootDeleteModuleName = dConf.deletor;
  var rootDeleteModule = createDeleteModule(store.state, '', store, dConf);
  store.registerModule(rootDeleteModuleName, rootDeleteModule);
}
/**
 * Vuex Easy Access plugin
 * Unified syntax with simple set() and get() store access + auto generate mutations!
 *
 * @author     Luca Ban
 * @contact    https://lucaban.com
 */

/**
 * This will create the `/set/` sub-modules and add `set()` `get()` and `delete()` to the store object.
 *
 * @param {IDefaultConfig} [userConfig={}]
 * @returns {*} the store object
 */


function createEasyAccess(userConfig) {
  if (userConfig === void 0) {
    userConfig = {};
  }

  var conf = Object.assign({}, defaultConfig, userConfig);
  return function (store) {
    generateSetterModules(store, conf);

    store[conf.setter] = function (path, payload) {
      return defaultSetter(path, payload, store, conf);
    };

    store[conf.getter] = function (path) {
      return defaultGetter(path, store);
    };

    store[conf.deletor] = function (path, payload) {
      return defaultDeletor(path, payload, store, conf);
    };
  };
}

var _default = createEasyAccess;
exports.default = _default;
},{"is-what":"node_modules/is-what/dist/index.esm.js","vue":"node_modules/vue/dist/vue.common.js","merge-anything":"node_modules/merge-anything/dist/index.esm.js"}],"node_modules/copy-anything/dist/index.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isWhat = require("is-what");

/**
 * Copy (clone) an object and all its props recursively to get rid of any prop referenced of the original object. Arrays are also cloned, however objects inside arrays are still linked.
 *
 * @export
 * @param {*} target Target can be anything
 * @returns {*} the target with replaced values
 */
function copy(target) {
  if ((0, _isWhat.isArray)(target)) return target.map(function (i) {
    return copy(i);
  });
  if (!(0, _isWhat.isPlainObject)(target)) return target;
  return Object.keys(target).reduce(function (carry, key) {
    var val = target[key];
    carry[key] = copy(val);
    return carry;
  }, {});
}

var _default = copy;
exports.default = _default;
},{"is-what":"node_modules/is-what/dist/index.esm.js"}],"node_modules/flatten-anything/dist/index.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isWhat = require("is-what");

function retrievePaths(object, path, result) {
  if (!(0, _isWhat.isPlainObject)(object) || !Object.keys(object).length || object.methodName === 'FieldValue.serverTimestamp') {
    if (!path) return object;
    result[path] = object;
    return result;
  }

  return Object.keys(object).reduce(function (carry, key) {
    var pathUntilNow = path ? path + '.' : '';
    var newPath = pathUntilNow + key;
    var extra = retrievePaths(object[key], newPath, result);
    return Object.assign(carry, extra);
  }, {});
}
/**
 * Flattens an object from {a: {b: {c: 'd'}}} to {'a.b.c': 'd'}
 *
 * @export
 * @param {object} object the object to flatten
 * @returns {AnyObject} the flattened object
 */


function index(object) {
  var result = {};
  return retrievePaths(object, null, result);
}

var _default = index;
exports.default = _default;
},{"is-what":"node_modules/is-what/dist/index.esm.js"}],"node_modules/compare-anything/dist/index.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compareObjectProps = compareObjectProps;

var _isWhat = require("is-what");

function compareObjectProps() {
  var params = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    params[_i] = arguments[_i];
  }

  var res = {
    props: new Set(),
    presentInAll: null,
    presentIn: {}
  };
  params.forEach(function (object, index) {
    if (!(0, _isWhat.isPlainObject)(object)) return console.error('\'compareObjectProps\' can only compare objects');
    Object.keys(object).forEach(function (prop) {
      res.props.add(prop);
      if (!(prop in res.presentIn)) res.presentIn[prop] = [];
      res.presentIn[prop].push(index);
    });
  });
  var paramCount = params.length;
  res.presentInAll = Object.keys(res.presentIn).reduce(function (carry, prop) {
    var propCount = res.presentIn[prop].length;
    carry[prop] = propCount === paramCount;
    return carry;
  }, {}); // @ts-ignore

  res.props = Array.from(res.props);
  return res;
}
},{"is-what":"node_modules/is-what/dist/index.esm.js"}],"node_modules/find-and-replace-anything/dist/index.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findAndReplace = findAndReplace;
exports.findAndReplaceIf = findAndReplaceIf;

var _isWhat = require("is-what");

/**
 * Goes through an object recursively and replaces all occurences of the `find` value with `replaceWith`. Also works no non-objects.
 *
 * @export
 * @param {*} target Target can be anything
 * @param {*} find val to find
 * @param {*} replaceWith val to replace
 * @param {IConfig} [config={onlyPlainObjects: false}]
 * @returns {*} the target with replaced values
 */
function findAndReplace(target, find, replaceWith, config) {
  if (config === void 0) {
    config = {
      onlyPlainObjects: false
    };
  }

  if (config.onlyPlainObjects === false && !(0, _isWhat.isAnyObject)(target) || config.onlyPlainObjects === true && !(0, _isWhat.isPlainObject)(target)) {
    if (target === find) return replaceWith;
    return target;
  }

  return Object.keys(target).reduce(function (carry, key) {
    var val = target[key];
    carry[key] = findAndReplace(val, find, replaceWith, config);
    return carry;
  }, {});
}
/**
 * Goes through an object recursively and replaces all props with what's is returned in the `checkFn`. Also works no non-objects.
 *
 * @export
 * @param {*} target Target can be anything
 * @param {*} checkFn a function that will receive the `foundVal`
 * @returns {*} the target with replaced values
 */


function findAndReplaceIf(target, checkFn) {
  if (!(0, _isWhat.isPlainObject)(target)) return checkFn(target);
  return Object.keys(target).reduce(function (carry, key) {
    var val = target[key];
    carry[key] = findAndReplaceIf(val, checkFn);
    return carry;
  }, {});
}
},{"is-what":"node_modules/is-what/dist/index.esm.js"}],"node_modules/filter-anything/dist/index.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _isWhat = require("is-what");

function pathsAreEqual(path, wildcardPath) {
  var wildcardPathPieces = wildcardPath.split('.');
  var pathWithWildcards = path.split('.').reduce(function (carry, piece, index) {
    var add = wildcardPathPieces[index] === '*' ? '*' : piece;
    carry.push(add);
    return carry;
  }, []).join('.');
  return pathWithWildcards === wildcardPath;
}

function recursiveFilter(obj, fillables, guard, pathUntilNow) {
  if (pathUntilNow === void 0) {
    pathUntilNow = '';
  }

  if (!(0, _isWhat.isPlainObject)(obj)) {
    console.log('obj → ', obj);
    return obj;
  }

  return Object.keys(obj).reduce(function (carry, key) {
    var path = pathUntilNow;
    if (path) path += '.';
    path += key; // check guard regardless

    if (guard.some(function (guardPath) {
      return pathsAreEqual(path, guardPath);
    })) {
      return carry;
    }

    var value = obj[key]; // check fillables up to this point

    if (fillables.length) {
      var passed_1 = false;
      fillables.forEach(function (fillable) {
        var pathDepth = path.split('.').length;
        var fillableDepth = fillable.split('.').length;
        var fillableUpToNow = fillable.split('.').slice(0, pathDepth).join('.');
        var pathUpToFillableDepth = path.split('.').slice(0, fillableDepth).join('.');
        if (pathsAreEqual(pathUpToFillableDepth, fillableUpToNow)) passed_1 = true;
      }); // there's not one fillable that allows up to now

      if (!passed_1) return carry;
    } // no fillables or fillables up to now allow it


    if (!(0, _isWhat.isPlainObject)(value)) {
      carry[key] = value;
      return carry;
    }

    carry[key] = recursiveFilter(obj[key], fillables, guard, path);
    return carry;
  }, {});
}
/**
 * Checks all props of an object and deletes guarded and non-fillables.
 *
 * @export
 * @param {object} obj the target object to check
 * @param {string[]} [fillables=[]] an array of strings, with the props which should be allowed on returned object
 * @param {string[]} [guard=[]] an array of strings, with the props which should NOT be allowed on returned object
 * @returns {AnyObject} the cleaned object after deleting guard and non-fillables
 */


function index(obj, fillables, guard) {
  if (fillables === void 0) {
    fillables = [];
  }

  if (guard === void 0) {
    guard = [];
  }

  return recursiveFilter(obj, fillables, guard);
}

var _default = index;
exports.default = _default;
},{"is-what":"node_modules/is-what/dist/index.esm.js"}],"node_modules/vuex-easy-firestore/dist/index.esm.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vuexEasyFirestore = vuexEasyFirestore;
exports.arrayUnion = arrayUnion;
exports.arrayRemove = arrayRemove;
exports.default = void 0;

var Firebase = _interopRequireWildcard(require("firebase/app"));

require("firebase/firestore");

require("firebase/auth");

var _vuexEasyAccess = require("vuex-easy-access");

var _isWhat = require("is-what");

var _copyAnything = _interopRequireDefault(require("copy-anything"));

var _mergeAnything = _interopRequireDefault(require("merge-anything"));

var _flattenAnything = _interopRequireDefault(require("flatten-anything"));

var _compareAnything = require("compare-anything");

var _findAndReplaceAnything = require("find-and-replace-anything");

var _filterAnything = _interopRequireDefault(require("filter-anything"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

var defaultConfig = {
  firestorePath: '',
  // The path to a collection or doc in firestore. You can use `{userId}` which will be replaced with the user Id.
  firestoreRefType: '',
  // `'collection'` or `'doc'`. Depending on your `firestorePath`.
  moduleName: '',
  // The module name. Can be nested, eg. `'user/items'`
  statePropName: '',
  // The name of the property where the docs or doc will be synced to. If left blank it will be synced on the state of the module.
  logging: false,
  // Related to the 2-way sync:
  sync: {
    where: [],
    orderBy: [],
    fillables: [],
    guard: [],
    defaultValues: {},
    preventInitialDocInsertion: false,
    debounceTimerMs: 1000,
    // HOOKS for local changes:
    insertHook: function (updateStore, doc, store) {
      return updateStore(doc);
    },
    patchHook: function (updateStore, doc, store) {
      return updateStore(doc);
    },
    deleteHook: function (updateStore, id, store) {
      return updateStore(id);
    },
    // HOOKS for local batch changes:
    insertBatchHook: function (updateStore, docs, store) {
      return updateStore(docs);
    },
    patchBatchHook: function (updateStore, doc, ids, store) {
      return updateStore(doc, ids);
    },
    deleteBatchHook: function (updateStore, ids, store) {
      return updateStore(ids);
    }
  },
  // When items on the server side are changed:
  serverChange: {
    defaultValues: {},
    convertTimestamps: {},
    // HOOKS for changes on SERVER:
    addedHook: function (updateStore, doc, id, store) {
      return updateStore(doc);
    },
    modifiedHook: function (updateStore, doc, id, store) {
      return updateStore(doc);
    },
    removedHook: function (updateStore, doc, id, store) {
      return updateStore(doc);
    }
  },
  // When items are fetched through `dispatch('module/fetch', filters)`.
  fetch: {
    // The max amount of documents to be fetched. Defaults to 50.
    docLimit: 50
  }
};
/**
 * a function returning the state object
 *
 * @export
 * @returns {IState} the state object
 */

function pluginState() {
  return {
    _sync: {
      signedIn: false,
      userId: null,
      unsubscribe: {},
      pathVariables: {},
      patching: false,
      syncStack: {
        inserts: [],
        updates: {},
        propDeletions: {},
        deletions: [],
        debounceTimer: null
      },
      fetched: {},
      stopPatchingTimeout: null
    }
  };
}
/**
 * execute Error() based on an error id string
 *
 * @export
 * @param {string} error the error id
 * @returns {string} the error id
 */


function error(error) {
  return error;
}

var _BaseFirebase = Firebase;

function setBaseFirebase(firebaseDependency) {
  _BaseFirebase = firebaseDependency;
}

var ArrayUnion =
/** @class */
function () {
  function ArrayUnion() {
    var payload = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      payload[_i] = arguments[_i];
    }

    this.isArrayHelper = true;
    this.payload = payload;
  }

  ArrayUnion.prototype.executeOn = function (array) {
    this.payload.forEach(function (item) {
      if (!array.includes(item)) {
        array.push(item);
      }
    });
    return array;
  };

  ArrayUnion.prototype.getFirestoreFieldValue = function () {
    var _a;

    return (_a = _BaseFirebase.firestore.FieldValue).arrayUnion.apply(_a, this.payload);
  };

  return ArrayUnion;
}();

var ArrayRemove =
/** @class */
function () {
  function ArrayRemove() {
    var payload = [];

    for (var _i = 0; _i < arguments.length; _i++) {
      payload[_i] = arguments[_i];
    }

    this.isArrayHelper = true;
    this.payload = payload;
  }

  ArrayRemove.prototype.executeOn = function (array) {
    this.payload.forEach(function (item) {
      var index = array.indexOf(item);

      if (index > -1) {
        array.splice(index, 1);
      }
    });
    return array;
  };

  ArrayRemove.prototype.getFirestoreFieldValue = function () {
    var _a;

    return (_a = _BaseFirebase.firestore.FieldValue).arrayRemove.apply(_a, this.payload);
  };

  return ArrayRemove;
}();

function arrayUnion() {
  var payload = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    payload[_i] = arguments[_i];
  }

  return new (ArrayUnion.bind.apply(ArrayUnion, [void 0].concat(payload)))();
}

function arrayRemove() {
  var payload = [];

  for (var _i = 0; _i < arguments.length; _i++) {
    payload[_i] = arguments[_i];
  }

  return new (ArrayRemove.bind.apply(ArrayRemove, [void 0].concat(payload)))();
}

function isArrayHelper(value) {
  // this is bugged in vuex actions, I DONT KNOW WHY
  // return (
  //   value instanceof ArrayUnion ||
  //   value instanceof ArrayRemove
  // )
  return (0, _isWhat.isAnyObject)(value) && !(0, _isWhat.isPlainObject)(value) && // @ts-ignore
  value.isArrayHelper === true;
}
/**
 * a function returning the mutations object
 *
 * @export
 * @param {object} userState
 * @returns {AnyObject} the mutations object
 */


function pluginMutations(userState) {
  return {
    SET_PATHVARS: function (state, pathVars) {
      var self = this;
      Object.keys(pathVars).forEach(function (key) {
        var pathPiece = pathVars[key];

        self._vm.$set(state._sync.pathVariables, key, pathPiece);
      });
    },
    SET_SYNCFILTERS: function (state, _a) {
      var where = _a.where,
          orderBy = _a.orderBy;
      if (where && (0, _isWhat.isArray)(where)) state._conf.sync.where = where;
      if (orderBy && (0, _isWhat.isArray)(orderBy)) state._conf.sync.orderBy = orderBy;
    },
    SET_USER_ID: function (state, userId) {
      if (!userId) {
        state._sync.signedIn = false;
        state._sync.userId = null;
      } else {
        state._sync.signedIn = true;
        state._sync.userId = userId;
      }
    },
    CLEAR_USER: function (state) {
      state._sync.signedIn = false;
      state._sync.userId = null;
    },
    RESET_VUEX_EASY_FIRESTORE_STATE: function (state) {
      // unsubscribe all DBChannel listeners:
      Object.keys(state._sync.unsubscribe).forEach(function (unsubscribe) {
        if ((0, _isWhat.isFunction)(unsubscribe)) unsubscribe();
      });
      var self = this;

      var _sync = (0, _mergeAnything.default)(state._sync, {
        // make null once to be able to overwrite with empty object
        unsubscribe: null,
        pathVariables: null,
        syncStack: {
          updates: null,
          propDeletions: null
        },
        fetched: null
      }, {
        unsubscribe: {},
        pathVariables: {},
        patching: false,
        syncStack: {
          inserts: [],
          updates: {},
          propDeletions: {},
          deletions: [],
          debounceTimer: null
        },
        fetched: {},
        stopPatchingTimeout: null
      });

      var newState = (0, _mergeAnything.default)(userState, {
        _sync: _sync
      });
      var docContainer = state._conf.statePropName ? state[state._conf.statePropName] : state;
      Object.keys(newState).forEach(function (key) {
        self._vm.$set(state, key, newState[key]);
      });
      Object.keys(docContainer).forEach(function (key) {
        if (Object.keys(newState).includes(key)) return;

        self._vm.$delete(docContainer, key);
      });
    },
    resetSyncStack: function (state) {
      state._sync.syncStack = {
        updates: {},
        deletions: [],
        inserts: [],
        debounceTimer: null
      };
    },
    INSERT_DOC: function (state, doc) {
      if (state._conf.firestoreRefType.toLowerCase() !== 'collection') return;

      if (state._conf.statePropName) {
        this._vm.$set(state[state._conf.statePropName], doc.id, doc);
      } else {
        this._vm.$set(state, doc.id, doc);
      }
    },
    PATCH_DOC: function (state, patches) {
      var _this = this; // Get the state prop ref


      var ref = state._conf.statePropName ? state[state._conf.statePropName] : state;

      if (state._conf.firestoreRefType.toLowerCase() === 'collection') {
        ref = ref[patches.id];
      }

      if (!ref) return error('patchNoRef');
      return Object.keys(patches).forEach(function (key) {
        var newVal = patches[key]; // Array unions and deletions

        if ((0, _isWhat.isArray)(ref[key]) && isArrayHelper(patches[key])) {
          newVal = patches[key].executeOn(ref[key]);
        } // Merge if exists


        function arrayHelpers(originVal, newVal) {
          if ((0, _isWhat.isArray)(originVal) && isArrayHelper(newVal)) {
            newVal = newVal.executeOn(originVal);
          }

          return newVal; // always return newVal as fallback!!
        }

        if ((0, _isWhat.isPlainObject)(ref[key]) && (0, _isWhat.isPlainObject)(patches[key])) {
          newVal = (0, _mergeAnything.default)({
            extensions: [arrayHelpers]
          }, ref[key], patches[key]);
        }

        _this._vm.$set(ref, key, newVal);
      });
    },
    DELETE_DOC: function (state, id) {
      if (state._conf.firestoreRefType.toLowerCase() !== 'collection') return;

      if (state._conf.statePropName) {
        this._vm.$delete(state[state._conf.statePropName], id);
      } else {
        this._vm.$delete(state, id);
      }
    },
    DELETE_PROP: function (state, path) {
      var searchTarget = state._conf.statePropName ? state[state._conf.statePropName] : state;
      var propArr = path.split('.');
      var target = propArr.pop();

      if (!propArr.length) {
        return this._vm.$delete(searchTarget, target);
      }

      var ref = (0, _vuexEasyAccess.getDeepRef)(searchTarget, propArr.join('.'));
      return this._vm.$delete(ref, target);
    }
  };
}
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */


var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
  return new (P || (P = Promise))(function (resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }

    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }

    function step(result) {
      result.done ? resolve(result.value) : new P(function (resolve) {
        resolve(result.value);
      }).then(fulfilled, rejected);
    }

    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

function __generator(thisArg, body) {
  var _ = {
    label: 0,
    sent: function () {
      if (t[0] & 1) throw t[1];
      return t[1];
    },
    trys: [],
    ops: []
  },
      f,
      y,
      t,
      g;
  return g = {
    next: verb(0),
    "throw": verb(1),
    "return": verb(2)
  }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
    return this;
  }), g;

  function verb(n) {
    return function (v) {
      return step([n, v]);
    };
  }

  function step(op) {
    if (f) throw new TypeError("Generator is already executing.");

    while (_) try {
      if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];

      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;

        case 4:
          _.label++;
          return {
            value: op[1],
            done: false
          };

        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;

        case 7:
          op = _.ops.pop();

          _.trys.pop();

          continue;

        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }

          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }

          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }

          if (t && _.label < t[2]) {
            _.label = t[2];

            _.ops.push(op);

            break;
          }

          if (t[2]) _.ops.pop();

          _.trys.pop();

          continue;
      }

      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f = t = 0;
    }

    if (op[0] & 5) throw op[1];
    return {
      value: op[0] ? op[1] : void 0,
      done: true
    };
  }
}
/**
 * convert to new Date() if defaultValue == '%convertTimestamp%'
 *
 * @param {*} originVal
 * @param {*} targetVal
 * @returns {Date}
 */


function convertTimestamps(originVal, targetVal) {
  if (originVal === '%convertTimestamp%') {
    // firestore timestamps
    // @ts-ignore
    if ((0, _isWhat.isAnyObject)(targetVal) && !(0, _isWhat.isPlainObject)(targetVal) && (0, _isWhat.isFunction)(targetVal.toDate)) {
      // @ts-ignore
      return targetVal.toDate();
    } // strings


    if ((0, _isWhat.isString)(targetVal) && (0, _isWhat.isDate)(new Date(targetVal))) {
      return new Date(targetVal);
    }
  }

  return targetVal;
}
/**
 * Merge an object onto defaultValues
 *
 * @export
 * @param {object} obj
 * @param {object} defaultValues
 * @returns {AnyObject} the new object
 */


function setDefaultValues(obj, defaultValues) {
  if (!(0, _isWhat.isPlainObject)(defaultValues)) console.error('[vuex-easy-firestore] Trying to merge target:', obj, 'onto a non-object (defaultValues):', defaultValues);
  if (!(0, _isWhat.isPlainObject)(obj)) console.error('[vuex-easy-firestore] Trying to merge a non-object:', obj, 'onto the defaultValues:', defaultValues);
  var result = (0, _mergeAnything.default)({
    extensions: [convertTimestamps]
  }, defaultValues, obj);
  return (0, _findAndReplaceAnything.findAndReplace)(result, '%convertTimestamp%', null, {
    onlyPlainObjects: true
  });
}
/**
 * Debounce helper
 *
 * let wait = startDebounce(1000)
 * wait.done.then(_ => handle())
 * wait.refresh() // to refresh
 *
 * @export
 * @param {number} ms
 * @returns {{done: any, refresh: () => {}}}
 * @author Adam Dorling
 * @contact https://codepen.io/naito
 */


function startDebounce(ms) {
  var startTime = Date.now();
  var done = new Promise(function (resolve, reject) {
    var interval = setInterval(function (_) {
      var now = Date.now();
      var deltaT = now - startTime;

      if (deltaT >= ms) {
        clearInterval(interval);
        resolve(true);
      }
    }, 10);
  });

  var refresh = function () {
    return startTime = Date.now();
  };

  return {
    done: done,
    refresh: refresh
  };
}
/**
 * Grab until the api limit (500), put the rest back in the syncStack.
 *
 * @param {string} syncStackProp the prop of _sync.syncStack[syncStackProp]
 * @param {number} count the current count
 * @param {number} maxCount the max count of the batch
 * @param {object} state the store's state, will be edited!
 * @returns {any[]} the targets for the batch. Add this array length to the count
 */


function grabUntilApiLimit(syncStackProp, count, maxCount, state) {
  var targets = state._sync.syncStack[syncStackProp]; // Check if there are more than maxCount batch items already

  if (count >= maxCount) {
    // already at maxCount or more, leave items in syncstack, and don't add anything to batch
    targets = [];
  } else {
    // Convert to array if targets is an object (eg. updates)
    var targetIsObject = (0, _isWhat.isPlainObject)(targets);

    if (targetIsObject) {
      targets = Object.values(targets);
    } // Batch supports only until maxCount items


    var grabCount = maxCount - count;
    var targetsOK = targets.slice(0, grabCount);
    var targetsLeft = targets.slice(grabCount); // Put back the remaining items over maxCount

    if (targetIsObject) {
      targetsLeft = Object.values(targetsLeft).reduce(function (carry, update) {
        var id = update.id;
        carry[id] = update;
        return carry;
      }, {});
    }

    state._sync.syncStack[syncStackProp] = targetsLeft; // Define the items we'll add below

    targets = targetsOK;
  }

  return targets;
}
/**
 * Create a Firebase batch from a syncStack to be passed inside the state param.
 *
 * @export
 * @param {IPluginState} state The state which should have `_sync.syncStack`, `_sync.userId`, `state._conf.firestorePath`
 * @param {AnyObject} getters The getters which should have `dbRef`, `storeRef`, `collectionMode` and `firestorePathComplete`
 * @param {any} Firebase dependency injection for Firebase & Firestore
 * @param {number} [batchMaxCount=500] The max count of the batch. Defaults to 500 as per Firestore documentation.
 * @returns {*} A Firebase firestore batch object.
 */


function makeBatchFromSyncstack(state, getters, Firebase, batchMaxCount) {
  if (batchMaxCount === void 0) {
    batchMaxCount = 500;
  } // get state & getter variables


  var firestorePath = state._conf.firestorePath;
  var firestorePathComplete = getters.firestorePathComplete;
  var dbRef = getters.dbRef;
  var collectionMode = getters.collectionMode; // make batch

  var batch = Firebase.firestore().batch();
  var log = {};
  var count = 0; // Add 'updates' to batch

  var updates = grabUntilApiLimit('updates', count, batchMaxCount, state);
  log['updates: '] = updates;
  count = count + updates.length; // Add to batch

  updates.forEach(function (item) {
    var id = item.id;
    var docRef = collectionMode ? dbRef.doc(id) : dbRef;
    if (state._conf.sync.guard.includes('id')) delete item.id; // @ts-ignore

    batch.update(docRef, item);
  }); // Add 'propDeletions' to batch

  var propDeletions = grabUntilApiLimit('propDeletions', count, batchMaxCount, state);
  log['prop deletions: '] = propDeletions;
  count = count + propDeletions.length; // Add to batch

  propDeletions.forEach(function (item) {
    var id = item.id;
    var docRef = collectionMode ? dbRef.doc(id) : dbRef;
    if (state._conf.sync.guard.includes('id')) delete item.id; // @ts-ignore

    batch.update(docRef, item);
  }); // Add 'deletions' to batch

  var deletions = grabUntilApiLimit('deletions', count, batchMaxCount, state);
  log['deletions: '] = deletions;
  count = count + deletions.length; // Add to batch

  deletions.forEach(function (id) {
    var docRef = dbRef.doc(id);
    batch.delete(docRef);
  }); // Add 'inserts' to batch

  var inserts = grabUntilApiLimit('inserts', count, batchMaxCount, state);
  log['inserts: '] = inserts;
  count = count + inserts.length; // Add to batch

  inserts.forEach(function (item) {
    var newRef = dbRef.doc(item.id);
    batch.set(newRef, item);
  }); // log the batch contents

  if (state._conf.logging) {
    console.group('[vuex-easy-firestore] api call batch:');
    console.log("%cFirestore PATH: " + firestorePathComplete + " [" + firestorePath + "]", 'color: grey');
    Object.keys(log).forEach(function (key) {
      console.log(key, log[key]);
    });
    console.groupEnd();
  }

  return batch;
}
/**
 * Get the matches of path variables: eg. return ['groupId'] if pathPiece is '{groupId}'
 *
 * @export
 * @param {string} pathPiece eg. 'groups' or '{groupId}'
 * @returns {string[]} returns ['groupId'] in case of '{groupId}'
 */


function getPathVarMatches(pathPiece) {
  var matches = pathPiece.match(/\{([a-z]+)\}/gi);
  if (!matches) return [];
  return matches.map(function (key) {
    return trimAccolades(key);
  });
}
/**
 * Get the variable name of a piece of path: eg. return 'groupId' if pathPiece is '{groupId}'
 *
 * @export
 * @param {string} pathPiece eg. '{groupId}'
 * @returns {string} returns 'groupId' in case of '{groupId}'
 */


function trimAccolades(pathPiece) {
  return pathPiece.slice(1, -1);
}

function stringifyParams(params) {
  return params.map(function (param) {
    if ((0, _isWhat.isAnyObject)(param) && !(0, _isWhat.isPlainObject)(param)) {
      // @ts-ignore
      return String(param.constructor.name) + String(param.id);
    }

    return String(param);
  }).join();
}
/**
 * Gets an object with {where, orderBy} filters and returns a unique identifier for that
 *
 * @export
 * @param {AnyObject} [whereOrderBy={}] whereOrderBy {where, orderBy, pathVariables}
 * @returns {string}
 */


function createFetchIdentifier(whereOrderBy) {
  if (whereOrderBy === void 0) {
    whereOrderBy = {};
  }

  var identifier = '';

  if ('where' in whereOrderBy) {
    identifier += '[where]' + whereOrderBy.where.map(function (where) {
      return stringifyParams(where);
    }).join();
  }

  if ('orderBy' in whereOrderBy) {
    identifier += '[orderBy]' + stringifyParams(whereOrderBy.orderBy);
  }

  if ('pathVariables' in whereOrderBy) {
    delete whereOrderBy.pathVariables.where;
    delete whereOrderBy.pathVariables.orderBy;
    identifier += '[pathVariables]' + JSON.stringify(whereOrderBy.pathVariables);
  }

  return identifier;
}
/**
 * gets an ID from a single piece of payload.
 *
 * @export
 * @param {(object | string)} payloadPiece
 * @param {object} [conf] (optional - for error handling) the vuex-easy-access config
 * @param {string} [path] (optional - for error handling) the path called
 * @param {(object | any[] | string)} [fullPayload] (optional - for error handling) the full payload on which each was `getId()` called
 * @returns {string} the id
 */


function getId(payloadPiece, conf, path, fullPayload) {
  if ((0, _isWhat.isString)(payloadPiece)) return payloadPiece;

  if ((0, _isWhat.isPlainObject)(payloadPiece)) {
    if ('id' in payloadPiece) return payloadPiece.id;
    var keys = Object.keys(payloadPiece);
    if (keys.length === 1) return keys[0];
  }

  return '';
}
/**
 * Returns a value of a payload piece. Eg. {[id]: 'val'} will return 'val'
 *
 * @param {*} payloadPiece
 * @returns {*} the value
 */


function getValueFromPayloadPiece(payloadPiece) {
  if ((0, _isWhat.isPlainObject)(payloadPiece) && !payloadPiece.id && Object.keys(payloadPiece).length === 1 && (0, _isWhat.isPlainObject)(payloadPiece[Object.keys(payloadPiece)[0]])) {
    return Object.values(payloadPiece)[0];
  }

  return payloadPiece;
}
/**
 * A function returning the actions object
 *
 * @export
 * @param {*} Firebase The Firebase dependency
 * @returns {AnyObject} the actions object
 */


function pluginActions(Firebase) {
  var _this = this;

  return {
    setUserId: function (_a, userId) {
      var commit = _a.commit,
          getters = _a.getters;
      if (userId === undefined) userId = null; // undefined cannot be synced to firestore

      if (!userId && Firebase.auth().currentUser) {
        userId = Firebase.auth().currentUser.uid;
      }

      commit('SET_USER_ID', userId);

      if (getters.firestorePathComplete.includes('{userId}')) {
        var error_1 = '[vuex-easy-firestore] error trying to set userId.\n Try doing \`dispatch(\'module/setUserId\', userId)\ before openDBChannel or fetchAndAdd.`';
        console.error(error_1);
        throw error_1;
      }
    },
    clearUser: function (_a) {
      var commit = _a.commit;
      commit('CLEAR_USER');
    },
    setPathVars: function (_a, pathVars) {
      var commit = _a.commit;
      commit('SET_PATHVARS', pathVars);
    },
    duplicate: function (_a, id) {
      var state = _a.state,
          getters = _a.getters,
          commit = _a.commit,
          dispatch = _a.dispatch;
      return __awaiter(_this, void 0, void 0, function () {
        var _b, doc, dId, idMap;

        return __generator(this, function (_c) {
          switch (_c.label) {
            case 0:
              if (!getters.collectionMode) return [2
              /*return*/
              , console.error('[vuex-easy-firestore] You can only duplicate in \'collection\' mode.')];
              if (!id) return [2
              /*return*/
              , {}];
              doc = (0, _mergeAnything.default)(getters.storeRef[id], {
                id: null
              });
              return [4
              /*yield*/
              , dispatch('insert', doc)];

            case 1:
              dId = _c.sent();
              idMap = (_b = {}, _b[id] = dId, _b);
              return [2
              /*return*/
              , idMap];
          }
        });
      });
    },
    duplicateBatch: function (_a, ids) {
      var _this = this;

      var state = _a.state,
          getters = _a.getters,
          commit = _a.commit,
          dispatch = _a.dispatch;

      if (ids === void 0) {
        ids = [];
      }

      if (!getters.collectionMode) return console.error('[vuex-easy-firestore] You can only duplicate in \'collection\' mode.');
      if (!(0, _isWhat.isArray)(ids) || !ids.length) return {};
      var idsMap = ids.reduce(function (carry, id) {
        return __awaiter(_this, void 0, void 0, function () {
          var idMap;
          return __generator(this, function (_a) {
            switch (_a.label) {
              case 0:
                return [4
                /*yield*/
                , dispatch('duplicate', id)];

              case 1:
                idMap = _a.sent();
                return [4
                /*yield*/
                , carry];

              case 2:
                carry = _a.sent();
                return [2
                /*return*/
                , Object.assign(carry, idMap)];
            }
          });
        });
      }, {});
      return idsMap;
    },
    patchDoc: function (_a, _b) {
      var state = _a.state,
          getters = _a.getters,
          commit = _a.commit,
          dispatch = _a.dispatch;

      var _c = _b === void 0 ? {
        ids: [],
        doc: {}
      } : _b,
          _d = _c.id,
          id = _d === void 0 ? '' : _d,
          _e = _c.ids,
          ids = _e === void 0 ? [] : _e,
          doc = _c.doc; // 0. payload correction (only arrays)


      if (!(0, _isWhat.isArray)(ids)) return console.error('[vuex-easy-firestore] ids needs to be an array');
      if (id) ids.push(id); // EXTRA: check if doc is being inserted if so

      state._sync.syncStack.inserts.forEach(function (newDoc, newDocIndex) {
        // get the index of the id that is also in the insert stack
        var indexIdInInsert = ids.indexOf(newDoc.id);
        if (indexIdInInsert === -1) return; // the doc trying to be synced is also in insert
        // prepare the doc as new doc:

        var patchDoc = getters.prepareForInsert([doc])[0]; // replace insert sync stack with merged item:

        state._sync.syncStack.inserts[newDocIndex] = (0, _mergeAnything.default)(newDoc, patchDoc); // empty out the id that was to be patched:

        ids.splice(indexIdInInsert, 1);
      }); // 1. Prepare for patching


      var syncStackItems = getters.prepareForPatch(ids, doc); // 2. Push to syncStack

      Object.keys(syncStackItems).forEach(function (id) {
        var newVal = !state._sync.syncStack.updates[id] ? syncStackItems[id] : (0, _mergeAnything.default)(state._sync.syncStack.updates[id], syncStackItems[id]);
        state._sync.syncStack.updates[id] = newVal;
      }); // 3. Create or refresh debounce

      return dispatch('handleSyncStackDebounce');
    },
    deleteDoc: function (_a, ids) {
      var state = _a.state,
          getters = _a.getters,
          commit = _a.commit,
          dispatch = _a.dispatch;

      if (ids === void 0) {
        ids = [];
      } // 0. payload correction (only arrays)


      if (!(0, _isWhat.isArray)(ids)) ids = [ids]; // 1. Prepare for patching
      // 2. Push to syncStack

      var deletions = state._sync.syncStack.deletions.concat(ids);

      state._sync.syncStack.deletions = deletions;
      if (!state._sync.syncStack.deletions.length) return; // 3. Create or refresh debounce

      return dispatch('handleSyncStackDebounce');
    },
    deleteProp: function (_a, path) {
      var state = _a.state,
          getters = _a.getters,
          commit = _a.commit,
          dispatch = _a.dispatch; // 1. Prepare for patching

      var syncStackItem = getters.prepareForPropDeletion(path); // 2. Push to syncStack

      Object.keys(syncStackItem).forEach(function (id) {
        var newVal = !state._sync.syncStack.propDeletions[id] ? syncStackItem[id] : (0, _mergeAnything.default)(state._sync.syncStack.propDeletions[id], syncStackItem[id]);
        state._sync.syncStack.propDeletions[id] = newVal;
      }); // 3. Create or refresh debounce

      return dispatch('handleSyncStackDebounce');
    },
    insertDoc: function (_a, docs) {
      var state = _a.state,
          getters = _a.getters,
          commit = _a.commit,
          dispatch = _a.dispatch;

      if (docs === void 0) {
        docs = [];
      } // 0. payload correction (only arrays)


      if (!(0, _isWhat.isArray)(docs)) docs = [docs]; // 1. Prepare for patching

      var syncStack = getters.prepareForInsert(docs); // 2. Push to syncStack

      var inserts = state._sync.syncStack.inserts.concat(syncStack);

      state._sync.syncStack.inserts = inserts; // 3. Create or refresh debounce

      dispatch('handleSyncStackDebounce');
      return docs.map(function (d) {
        return d.id;
      });
    },
    insertInitialDoc: function (_a) {
      var state = _a.state,
          getters = _a.getters,
          commit = _a.commit,
          dispatch = _a.dispatch; // 0. only docMode

      if (getters.collectionMode) return; // 1. Prepare for insert

      var initialDoc = getters.storeRef ? getters.storeRef : {};
      var initialDocPrepared = getters.prepareInitialDocForInsert(initialDoc); // 2. Create a reference to the SF doc.

      var initialDocRef = getters.dbRef;
      return Firebase.firestore().runTransaction(function (transaction) {
        // This code may get re-run multiple times if there are conflicts.
        return transaction.get(initialDocRef).then(function (foundInitialDoc) {
          if (!foundInitialDoc.exists) {
            transaction.set(initialDocRef, initialDocPrepared);
          }
        });
      }).then(function () {
        if (state._conf.logging) {
          console.log('[vuex-easy-firestore] Initial doc succesfully inserted.');
        }
      }).catch(function (error) {
        console.error('[vuex-easy-firestore] Initial doc succesfully insertion failed. Further `set` or `patch` actions will also fail. Requires an internet connection when the initial doc is inserted. Please connect to the internet and refresh the page.', error);
      });
    },
    handleSyncStackDebounce: function (_a) {
      var state = _a.state,
          commit = _a.commit,
          dispatch = _a.dispatch,
          getters = _a.getters;
      if (!getters.signedIn) return false;

      if (!state._sync.syncStack.debounceTimer) {
        var ms = state._conf.sync.debounceTimerMs;
        var debounceTimer = startDebounce(ms);
        debounceTimer.done.then(function (_) {
          return dispatch('batchSync');
        });
        state._sync.syncStack.debounceTimer = debounceTimer;
      }

      state._sync.syncStack.debounceTimer.refresh();
    },
    batchSync: function (_a) {
      var getters = _a.getters,
          commit = _a.commit,
          dispatch = _a.dispatch,
          state = _a.state;
      var batch = makeBatchFromSyncstack(state, getters, Firebase);
      dispatch('_startPatching');
      state._sync.syncStack.debounceTimer = null;
      return new Promise(function (resolve, reject) {
        batch.commit().then(function (_) {
          var remainingSyncStack = Object.keys(state._sync.syncStack.updates).length + state._sync.syncStack.deletions.length + state._sync.syncStack.inserts.length + state._sync.syncStack.propDeletions.length;

          if (remainingSyncStack) {
            dispatch('batchSync');
          }

          dispatch('_stopPatching');
          return resolve();
        }).catch(function (error) {
          state._sync.patching = 'error';
          state._sync.syncStack.debounceTimer = null;
          console.error('Error during synchronisation ↓');
          return reject(error);
        });
      });
    },
    fetch: function (_a, pathVariables // where: [['archived', '==', true]]
    // orderBy: ['done_date', 'desc']
    ) {
      var state = _a.state,
          getters = _a.getters,
          commit = _a.commit,
          dispatch = _a.dispatch;

      if (pathVariables === void 0) {
        pathVariables = {
          where: [],
          whereFilters: [],
          orderBy: []
        };
      }

      dispatch('setUserId');
      var where = pathVariables.where,
          whereFilters = pathVariables.whereFilters,
          orderBy = pathVariables.orderBy;
      if (!(0, _isWhat.isArray)(where)) where = [];
      if (!(0, _isWhat.isArray)(orderBy)) orderBy = [];
      if ((0, _isWhat.isArray)(whereFilters) && whereFilters.length) where = whereFilters; // depreciated

      if (pathVariables && (0, _isWhat.isPlainObject)(pathVariables)) {
        commit('SET_PATHVARS', pathVariables);
      }

      return new Promise(function (resolve, reject) {
        // log
        if (state._conf.logging) {
          console.log("%c fetch for Firestore PATH: " + getters.firestorePathComplete + " [" + state._conf.firestorePath + "]", 'color: lightcoral');
        }

        if (!getters.signedIn) return resolve();
        var identifier = createFetchIdentifier({
          where: where,
          orderBy: orderBy
        });
        var fetched = state._sync.fetched[identifier]; // We've never fetched this before:

        if (!fetched) {
          var ref_1 = getters.dbRef; // apply where filters and orderBy

          getters.getWhereArrays(where).forEach(function (paramsArr) {
            ref_1 = ref_1.where.apply(ref_1, paramsArr);
          });
          if (orderBy.length) ref_1 = ref_1.orderBy.apply(ref_1, orderBy);
          state._sync.fetched[identifier] = {
            ref: ref_1,
            done: false,
            retrievedFetchRefs: [],
            nextFetchRef: null
          };
        }

        var fRequest = state._sync.fetched[identifier]; // We're already done fetching everything:

        if (fRequest.done) {
          if (state._conf.logging) console.log('[vuex-easy-firestore] done fetching');
          return resolve({
            done: true
          });
        } // attach fetch filters


        var fRef = state._sync.fetched[identifier].ref;

        if (fRequest.nextFetchRef) {
          // get next ref if saved in state
          fRef = state._sync.fetched[identifier].nextFetchRef;
        } // add doc limit


        var limit = (0, _isWhat.isNumber)(pathVariables.limit) ? pathVariables.limit : state._conf.fetch.docLimit;
        if (limit > 0) fRef = fRef.limit(limit); // Stop if all records already fetched

        if (fRequest.retrievedFetchRefs.includes(fRef)) {
          console.error('[vuex-easy-firestore] Already retrieved this part.');
          return resolve();
        } // make fetch request


        fRef.get().then(function (querySnapshot) {
          var docs = querySnapshot.docs;

          if (docs.length === 0) {
            state._sync.fetched[identifier].done = true;
            querySnapshot.done = true;
            return resolve(querySnapshot);
          }

          if (docs.length < limit) {
            state._sync.fetched[identifier].done = true;
          }

          state._sync.fetched[identifier].retrievedFetchRefs.push(fRef); // Get the last visible document


          resolve(querySnapshot);
          var lastVisible = docs[docs.length - 1]; // set the reference for the next records.

          var next = fRef.startAfter(lastVisible);
          state._sync.fetched[identifier].nextFetchRef = next;
        }).catch(function (error) {
          console.error('[vuex-easy-firestore]', error);
          return reject(error);
        });
      });
    },
    fetchAndAdd: function (_a, pathVariables // where: [['archived', '==', true]]
    // orderBy: ['done_date', 'desc']
    ) {
      var _this = this;

      var state = _a.state,
          getters = _a.getters,
          commit = _a.commit,
          dispatch = _a.dispatch;

      if (pathVariables === void 0) {
        pathVariables = {
          where: [],
          whereFilters: [],
          orderBy: []
        };
      }

      if (pathVariables && (0, _isWhat.isPlainObject)(pathVariables)) {
        commit('SET_PATHVARS', pathVariables);
      } // 'doc' mode:


      if (!getters.collectionMode) {
        dispatch('setUserId');

        if (state._conf.logging) {
          console.log("%c fetch for Firestore PATH: " + getters.firestorePathComplete + " [" + state._conf.firestorePath + "]", 'color: lightcoral');
        }

        return getters.dbRef.get().then(function (_doc) {
          return __awaiter(_this, void 0, void 0, function () {
            var id, doc;
            return __generator(this, function (_a) {
              switch (_a.label) {
                case 0:
                  if (!!_doc.exists) return [3
                  /*break*/
                  , 2]; // No initial doc found in docMode

                  if (state._conf.sync.preventInitialDocInsertion) throw 'preventInitialDocInsertion';
                  if (state._conf.logging) console.log('[vuex-easy-firestore] inserting initial doc');
                  return [4
                  /*yield*/
                  , dispatch('insertInitialDoc')];

                case 1:
                  _a.sent();

                  return [2
                  /*return*/
                  , _doc];

                case 2:
                  id = getters.docModeId;
                  doc = getters.cleanUpRetrievedDoc(_doc.data(), id);
                  dispatch('applyHooksAndUpdateState', {
                    change: 'modified',
                    id: id,
                    doc: doc
                  });
                  return [2
                  /*return*/
                  , doc];
              }
            });
          });
        }).catch(function (error) {
          console.error('[vuex-easy-firestore]', error);
          return error;
        });
      } // 'collection' mode:


      return dispatch('fetch', pathVariables).then(function (querySnapshot) {
        if (querySnapshot.done === true) return querySnapshot;

        if ((0, _isWhat.isFunction)(querySnapshot.forEach)) {
          querySnapshot.forEach(function (_doc) {
            var id = _doc.id;
            var doc = getters.cleanUpRetrievedDoc(_doc.data(), id);
            dispatch('applyHooksAndUpdateState', {
              change: 'added',
              id: id,
              doc: doc
            });
          });
        }

        return querySnapshot;
      });
    },
    applyHooksAndUpdateState: function ( // this is only on server retrievals
    _a, _b) {
      var getters = _a.getters,
          state = _a.state,
          commit = _a.commit,
          dispatch = _a.dispatch;
      var change = _b.change,
          id = _b.id,
          _c = _b.doc,
          doc = _c === void 0 ? {} : _c;
      var store = this; // define storeUpdateFn()

      function storeUpdateFn(_doc) {
        switch (change) {
          case 'added':
            commit('INSERT_DOC', _doc);
            break;

          case 'removed':
            commit('DELETE_DOC', id);
            break;

          default:
            dispatch('deleteMissingProps', _doc);
            commit('PATCH_DOC', _doc);
            break;
        }
      } // get user set sync hook function


      var syncHookFn = state._conf.serverChange[change + 'Hook'];

      if ((0, _isWhat.isFunction)(syncHookFn)) {
        syncHookFn(storeUpdateFn, doc, id, store, 'server', change);
      } else {
        storeUpdateFn(doc);
      }
    },
    deleteMissingProps: function (_a, doc) {
      var getters = _a.getters,
          commit = _a.commit;
      var defaultValues = getters.defaultValues;
      var searchTarget = getters.collectionMode ? getters.storeRef[doc.id] : getters.storeRef;
      var compareInfo = (0, _compareAnything.compareObjectProps)((0, _flattenAnything.default)(doc), // presentIn 0
      (0, _flattenAnything.default)(defaultValues), // presentIn 1
      (0, _flattenAnything.default)(searchTarget) // presentIn 2
      );
      Object.keys(compareInfo.presentIn).forEach(function (prop) {
        // don't worry about props not in fillables
        if (getters.fillables.length && !getters.fillables.includes(prop)) {
          return;
        } // don't worry about props in guard


        if (getters.guard.includes(prop)) return; // don't worry about props starting with _sync or _conf

        if (prop.split('.')[0] === '_sync' || prop.split('.')[0] === '_conf') return; // where is the prop present?

        var presence = compareInfo.presentIn[prop];
        var propNotInDoc = !presence.includes(0);
        var propNotInDefaultValues = !presence.includes(1); // delete props that are not present in the doc and default values

        if (propNotInDoc && propNotInDefaultValues) {
          var path = getters.collectionMode ? doc.id + "." + prop : prop;
          return commit('DELETE_PROP', path);
        }
      });
    },
    openDBChannel: function (_a, pathVariables) {
      var _this = this;

      var getters = _a.getters,
          state = _a.state,
          commit = _a.commit,
          dispatch = _a.dispatch;
      dispatch('setUserId'); // set state for pathVariables

      if (pathVariables && (0, _isWhat.isPlainObject)(pathVariables)) {
        commit('SET_SYNCFILTERS', pathVariables);
        delete pathVariables.where;
        delete pathVariables.orderBy;
        commit('SET_PATHVARS', pathVariables);
      }

      var identifier = createFetchIdentifier({
        where: state._conf.sync.where,
        orderBy: state._conf.sync.orderBy,
        pathVariables: state._sync.pathVariables
      });

      if ((0, _isWhat.isFunction)(state._sync.unsubscribe[identifier])) {
        var channelAlreadyOpenError_1 = "openDBChannel was already called for these filters and pathvariables. Identifier: " + identifier;

        if (state._conf.logging) {
          console.log(channelAlreadyOpenError_1);
        }

        return new Promise(function (resolve, reject) {
          reject(channelAlreadyOpenError_1);
        });
      } // getters.dbRef should already have pathVariables swapped out


      var dbRef = getters.dbRef; // apply where filters and orderBy

      if (getters.collectionMode) {
        getters.getWhereArrays().forEach(function (whereParams) {
          dbRef = dbRef.where.apply(dbRef, whereParams);
        });

        if (state._conf.sync.orderBy.length) {
          dbRef = dbRef.orderBy.apply(dbRef, state._conf.sync.orderBy);
        }
      } // make a promise


      return new Promise(function (resolve, reject) {
        // log
        if (state._conf.logging) {
          console.log("%c openDBChannel for Firestore PATH: " + getters.firestorePathComplete + " [" + state._conf.firestorePath + "]", 'color: lightcoral');
        }

        var unsubscribe = dbRef.onSnapshot(function (querySnapshot) {
          return __awaiter(_this, void 0, void 0, function () {
            var source, id, doc;
            return __generator(this, function (_a) {
              switch (_a.label) {
                case 0:
                  source = querySnapshot.metadata.hasPendingWrites ? 'local' : 'server';
                  if (!!getters.collectionMode) return [3
                  /*break*/
                  , 3];
                  if (!!querySnapshot.data()) return [3
                  /*break*/
                  , 2]; // No initial doc found in docMode

                  if (state._conf.sync.preventInitialDocInsertion) return [2
                  /*return*/
                  , reject('preventInitialDocInsertion')];
                  if (state._conf.logging) console.log('[vuex-easy-firestore] inserting initial doc');
                  return [4
                  /*yield*/
                  , dispatch('insertInitialDoc')];

                case 1:
                  _a.sent();

                  return [2
                  /*return*/
                  , resolve()];

                case 2:
                  if (source === 'local') return [2
                  /*return*/
                  , resolve()];
                  id = getters.docModeId;
                  doc = getters.cleanUpRetrievedDoc(querySnapshot.data(), id);
                  dispatch('applyHooksAndUpdateState', {
                    change: 'modified',
                    id: id,
                    doc: doc
                  });
                  return [2
                  /*return*/
                  , resolve()];

                case 3:
                  // 'collection' mode:
                  querySnapshot.docChanges().forEach(function (change) {
                    var changeType = change.type; // Don't do anything for local modifications & removals

                    if (source === 'local') return resolve();
                    var id = change.doc.id;
                    var doc = getters.cleanUpRetrievedDoc(change.doc.data(), id);
                    dispatch('applyHooksAndUpdateState', {
                      change: changeType,
                      id: id,
                      doc: doc
                    });
                  });
                  return [2
                  /*return*/
                  , resolve()];
              }
            });
          });
        }, function (error) {
          state._sync.patching = 'error';
          return reject(error);
        });
        state._sync.unsubscribe[identifier] = unsubscribe;
      });
    },
    closeDBChannel: function (_a, _b) {
      var getters = _a.getters,
          state = _a.state,
          commit = _a.commit,
          dispatch = _a.dispatch;
      var _c = (_b === void 0 ? {
        clearModule: false
      } : _b).clearModule,
          clearModule = _c === void 0 ? false : _c;
      var identifier = createFetchIdentifier({
        where: state._conf.sync.where,
        orderBy: state._conf.sync.orderBy,
        pathVariables: state._sync.pathVariables
      });
      var unsubscribeDBChannel = state._sync.unsubscribe[identifier];

      if ((0, _isWhat.isFunction)(unsubscribeDBChannel)) {
        unsubscribeDBChannel();
        state._sync.unsubscribe[identifier] = null;
      }

      if (clearModule) {
        commit('RESET_VUEX_EASY_FIRESTORE_STATE');
      }
    },
    set: function (_a, doc) {
      var commit = _a.commit,
          dispatch = _a.dispatch,
          getters = _a.getters,
          state = _a.state;
      if (!doc) return;

      if (!getters.collectionMode) {
        return dispatch('patch', doc);
      }

      var id = getId(doc);

      if (!id || !state._conf.statePropName && !state[id] || state._conf.statePropName && !state[state._conf.statePropName][id]) {
        return dispatch('insert', doc);
      }

      return dispatch('patch', doc);
    },
    insert: function (_a, doc) {
      var state = _a.state,
          getters = _a.getters,
          commit = _a.commit,
          dispatch = _a.dispatch;
      var store = this; // check payload

      if (!doc) return; // check userId

      dispatch('setUserId');
      var newDoc = doc;
      if (!newDoc.id) newDoc.id = getters.dbRef.doc().id; // apply default values

      var newDocWithDefaults = setDefaultValues(newDoc, state._conf.sync.defaultValues); // define the store update

      function storeUpdateFn(_doc) {
        commit('INSERT_DOC', _doc);
        return dispatch('insertDoc', _doc);
      } // check for hooks


      if (state._conf.sync.insertHook) {
        state._conf.sync.insertHook(storeUpdateFn, newDocWithDefaults, store);

        return newDocWithDefaults.id;
      }

      storeUpdateFn(newDocWithDefaults);
      return newDocWithDefaults.id;
    },
    insertBatch: function (_a, docs) {
      var state = _a.state,
          getters = _a.getters,
          commit = _a.commit,
          dispatch = _a.dispatch;
      var store = this; // check payload

      if (!(0, _isWhat.isArray)(docs) || !docs.length) return []; // check userId

      dispatch('setUserId');
      var newDocs = docs.reduce(function (carry, _doc) {
        var newDoc = getValueFromPayloadPiece(_doc);
        if (!newDoc.id) newDoc.id = getters.dbRef.doc().id;
        carry.push(newDoc);
        return carry;
      }, []); // define the store update

      function storeUpdateFn(_docs) {
        _docs.forEach(function (_doc) {
          commit('INSERT_DOC', _doc);
        });

        return dispatch('insertDoc', _docs);
      } // check for hooks


      if (state._conf.sync.insertBatchHook) {
        state._conf.sync.insertBatchHook(storeUpdateFn, newDocs, store);

        return newDocs.map(function (_doc) {
          return _doc.id;
        });
      }

      storeUpdateFn(newDocs);
      return newDocs.map(function (_doc) {
        return _doc.id;
      });
    },
    patch: function (_a, doc) {
      var state = _a.state,
          getters = _a.getters,
          commit = _a.commit,
          dispatch = _a.dispatch;
      var store = this; // check payload

      if (!doc) return;
      var id = getters.collectionMode ? getId(doc) : getters.docModeId;
      var value = getters.collectionMode ? getValueFromPayloadPiece(doc) : doc;
      if (!id && getters.collectionMode) return; // check userId

      dispatch('setUserId'); // add id to value

      if (!value.id) value.id = id; // define the store update

      function storeUpdateFn(_val) {
        commit('PATCH_DOC', _val);
        return dispatch('patchDoc', {
          id: id,
          doc: (0, _copyAnything.default)(_val)
        });
      } // check for hooks


      if (state._conf.sync.patchHook) {
        state._conf.sync.patchHook(storeUpdateFn, value, store);

        return id;
      }

      storeUpdateFn(value);
      return id;
    },
    patchBatch: function (_a, _b) {
      var state = _a.state,
          getters = _a.getters,
          commit = _a.commit,
          dispatch = _a.dispatch;
      var doc = _b.doc,
          _c = _b.ids,
          ids = _c === void 0 ? [] : _c;
      var store = this; // check payload

      if (!doc) return [];
      if (!(0, _isWhat.isArray)(ids) || !ids.length) return []; // check userId

      dispatch('setUserId'); // define the store update

      function storeUpdateFn(_doc, _ids) {
        _ids.forEach(function (_id) {
          commit('PATCH_DOC', __assign({
            id: _id
          }, _doc));
        });

        return dispatch('patchDoc', {
          ids: _ids,
          doc: _doc
        });
      } // check for hooks


      if (state._conf.sync.patchBatchHook) {
        state._conf.sync.patchBatchHook(storeUpdateFn, doc, ids, store);

        return ids;
      }

      storeUpdateFn(doc, ids);
      return ids;
    },
    delete: function (_a, id) {
      var state = _a.state,
          getters = _a.getters,
          commit = _a.commit,
          dispatch = _a.dispatch;
      var store = this; // check payload

      if (!id) return; // check userId

      dispatch('setUserId');

      function storeUpdateFn(_id) {
        // id is a path
        var pathDelete = _id.includes('.') || !getters.collectionMode;

        if (pathDelete) {
          var path = _id;
          if (!path) return error('actionsDeleteMissingPath');
          commit('DELETE_PROP', path);
          return dispatch('deleteProp', path);
        }

        if (!_id) return error('actionsDeleteMissingId');
        commit('DELETE_DOC', _id);
        return dispatch('deleteDoc', _id);
      } // check for hooks


      if (state._conf.sync.deleteHook) {
        state._conf.sync.deleteHook(storeUpdateFn, id, store);

        return id;
      }

      storeUpdateFn(id);
      return id;
    },
    deleteBatch: function (_a, ids) {
      var state = _a.state,
          getters = _a.getters,
          commit = _a.commit,
          dispatch = _a.dispatch;
      var store = this; // check payload

      if (!(0, _isWhat.isArray)(ids) || !ids.length) return []; // check userId

      dispatch('setUserId'); // define the store update

      function storeUpdateFn(_ids) {
        _ids.forEach(function (_id) {
          // id is a path
          var pathDelete = _id.includes('.') || !getters.collectionMode;

          if (pathDelete) {
            var path = _id;
            if (!path) return error('actionsDeleteMissingPath');
            commit('DELETE_PROP', path);
            return dispatch('deleteProp', path);
          }

          if (!_id) return error('actionsDeleteMissingId');
          commit('DELETE_DOC', _id);
          return dispatch('deleteDoc', _id);
        });
      } // check for hooks


      if (state._conf.sync.deleteBatchHook) {
        state._conf.sync.deleteBatchHook(storeUpdateFn, ids, store);

        return ids;
      }

      storeUpdateFn(ids);
      return ids;
    },
    _stopPatching: function (_a) {
      var state = _a.state,
          commit = _a.commit;

      if (state._sync.stopPatchingTimeout) {
        clearTimeout(state._sync.stopPatchingTimeout);
      }

      state._sync.stopPatchingTimeout = setTimeout(function (_) {
        state._sync.patching = false;
      }, 300);
    },
    _startPatching: function (_a) {
      var state = _a.state,
          commit = _a.commit;

      if (state._sync.stopPatchingTimeout) {
        clearTimeout(state._sync.stopPatchingTimeout);
      }

      state._sync.patching = true;
    }
  };
}
/**
 * A function returning the getters object
 *
 * @export
 * @param {*} Firebase The Firebase dependency
 * @returns {AnyObject} the getters object
 */


function pluginGetters(Firebase) {
  return {
    firestorePathComplete: function (state, getters) {
      var path = state._conf.firestorePath;
      Object.keys(state._sync.pathVariables).forEach(function (key) {
        var pathPiece = state._sync.pathVariables[key];
        path = path.replace("{" + key + "}", "" + pathPiece);
      });
      var requireUser = path.includes('{userId}');

      if (requireUser) {
        var userId = state._sync.userId;

        if (getters.signedIn && (0, _isWhat.isString)(userId) && userId !== '' && userId !== '{userId}') {
          path = path.replace('{userId}', userId);
        }
      }

      return path;
    },
    signedIn: function (state, getters, rootState, rootGetters) {
      var requireUser = state._conf.firestorePath.includes('{userId}');

      if (!requireUser) return true;
      return state._sync.signedIn;
    },
    dbRef: function (state, getters, rootState, rootGetters) {
      var path = getters.firestorePathComplete;
      return getters.collectionMode ? Firebase.firestore().collection(path) : Firebase.firestore().doc(path);
    },
    storeRef: function (state, getters, rootState) {
      var path = state._conf.statePropName ? state._conf.moduleName + "/" + state._conf.statePropName : state._conf.moduleName;
      return (0, _vuexEasyAccess.getDeepRef)(rootState, path);
    },
    collectionMode: function (state, getters, rootState) {
      return state._conf.firestoreRefType.toLowerCase() === 'collection';
    },
    docModeId: function (state, getters) {
      return getters.firestorePathComplete.split('/').pop();
    },
    fillables: function (state) {
      var fillables = state._conf.sync.fillables;
      if (!fillables.length) return fillables;
      return fillables.concat(['updated_at', 'updated_by', 'id', 'created_at', 'created_by']);
    },
    guard: function (state) {
      return state._conf.sync.guard.concat(['_conf', '_sync']);
    },
    defaultValues: function (state, getters) {
      return (0, _mergeAnything.default)(state._conf.sync.defaultValues, state._conf.serverChange.defaultValues // depreciated
      );
    },
    cleanUpRetrievedDoc: function (state, getters, rootState, rootGetters) {
      return function (doc, id) {
        var defaultValues = (0, _mergeAnything.default)(getters.defaultValues, state._conf.serverChange.convertTimestamps);
        var cleanDoc = setDefaultValues(doc, defaultValues);
        cleanDoc.id = id;
        return cleanDoc;
      };
    },
    prepareForPatch: function (state, getters, rootState, rootGetters) {
      return function (ids, doc) {
        if (ids === void 0) {
          ids = [];
        }

        if (doc === void 0) {
          doc = {};
        } // get relevant data from the storeRef


        var collectionMode = getters.collectionMode;
        if (!collectionMode) ids.push(getters.docModeId); // returns {object} -> {id: data}

        return ids.reduce(function (carry, id) {
          var patchData = {}; // retrieve full object in case there's an empty doc passed

          if (!Object.keys(doc).length) {
            patchData = collectionMode ? getters.storeRef[id] : getters.storeRef;
          } else {
            patchData = doc;
          } // set default fields


          patchData.updated_at = new Date();
          patchData.updated_by = state._sync.userId; // replace arrayUnion and arrayRemove

          function checkFn(foundVal) {
            if (isArrayHelper(foundVal)) {
              return foundVal.getFirestoreFieldValue();
            }

            return foundVal;
          }

          patchData = (0, _findAndReplaceAnything.findAndReplaceIf)(patchData, checkFn); // clean up item

          var cleanedPatchData = (0, _filterAnything.default)(patchData, getters.fillables, getters.guard);
          var itemToUpdate = (0, _flattenAnything.default)(cleanedPatchData); // add id (required to get ref later at apiHelpers.ts)

          itemToUpdate.id = id;
          carry[id] = itemToUpdate;
          return carry;
        }, {});
      };
    },
    prepareForPropDeletion: function (state, getters, rootState, rootGetters) {
      return function (path) {
        if (path === void 0) {
          path = '';
        }

        var _a;

        var collectionMode = getters.collectionMode;
        var patchData = {}; // set default fields

        patchData.updated_at = new Date();
        patchData.updated_by = state._sync.userId; // add fillable and guard defaults
        // clean up item

        var cleanedPatchData = (0, _filterAnything.default)(patchData, getters.fillables, getters.guard); // add id (required to get ref later at apiHelpers.ts)

        var id, cleanedPath;

        if (collectionMode) {
          id = path.substring(0, path.indexOf('.'));
          cleanedPath = path.substring(path.indexOf('.') + 1);
        } else {
          id = getters.docModeId;
          cleanedPath = path;
        }

        cleanedPatchData[cleanedPath] = Firebase.firestore.FieldValue.delete();
        cleanedPatchData.id = id;
        return _a = {}, _a[id] = cleanedPatchData, _a;
      };
    },
    prepareForInsert: function (state, getters, rootState, rootGetters) {
      return function (items) {
        if (items === void 0) {
          items = [];
        } // add fillable and guard defaults


        return items.reduce(function (carry, item) {
          // set default fields
          item.created_at = new Date();
          item.created_by = state._sync.userId; // clean up item

          item = (0, _filterAnything.default)(item, getters.fillables, getters.guard);
          carry.push(item);
          return carry;
        }, []);
      };
    },
    prepareInitialDocForInsert: function (state, getters, rootState, rootGetters) {
      return function (doc) {
        // add fillable and guard defaults
        // set default fields
        doc.created_at = new Date();
        doc.created_by = state._sync.userId;
        doc.id = getters.docModeId; // clean up item

        doc = (0, _filterAnything.default)(doc, getters.fillables, getters.guard);
        return doc;
      };
    },
    getWhereArrays: function (state, getters) {
      return function (whereArrays) {
        if (!(0, _isWhat.isArray)(whereArrays)) whereArrays = state._conf.sync.where;

        if (Firebase.auth().currentUser) {
          state._sync.signedIn = true;
          state._sync.userId = Firebase.auth().currentUser.uid;
        }

        return whereArrays.map(function (whereClause) {
          return whereClause.map(function (param) {
            if (!(0, _isWhat.isString)(param)) return param;
            var cleanedParam = param;
            getPathVarMatches(param).forEach(function (key) {
              var keyRegEx = new RegExp("{" + key + "}", 'g');

              if (key === 'userId') {
                cleanedParam = cleanedParam.replace(keyRegEx, state._sync.userId);
                return;
              }

              if (!Object.keys(state._sync.pathVariables).includes(key)) {
                return error('missingPathVarKey');
              }

              var varVal = state._sync.pathVariables[key]; // if path is only a param we need to just assign to avoid stringification

              if (param === "{" + key + "}") {
                cleanedParam = varVal;
                return;
              }

              cleanedParam = cleanedParam.replace(keyRegEx, varVal);
            });
            return cleanedParam;
          });
        });
      };
    }
  };
}
/**
 * Check the config for type errors for non-TypeScript users
 *
 * @export
 * @param {IEasyFirestoreModule} config
 * @returns {boolean} true if no errors, false if errors
 */


function errorCheck(config) {
  var errors = [];
  var reqProps = ['firestorePath', 'moduleName'];
  reqProps.forEach(function (prop) {
    if (!config[prop]) {
      errors.push("Missing `" + prop + "` in your module!");
    }
  });

  if (/(\.|\/)/.test(config.statePropName)) {
    errors.push("statePropName must only include letters from [a-z]");
  }

  if (/\./.test(config.moduleName)) {
    errors.push("moduleName must only include letters from [a-z] and forward slashes '/'");
  }

  var syncProps = ['where', 'orderBy', 'fillables', 'guard', 'defaultValues', 'insertHook', 'patchHook', 'deleteHook', 'insertBatchHook', 'patchBatchHook', 'deleteBatchHook'];
  syncProps.forEach(function (prop) {
    if (config[prop]) {
      errors.push("We found `" + prop + "` on your module, are you sure this shouldn't be inside a prop called `sync`?");
    }
  });
  var serverChangeProps = ['modifiedHook', 'defaultValues', 'addedHook', 'removedHook'];
  serverChangeProps.forEach(function (prop) {
    if (config[prop]) {
      errors.push("We found `" + prop + "` on your module, are you sure this shouldn't be inside a prop called `serverChange`?");
    }
  });
  var fetchProps = ['docLimit'];
  fetchProps.forEach(function (prop) {
    if (config[prop]) {
      errors.push("We found `" + prop + "` on your module, are you sure this shouldn't be inside a prop called `fetch`?");
    }
  });
  var numberProps = ['docLimit'];
  numberProps.forEach(function (prop) {
    var _prop = config.fetch[prop];
    if (!(0, _isWhat.isNumber)(_prop)) errors.push("`" + prop + "` should be a Number, but is not.");
  });
  var functionProps = ['insertHook', 'patchHook', 'deleteHook', 'insertBatchHook', 'patchBatchHook', 'deleteBatchHook', 'addedHook', 'modifiedHook', 'removedHook'];
  functionProps.forEach(function (prop) {
    var _prop = syncProps.includes(prop) ? config.sync[prop] : config.serverChange[prop];

    if (!(0, _isWhat.isFunction)(_prop)) errors.push("`" + prop + "` should be a Function, but is not.");
  });
  var objectProps = ['sync', 'serverChange', 'defaultValues', 'fetch'];
  objectProps.forEach(function (prop) {
    var _prop = prop === 'defaultValues' ? config.sync[prop] : config[prop];

    if (!(0, _isWhat.isPlainObject)(_prop)) errors.push("`" + prop + "` should be an Object, but is not.");
  });
  var stringProps = ['firestorePath', 'firestoreRefType', 'moduleName', 'statePropName'];
  stringProps.forEach(function (prop) {
    var _prop = config[prop];
    if (!(0, _isWhat.isString)(_prop)) errors.push("`" + prop + "` should be a String, but is not.");
  });
  var arrayProps = ['where', 'orderBy', 'fillables', 'guard'];
  arrayProps.forEach(function (prop) {
    var _prop = config.sync[prop];
    if (!(0, _isWhat.isArray)(_prop)) errors.push("`" + prop + "` should be an Array, but is not.");
  });

  if (errors.length) {
    console.group('[vuex-easy-firestore] ERRORS:');
    console.error("Module: " + config.moduleName);
    errors.forEach(function (e) {
      return console.error(' - ', e);
    });
    console.groupEnd();
    return false;
  }

  return true;
}
/**
 * A function that returns a vuex module object with seamless 2-way sync for firestore.
 *
 * @param {IEasyFirestoreModule} userConfig Takes a config object per module
 * @param {*} FirebaseDependency The Firebase dependency (non-instanciated), defaults to the Firebase peer dependency if left blank.
 * @returns {IStore} the module ready to be included in your vuex store
 */


function iniModule(userConfig, FirebaseDependency) {
  // prepare state._conf
  var conf = (0, _copyAnything.default)((0, _mergeAnything.default)({
    state: {},
    mutations: {},
    actions: {},
    getters: {}
  }, defaultConfig, userConfig));
  if (!errorCheck(conf)) return;
  var userState = conf.state;
  var userMutations = conf.mutations;
  var userActions = conf.actions;
  var userGetters = conf.getters;
  delete conf.state;
  delete conf.mutations;
  delete conf.actions;
  delete conf.getters; // prepare rest of state

  var docContainer = {};
  if (conf.statePropName) docContainer[conf.statePropName] = {};
  var restOfState = (0, _mergeAnything.default)(userState, docContainer); // if 'doc' mode, set merge initial state onto default values

  if (conf.firestoreRefType === 'doc') {
    var defaultValsInState = conf.statePropName ? restOfState[conf.statePropName] : restOfState;
    conf.sync.defaultValues = (0, _copyAnything.default)((0, _mergeAnything.default)(defaultValsInState, conf.sync.defaultValues));
  }

  return {
    namespaced: true,
    state: (0, _mergeAnything.default)(pluginState(), restOfState, {
      _conf: conf
    }),
    mutations: (0, _mergeAnything.default)(userMutations, pluginMutations((0, _mergeAnything.default)(userState, {
      _conf: conf
    }))),
    actions: (0, _mergeAnything.default)(userActions, pluginActions(FirebaseDependency)),
    getters: (0, _mergeAnything.default)(userGetters, pluginGetters(FirebaseDependency))
  };
} // Firebase

/**
 * Create vuex-easy-firestore modules. Add as single plugin to Vuex Store.
 *
 * @export
 * @param {(IEasyFirestoreModule | IEasyFirestoreModule[])} easyFirestoreModule A vuex-easy-firestore module (or array of modules) with proper configuration as per the documentation.
 * @param {{logging?: boolean, FirebaseDependency?: any}} extraConfig An object with `logging` and `FirebaseDependency` props. `logging` enables console logs for debugging. `FirebaseDependency` is the non-instanciated Firebase class you can pass. (defaults to the Firebase peer dependency)
 * @returns {*}
 */


function vuexEasyFirestore(easyFirestoreModule, _a) {
  var _b = _a === void 0 ? {
    logging: false,
    preventInitialDocInsertion: false,
    FirebaseDependency: Firebase
  } : _a,
      _c = _b.logging,
      logging = _c === void 0 ? false : _c,
      _d = _b.preventInitialDocInsertion,
      preventInitialDocInsertion = _d === void 0 ? false : _d,
      _e = _b.FirebaseDependency,
      FirebaseDependency = _e === void 0 ? Firebase : _e;

  if (FirebaseDependency) setBaseFirebase(FirebaseDependency);
  return function (store) {
    // Get an array of config files
    if (!(0, _isWhat.isArray)(easyFirestoreModule)) easyFirestoreModule = [easyFirestoreModule]; // Create a module for each config file

    easyFirestoreModule.forEach(function (config) {
      config.logging = logging;

      if (config.sync && config.sync.preventInitialDocInsertion === undefined) {
        config.sync.preventInitialDocInsertion = preventInitialDocInsertion;
      }

      var moduleName = (0, _vuexEasyAccess.getKeysFromPath)(config.moduleName);
      store.registerModule(moduleName, iniModule(config, FirebaseDependency));
    });
  };
}

var _default = vuexEasyFirestore;
exports.default = _default;
},{"firebase/app":"node_modules/firebase/app/dist/index.cjs.js","firebase/firestore":"node_modules/firebase/firestore/dist/index.esm.js","firebase/auth":"node_modules/firebase/auth/dist/index.esm.js","vuex-easy-access":"node_modules/vuex-easy-access/dist/index.esm.js","is-what":"node_modules/is-what/dist/index.esm.js","copy-anything":"node_modules/copy-anything/dist/index.esm.js","merge-anything":"node_modules/merge-anything/dist/index.esm.js","flatten-anything":"node_modules/flatten-anything/dist/index.esm.js","compare-anything":"node_modules/compare-anything/dist/index.esm.js","find-and-replace-anything":"node_modules/find-and-replace-anything/dist/index.esm.js","filter-anything":"node_modules/filter-anything/dist/index.esm.js"}],"../../../Users/mauricio/.nvm/versions/node/v9.11.2/lib/node_modules/parcel-bundler/node_modules/base64-js/index.js":[function(require,module,exports) {
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function getLens (b64) {
  var len = b64.length

  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // Trim off extra bytes after placeholder bytes are found
  // See: https://github.com/beatgammit/base64-js/issues/42
  var validLen = b64.indexOf('=')
  if (validLen === -1) validLen = len

  var placeHoldersLen = validLen === len
    ? 0
    : 4 - (validLen % 4)

  return [validLen, placeHoldersLen]
}

// base64 is 4/3 + up to two characters of the original data
function byteLength (b64) {
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function _byteLength (b64, validLen, placeHoldersLen) {
  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
}

function toByteArray (b64) {
  var tmp
  var lens = getLens(b64)
  var validLen = lens[0]
  var placeHoldersLen = lens[1]

  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))

  var curByte = 0

  // if there are placeholders, only get up to the last complete 4 chars
  var len = placeHoldersLen > 0
    ? validLen - 4
    : validLen

  for (var i = 0; i < len; i += 4) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 18) |
      (revLookup[b64.charCodeAt(i + 1)] << 12) |
      (revLookup[b64.charCodeAt(i + 2)] << 6) |
      revLookup[b64.charCodeAt(i + 3)]
    arr[curByte++] = (tmp >> 16) & 0xFF
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 2) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 2) |
      (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[curByte++] = tmp & 0xFF
  }

  if (placeHoldersLen === 1) {
    tmp =
      (revLookup[b64.charCodeAt(i)] << 10) |
      (revLookup[b64.charCodeAt(i + 1)] << 4) |
      (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[curByte++] = (tmp >> 8) & 0xFF
    arr[curByte++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] +
    lookup[num >> 12 & 0x3F] +
    lookup[num >> 6 & 0x3F] +
    lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp =
      ((uint8[i] << 16) & 0xFF0000) +
      ((uint8[i + 1] << 8) & 0xFF00) +
      (uint8[i + 2] & 0xFF)
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(
      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)
    ))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    parts.push(
      lookup[tmp >> 2] +
      lookup[(tmp << 4) & 0x3F] +
      '=='
    )
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1]
    parts.push(
      lookup[tmp >> 10] +
      lookup[(tmp >> 4) & 0x3F] +
      lookup[(tmp << 2) & 0x3F] +
      '='
    )
  }

  return parts.join('')
}

},{}],"../../../Users/mauricio/.nvm/versions/node/v9.11.2/lib/node_modules/parcel-bundler/node_modules/ieee754/index.js":[function(require,module,exports) {
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = (nBytes * 8) - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = ((value * c) - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],"../../../Users/mauricio/.nvm/versions/node/v9.11.2/lib/node_modules/parcel-bundler/node_modules/isarray/index.js":[function(require,module,exports) {
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],"../../../Users/mauricio/.nvm/versions/node/v9.11.2/lib/node_modules/parcel-bundler/node_modules/buffer/index.js":[function(require,module,exports) {

var global = arguments[3];
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

},{"base64-js":"../../../Users/mauricio/.nvm/versions/node/v9.11.2/lib/node_modules/parcel-bundler/node_modules/base64-js/index.js","ieee754":"../../../Users/mauricio/.nvm/versions/node/v9.11.2/lib/node_modules/parcel-bundler/node_modules/ieee754/index.js","isarray":"../../../Users/mauricio/.nvm/versions/node/v9.11.2/lib/node_modules/parcel-bundler/node_modules/isarray/index.js","buffer":"../../../Users/mauricio/.nvm/versions/node/v9.11.2/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"node_modules/lodash/lodash.js":[function(require,module,exports) {
var global = arguments[3];
var Buffer = require("buffer").Buffer;
var define;
/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.11';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });

        return result;
      }

      if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });

        return result;
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

},{"buffer":"../../../Users/mauricio/.nvm/versions/node/v9.11.2/lib/node_modules/parcel-bundler/node_modules/buffer/index.js"}],"App.vue":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
var _default = {
  name: 'app',
  data: function data() {
    return {
      fromFirestore: []
    };
  },
  methods: {
    insert: function insert() {
      this.$store.dispatch('test/insert', {
        foo: 'foo'
      });
    }
  },
  computed: {
    fromVuex: function fromVuex() {
      return _lodash.default.sortBy(this.$store.state.test.docs, 'id');
    }
  },
  mounted: function mounted() {
    var _this = this;

    return this.$firebase.firestore().collection('test').onSnapshot(function (snapshot) {
      _this.fromFirestore = _lodash.default.sortBy(snapshot.docs.map(function (doc) {
        return doc.data();
      }), 'id');
    });
  }
};
exports.default = _default;
        var $877879 = exports.default || module.exports;
      
      if (typeof $877879 === 'function') {
        $877879 = $877879.options;
      }
    
        /* template */
        Object.assign($877879, (function () {
          var render = function() {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", { attrs: { id: "content" } }, [
    _c(
      "div",
      { staticClass: "list", attrs: { id: "from-vuex" } },
      [
        _c("div", [_vm._v("\n      From Vuex\n    ")]),
        _vm._v(" "),
        _vm._l(_vm.fromVuex, function(doc) {
          return _c("div", { key: doc.id }, [
            _vm._v("\n      " + _vm._s(doc.id) + "\n    ")
          ])
        })
      ],
      2
    ),
    _vm._v(" "),
    _c(
      "div",
      { staticClass: "list", attrs: { id: "from-firestore" } },
      [
        _c("div", [_vm._v("\n      From Firestore\n    ")]),
        _vm._v(" "),
        _vm._l(_vm.fromFirestore, function(doc) {
          return _c("div", { key: doc.id }, [
            _vm._v("\n      " + _vm._s(doc.id) + "\n    ")
          ])
        })
      ],
      2
    ),
    _vm._v(" "),
    _c("div", { attrs: { id: "add" } }, [
      _c("button", { on: { click: _vm.insert } }, [_vm._v("Add Doc")])
    ])
  ])
}
var staticRenderFns = []
render._withStripped = true

          return {
            render: render,
            staticRenderFns: staticRenderFns,
            _compiled: true,
            _scopeId: "data-v-877879",
            functional: undefined
          };
        })());
      
},{"lodash":"node_modules/lodash/lodash.js"}],"index.js":[function(require,module,exports) {
"use strict";

var _vue = _interopRequireDefault(require("vue"));

var _vuex = _interopRequireDefault(require("vuex"));

var _vuexEasyFirestore = _interopRequireDefault(require("vuex-easy-firestore"));

var Firebase = _interopRequireWildcard(require("firebase/app"));

require("firebase/firestore");

var _App = _interopRequireDefault(require("./App"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

Firebase.initializeApp({
  apiKey: "AIzaSyBMWpvLH2VrW27uVU7TNNseb0lBGupBPJ8",
  authDomain: "attack-with-stack-prod.firebaseapp.com",
  databaseURL: "https://attack-with-stack-prod.firebaseio.com",
  projectId: "attack-with-stack-prod",
  storageBucket: "attack-with-stack-prod.appspot.com",
  messagingSenderId: "428358358059"
});
Firebase.firestore().enablePersistence();
_vue.default.prototype.$firebase = Firebase;

_vue.default.use(_vuex.default);

var store = new _vuex.default.Store({
  modules: {},
  plugins: [(0, _vuexEasyFirestore.default)([{
    firestorePath: 'test',
    firestoreRefType: 'collection',
    moduleName: 'test',
    statePropName: 'docs',
    namespaced: true,
    state: {},
    getters: {},
    mutations: {},
    actions: {}
  }], {
    logging: true,
    FirebaseDependency: Firebase
  })]
});
var app = new _vue.default({
  el: '#app',
  store: store,
  template: '<App/>',
  beforeCreate: function beforeCreate() {
    // Pre-cache Firestore collections
    this.$store.dispatch('test/openDBChannel');
  },
  components: {
    App: _App.default
  }
});
},{"vue":"node_modules/vue/dist/vue.common.js","vuex":"node_modules/vuex/dist/vuex.esm.js","vuex-easy-firestore":"node_modules/vuex-easy-firestore/dist/index.esm.js","firebase/app":"node_modules/firebase/app/dist/index.cjs.js","firebase/firestore":"node_modules/firebase/firestore/dist/index.esm.js","./App":"App.vue"}]},{},["index.js"], null)
//# sourceMappingURL=/firestore-test.e31bb0bc.map